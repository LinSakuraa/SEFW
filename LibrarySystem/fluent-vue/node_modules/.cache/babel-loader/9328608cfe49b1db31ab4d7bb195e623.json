{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr } from \"@microsoft/fast-element\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * A Disclosure Custom HTML Element.\n * Based largely on the {@link https://w3c.github.io/aria-practices/#disclosure | disclosure element }.\n *\n * @public\n */\n\nexport class Disclosure extends FoundationElement {\n  /**\n   * @internal\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.setup();\n  }\n  /**\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.details.removeEventListener(\"toggle\", this.onToggle);\n  }\n  /**\n   * Show extra content.\n   */\n\n\n  show() {\n    this.details.open = true;\n  }\n  /**\n   * Hide extra content.\n   */\n\n\n  hide() {\n    this.details.open = false;\n  }\n  /**\n   * Toggle the current(expanded/collapsed) state.\n   */\n\n\n  toggle() {\n    this.details.open = !this.details.open;\n  }\n  /**\n   * Register listener and set default disclosure mode\n   */\n\n\n  setup() {\n    this.onToggle = this.onToggle.bind(this);\n    this.details.addEventListener(\"toggle\", this.onToggle);\n\n    if (this.expanded) {\n      this.show();\n    }\n  }\n  /**\n   * Update the aria attr and fire `toggle` event\n   */\n\n\n  onToggle() {\n    this.expanded = this.details.open;\n    this.$emit(\"toggle\");\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], Disclosure.prototype, \"expanded\", void 0);\n\n__decorate([attr], Disclosure.prototype, \"title\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/disclosure/disclosure.js"],"names":["__decorate","attr","FoundationElement","Disclosure","connectedCallback","setup","disconnectedCallback","details","removeEventListener","onToggle","show","open","hide","toggle","bind","addEventListener","expanded","$emit","mode","prototype"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,SAAyBD,iBAAzB,CAA2C;AAC9C;AACJ;AACA;AACIE,EAAAA,iBAAiB,GAAG;AAChB,UAAMA,iBAAN;AACA,SAAKC,KAAL;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,oBAAoB,GAAG;AACnB,UAAMA,oBAAN;AACA,SAAKC,OAAL,CAAaC,mBAAb,CAAiC,QAAjC,EAA2C,KAAKC,QAAhD;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,IAAI,GAAG;AACH,SAAKH,OAAL,CAAaI,IAAb,GAAoB,IAApB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,IAAI,GAAG;AACH,SAAKL,OAAL,CAAaI,IAAb,GAAoB,KAApB;AACH;AACD;AACJ;AACA;;;AACIE,EAAAA,MAAM,GAAG;AACL,SAAKN,OAAL,CAAaI,IAAb,GAAoB,CAAC,KAAKJ,OAAL,CAAaI,IAAlC;AACH;AACD;AACJ;AACA;;;AACIN,EAAAA,KAAK,GAAG;AACJ,SAAKI,QAAL,GAAgB,KAAKA,QAAL,CAAcK,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKP,OAAL,CAAaQ,gBAAb,CAA8B,QAA9B,EAAwC,KAAKN,QAA7C;;AACA,QAAI,KAAKO,QAAT,EAAmB;AACf,WAAKN,IAAL;AACH;AACJ;AACD;AACJ;AACA;;;AACID,EAAAA,QAAQ,GAAG;AACP,SAAKO,QAAL,GAAgB,KAAKT,OAAL,CAAaI,IAA7B;AACA,SAAKM,KAAL,CAAW,QAAX;AACH;;AAjD6C;;AAmDlDjB,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEiB,EAAAA,IAAI,EAAE;AAAR,CAAD,CADG,CAAD,EAEPf,UAAU,CAACgB,SAFJ,EAEe,UAFf,EAE2B,KAAK,CAFhC,CAAV;;AAGAnB,UAAU,CAAC,CACPC,IADO,CAAD,EAEPE,UAAU,CAACgB,SAFJ,EAEe,OAFf,EAEwB,KAAK,CAF7B,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr } from \"@microsoft/fast-element\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * A Disclosure Custom HTML Element.\n * Based largely on the {@link https://w3c.github.io/aria-practices/#disclosure | disclosure element }.\n *\n * @public\n */\nexport class Disclosure extends FoundationElement {\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.setup();\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.details.removeEventListener(\"toggle\", this.onToggle);\n    }\n    /**\n     * Show extra content.\n     */\n    show() {\n        this.details.open = true;\n    }\n    /**\n     * Hide extra content.\n     */\n    hide() {\n        this.details.open = false;\n    }\n    /**\n     * Toggle the current(expanded/collapsed) state.\n     */\n    toggle() {\n        this.details.open = !this.details.open;\n    }\n    /**\n     * Register listener and set default disclosure mode\n     */\n    setup() {\n        this.onToggle = this.onToggle.bind(this);\n        this.details.addEventListener(\"toggle\", this.onToggle);\n        if (this.expanded) {\n            this.show();\n        }\n    }\n    /**\n     * Update the aria attr and fire `toggle` event\n     */\n    onToggle() {\n        this.expanded = this.details.open;\n        this.$emit(\"toggle\");\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], Disclosure.prototype, \"expanded\", void 0);\n__decorate([\n    attr\n], Disclosure.prototype, \"title\", void 0);\n"]},"metadata":{},"sourceType":"module"}