{"ast":null,"code":"import { h, defineComponent } from 'vue';\nimport { resolveWrappedSlot } from '../../_utils';\nimport useRadio from './use-radio';\nexport default defineComponent({\n  name: 'RadioButton',\n  props: useRadio.props,\n\n  setup(props) {\n    return useRadio(props);\n  },\n\n  render() {\n    const {\n      mergedClsPrefix\n    } = this;\n    return h(\"label\", {\n      class: [`${mergedClsPrefix}-radio-button`, {\n        [`${mergedClsPrefix}-radio-button--disabled`]: this.mergedDisabled,\n        [`${mergedClsPrefix}-radio-button--checked`]: this.renderSafeChecked,\n        [`${mergedClsPrefix}-radio-button--focus`]: this.focus\n      }]\n    }, h(\"input\", {\n      ref: \"inputRef\",\n      type: \"radio\",\n      class: `${mergedClsPrefix}-radio-input`,\n      value: this.value,\n      name: this.mergedName,\n      checked: this.renderSafeChecked,\n      disabled: this.mergedDisabled,\n      onChange: this.handleRadioInputChange,\n      onFocus: this.handleRadioInputFocus,\n      onBlur: this.handleRadioInputBlur\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-radio-button__state-border`\n    }), resolveWrappedSlot(this.$slots.default, children => {\n      if (!children && !this.label) return null;\n      return h(\"div\", {\n        ref: \"labelRef\",\n        class: `${mergedClsPrefix}-radio__label`\n      }, children || this.label);\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/radio/src/RadioButton.js"],"names":["h","defineComponent","resolveWrappedSlot","useRadio","name","props","setup","render","mergedClsPrefix","class","mergedDisabled","renderSafeChecked","focus","ref","type","value","mergedName","checked","disabled","onChange","handleRadioInputChange","onFocus","handleRadioInputFocus","onBlur","handleRadioInputBlur","$slots","default","children","label"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,QAAmC,KAAnC;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,eAAeF,eAAe,CAAC;AAC3BG,EAAAA,IAAI,EAAE,aADqB;AAE3BC,EAAAA,KAAK,EAAEF,QAAQ,CAACE,KAFW;;AAG3BC,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACT,WAAOF,QAAQ,CAACE,KAAD,CAAf;AACH,GAL0B;;AAM3BE,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAsB,IAA5B;AACA,WAAQR,CAAC,CAAC,OAAD,EAAU;AAAES,MAAAA,KAAK,EAAE,CACnB,GAAED,eAAgB,eADC,EAEpB;AACI,SAAE,GAAEA,eAAgB,yBAApB,GAA+C,KAAKE,cADxD;AAEI,SAAE,GAAEF,eAAgB,wBAApB,GAA8C,KAAKG,iBAFvD;AAGI,SAAE,GAAEH,eAAgB,sBAApB,GAA4C,KAAKI;AAHrD,OAFoB;AAAT,KAAV,EAQLZ,CAAC,CAAC,OAAD,EAAU;AAAEa,MAAAA,GAAG,EAAE,UAAP;AAAmBC,MAAAA,IAAI,EAAE,OAAzB;AAAkCL,MAAAA,KAAK,EAAG,GAAED,eAAgB,cAA5D;AAA2EO,MAAAA,KAAK,EAAE,KAAKA,KAAvF;AAA8FX,MAAAA,IAAI,EAAE,KAAKY,UAAzG;AAAqHC,MAAAA,OAAO,EAAE,KAAKN,iBAAnI;AAAsJO,MAAAA,QAAQ,EAAE,KAAKR,cAArK;AAAqLS,MAAAA,QAAQ,EAAE,KAAKC,sBAApM;AAA4NC,MAAAA,OAAO,EAAE,KAAKC,qBAA1O;AAAiQC,MAAAA,MAAM,EAAE,KAAKC;AAA9Q,KAAV,CARI,EASLxB,CAAC,CAAC,KAAD,EAAQ;AAAES,MAAAA,KAAK,EAAG,GAAED,eAAgB;AAA5B,KAAR,CATI,EAULN,kBAAkB,CAAC,KAAKuB,MAAL,CAAYC,OAAb,EAAuBC,QAAD,IAAc;AAClD,UAAI,CAACA,QAAD,IAAa,CAAC,KAAKC,KAAvB,EACI,OAAO,IAAP;AACJ,aAAQ5B,CAAC,CAAC,KAAD,EAAQ;AAAEa,QAAAA,GAAG,EAAE,UAAP;AAAmBJ,QAAAA,KAAK,EAAG,GAAED,eAAgB;AAA7C,OAAR,EAAuEmB,QAAQ,IAAI,KAAKC,KAAxF,CAAT;AACH,KAJiB,CAVb,CAAT;AAeH;;AAvB0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent } from 'vue';\nimport { resolveWrappedSlot } from '../../_utils';\nimport useRadio from './use-radio';\nexport default defineComponent({\n    name: 'RadioButton',\n    props: useRadio.props,\n    setup(props) {\n        return useRadio(props);\n    },\n    render() {\n        const { mergedClsPrefix } = this;\n        return (h(\"label\", { class: [\n                `${mergedClsPrefix}-radio-button`,\n                {\n                    [`${mergedClsPrefix}-radio-button--disabled`]: this.mergedDisabled,\n                    [`${mergedClsPrefix}-radio-button--checked`]: this.renderSafeChecked,\n                    [`${mergedClsPrefix}-radio-button--focus`]: this.focus\n                }\n            ] },\n            h(\"input\", { ref: \"inputRef\", type: \"radio\", class: `${mergedClsPrefix}-radio-input`, value: this.value, name: this.mergedName, checked: this.renderSafeChecked, disabled: this.mergedDisabled, onChange: this.handleRadioInputChange, onFocus: this.handleRadioInputFocus, onBlur: this.handleRadioInputBlur }),\n            h(\"div\", { class: `${mergedClsPrefix}-radio-button__state-border` }),\n            resolveWrappedSlot(this.$slots.default, (children) => {\n                if (!children && !this.label)\n                    return null;\n                return (h(\"div\", { ref: \"labelRef\", class: `${mergedClsPrefix}-radio__label` }, children || this.label));\n            })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}