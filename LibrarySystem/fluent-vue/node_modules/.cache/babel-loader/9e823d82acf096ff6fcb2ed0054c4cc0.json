{"ast":null,"code":"/**\n * @internal\n */\nexport function binarySearch(valuesToSearch, searchCondition, startIndex = 0, endIndex = valuesToSearch.length - 1) {\n  if (endIndex === startIndex) {\n    return valuesToSearch[startIndex];\n  }\n\n  const middleIndex = Math.floor((endIndex - startIndex) / 2) + startIndex; // Check to see if this passes on the item in the center of the array\n  // if it does check the previous values\n\n  return searchCondition(valuesToSearch[middleIndex]) ? binarySearch(valuesToSearch, searchCondition, startIndex, middleIndex) : binarySearch(valuesToSearch, searchCondition, middleIndex + 1, // exclude this index because it failed the search condition\n  endIndex);\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/color/utilities/binary-search.js"],"names":["binarySearch","valuesToSearch","searchCondition","startIndex","endIndex","length","middleIndex","Math","floor"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAsBC,cAAtB,EAAsCC,eAAtC,EAAuDC,UAAU,GAAG,CAApE,EAAuEC,QAAQ,GAAGH,cAAc,CAACI,MAAf,GAAwB,CAA1G,EAA6G;AAChH,MAAID,QAAQ,KAAKD,UAAjB,EAA6B;AACzB,WAAOF,cAAc,CAACE,UAAD,CAArB;AACH;;AACD,QAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGD,UAAZ,IAA0B,CAArC,IAA0CA,UAA9D,CAJgH,CAKhH;AACA;;AACA,SAAOD,eAAe,CAACD,cAAc,CAACK,WAAD,CAAf,CAAf,GACDN,YAAY,CAACC,cAAD,EAAiBC,eAAjB,EAAkCC,UAAlC,EAA8CG,WAA9C,CADX,GAEDN,YAAY,CAACC,cAAD,EAAiBC,eAAjB,EAAkCI,WAAW,GAAG,CAAhD,EAAmD;AACjEF,EAAAA,QADc,CAFlB;AAIH","sourcesContent":["/**\n * @internal\n */\nexport function binarySearch(valuesToSearch, searchCondition, startIndex = 0, endIndex = valuesToSearch.length - 1) {\n    if (endIndex === startIndex) {\n        return valuesToSearch[startIndex];\n    }\n    const middleIndex = Math.floor((endIndex - startIndex) / 2) + startIndex;\n    // Check to see if this passes on the item in the center of the array\n    // if it does check the previous values\n    return searchCondition(valuesToSearch[middleIndex])\n        ? binarySearch(valuesToSearch, searchCondition, startIndex, middleIndex)\n        : binarySearch(valuesToSearch, searchCondition, middleIndex + 1, // exclude this index because it failed the search condition\n        endIndex);\n}\n"]},"metadata":{},"sourceType":"module"}