{"ast":null,"code":"import { onMounted, onUnmounted, ref } from 'vue';\nimport { hasWindow } from '../naive';\nconst defaultWindow = hasWindow ? window : null;\nexport const useBrowserLocation = (customWindow = defaultWindow) => {\n  const getWindowLocation = () => {\n    const {\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search\n    } = (customWindow === null || customWindow === void 0 ? void 0 : customWindow.location) || {};\n    return {\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search\n    };\n  };\n\n  const updateLocation = () => {\n    locationState.value = getWindowLocation();\n  };\n\n  const locationState = ref(getWindowLocation());\n  onMounted(() => {\n    if (customWindow) {\n      customWindow.addEventListener('popstate', updateLocation);\n      customWindow.addEventListener('hashchange', updateLocation);\n    }\n  });\n  onUnmounted(() => {\n    if (customWindow) {\n      customWindow.removeEventListener('popstate', updateLocation);\n      customWindow.removeEventListener('hashchange', updateLocation);\n    }\n  });\n  return locationState;\n};","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_utils/composable/use-browser-location.js"],"names":["onMounted","onUnmounted","ref","hasWindow","defaultWindow","window","useBrowserLocation","customWindow","getWindowLocation","hash","host","hostname","href","origin","pathname","port","protocol","search","location","updateLocation","locationState","value","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,GAAjC,QAA4C,KAA5C;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,MAAMC,aAAa,GAAGD,SAAS,GAAGE,MAAH,GAAY,IAA3C;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,YAAY,GAAGH,aAAhB,KAAkC;AAChE,QAAMI,iBAAiB,GAAG,MAAM;AAC5B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,QAAd;AAAwBC,MAAAA,IAAxB;AAA8BC,MAAAA,MAA9B;AAAsCC,MAAAA,QAAtC;AAAgDC,MAAAA,IAAhD;AAAsDC,MAAAA,QAAtD;AAAgEC,MAAAA;AAAhE,QAA2E,CAACV,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACW,QAA1E,KAAuF,EAAxK;AACA,WAAO;AACHT,MAAAA,IADG;AAEHC,MAAAA,IAFG;AAGHC,MAAAA,QAHG;AAIHC,MAAAA,IAJG;AAKHC,MAAAA,MALG;AAMHC,MAAAA,QANG;AAOHC,MAAAA,IAPG;AAQHC,MAAAA,QARG;AASHC,MAAAA;AATG,KAAP;AAWH,GAbD;;AAcA,QAAME,cAAc,GAAG,MAAM;AACzBC,IAAAA,aAAa,CAACC,KAAd,GAAsBb,iBAAiB,EAAvC;AACH,GAFD;;AAGA,QAAMY,aAAa,GAAGlB,GAAG,CAACM,iBAAiB,EAAlB,CAAzB;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACe,gBAAb,CAA8B,UAA9B,EAA0CH,cAA1C;AACAZ,MAAAA,YAAY,CAACe,gBAAb,CAA8B,YAA9B,EAA4CH,cAA5C;AACH;AACJ,GALQ,CAAT;AAMAlB,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIM,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACgB,mBAAb,CAAiC,UAAjC,EAA6CJ,cAA7C;AACAZ,MAAAA,YAAY,CAACgB,mBAAb,CAAiC,YAAjC,EAA+CJ,cAA/C;AACH;AACJ,GALU,CAAX;AAMA,SAAOC,aAAP;AACH,CAhCM","sourcesContent":["import { onMounted, onUnmounted, ref } from 'vue';\nimport { hasWindow } from '../naive';\nconst defaultWindow = hasWindow ? window : null;\nexport const useBrowserLocation = (customWindow = defaultWindow) => {\n    const getWindowLocation = () => {\n        const { hash, host, hostname, href, origin, pathname, port, protocol, search } = (customWindow === null || customWindow === void 0 ? void 0 : customWindow.location) || {};\n        return {\n            hash,\n            host,\n            hostname,\n            href,\n            origin,\n            pathname,\n            port,\n            protocol,\n            search\n        };\n    };\n    const updateLocation = () => {\n        locationState.value = getWindowLocation();\n    };\n    const locationState = ref(getWindowLocation());\n    onMounted(() => {\n        if (customWindow) {\n            customWindow.addEventListener('popstate', updateLocation);\n            customWindow.addEventListener('hashchange', updateLocation);\n        }\n    });\n    onUnmounted(() => {\n        if (customWindow) {\n            customWindow.removeEventListener('popstate', updateLocation);\n            customWindow.removeEventListener('hashchange', updateLocation);\n        }\n    });\n    return locationState;\n};\n"]},"metadata":{},"sourceType":"module"}