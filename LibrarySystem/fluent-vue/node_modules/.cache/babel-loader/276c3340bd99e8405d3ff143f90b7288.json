{"ast":null,"code":"import { directionByIsDark } from '../utilities/direction-by-is-dark';\nimport { isDark } from '../utilities/is-dark';\n/**\n * Color algorithm using deltas from the reference color for states.\n *\n * @param palette The palette to operate on\n * @param reference The reference color to calculate a color for\n * @param restDelta The rest state offset from reference\n * @param hoverDelta The hover state offset from reference\n * @param activeDelta The active state offset from reference\n * @param focusDelta The focus state offset from reference\n * @param direction The direction the deltas move on the ramp, default goes darker for light references and lighter for dark references\n *\n * @internal\n */\n\nexport function deltaSwatchSet(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\n  const referenceIndex = palette.closestIndexOf(reference);\n\n  if (direction === null || direction === void 0) {\n    direction = directionByIsDark(reference);\n  }\n\n  return {\n    rest: palette.get(referenceIndex + direction * restDelta),\n    hover: palette.get(referenceIndex + direction * hoverDelta),\n    active: palette.get(referenceIndex + direction * activeDelta),\n    focus: palette.get(referenceIndex + direction * focusDelta)\n  };\n}\n/**\n * Color algorithm using deltas from the reference color for states, allowing different deltas based on a light or dark reference color.\n *\n * @param palette The palette to operate on\n * @param reference The reference color to calculate a color for\n * @param lightRestDelta The rest offset for a light reference\n * @param lightHoverDelta The hover offset for a light reference\n * @param lightActiveDelta The rest offset for a light reference\n * @param lightFocusDelta The hover offset for a light reference\n * @param lightDirection The direction the deltas move on the ramp, default goes darker for light references\n * @param darkRestDelta The rest offset for a dark reference\n * @param darkHoverDelta The hover offset for a dark reference\n * @param darkActiveDelta The rest offset for a dark reference\n * @param darkFocusDelta The hover offset for a dark reference\n * @param darkDirection The direction the deltas move on the ramp, default goes lighter for dark references\n *\n * @internal\n */\n\nexport function deltaSwatchSetByLuminance(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\n  if (isDark(reference)) {\n    return deltaSwatchSet(palette, reference, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\n  } else {\n    return deltaSwatchSet(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\n  }\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/color/recipes/delta-swatch-set.js"],"names":["directionByIsDark","isDark","deltaSwatchSet","palette","reference","restDelta","hoverDelta","activeDelta","focusDelta","direction","referenceIndex","closestIndexOf","rest","get","hover","active","focus","deltaSwatchSetByLuminance","lightRestDelta","lightHoverDelta","lightActiveDelta","lightFocusDelta","lightDirection","undefined","darkRestDelta","darkHoverDelta","darkActiveDelta","darkFocusDelta","darkDirection"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,mCAAlC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,SAA5C,EAAuDC,UAAvD,EAAmEC,WAAnE,EAAgFC,UAAhF,EAA4FC,SAA5F,EAAuG;AAC1G,QAAMC,cAAc,GAAGP,OAAO,CAACQ,cAAR,CAAuBP,SAAvB,CAAvB;;AACA,MAAIK,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAA7C,EAAgD;AAC5CA,IAAAA,SAAS,GAAGT,iBAAiB,CAACI,SAAD,CAA7B;AACH;;AACD,SAAO;AACHQ,IAAAA,IAAI,EAAET,OAAO,CAACU,GAAR,CAAYH,cAAc,GAAGD,SAAS,GAAGJ,SAAzC,CADH;AAEHS,IAAAA,KAAK,EAAEX,OAAO,CAACU,GAAR,CAAYH,cAAc,GAAGD,SAAS,GAAGH,UAAzC,CAFJ;AAGHS,IAAAA,MAAM,EAAEZ,OAAO,CAACU,GAAR,CAAYH,cAAc,GAAGD,SAAS,GAAGF,WAAzC,CAHL;AAIHS,IAAAA,KAAK,EAAEb,OAAO,CAACU,GAAR,CAAYH,cAAc,GAAGD,SAAS,GAAGD,UAAzC;AAJJ,GAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,yBAAT,CAAmCd,OAAnC,EAA4CC,SAA5C,EAAuDc,cAAvD,EAAuEC,eAAvE,EAAwFC,gBAAxF,EAA0GC,eAA1G,EAA2HC,cAAc,GAAGC,SAA5I,EAAuJC,aAAvJ,EAAsKC,cAAtK,EAAsLC,eAAtL,EAAuMC,cAAvM,EAAuNC,aAAa,GAAGL,SAAvO,EAAkP;AACrP,MAAItB,MAAM,CAACG,SAAD,CAAV,EAAuB;AACnB,WAAOF,cAAc,CAACC,OAAD,EAAUC,SAAV,EAAqBoB,aAArB,EAAoCC,cAApC,EAAoDC,eAApD,EAAqEC,cAArE,EAAqFC,aAArF,CAArB;AACH,GAFD,MAGK;AACD,WAAO1B,cAAc,CAACC,OAAD,EAAUC,SAAV,EAAqBc,cAArB,EAAqCC,eAArC,EAAsDC,gBAAtD,EAAwEC,eAAxE,EAAyFC,cAAzF,CAArB;AACH;AACJ","sourcesContent":["import { directionByIsDark } from '../utilities/direction-by-is-dark';\nimport { isDark } from '../utilities/is-dark';\n/**\n * Color algorithm using deltas from the reference color for states.\n *\n * @param palette The palette to operate on\n * @param reference The reference color to calculate a color for\n * @param restDelta The rest state offset from reference\n * @param hoverDelta The hover state offset from reference\n * @param activeDelta The active state offset from reference\n * @param focusDelta The focus state offset from reference\n * @param direction The direction the deltas move on the ramp, default goes darker for light references and lighter for dark references\n *\n * @internal\n */\nexport function deltaSwatchSet(palette, reference, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\n    const referenceIndex = palette.closestIndexOf(reference);\n    if (direction === null || direction === void 0) {\n        direction = directionByIsDark(reference);\n    }\n    return {\n        rest: palette.get(referenceIndex + direction * restDelta),\n        hover: palette.get(referenceIndex + direction * hoverDelta),\n        active: palette.get(referenceIndex + direction * activeDelta),\n        focus: palette.get(referenceIndex + direction * focusDelta),\n    };\n}\n/**\n * Color algorithm using deltas from the reference color for states, allowing different deltas based on a light or dark reference color.\n *\n * @param palette The palette to operate on\n * @param reference The reference color to calculate a color for\n * @param lightRestDelta The rest offset for a light reference\n * @param lightHoverDelta The hover offset for a light reference\n * @param lightActiveDelta The rest offset for a light reference\n * @param lightFocusDelta The hover offset for a light reference\n * @param lightDirection The direction the deltas move on the ramp, default goes darker for light references\n * @param darkRestDelta The rest offset for a dark reference\n * @param darkHoverDelta The hover offset for a dark reference\n * @param darkActiveDelta The rest offset for a dark reference\n * @param darkFocusDelta The hover offset for a dark reference\n * @param darkDirection The direction the deltas move on the ramp, default goes lighter for dark references\n *\n * @internal\n */\nexport function deltaSwatchSetByLuminance(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\n    if (isDark(reference)) {\n        return deltaSwatchSet(palette, reference, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\n    }\n    else {\n        return deltaSwatchSet(palette, reference, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}