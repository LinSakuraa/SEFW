{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-dynamic-delete */\nimport { Fragment, h, reactive, ref, Teleport, defineComponent, provide } from 'vue';\nimport { createId } from 'seemly';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { omit, createInjectionKey } from '../../_utils';\nimport { notificationLight } from '../styles';\nimport { NotificationContainer } from './NotificationContainer';\nimport { NotificationEnvironment } from './NotificationEnvironment';\nimport { notificationProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nexport const notificationApiInjectionKey = createInjectionKey('n-notification-api');\nconst notificationProviderProps = Object.assign(Object.assign({}, useTheme.props), {\n  containerStyle: [String, Object],\n  to: [String, Object],\n  scrollable: {\n    type: Boolean,\n    default: true\n  },\n  max: Number,\n  placement: {\n    type: String,\n    default: 'top-right'\n  }\n});\nexport default defineComponent({\n  name: 'NotificationProvider',\n  props: notificationProviderProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const notificationListRef = ref([]);\n    const notificationRefs = {};\n    const leavingKeySet = new Set();\n\n    function create(options) {\n      const key = createId();\n\n      const destroy = () => {\n        leavingKeySet.add(key); // If you push n + 1 message when max is n, notificationRefs[key] maybe not be set\n\n        if (notificationRefs[key]) {\n          notificationRefs[key].hide();\n        }\n      };\n\n      const notificationReactive = reactive(Object.assign(Object.assign({}, options), {\n        key,\n        destroy,\n        hide: destroy,\n        deactivate: destroy\n      }));\n      const {\n        max\n      } = props;\n\n      if (max && notificationListRef.value.length - leavingKeySet.size >= max) {\n        let someoneMountedRemoved = false;\n        let index = 0;\n\n        for (const notification of notificationListRef.value) {\n          if (!leavingKeySet.has(notification.key)) {\n            if (notificationRefs[notification.key]) {\n              notification.destroy();\n              someoneMountedRemoved = true;\n            }\n\n            break;\n          }\n\n          index++;\n        }\n\n        if (!someoneMountedRemoved) {\n          notificationListRef.value.splice(index, 1);\n        }\n      }\n\n      notificationListRef.value.push(notificationReactive);\n      return notificationReactive;\n    }\n\n    const apis = ['info', 'success', 'warning', 'error'].map(type => {\n      return options => create(Object.assign(Object.assign({}, options), {\n        type\n      }));\n    });\n\n    function handleAfterLeave(key) {\n      leavingKeySet.delete(key);\n      notificationListRef.value.splice(notificationListRef.value.findIndex(notification => notification.key === key), 1);\n    }\n\n    const themeRef = useTheme('Notification', '-notification', style, notificationLight, props, mergedClsPrefixRef);\n    const api = {\n      create,\n      info: apis[0],\n      success: apis[1],\n      warning: apis[2],\n      error: apis[3],\n      open,\n      destroyAll\n    };\n    provide(notificationApiInjectionKey, api);\n    provide(notificationProviderInjectionKey, {\n      props,\n      mergedClsPrefixRef,\n      mergedThemeRef: themeRef\n    }); // deprecated\n\n    function open(options) {\n      return create(options);\n    }\n\n    function destroyAll() {\n      Object.values(notificationListRef.value).forEach(notification => {\n        notification.hide();\n      });\n    }\n\n    return Object.assign({\n      mergedClsPrefix: mergedClsPrefixRef,\n      notificationList: notificationListRef,\n      notificationRefs,\n      handleAfterLeave\n    }, api);\n  },\n\n  render() {\n    var _a, _b, _c;\n\n    return h(Fragment, null, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a), this.notificationList.length ? h(Teleport, {\n      to: (_c = this.to) !== null && _c !== void 0 ? _c : 'body'\n    }, h(NotificationContainer, {\n      style: this.containerStyle,\n      scrollable: this.scrollable,\n      placement: this.placement\n    }, {\n      default: () => {\n        return this.notificationList.map(notification => {\n          return h(NotificationEnvironment, Object.assign({\n            ref: inst => {\n              const refKey = notification.key;\n\n              if (inst === null) {\n                delete this.notificationRefs[refKey];\n              } else this.notificationRefs[refKey] = inst;\n            }\n          }, omit(notification, ['destroy', 'hide', 'deactivate']), {\n            internalKey: notification.key,\n            onInternalAfterLeave: this.handleAfterLeave\n          }));\n        });\n      }\n    })) : null);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/notification/src/NotificationProvider.js"],"names":["Fragment","h","reactive","ref","Teleport","defineComponent","provide","createId","useConfig","useTheme","omit","createInjectionKey","notificationLight","NotificationContainer","NotificationEnvironment","notificationProviderInjectionKey","style","notificationApiInjectionKey","notificationProviderProps","Object","assign","props","containerStyle","String","to","scrollable","type","Boolean","default","max","Number","placement","name","setup","mergedClsPrefixRef","notificationListRef","notificationRefs","leavingKeySet","Set","create","options","key","destroy","add","hide","notificationReactive","deactivate","value","length","size","someoneMountedRemoved","index","notification","has","splice","push","apis","map","handleAfterLeave","delete","findIndex","themeRef","api","info","success","warning","error","open","destroyAll","mergedThemeRef","values","forEach","mergedClsPrefix","notificationList","render","_a","_b","_c","$slots","call","inst","refKey","internalKey","onInternalAfterLeave"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-dynamic-delete */\nimport { Fragment, h, reactive, ref, Teleport, defineComponent, provide } from 'vue';\nimport { createId } from 'seemly';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { omit, createInjectionKey } from '../../_utils';\nimport { notificationLight } from '../styles';\nimport { NotificationContainer } from './NotificationContainer';\nimport { NotificationEnvironment } from './NotificationEnvironment';\nimport { notificationProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nexport const notificationApiInjectionKey = createInjectionKey('n-notification-api');\nconst notificationProviderProps = Object.assign(Object.assign({}, useTheme.props), { containerStyle: [String, Object], to: [String, Object], scrollable: {\n        type: Boolean,\n        default: true\n    }, max: Number, placement: {\n        type: String,\n        default: 'top-right'\n    } });\nexport default defineComponent({\n    name: 'NotificationProvider',\n    props: notificationProviderProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const notificationListRef = ref([]);\n        const notificationRefs = {};\n        const leavingKeySet = new Set();\n        function create(options) {\n            const key = createId();\n            const destroy = () => {\n                leavingKeySet.add(key);\n                // If you push n + 1 message when max is n, notificationRefs[key] maybe not be set\n                if (notificationRefs[key]) {\n                    notificationRefs[key].hide();\n                }\n            };\n            const notificationReactive = reactive(Object.assign(Object.assign({}, options), { key,\n                destroy, hide: destroy, deactivate: destroy }));\n            const { max } = props;\n            if (max && notificationListRef.value.length - leavingKeySet.size >= max) {\n                let someoneMountedRemoved = false;\n                let index = 0;\n                for (const notification of notificationListRef.value) {\n                    if (!leavingKeySet.has(notification.key)) {\n                        if (notificationRefs[notification.key]) {\n                            notification.destroy();\n                            someoneMountedRemoved = true;\n                        }\n                        break;\n                    }\n                    index++;\n                }\n                if (!someoneMountedRemoved) {\n                    notificationListRef.value.splice(index, 1);\n                }\n            }\n            notificationListRef.value.push(notificationReactive);\n            return notificationReactive;\n        }\n        const apis = ['info', 'success', 'warning', 'error'].map((type) => {\n            return (options) => create(Object.assign(Object.assign({}, options), { type }));\n        });\n        function handleAfterLeave(key) {\n            leavingKeySet.delete(key);\n            notificationListRef.value.splice(notificationListRef.value.findIndex((notification) => notification.key === key), 1);\n        }\n        const themeRef = useTheme('Notification', '-notification', style, notificationLight, props, mergedClsPrefixRef);\n        const api = {\n            create,\n            info: apis[0],\n            success: apis[1],\n            warning: apis[2],\n            error: apis[3],\n            open,\n            destroyAll\n        };\n        provide(notificationApiInjectionKey, api);\n        provide(notificationProviderInjectionKey, {\n            props,\n            mergedClsPrefixRef,\n            mergedThemeRef: themeRef\n        });\n        // deprecated\n        function open(options) {\n            return create(options);\n        }\n        function destroyAll() {\n            Object.values(notificationListRef.value).forEach((notification) => {\n                notification.hide();\n            });\n        }\n        return Object.assign({\n            mergedClsPrefix: mergedClsPrefixRef,\n            notificationList: notificationListRef,\n            notificationRefs,\n            handleAfterLeave\n        }, api);\n    },\n    render() {\n        var _a, _b, _c;\n        return (h(Fragment, null, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 :\n            _b.call(_a),\n            this.notificationList.length ? (h(Teleport, { to: (_c = this.to) !== null && _c !== void 0 ? _c : 'body' },\n                h(NotificationContainer, { style: this.containerStyle, scrollable: this.scrollable, placement: this.placement }, {\n                    default: () => {\n                        return this.notificationList.map((notification) => {\n                            return (h(NotificationEnvironment, Object.assign({ ref: ((inst) => {\n                                    const refKey = notification.key;\n                                    if (inst === null) {\n                                        delete this.notificationRefs[refKey];\n                                    }\n                                    else\n                                        this.notificationRefs[refKey] = inst;\n                                }) }, omit(notification, [\n                                'destroy',\n                                'hide',\n                                'deactivate'\n                            ]), { internalKey: notification.key, onInternalAfterLeave: this.handleAfterLeave })));\n                        });\n                    }\n                }))) : null));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}