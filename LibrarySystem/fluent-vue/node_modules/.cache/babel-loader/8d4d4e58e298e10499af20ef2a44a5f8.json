{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedCheckbox } from \"./checkbox.form-associated\";\n/**\n * A Checkbox Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.\n *\n * @public\n */\n\nexport class Checkbox extends FormAssociatedCheckbox {\n  constructor() {\n    super();\n    /**\n     * The element's value to be included in form submission when checked.\n     * Default to \"on\" to reach parity with input[type=\"checkbox\"]\n     *\n     * @internal\n     */\n\n    this.initialValue = \"on\";\n    /**\n     * The indeterminate state of the control\n     */\n\n    this.indeterminate = false;\n    /**\n     * @internal\n     */\n\n    this.keypressHandler = e => {\n      switch (e.key) {\n        case keySpace:\n          this.checked = !this.checked;\n          break;\n      }\n    };\n    /**\n     * @internal\n     */\n\n\n    this.clickHandler = e => {\n      if (!this.disabled && !this.readOnly) {\n        this.checked = !this.checked;\n      }\n    };\n\n    this.proxy.setAttribute(\"type\", \"checkbox\");\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.readOnly = this.readOnly;\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], Checkbox.prototype, \"readOnly\", void 0);\n\n__decorate([observable], Checkbox.prototype, \"defaultSlottedNodes\", void 0);\n\n__decorate([observable], Checkbox.prototype, \"indeterminate\", void 0);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.js"],"names":["__decorate","attr","observable","keySpace","FormAssociatedCheckbox","Checkbox","constructor","initialValue","indeterminate","keypressHandler","e","key","checked","clickHandler","disabled","readOnly","proxy","setAttribute","readOnlyChanged","HTMLInputElement","attribute","mode","prototype"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,yBAAjC;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,SAAuBD,sBAAvB,CAA8C;AACjDE,EAAAA,WAAW,GAAG;AACV;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoB,IAApB;AACA;AACR;AACA;;AACQ,SAAKC,aAAL,GAAqB,KAArB;AACA;AACR;AACA;;AACQ,SAAKC,eAAL,GAAwBC,CAAD,IAAO;AAC1B,cAAQA,CAAC,CAACC,GAAV;AACI,aAAKR,QAAL;AACI,eAAKS,OAAL,GAAe,CAAC,KAAKA,OAArB;AACA;AAHR;AAKH,KAND;AAOA;AACR;AACA;;;AACQ,SAAKC,YAAL,GAAqBH,CAAD,IAAO;AACvB,UAAI,CAAC,KAAKI,QAAN,IAAkB,CAAC,KAAKC,QAA5B,EAAsC;AAClC,aAAKH,OAAL,GAAe,CAAC,KAAKA,OAArB;AACH;AACJ,KAJD;;AAKA,SAAKI,KAAL,CAAWC,YAAX,CAAwB,MAAxB,EAAgC,UAAhC;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKF,KAAL,YAAsBG,gBAA1B,EAA4C;AACxC,WAAKH,KAAL,CAAWD,QAAX,GAAsB,KAAKA,QAA3B;AACH;AACJ;;AAtCgD;;AAwCrDf,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEmB,EAAAA,SAAS,EAAE,UAAb;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CAAD,CADG,CAAD,EAEPhB,QAAQ,CAACiB,SAFF,EAEa,UAFb,EAEyB,KAAK,CAF9B,CAAV;;AAGAtB,UAAU,CAAC,CACPE,UADO,CAAD,EAEPG,QAAQ,CAACiB,SAFF,EAEa,qBAFb,EAEoC,KAAK,CAFzC,CAAV;;AAGAtB,UAAU,CAAC,CACPE,UADO,CAAD,EAEPG,QAAQ,CAACiB,SAFF,EAEa,eAFb,EAE8B,KAAK,CAFnC,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedCheckbox } from \"./checkbox.form-associated\";\n/**\n * A Checkbox Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.\n *\n * @public\n */\nexport class Checkbox extends FormAssociatedCheckbox {\n    constructor() {\n        super();\n        /**\n         * The element's value to be included in form submission when checked.\n         * Default to \"on\" to reach parity with input[type=\"checkbox\"]\n         *\n         * @internal\n         */\n        this.initialValue = \"on\";\n        /**\n         * The indeterminate state of the control\n         */\n        this.indeterminate = false;\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            switch (e.key) {\n                case keySpace:\n                    this.checked = !this.checked;\n                    break;\n            }\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            if (!this.disabled && !this.readOnly) {\n                this.checked = !this.checked;\n            }\n        };\n        this.proxy.setAttribute(\"type\", \"checkbox\");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], Checkbox.prototype, \"readOnly\", void 0);\n__decorate([\n    observable\n], Checkbox.prototype, \"defaultSlottedNodes\", void 0);\n__decorate([\n    observable\n], Checkbox.prototype, \"indeterminate\", void 0);\n"]},"metadata":{},"sourceType":"module"}