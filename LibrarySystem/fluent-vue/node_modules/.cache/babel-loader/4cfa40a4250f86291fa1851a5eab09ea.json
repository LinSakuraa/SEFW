{"ast":null,"code":"import { h, defineComponent, computed, inject, ref, toRef, watchEffect } from 'vue';\nimport { useMergedState, useMemo } from 'vooks';\nimport { createId } from 'seemly';\nimport { on } from 'evtd';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NIconSwitchTransition } from '../../_internal';\nimport { call, createKey, warnOnce } from '../../_utils';\nimport { checkboxLight } from '../styles';\nimport CheckMark from './CheckMark';\nimport LineMark from './LineMark';\nimport { checkboxGroupInjectionKey } from './CheckboxGroup';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst checkboxProps = Object.assign(Object.assign({}, useTheme.props), {\n  size: String,\n  checked: {\n    type: [Boolean, String, Number],\n    default: undefined\n  },\n  defaultChecked: {\n    type: [Boolean, String, Number],\n    default: false\n  },\n  value: [String, Number],\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  indeterminate: Boolean,\n  label: String,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  checkedValue: {\n    type: [Boolean, String, Number],\n    default: true\n  },\n  uncheckedValue: {\n    type: [Boolean, String, Number],\n    default: false\n  },\n  'onUpdate:checked': [Function, Array],\n  onUpdateChecked: [Function, Array],\n  // private\n  privateInsideTable: Boolean,\n  // deprecated\n  onChange: [Function, Array]\n});\nexport default defineComponent({\n  name: 'Checkbox',\n  props: checkboxProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange) {\n          warnOnce('checkbox', '`on-change` is deprecated, please use `on-update:checked` instead.');\n        }\n      });\n    }\n\n    const selfRef = ref(null);\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled,\n      mergedRtlRef\n    } = useConfig(props);\n    const formItem = useFormItem(props, {\n      mergedSize(NFormItem) {\n        const {\n          size\n        } = props;\n        if (size !== undefined) return size;\n\n        if (NCheckboxGroup) {\n          const {\n            value: mergedSize\n          } = NCheckboxGroup.mergedSizeRef;\n\n          if (mergedSize !== undefined) {\n            return mergedSize;\n          }\n        }\n\n        if (NFormItem) {\n          const {\n            mergedSize\n          } = NFormItem;\n          if (mergedSize !== undefined) return mergedSize.value;\n        }\n\n        return 'medium';\n      },\n\n      mergedDisabled(NFormItem) {\n        const {\n          disabled\n        } = props;\n        if (disabled !== undefined) return disabled;\n\n        if (NCheckboxGroup) {\n          if (NCheckboxGroup.disabledRef.value) return true;\n          const {\n            maxRef: {\n              value: max\n            },\n            checkedCountRef\n          } = NCheckboxGroup;\n\n          if (max !== undefined && checkedCountRef.value >= max && !renderedCheckedRef.value) {\n            return true;\n          }\n\n          const {\n            minRef: {\n              value: min\n            }\n          } = NCheckboxGroup;\n\n          if (min !== undefined && checkedCountRef.value <= min && renderedCheckedRef.value) {\n            return true;\n          }\n        }\n\n        if (NFormItem) {\n          return NFormItem.disabled.value;\n        }\n\n        return false;\n      }\n\n    });\n    const {\n      mergedDisabledRef,\n      mergedSizeRef\n    } = formItem;\n    const NCheckboxGroup = inject(checkboxGroupInjectionKey, null);\n    const uncontrolledCheckedRef = ref(props.defaultChecked);\n    const controlledCheckedRef = toRef(props, 'checked');\n    const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n    const renderedCheckedRef = useMemo(() => {\n      if (NCheckboxGroup) {\n        const groupValueSet = NCheckboxGroup.valueSetRef.value;\n\n        if (groupValueSet && props.value !== undefined) {\n          return groupValueSet.has(props.value);\n        }\n\n        return false;\n      } else {\n        return mergedCheckedRef.value === props.checkedValue;\n      }\n    });\n    const themeRef = useTheme('Checkbox', '-checkbox', style, checkboxLight, props, mergedClsPrefixRef);\n\n    function toggle(e) {\n      if (NCheckboxGroup && props.value !== undefined) {\n        NCheckboxGroup.toggleCheckbox(!renderedCheckedRef.value, props.value);\n      } else {\n        const {\n          onChange,\n          'onUpdate:checked': _onUpdateCheck,\n          onUpdateChecked\n        } = props;\n        const {\n          nTriggerFormInput,\n          nTriggerFormChange\n        } = formItem;\n        const nextChecked = renderedCheckedRef.value ? props.uncheckedValue : props.checkedValue;\n\n        if (_onUpdateCheck) {\n          call(_onUpdateCheck, nextChecked, e);\n        }\n\n        if (onUpdateChecked) {\n          call(onUpdateChecked, nextChecked, e);\n        }\n\n        if (onChange) call(onChange, nextChecked, e); // deprecated\n\n        nTriggerFormInput();\n        nTriggerFormChange();\n        uncontrolledCheckedRef.value = nextChecked;\n      }\n    }\n\n    function handleClick(e) {\n      if (!mergedDisabledRef.value) {\n        toggle(e);\n      }\n    }\n\n    function handleKeyUp(e) {\n      if (mergedDisabledRef.value) return;\n\n      switch (e.code) {\n        case 'Space':\n        case 'Enter':\n        case 'NumpadEnter':\n          toggle(e);\n      }\n    }\n\n    function handleKeyDown(e) {\n      switch (e.code) {\n        case 'Space':\n          e.preventDefault();\n      }\n    }\n\n    const exposedMethods = {\n      focus: () => {\n        var _a;\n\n        (_a = selfRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur: () => {\n        var _a;\n\n        (_a = selfRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n    const rtlEnabledRef = useRtl('Checkbox', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        value: mergedSize\n      } = mergedSizeRef;\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          borderRadius,\n          color,\n          colorChecked,\n          colorDisabled,\n          colorTableHeader,\n          colorTableHeaderModal,\n          colorTableHeaderPopover,\n          checkMarkColor,\n          checkMarkColorDisabled,\n          border,\n          borderFocus,\n          borderDisabled,\n          borderChecked,\n          boxShadowFocus,\n          textColor,\n          textColorDisabled,\n          checkMarkColorDisabledChecked,\n          colorDisabledChecked,\n          borderDisabledChecked,\n          labelPadding,\n          labelLineHeight,\n          [createKey('fontSize', mergedSize)]: fontSize,\n          [createKey('size', mergedSize)]: size\n        }\n      } = themeRef.value;\n      return {\n        '--n-label-line-height': labelLineHeight,\n        '--n-size': size,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-border-radius': borderRadius,\n        '--n-border': border,\n        '--n-border-checked': borderChecked,\n        '--n-border-focus': borderFocus,\n        '--n-border-disabled': borderDisabled,\n        '--n-border-disabled-checked': borderDisabledChecked,\n        '--n-box-shadow-focus': boxShadowFocus,\n        '--n-color': color,\n        '--n-color-checked': colorChecked,\n        '--n-color-table': colorTableHeader,\n        '--n-color-table-modal': colorTableHeaderModal,\n        '--n-color-table-popover': colorTableHeaderPopover,\n        '--n-color-disabled': colorDisabled,\n        '--n-color-disabled-checked': colorDisabledChecked,\n        '--n-text-color': textColor,\n        '--n-text-color-disabled': textColorDisabled,\n        '--n-check-mark-color': checkMarkColor,\n        '--n-check-mark-color-disabled': checkMarkColorDisabled,\n        '--n-check-mark-color-disabled-checked': checkMarkColorDisabledChecked,\n        '--n-font-size': fontSize,\n        '--n-label-padding': labelPadding\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('checkbox', computed(() => mergedSizeRef.value[0]), cssVarsRef, props) : undefined;\n    return Object.assign(formItem, exposedMethods, {\n      rtlEnabled: rtlEnabledRef,\n      selfRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedDisabled: mergedDisabledRef,\n      renderedChecked: renderedCheckedRef,\n      mergedTheme: themeRef,\n      labelId: createId(),\n      handleClick,\n      handleKeyUp,\n      handleKeyDown,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    });\n  },\n\n  render() {\n    var _a;\n\n    const {\n      $slots,\n      renderedChecked,\n      mergedDisabled,\n      indeterminate,\n      privateInsideTable,\n      cssVars,\n      labelId,\n      label,\n      mergedClsPrefix,\n      focusable,\n      handleKeyUp,\n      handleKeyDown,\n      handleClick\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"div\", {\n      ref: \"selfRef\",\n      class: [`${mergedClsPrefix}-checkbox`, this.themeClass, this.rtlEnabled && `${mergedClsPrefix}-checkbox--rtl`, renderedChecked && `${mergedClsPrefix}-checkbox--checked`, mergedDisabled && `${mergedClsPrefix}-checkbox--disabled`, indeterminate && `${mergedClsPrefix}-checkbox--indeterminate`, privateInsideTable && `${mergedClsPrefix}-checkbox--inside-table`],\n      tabindex: mergedDisabled || !focusable ? undefined : 0,\n      role: \"checkbox\",\n      \"aria-checked\": indeterminate ? 'mixed' : renderedChecked,\n      \"aria-labelledby\": labelId,\n      style: cssVars,\n      onKeyup: handleKeyUp,\n      onKeydown: handleKeyDown,\n      onClick: handleClick,\n      onMousedown: () => {\n        on('selectstart', window, e => {\n          e.preventDefault();\n        }, {\n          once: true\n        });\n      }\n    }, h(\"div\", {\n      class: `${mergedClsPrefix}-checkbox-box-wrapper`\n    }, \"\\u00A0\", h(\"div\", {\n      class: `${mergedClsPrefix}-checkbox-box`\n    }, h(NIconSwitchTransition, null, {\n      default: () => this.indeterminate ? h(\"div\", {\n        key: \"indeterminate\",\n        class: `${mergedClsPrefix}-checkbox-icon`\n      }, LineMark) : h(\"div\", {\n        key: \"check\",\n        class: `${mergedClsPrefix}-checkbox-icon`\n      }, CheckMark)\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-checkbox-box__border`\n    }))), label !== null || $slots.default ? h(\"span\", {\n      class: `${mergedClsPrefix}-checkbox__label`,\n      id: labelId\n    }, $slots.default ? $slots.default() : label) : null);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/checkbox/src/Checkbox.js"],"names":["h","defineComponent","computed","inject","ref","toRef","watchEffect","useMergedState","useMemo","createId","on","useConfig","useFormItem","useTheme","useThemeClass","NIconSwitchTransition","call","createKey","warnOnce","checkboxLight","CheckMark","LineMark","checkboxGroupInjectionKey","style","useRtl","checkboxProps","Object","assign","props","size","String","checked","type","Boolean","Number","default","undefined","defaultChecked","value","disabled","indeterminate","label","focusable","checkedValue","uncheckedValue","Function","Array","onUpdateChecked","privateInsideTable","onChange","name","setup","process","env","NODE_ENV","selfRef","mergedClsPrefixRef","inlineThemeDisabled","mergedRtlRef","formItem","mergedSize","NFormItem","NCheckboxGroup","mergedSizeRef","mergedDisabled","disabledRef","maxRef","max","checkedCountRef","renderedCheckedRef","minRef","min","mergedDisabledRef","uncontrolledCheckedRef","controlledCheckedRef","mergedCheckedRef","groupValueSet","valueSetRef","has","themeRef","toggle","e","toggleCheckbox","_onUpdateCheck","nTriggerFormInput","nTriggerFormChange","nextChecked","handleClick","handleKeyUp","code","handleKeyDown","preventDefault","exposedMethods","focus","_a","blur","rtlEnabledRef","cssVarsRef","common","cubicBezierEaseInOut","self","borderRadius","color","colorChecked","colorDisabled","colorTableHeader","colorTableHeaderModal","colorTableHeaderPopover","checkMarkColor","checkMarkColorDisabled","border","borderFocus","borderDisabled","borderChecked","boxShadowFocus","textColor","textColorDisabled","checkMarkColorDisabledChecked","colorDisabledChecked","borderDisabledChecked","labelPadding","labelLineHeight","fontSize","themeClassHandle","rtlEnabled","mergedClsPrefix","renderedChecked","mergedTheme","labelId","cssVars","themeClass","onRender","render","$slots","class","tabindex","role","onKeyup","onKeydown","onClick","onMousedown","window","once","key","id"],"mappings":"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","sourcesContent":["import { h, defineComponent, computed, inject, ref, toRef, watchEffect } from 'vue';\nimport { useMergedState, useMemo } from 'vooks';\nimport { createId } from 'seemly';\nimport { on } from 'evtd';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NIconSwitchTransition } from '../../_internal';\nimport { call, createKey, warnOnce } from '../../_utils';\nimport { checkboxLight } from '../styles';\nimport CheckMark from './CheckMark';\nimport LineMark from './LineMark';\nimport { checkboxGroupInjectionKey } from './CheckboxGroup';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst checkboxProps = Object.assign(Object.assign({}, useTheme.props), { size: String, checked: {\n        type: [Boolean, String, Number],\n        default: undefined\n    }, defaultChecked: {\n        type: [Boolean, String, Number],\n        default: false\n    }, value: [String, Number], disabled: {\n        type: Boolean,\n        default: undefined\n    }, indeterminate: Boolean, label: String, focusable: {\n        type: Boolean,\n        default: true\n    }, checkedValue: {\n        type: [Boolean, String, Number],\n        default: true\n    }, uncheckedValue: {\n        type: [Boolean, String, Number],\n        default: false\n    }, 'onUpdate:checked': [Function, Array], onUpdateChecked: [Function, Array], \n    // private\n    privateInsideTable: Boolean, \n    // deprecated\n    onChange: [Function, Array] });\nexport default defineComponent({\n    name: 'Checkbox',\n    props: checkboxProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.onChange) {\n                    warnOnce('checkbox', '`on-change` is deprecated, please use `on-update:checked` instead.');\n                }\n            });\n        }\n        const selfRef = ref(null);\n        const { mergedClsPrefixRef, inlineThemeDisabled, mergedRtlRef } = useConfig(props);\n        const formItem = useFormItem(props, {\n            mergedSize(NFormItem) {\n                const { size } = props;\n                if (size !== undefined)\n                    return size;\n                if (NCheckboxGroup) {\n                    const { value: mergedSize } = NCheckboxGroup.mergedSizeRef;\n                    if (mergedSize !== undefined) {\n                        return mergedSize;\n                    }\n                }\n                if (NFormItem) {\n                    const { mergedSize } = NFormItem;\n                    if (mergedSize !== undefined)\n                        return mergedSize.value;\n                }\n                return 'medium';\n            },\n            mergedDisabled(NFormItem) {\n                const { disabled } = props;\n                if (disabled !== undefined)\n                    return disabled;\n                if (NCheckboxGroup) {\n                    if (NCheckboxGroup.disabledRef.value)\n                        return true;\n                    const { maxRef: { value: max }, checkedCountRef } = NCheckboxGroup;\n                    if (max !== undefined &&\n                        checkedCountRef.value >= max &&\n                        !renderedCheckedRef.value) {\n                        return true;\n                    }\n                    const { minRef: { value: min } } = NCheckboxGroup;\n                    if (min !== undefined &&\n                        checkedCountRef.value <= min &&\n                        renderedCheckedRef.value) {\n                        return true;\n                    }\n                }\n                if (NFormItem) {\n                    return NFormItem.disabled.value;\n                }\n                return false;\n            }\n        });\n        const { mergedDisabledRef, mergedSizeRef } = formItem;\n        const NCheckboxGroup = inject(checkboxGroupInjectionKey, null);\n        const uncontrolledCheckedRef = ref(props.defaultChecked);\n        const controlledCheckedRef = toRef(props, 'checked');\n        const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n        const renderedCheckedRef = useMemo(() => {\n            if (NCheckboxGroup) {\n                const groupValueSet = NCheckboxGroup.valueSetRef.value;\n                if (groupValueSet && props.value !== undefined) {\n                    return groupValueSet.has(props.value);\n                }\n                return false;\n            }\n            else {\n                return mergedCheckedRef.value === props.checkedValue;\n            }\n        });\n        const themeRef = useTheme('Checkbox', '-checkbox', style, checkboxLight, props, mergedClsPrefixRef);\n        function toggle(e) {\n            if (NCheckboxGroup && props.value !== undefined) {\n                NCheckboxGroup.toggleCheckbox(!renderedCheckedRef.value, props.value);\n            }\n            else {\n                const { onChange, 'onUpdate:checked': _onUpdateCheck, onUpdateChecked } = props;\n                const { nTriggerFormInput, nTriggerFormChange } = formItem;\n                const nextChecked = renderedCheckedRef.value\n                    ? props.uncheckedValue\n                    : props.checkedValue;\n                if (_onUpdateCheck) {\n                    call(_onUpdateCheck, nextChecked, e);\n                }\n                if (onUpdateChecked) {\n                    call(onUpdateChecked, nextChecked, e);\n                }\n                if (onChange)\n                    call(onChange, nextChecked, e); // deprecated\n                nTriggerFormInput();\n                nTriggerFormChange();\n                uncontrolledCheckedRef.value = nextChecked;\n            }\n        }\n        function handleClick(e) {\n            if (!mergedDisabledRef.value) {\n                toggle(e);\n            }\n        }\n        function handleKeyUp(e) {\n            if (mergedDisabledRef.value)\n                return;\n            switch (e.code) {\n                case 'Space':\n                case 'Enter':\n                case 'NumpadEnter':\n                    toggle(e);\n            }\n        }\n        function handleKeyDown(e) {\n            switch (e.code) {\n                case 'Space':\n                    e.preventDefault();\n            }\n        }\n        const exposedMethods = {\n            focus: () => {\n                var _a;\n                (_a = selfRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n            },\n            blur: () => {\n                var _a;\n                (_a = selfRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n            }\n        };\n        const rtlEnabledRef = useRtl('Checkbox', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { value: mergedSize } = mergedSizeRef;\n            const { common: { cubicBezierEaseInOut }, self: { borderRadius, color, colorChecked, colorDisabled, colorTableHeader, colorTableHeaderModal, colorTableHeaderPopover, checkMarkColor, checkMarkColorDisabled, border, borderFocus, borderDisabled, borderChecked, boxShadowFocus, textColor, textColorDisabled, checkMarkColorDisabledChecked, colorDisabledChecked, borderDisabledChecked, labelPadding, labelLineHeight, [createKey('fontSize', mergedSize)]: fontSize, [createKey('size', mergedSize)]: size } } = themeRef.value;\n            return {\n                '--n-label-line-height': labelLineHeight,\n                '--n-size': size,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-border-radius': borderRadius,\n                '--n-border': border,\n                '--n-border-checked': borderChecked,\n                '--n-border-focus': borderFocus,\n                '--n-border-disabled': borderDisabled,\n                '--n-border-disabled-checked': borderDisabledChecked,\n                '--n-box-shadow-focus': boxShadowFocus,\n                '--n-color': color,\n                '--n-color-checked': colorChecked,\n                '--n-color-table': colorTableHeader,\n                '--n-color-table-modal': colorTableHeaderModal,\n                '--n-color-table-popover': colorTableHeaderPopover,\n                '--n-color-disabled': colorDisabled,\n                '--n-color-disabled-checked': colorDisabledChecked,\n                '--n-text-color': textColor,\n                '--n-text-color-disabled': textColorDisabled,\n                '--n-check-mark-color': checkMarkColor,\n                '--n-check-mark-color-disabled': checkMarkColorDisabled,\n                '--n-check-mark-color-disabled-checked': checkMarkColorDisabledChecked,\n                '--n-font-size': fontSize,\n                '--n-label-padding': labelPadding\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('checkbox', computed(() => mergedSizeRef.value[0]), cssVarsRef, props)\n            : undefined;\n        return Object.assign(formItem, exposedMethods, {\n            rtlEnabled: rtlEnabledRef,\n            selfRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedDisabled: mergedDisabledRef,\n            renderedChecked: renderedCheckedRef,\n            mergedTheme: themeRef,\n            labelId: createId(),\n            handleClick,\n            handleKeyUp,\n            handleKeyDown,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        });\n    },\n    render() {\n        var _a;\n        const { $slots, renderedChecked, mergedDisabled, indeterminate, privateInsideTable, cssVars, labelId, label, mergedClsPrefix, focusable, handleKeyUp, handleKeyDown, handleClick } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"div\", { ref: \"selfRef\", class: [\n                `${mergedClsPrefix}-checkbox`,\n                this.themeClass,\n                this.rtlEnabled && `${mergedClsPrefix}-checkbox--rtl`,\n                renderedChecked && `${mergedClsPrefix}-checkbox--checked`,\n                mergedDisabled && `${mergedClsPrefix}-checkbox--disabled`,\n                indeterminate && `${mergedClsPrefix}-checkbox--indeterminate`,\n                privateInsideTable && `${mergedClsPrefix}-checkbox--inside-table`\n            ], tabindex: mergedDisabled || !focusable ? undefined : 0, role: \"checkbox\", \"aria-checked\": indeterminate ? 'mixed' : renderedChecked, \"aria-labelledby\": labelId, style: cssVars, onKeyup: handleKeyUp, onKeydown: handleKeyDown, onClick: handleClick, onMousedown: () => {\n                on('selectstart', window, (e) => {\n                    e.preventDefault();\n                }, {\n                    once: true\n                });\n            } },\n            h(\"div\", { class: `${mergedClsPrefix}-checkbox-box-wrapper` },\n                \"\\u00A0\",\n                h(\"div\", { class: `${mergedClsPrefix}-checkbox-box` },\n                    h(NIconSwitchTransition, null, {\n                        default: () => this.indeterminate ? (h(\"div\", { key: \"indeterminate\", class: `${mergedClsPrefix}-checkbox-icon` }, LineMark)) : (h(\"div\", { key: \"check\", class: `${mergedClsPrefix}-checkbox-icon` }, CheckMark))\n                    }),\n                    h(\"div\", { class: `${mergedClsPrefix}-checkbox-box__border` }))),\n            label !== null || $slots.default ? (h(\"span\", { class: `${mergedClsPrefix}-checkbox__label`, id: labelId }, $slots.default ? $slots.default() : label)) : null));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}