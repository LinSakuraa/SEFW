{"ast":null,"code":"const oppositionPositions = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nconst oppositeAligns = {\n  start: 'end',\n  center: 'center',\n  end: 'start'\n};\nconst propToCompare = {\n  top: 'height',\n  bottom: 'height',\n  left: 'width',\n  right: 'width'\n};\nconst transformOrigins = {\n  'bottom-start': 'top left',\n  bottom: 'top center',\n  'bottom-end': 'top right',\n  'top-start': 'bottom left',\n  top: 'bottom center',\n  'top-end': 'bottom right',\n  'right-start': 'top left',\n  right: 'center left',\n  'right-end': 'bottom left',\n  'left-start': 'top right',\n  left: 'center right',\n  'left-end': 'bottom right'\n};\nconst overlapTransformOrigin = {\n  'bottom-start': 'bottom left',\n  bottom: 'bottom center',\n  'bottom-end': 'bottom right',\n  'top-start': 'top left',\n  top: 'top center',\n  'top-end': 'top right',\n  'right-start': 'top right',\n  right: 'center right',\n  'right-end': 'bottom right',\n  'left-start': 'top left',\n  left: 'center left',\n  'left-end': 'bottom left'\n};\nconst oppositeAlignCssPositionProps = {\n  'bottom-start': 'right',\n  'bottom-end': 'left',\n  'top-start': 'right',\n  'top-end': 'left',\n  'right-start': 'bottom',\n  'right-end': 'top',\n  'left-start': 'bottom',\n  'left-end': 'top'\n};\nconst keepOffsetDirection = {\n  top: true,\n  bottom: false,\n  left: true,\n  right: false // left--\n\n};\nconst cssPositionToOppositeAlign = {\n  top: 'end',\n  bottom: 'start',\n  left: 'end',\n  right: 'start'\n};\nexport function getPlacementAndOffsetOfFollower(placement, targetRect, followerRect, shift, flip, overlap) {\n  if (!flip || overlap) {\n    return {\n      placement: placement,\n      top: 0,\n      left: 0\n    };\n  }\n\n  const [position, align] = placement.split('-');\n  let properAlign = align !== null && align !== void 0 ? align : 'center';\n  let properOffset = {\n    top: 0,\n    left: 0\n  };\n\n  const deriveOffset = (oppositeAlignCssSizeProp, alignCssPositionProp, offsetVertically) => {\n    let left = 0;\n    let top = 0;\n    const diff = followerRect[oppositeAlignCssSizeProp] - targetRect[alignCssPositionProp] - targetRect[oppositeAlignCssSizeProp];\n\n    if (diff > 0 && shift) {\n      if (offsetVertically) {\n        //       screen border\n        // |-----------------------------------------|\n        // |                    | f  |               |\n        // |                    | o  |               |\n        // |                    | l  |               |\n        // |                    | l  |----           |\n        // |                    | o  |tar |          |\n        // |                    | w  |get |          |\n        // |                    | e  |    |          |\n        // |                    | r  |----           |\n        // |                     ----                |\n        // |-----------------------------------------|\n        top = keepOffsetDirection[alignCssPositionProp] ? diff : -diff;\n      } else {\n        //       screen border\n        // |----------------------------------------|\n        // |                                        |\n        // |          ----------                    |\n        // |          | target |                    |\n        // |       ----------------------------------\n        // |       |       follower                 |\n        // |       ----------------------------------\n        // |                                        |\n        // |----------------------------------------|\n        left = keepOffsetDirection[alignCssPositionProp] ? diff : -diff;\n      }\n    }\n\n    return {\n      left,\n      top\n    };\n  };\n\n  const offsetVertically = position === 'left' || position === 'right'; // choose proper placement for non-center align\n\n  if (properAlign !== 'center') {\n    const oppositeAlignCssPositionProp = oppositeAlignCssPositionProps[placement];\n    const currentAlignCssPositionProp = oppositionPositions[oppositeAlignCssPositionProp];\n    const oppositeAlignCssSizeProp = propToCompare[oppositeAlignCssPositionProp]; // if follower rect is larger than target rect in align direction\n    // ----------[ target ]---------|\n    // ----------[     follower     ]\n\n    if (followerRect[oppositeAlignCssSizeProp] > targetRect[oppositeAlignCssSizeProp]) {\n      if ( // current space is not enough\n      // ----------[ target ]---------|\n      // -------[     follower        ]\n      targetRect[oppositeAlignCssPositionProp] + targetRect[oppositeAlignCssSizeProp] < followerRect[oppositeAlignCssSizeProp]) {\n        const followerOverTargetSize = (followerRect[oppositeAlignCssSizeProp] - targetRect[oppositeAlignCssSizeProp]) / 2;\n\n        if (targetRect[oppositeAlignCssPositionProp] < followerOverTargetSize || targetRect[currentAlignCssPositionProp] < followerOverTargetSize) {\n          // opposite align has larger space\n          // -------[ target ]-----------|\n          // -------[     follower     ]-|\n          if (targetRect[oppositeAlignCssPositionProp] < targetRect[currentAlignCssPositionProp]) {\n            properAlign = oppositeAligns[align];\n            properOffset = deriveOffset(oppositeAlignCssSizeProp, currentAlignCssPositionProp, offsetVertically);\n          } else {\n            // ----------------[ target ]----|\n            // --------[   follower     ]----|\n            properOffset = deriveOffset(oppositeAlignCssSizeProp, oppositeAlignCssPositionProp, offsetVertically);\n          }\n        } else {\n          // 'center' align is better\n          // ------------[ target ]--------|\n          // -------[       follower    ]--|\n          properAlign = 'center';\n        }\n      }\n    } else if (followerRect[oppositeAlignCssSizeProp] < targetRect[oppositeAlignCssSizeProp]) {\n      // TODO: maybe center is better\n      if (targetRect[currentAlignCssPositionProp] < 0 && // opposite align has larger space\n      // ------------[   target   ]\n      // ----------------[follower]\n      targetRect[oppositeAlignCssPositionProp] > targetRect[currentAlignCssPositionProp]) {\n        properAlign = oppositeAligns[align];\n      }\n    }\n  } else {\n    const possibleAlternativeAlignCssPositionProp1 = position === 'bottom' || position === 'top' ? 'left' : 'top';\n    const possibleAlternativeAlignCssPositionProp2 = oppositionPositions[possibleAlternativeAlignCssPositionProp1];\n    const alternativeAlignCssSizeProp = propToCompare[possibleAlternativeAlignCssPositionProp1];\n    const followerOverTargetSize = (followerRect[alternativeAlignCssSizeProp] - targetRect[alternativeAlignCssSizeProp]) / 2;\n\n    if ( // center is not enough\n    // ----------- [ target ]--|\n    // -------[     follower     ]\n    targetRect[possibleAlternativeAlignCssPositionProp1] < followerOverTargetSize || targetRect[possibleAlternativeAlignCssPositionProp2] < followerOverTargetSize) {\n      // alternative 2 position's space is larger\n      if (targetRect[possibleAlternativeAlignCssPositionProp1] > targetRect[possibleAlternativeAlignCssPositionProp2]) {\n        properAlign = cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp1];\n        properOffset = deriveOffset(alternativeAlignCssSizeProp, possibleAlternativeAlignCssPositionProp1, offsetVertically);\n      } else {\n        // alternative 1 position's space is larger\n        properAlign = cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp2];\n        properOffset = deriveOffset(alternativeAlignCssSizeProp, possibleAlternativeAlignCssPositionProp2, offsetVertically);\n      }\n    }\n  }\n\n  let properPosition = position;\n\n  if ( // space is not enough\n  targetRect[position] < followerRect[propToCompare[position]] && // opposite position's space is larger\n  targetRect[position] < targetRect[oppositionPositions[position]]) {\n    properPosition = oppositionPositions[position];\n  }\n\n  return {\n    placement: properAlign !== 'center' ? `${properPosition}-${properAlign}` : properPosition,\n    left: properOffset.left,\n    top: properOffset.top\n  };\n}\nexport function getProperTransformOrigin(placement, overlap) {\n  if (overlap) return overlapTransformOrigin[placement];\n  return transformOrigins[placement];\n} // ------------\n// |  offset  |\n// |          |\n// | [target] |\n// |          |\n// ------------\n// TODO: refactor it to remove dup logic\n\nexport function getOffset(placement, offsetRect, targetRect, offsetTopToStandardPlacement, offsetLeftToStandardPlacement, overlap) {\n  if (overlap) {\n    switch (placement) {\n      case 'bottom-start':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n          transform: 'translateY(-100%)'\n        };\n\n      case 'bottom-end':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n          transform: 'translateX(-100%) translateY(-100%)'\n        };\n\n      case 'top-start':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n          transform: ''\n        };\n\n      case 'top-end':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n          transform: 'translateX(-100%)'\n        };\n\n      case 'right-start':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n          transform: 'translateX(-100%)'\n        };\n\n      case 'right-end':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n          transform: 'translateX(-100%) translateY(-100%)'\n        };\n\n      case 'left-start':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n          transform: ''\n        };\n\n      case 'left-end':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n          transform: 'translateY(-100%)'\n        };\n\n      case 'top':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n          transform: 'translateX(-50%)'\n        };\n\n      case 'right':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n          transform: 'translateX(-100%) translateY(-50%)'\n        };\n\n      case 'left':\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n          transform: 'translateY(-50%)'\n        };\n\n      case 'bottom':\n      default:\n        return {\n          top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n          left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n          transform: 'translateX(-50%) translateY(-100%)'\n        };\n    }\n  }\n\n  switch (placement) {\n    case 'bottom-start':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n        transform: ''\n      };\n\n    case 'bottom-end':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateX(-100%)'\n      };\n\n    case 'top-start':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateY(-100%)'\n      };\n\n    case 'top-end':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateX(-100%) translateY(-100%)'\n      };\n\n    case 'right-start':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n        transform: ''\n      };\n\n    case 'right-end':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateY(-100%)'\n      };\n\n    case 'left-start':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateX(-100%)'\n      };\n\n    case 'left-end':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateX(-100%) translateY(-100%)'\n      };\n\n    case 'top':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2 + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateY(-100%) translateX(-50%)'\n      };\n\n    case 'right':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2 + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateY(-50%)'\n      };\n\n    case 'left':\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2 + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateY(-50%) translateX(-100%)'\n      };\n\n    case 'bottom':\n    default:\n      return {\n        top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n        left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2 + offsetLeftToStandardPlacement)}px`,\n        transform: 'translateX(-50%)'\n      };\n  }\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vueuc/es/binder/src/get-placement-style.js"],"names":["oppositionPositions","top","bottom","left","right","oppositeAligns","start","center","end","propToCompare","transformOrigins","overlapTransformOrigin","oppositeAlignCssPositionProps","keepOffsetDirection","cssPositionToOppositeAlign","getPlacementAndOffsetOfFollower","placement","targetRect","followerRect","shift","flip","overlap","position","align","split","properAlign","properOffset","deriveOffset","oppositeAlignCssSizeProp","alignCssPositionProp","offsetVertically","diff","oppositeAlignCssPositionProp","currentAlignCssPositionProp","followerOverTargetSize","possibleAlternativeAlignCssPositionProp1","possibleAlternativeAlignCssPositionProp2","alternativeAlignCssSizeProp","properPosition","getProperTransformOrigin","getOffset","offsetRect","offsetTopToStandardPlacement","offsetLeftToStandardPlacement","Math","round","height","transform","width"],"mappings":"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","sourcesContent":["const oppositionPositions = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n};\nconst oppositeAligns = {\n    start: 'end',\n    center: 'center',\n    end: 'start'\n};\nconst propToCompare = {\n    top: 'height',\n    bottom: 'height',\n    left: 'width',\n    right: 'width'\n};\nconst transformOrigins = {\n    'bottom-start': 'top left',\n    bottom: 'top center',\n    'bottom-end': 'top right',\n    'top-start': 'bottom left',\n    top: 'bottom center',\n    'top-end': 'bottom right',\n    'right-start': 'top left',\n    right: 'center left',\n    'right-end': 'bottom left',\n    'left-start': 'top right',\n    left: 'center right',\n    'left-end': 'bottom right'\n};\nconst overlapTransformOrigin = {\n    'bottom-start': 'bottom left',\n    bottom: 'bottom center',\n    'bottom-end': 'bottom right',\n    'top-start': 'top left',\n    top: 'top center',\n    'top-end': 'top right',\n    'right-start': 'top right',\n    right: 'center right',\n    'right-end': 'bottom right',\n    'left-start': 'top left',\n    left: 'center left',\n    'left-end': 'bottom left'\n};\nconst oppositeAlignCssPositionProps = {\n    'bottom-start': 'right',\n    'bottom-end': 'left',\n    'top-start': 'right',\n    'top-end': 'left',\n    'right-start': 'bottom',\n    'right-end': 'top',\n    'left-start': 'bottom',\n    'left-end': 'top'\n};\nconst keepOffsetDirection = {\n    top: true,\n    bottom: false,\n    left: true,\n    right: false // left--\n};\nconst cssPositionToOppositeAlign = {\n    top: 'end',\n    bottom: 'start',\n    left: 'end',\n    right: 'start'\n};\nexport function getPlacementAndOffsetOfFollower(placement, targetRect, followerRect, shift, flip, overlap) {\n    if (!flip || overlap) {\n        return { placement: placement, top: 0, left: 0 };\n    }\n    const [position, align] = placement.split('-');\n    let properAlign = align !== null && align !== void 0 ? align : 'center';\n    let properOffset = {\n        top: 0,\n        left: 0\n    };\n    const deriveOffset = (oppositeAlignCssSizeProp, alignCssPositionProp, offsetVertically) => {\n        let left = 0;\n        let top = 0;\n        const diff = followerRect[oppositeAlignCssSizeProp] -\n            targetRect[alignCssPositionProp] -\n            targetRect[oppositeAlignCssSizeProp];\n        if (diff > 0 && shift) {\n            if (offsetVertically) {\n                //       screen border\n                // |-----------------------------------------|\n                // |                    | f  |               |\n                // |                    | o  |               |\n                // |                    | l  |               |\n                // |                    | l  |----           |\n                // |                    | o  |tar |          |\n                // |                    | w  |get |          |\n                // |                    | e  |    |          |\n                // |                    | r  |----           |\n                // |                     ----                |\n                // |-----------------------------------------|\n                top = keepOffsetDirection[alignCssPositionProp] ? diff : -diff;\n            }\n            else {\n                //       screen border\n                // |----------------------------------------|\n                // |                                        |\n                // |          ----------                    |\n                // |          | target |                    |\n                // |       ----------------------------------\n                // |       |       follower                 |\n                // |       ----------------------------------\n                // |                                        |\n                // |----------------------------------------|\n                left = keepOffsetDirection[alignCssPositionProp] ? diff : -diff;\n            }\n        }\n        return {\n            left,\n            top\n        };\n    };\n    const offsetVertically = position === 'left' || position === 'right';\n    // choose proper placement for non-center align\n    if (properAlign !== 'center') {\n        const oppositeAlignCssPositionProp = oppositeAlignCssPositionProps[placement];\n        const currentAlignCssPositionProp = oppositionPositions[oppositeAlignCssPositionProp];\n        const oppositeAlignCssSizeProp = propToCompare[oppositeAlignCssPositionProp];\n        // if follower rect is larger than target rect in align direction\n        // ----------[ target ]---------|\n        // ----------[     follower     ]\n        if (followerRect[oppositeAlignCssSizeProp] >\n            targetRect[oppositeAlignCssSizeProp]) {\n            if (\n            // current space is not enough\n            // ----------[ target ]---------|\n            // -------[     follower        ]\n            targetRect[oppositeAlignCssPositionProp] +\n                targetRect[oppositeAlignCssSizeProp] <\n                followerRect[oppositeAlignCssSizeProp]) {\n                const followerOverTargetSize = (followerRect[oppositeAlignCssSizeProp] -\n                    targetRect[oppositeAlignCssSizeProp]) /\n                    2;\n                if (targetRect[oppositeAlignCssPositionProp] < followerOverTargetSize ||\n                    targetRect[currentAlignCssPositionProp] < followerOverTargetSize) {\n                    // opposite align has larger space\n                    // -------[ target ]-----------|\n                    // -------[     follower     ]-|\n                    if (targetRect[oppositeAlignCssPositionProp] <\n                        targetRect[currentAlignCssPositionProp]) {\n                        properAlign = oppositeAligns[align];\n                        properOffset = deriveOffset(oppositeAlignCssSizeProp, currentAlignCssPositionProp, offsetVertically);\n                    }\n                    else {\n                        // ----------------[ target ]----|\n                        // --------[   follower     ]----|\n                        properOffset = deriveOffset(oppositeAlignCssSizeProp, oppositeAlignCssPositionProp, offsetVertically);\n                    }\n                }\n                else {\n                    // 'center' align is better\n                    // ------------[ target ]--------|\n                    // -------[       follower    ]--|\n                    properAlign = 'center';\n                }\n            }\n        }\n        else if (followerRect[oppositeAlignCssSizeProp] <\n            targetRect[oppositeAlignCssSizeProp]) {\n            // TODO: maybe center is better\n            if (targetRect[currentAlignCssPositionProp] < 0 &&\n                // opposite align has larger space\n                // ------------[   target   ]\n                // ----------------[follower]\n                targetRect[oppositeAlignCssPositionProp] >\n                    targetRect[currentAlignCssPositionProp]) {\n                properAlign = oppositeAligns[align];\n            }\n        }\n    }\n    else {\n        const possibleAlternativeAlignCssPositionProp1 = position === 'bottom' || position === 'top' ? 'left' : 'top';\n        const possibleAlternativeAlignCssPositionProp2 = oppositionPositions[possibleAlternativeAlignCssPositionProp1];\n        const alternativeAlignCssSizeProp = propToCompare[possibleAlternativeAlignCssPositionProp1];\n        const followerOverTargetSize = (followerRect[alternativeAlignCssSizeProp] -\n            targetRect[alternativeAlignCssSizeProp]) /\n            2;\n        if (\n        // center is not enough\n        // ----------- [ target ]--|\n        // -------[     follower     ]\n        targetRect[possibleAlternativeAlignCssPositionProp1] <\n            followerOverTargetSize ||\n            targetRect[possibleAlternativeAlignCssPositionProp2] <\n                followerOverTargetSize) {\n            // alternative 2 position's space is larger\n            if (targetRect[possibleAlternativeAlignCssPositionProp1] >\n                targetRect[possibleAlternativeAlignCssPositionProp2]) {\n                properAlign =\n                    cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp1];\n                properOffset = deriveOffset(alternativeAlignCssSizeProp, possibleAlternativeAlignCssPositionProp1, offsetVertically);\n            }\n            else {\n                // alternative 1 position's space is larger\n                properAlign =\n                    cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp2];\n                properOffset = deriveOffset(alternativeAlignCssSizeProp, possibleAlternativeAlignCssPositionProp2, offsetVertically);\n            }\n        }\n    }\n    let properPosition = position;\n    if (\n    // space is not enough\n    targetRect[position] < followerRect[propToCompare[position]] &&\n        // opposite position's space is larger\n        targetRect[position] < targetRect[oppositionPositions[position]]) {\n        properPosition = oppositionPositions[position];\n    }\n    return {\n        placement: properAlign !== 'center'\n            ? `${properPosition}-${properAlign}`\n            : properPosition,\n        left: properOffset.left,\n        top: properOffset.top\n    };\n}\nexport function getProperTransformOrigin(placement, overlap) {\n    if (overlap)\n        return overlapTransformOrigin[placement];\n    return transformOrigins[placement];\n}\n// ------------\n// |  offset  |\n// |          |\n// | [target] |\n// |          |\n// ------------\n// TODO: refactor it to remove dup logic\nexport function getOffset(placement, offsetRect, targetRect, offsetTopToStandardPlacement, offsetLeftToStandardPlacement, overlap) {\n    if (overlap) {\n        switch (placement) {\n            case 'bottom-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-100%)'\n                };\n            case 'bottom-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-100%)'\n                };\n            case 'top-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: ''\n                };\n            case 'top-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%)'\n                };\n            case 'right-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%)'\n                };\n            case 'right-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-100%)'\n                };\n            case 'left-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: ''\n                };\n            case 'left-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-100%)'\n                };\n            case 'top':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n                    transform: 'translateX(-50%)'\n                };\n            case 'right':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-50%)'\n                };\n            case 'left':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-50%)'\n                };\n            case 'bottom':\n            default:\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n                    transform: 'translateX(-50%) translateY(-100%)'\n                };\n        }\n    }\n    switch (placement) {\n        case 'bottom-start':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: ''\n            };\n        case 'bottom-end':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%)'\n            };\n        case 'top-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%)'\n            };\n        case 'top-end':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%) translateY(-100%)'\n            };\n        case 'right-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: ''\n            };\n        case 'right-end':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%)'\n            };\n        case 'left-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%)'\n            };\n        case 'left-end':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%) translateY(-100%)'\n            };\n        case 'top':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width / 2 +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%) translateX(-50%)'\n            };\n        case 'right':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height / 2 +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-50%)'\n            };\n        case 'left':\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height / 2 +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-50%) translateX(-100%)'\n            };\n        case 'bottom':\n        default:\n            return {\n                top: `${Math.round(targetRect.top -\n                    offsetRect.top +\n                    targetRect.height +\n                    offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left -\n                    offsetRect.left +\n                    targetRect.width / 2 +\n                    offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-50%)'\n            };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}