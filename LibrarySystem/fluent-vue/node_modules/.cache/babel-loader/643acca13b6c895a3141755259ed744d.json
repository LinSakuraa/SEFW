{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport TableHeader from './Header';\n\nfunction flatten(rowInfos, expandedRowKeys) {\n  const fRows = [];\n\n  function traverse(rs) {\n    rs.forEach(r => {\n      if (r.children && expandedRowKeys.has(r.key)) {\n        fRows.push({\n          tmNode: r,\n          striped: false,\n          key: r.key\n        });\n        traverse(r.children);\n      } else {\n        fRows.push({\n          key: r.key,\n          tmNode: r,\n          striped: false\n        });\n      }\n    });\n  }\n\n  rowInfos.forEach(rowInfo => {\n    fRows.push(rowInfo);\n    const {\n      children\n    } = rowInfo.tmNode;\n\n    if (children && expandedRowKeys.has(rowInfo.key)) {\n      traverse(children);\n    }\n  });\n  return fRows;\n}\n\nconst VirtualListItemWrapper = defineComponent({\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    cols: {\n      type: Array,\n      required: true\n    },\n    onMouseenter: Function,\n    onMouseleave: Function\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      id,\n      cols,\n      onMouseenter,\n      onMouseleave\n    } = this;\n    return h(\"table\", {\n      style: {\n        tableLayout: 'fixed'\n      },\n      class: `${clsPrefix}-data-table-table`,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), h(\"tbody\", {\n      \"data-n-id\": id,\n      class: `${clsPrefix}-data-table-tbody`\n    }, this.$slots));\n  }\n\n});\nexport default defineComponent({\n  name: 'DataTableBody',\n  props: {\n    onResize: Function,\n    showHeader: Boolean,\n    flexHeight: Boolean,\n    bodyStyle: Object\n  },\n\n  setup(props) {\n    const {\n      slots: dataTableSlots,\n      mergedExpandedRowKeysRef,\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      scrollXRef,\n      colsRef,\n      paginatedDataRef,\n      rawPaginatedDataRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      rowClassNameRef,\n      leftActiveFixedColKeyRef,\n      leftActiveFixedChildrenColKeysRef,\n      rightActiveFixedColKeyRef,\n      rightActiveFixedChildrenColKeysRef,\n      renderExpandRef,\n      hoverKeyRef,\n      summaryRef,\n      mergedSortStateRef,\n      virtualScrollRef,\n      componentId,\n      scrollPartRef,\n      mergedTableLayoutRef,\n      firstContentfulColIndexRef,\n      indentRef,\n      rowPropsRef,\n      maxHeightRef,\n      stripedRef,\n      loadingRef,\n      onLoadRef,\n      loadingKeySetRef,\n      setHeaderScrollLeft,\n      doUpdateExpandedRowKeys,\n      handleTableBodyScroll,\n      doCheck,\n      doUncheck // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(dataTableInjectionKey);\n    const scrollbarInstRef = ref(null);\n    const virtualListRef = ref(null);\n    const emptyElRef = ref(null);\n    const emptyRef = useMemo(() => paginatedDataRef.value.length === 0); // If header is not inside & empty is displayed, no table part would be\n    // shown. So to collect a body width, we need to put a ref on empty element\n\n    const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value); // If no body is shown, we shouldn't show scrollbar\n\n    const bodyShowHeaderOnlyRef = useMemo(() => {\n      return props.showHeader || emptyRef.value;\n    });\n    let lastSelectedKey = '';\n    const mergedExpandedRowKeySetRef = computed(() => {\n      return new Set(mergedExpandedRowKeysRef.value);\n    });\n\n    function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n      if (shiftKey) {\n        const lastIndex = paginatedDataRef.value.findIndex(item => item.key === lastSelectedKey);\n\n        if (lastIndex !== -1) {\n          const currentIndex = paginatedDataRef.value.findIndex(item => item.key === tmNode.key);\n          const start = Math.min(lastIndex, currentIndex);\n          const end = Math.max(lastIndex, currentIndex);\n          const rowKeysToCheck = [];\n          paginatedDataRef.value.slice(start, end + 1).forEach(r => {\n            if (!r.disabled) {\n              rowKeysToCheck.push(r.key);\n            }\n          });\n\n          if (checked) {\n            doCheck(rowKeysToCheck);\n          } else {\n            doUncheck(rowKeysToCheck);\n          }\n\n          lastSelectedKey = tmNode.key;\n          return;\n        }\n      }\n\n      if (checked) {\n        doCheck(tmNode.key);\n      } else {\n        doUncheck(tmNode.key);\n      }\n\n      lastSelectedKey = tmNode.key;\n    }\n\n    function getScrollContainer() {\n      if (!shouldDisplaySomeTablePartRef.value) {\n        const {\n          value: emptyEl\n        } = emptyElRef;\n\n        if (emptyEl) {\n          return emptyEl;\n        } else {\n          return null;\n        }\n      }\n\n      if (virtualScrollRef.value) {\n        return virtualListContainer();\n      }\n\n      const {\n        value\n      } = scrollbarInstRef;\n      if (value) return value.containerRef;\n      return null;\n    } // For table row with children, tmNode is non-nullable\n    // For table row is expandable but is not tree data, tmNode is null\n\n\n    function handleUpdateExpanded(key, tmNode) {\n      var _a;\n\n      if (loadingKeySetRef.value.has(key)) return;\n      const {\n        value: mergedExpandedRowKeys\n      } = mergedExpandedRowKeysRef;\n      const index = mergedExpandedRowKeys.indexOf(key);\n      const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n\n      if (~index) {\n        nextExpandedKeys.splice(index, 1);\n        doUpdateExpandedRowKeys(nextExpandedKeys);\n      } else {\n        if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n          loadingKeySetRef.value.add(key);\n          void ((_a = onLoadRef.value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n            const {\n              value: futureMergedExpandedRowKeys\n            } = mergedExpandedRowKeysRef;\n            const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n            const index = futureNextExpandedKeys.indexOf(key);\n\n            if (!~index) {\n              futureNextExpandedKeys.push(key);\n            }\n\n            doUpdateExpandedRowKeys(futureNextExpandedKeys);\n          }).finally(() => {\n            loadingKeySetRef.value.delete(key);\n          }));\n        } else {\n          nextExpandedKeys.push(key);\n          doUpdateExpandedRowKeys(nextExpandedKeys);\n        }\n      }\n    }\n\n    function handleMouseleaveTable() {\n      hoverKeyRef.value = null;\n    }\n\n    function handleMouseenterTable() {\n      scrollPartRef.value = 'body';\n    }\n\n    function virtualListContainer() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.listElRef;\n    }\n\n    function virtualListContent() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.itemsElRef;\n    }\n\n    function handleVirtualListScroll(e) {\n      var _a;\n\n      handleTableBodyScroll(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n\n    function handleVirtualListResize(e) {\n      var _a;\n\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n\n    const exposedMethods = {\n      getScrollContainer\n    }; // manually control shadow style to avoid rerender\n\n    const style = c([({\n      props: cProps\n    }) => {\n      const createActiveLeftFixedStyle = leftActiveFixedColKey => {\n        if (leftActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, {\n          boxShadow: 'var(--n-box-shadow-after)'\n        });\n      };\n\n      const createActiveRightFixedStyle = rightActiveFixedColKey => {\n        if (rightActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, {\n          boxShadow: 'var(--n-box-shadow-before)'\n        });\n      };\n\n      return c([createActiveLeftFixedStyle(cProps.leftActiveFixedColKey), createActiveRightFixedStyle(cProps.rightActiveFixedColKey), cProps.leftActiveFixedChildrenColKeys.map(leftActiveFixedColKey => createActiveLeftFixedStyle(leftActiveFixedColKey)), cProps.rightActiveFixedChildrenColKeys.map(rightActiveFixedColKey => createActiveRightFixedStyle(rightActiveFixedColKey))]);\n    }]);\n    let fixedStyleMounted = false;\n    watchEffect(() => {\n      const {\n        value: leftActiveFixedColKey\n      } = leftActiveFixedColKeyRef;\n      const {\n        value: leftActiveFixedChildrenColKeys\n      } = leftActiveFixedChildrenColKeysRef;\n      const {\n        value: rightActiveFixedColKey\n      } = rightActiveFixedColKeyRef;\n      const {\n        value: rightActiveFixedChildrenColKeys\n      } = rightActiveFixedChildrenColKeysRef;\n\n      if (!fixedStyleMounted && leftActiveFixedColKey === null && rightActiveFixedColKey === null) {\n        return;\n      }\n\n      const cProps = {\n        leftActiveFixedColKey,\n        leftActiveFixedChildrenColKeys,\n        rightActiveFixedColKey,\n        rightActiveFixedChildrenColKeys,\n        componentId\n      };\n      style.mount({\n        id: `n-${componentId}`,\n        force: true,\n        props: cProps,\n        anchorMetaName: cssrAnchorMetaName\n      });\n      fixedStyleMounted = true;\n    });\n    onUnmounted(() => {\n      style.unmount({\n        id: `n-${componentId}`\n      });\n    });\n    return Object.assign({\n      dataTableSlots,\n      componentId,\n      scrollbarInstRef,\n      virtualListRef,\n      emptyElRef,\n      summary: summaryRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      scrollX: scrollXRef,\n      cols: colsRef,\n      loading: loadingRef,\n      bodyShowHeaderOnly: bodyShowHeaderOnlyRef,\n      shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef,\n      empty: emptyRef,\n      paginatedDataAndInfo: computed(() => {\n        const {\n          value: striped\n        } = stripedRef;\n        let hasChildren = false;\n        const data = paginatedDataRef.value.map(striped ? (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: index % 2 === 1\n          };\n        } : tmNode => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: false\n          };\n        });\n        return {\n          data,\n          hasChildren\n        };\n      }),\n      rawPaginatedData: rawPaginatedDataRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      rowClassName: rowClassNameRef,\n      renderExpand: renderExpandRef,\n      mergedExpandedRowKeySet: mergedExpandedRowKeySetRef,\n      hoverKey: hoverKeyRef,\n      mergedSortState: mergedSortStateRef,\n      virtualScroll: virtualScrollRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      firstContentfulColIndex: firstContentfulColIndexRef,\n      indent: indentRef,\n      rowProps: rowPropsRef,\n      maxHeight: maxHeightRef,\n      loadingKeySet: loadingKeySetRef,\n      setHeaderScrollLeft,\n      handleMouseenterTable,\n      handleVirtualListScroll,\n      handleVirtualListResize,\n      handleMouseleaveTable,\n      virtualListContainer,\n      virtualListContent,\n      handleTableBodyScroll,\n      handleCheckboxUpdateChecked,\n      handleUpdateExpanded\n    }, exposedMethods);\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      scrollX,\n      mergedClsPrefix,\n      virtualScroll,\n      maxHeight,\n      mergedTableLayout,\n      flexHeight,\n      loadingKeySet,\n      onResize,\n      setHeaderScrollLeft\n    } = this;\n    const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight; // For a basic table with auto layout whose content may overflow we will\n    // make it scrollable, which differs from browser's native behavior.\n    // For native behavior, see\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n\n    const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n    const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n    const contentStyle = {\n      minWidth: formatLength(scrollX) || '100%'\n    };\n    if (scrollX) contentStyle.width = '100%';\n    const tableNode = h(NScrollbar, {\n      ref: \"scrollbarInstRef\",\n      scrollable: scrollable || isBasicAutoLayout,\n      class: `${mergedClsPrefix}-data-table-base-table-body`,\n      style: this.bodyStyle,\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      contentStyle: contentStyle,\n      container: virtualScroll ? this.virtualListContainer : undefined,\n      content: virtualScroll ? this.virtualListContent : undefined,\n      horizontalRailStyle: {\n        zIndex: 3\n      },\n      verticalRailStyle: {\n        zIndex: 3\n      },\n      xScrollable: xScrollable,\n      onScroll: virtualScroll ? undefined : this.handleTableBodyScroll,\n      internalOnUpdateScrollLeft: setHeaderScrollLeft,\n      onResize: onResize\n    }, {\n      default: () => {\n        // coordinate to pass if there are cells that cross row & col\n        const cordToPass = {}; // coordinate to related hover keys\n\n        const cordKey = {};\n        const {\n          cols,\n          paginatedDataAndInfo,\n          mergedTheme,\n          fixedColumnLeftMap,\n          fixedColumnRightMap,\n          currentPage,\n          rowClassName,\n          mergedSortState,\n          mergedExpandedRowKeySet,\n          componentId,\n          firstContentfulColIndex,\n          rowProps,\n          handleMouseenterTable,\n          handleMouseleaveTable,\n          renderExpand,\n          summary,\n          handleCheckboxUpdateChecked,\n          handleUpdateExpanded\n        } = this;\n        const {\n          length: colCount\n        } = cols;\n        let mergedData; // if there is children in data, we should expand mergedData first\n\n        const {\n          data: paginatedData,\n          hasChildren\n        } = paginatedDataAndInfo;\n        const mergedPaginationData = hasChildren ? flatten(paginatedData, mergedExpandedRowKeySet) : paginatedData;\n\n        if (summary) {\n          const summaryRows = summary(this.rawPaginatedData);\n\n          if (Array.isArray(summaryRows)) {\n            mergedData = [...mergedPaginationData, ...summaryRows.map((row, i) => ({\n              isSummaryRow: true,\n              key: `__n_summary__${i}`,\n              tmNode: {\n                rawNode: row,\n                disabled: true\n              }\n            }))];\n          } else {\n            mergedData = [...mergedPaginationData, {\n              isSummaryRow: true,\n              key: '__n_summary__',\n              tmNode: {\n                rawNode: summaryRows,\n                disabled: true\n              }\n            }];\n          }\n        } else {\n          mergedData = mergedPaginationData;\n        }\n\n        const indentStyle = hasChildren ? {\n          width: pxfy(this.indent)\n        } : undefined; // Tile the data of the expanded row\n\n        const displayedData = [];\n        mergedData.forEach(rowInfo => {\n          if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key)) {\n            displayedData.push(rowInfo, {\n              isExpandedRow: true,\n              key: `${rowInfo.key}-expand`,\n              tmNode: rowInfo.tmNode\n            });\n          } else {\n            displayedData.push(rowInfo);\n          }\n        });\n        const {\n          length: rowCount\n        } = displayedData;\n        const rowIndexToKey = {};\n        paginatedData.forEach(({\n          tmNode\n        }, rowIndex) => {\n          rowIndexToKey[rowIndex] = tmNode.key;\n        });\n\n        const renderRow = (rowInfo, rowIndex, isVirtual) => {\n          if ('isExpandedRow' in rowInfo) {\n            const {\n              tmNode: {\n                key,\n                rawNode\n              }\n            } = rowInfo;\n            return h(\"tr\", {\n              class: `${mergedClsPrefix}-data-table-tr`,\n              key: `${key}__expand`\n            }, h(\"td\", {\n              class: [`${mergedClsPrefix}-data-table-td`, `${mergedClsPrefix}-data-table-td--last-col`, rowIndex + 1 === rowCount && `${mergedClsPrefix}-data-table-td--last-row`],\n              colspan: colCount\n            }, renderExpand(rawNode, rowIndex)));\n          }\n\n          const isSummary = ('isSummaryRow' in rowInfo);\n          const striped = !isSummary && rowInfo.striped;\n          const {\n            tmNode,\n            key: rowKey\n          } = rowInfo;\n          const {\n            rawNode: rowData\n          } = tmNode;\n          const expanded = mergedExpandedRowKeySet.has(rowKey);\n          const props = rowProps ? rowProps(rowData, rowIndex) : undefined;\n          const mergedRowClassName = typeof rowClassName === 'string' ? rowClassName : createRowClassName(rowData, rowIndex, rowClassName);\n          const row = h(\"tr\", Object.assign({\n            onMouseenter: () => {\n              this.hoverKey = rowKey;\n            },\n            key: rowKey,\n            class: [`${mergedClsPrefix}-data-table-tr`, isSummary && `${mergedClsPrefix}-data-table-tr--summary`, striped && `${mergedClsPrefix}-data-table-tr--striped`, mergedRowClassName]\n          }, props), cols.map((col, colIndex) => {\n            var _a, _b, _c, _d, _e;\n\n            if (!isVirtual && rowIndex in cordToPass) {\n              const cordOfRowToPass = cordToPass[rowIndex];\n              const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n\n              if (~indexInCordOfRowToPass) {\n                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                return null;\n              }\n            } // TODO: Simplify row calculation\n\n\n            const {\n              column\n            } = col;\n            const colKey = getColKey(col);\n            const {\n              rowSpan,\n              colSpan\n            } = column;\n            const mergedColSpan = isSummary ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n            : colSpan ? colSpan(rowData, rowIndex) : 1;\n            const mergedRowSpan = isSummary ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n            : rowSpan ? rowSpan(rowData, rowIndex) : 1;\n            const isLastCol = colIndex + mergedColSpan === colCount;\n            const isLastRow = rowIndex + mergedRowSpan === rowCount;\n            const isCrossRowTd = mergedRowSpan > 1;\n\n            if (isCrossRowTd) {\n              cordKey[rowIndex] = {\n                [colIndex]: []\n              };\n            }\n\n            if (mergedColSpan > 1 || isCrossRowTd) {\n              for (let i = rowIndex; i < rowIndex + mergedRowSpan; ++i) {\n                if (isCrossRowTd) {\n                  cordKey[rowIndex][colIndex].push(rowIndexToKey[i]);\n                }\n\n                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                  if (i === rowIndex && j === colIndex) continue;\n\n                  if (!(i in cordToPass)) {\n                    cordToPass[i] = [j];\n                  } else {\n                    cordToPass[i].push(j);\n                  }\n                }\n              }\n            }\n\n            const hoverKey = isCrossRowTd ? this.hoverKey : null;\n            const {\n              ellipsis,\n              cellProps\n            } = column;\n            const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, rowIndex);\n            return h(\"td\", Object.assign({}, resolvedCellProps, {\n              key: colKey,\n              style: [{\n                textAlign: column.align || undefined,\n                left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n              }, (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''],\n              colspan: mergedColSpan,\n              rowspan: isVirtual ? undefined : mergedRowSpan,\n              \"data-col-key\": colKey,\n              class: [`${mergedClsPrefix}-data-table-td`, column.className, resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class, isSummary && `${mergedClsPrefix}-data-table-td--summary`, (hoverKey !== null && cordKey[rowIndex][colIndex].includes(hoverKey) || isColumnSorting(column, mergedSortState)) && `${mergedClsPrefix}-data-table-td--hover`, column.fixed && `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`, column.align && `${mergedClsPrefix}-data-table-td--${column.align}-align`, {\n                [`${mergedClsPrefix}-data-table-td--ellipsis`]: ellipsis === true || // don't add ellipsis class if tooltip exists\n                ellipsis && !ellipsis.tooltip,\n                [`${mergedClsPrefix}-data-table-td--selection`]: column.type === 'selection',\n                [`${mergedClsPrefix}-data-table-td--expand`]: column.type === 'expand',\n                [`${mergedClsPrefix}-data-table-td--last-col`]: isLastCol,\n                [`${mergedClsPrefix}-data-table-td--last-row`]: isLastRow\n              }]\n            }), hasChildren && colIndex === firstContentfulColIndex ? [repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-indent`,\n              style: indentStyle\n            })), isSummary || rowInfo.tmNode.isLeaf ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand-placeholder`\n            }) : h(ExpandTrigger, {\n              class: `${mergedClsPrefix}-data-table-expand-trigger`,\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              loading: loadingKeySet.has(rowInfo.key),\n              onClick: () => {\n                handleUpdateExpanded(rowKey, rowInfo.tmNode);\n              }\n            })] : null, column.type === 'selection' ? !isSummary ? h(RenderSafeCheckbox, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey)\n            }) : null : column.type === 'expand' ? !isSummary ? !column.expandable || ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData, rowIndex)) ? h(ExpandTrigger, {\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              onClick: () => handleUpdateExpanded(rowKey, null)\n            }) : null : null : h(Cell, {\n              index: rowIndex,\n              row: rowData,\n              column: column,\n              isSummary: isSummary,\n              mergedTheme: mergedTheme\n            }));\n          }));\n          return row;\n        };\n\n        if (!virtualScroll) {\n          return h(\"table\", {\n            class: `${mergedClsPrefix}-data-table-table`,\n            onMouseleave: handleMouseleaveTable,\n            onMouseenter: handleMouseenterTable,\n            style: {\n              tableLayout: this.mergedTableLayout\n            }\n          }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n            key: col.key,\n            style: col.style\n          }))), this.showHeader ? h(TableHeader, {\n            discrete: false\n          }) : null, !this.empty ? h(\"tbody\", {\n            \"data-n-id\": componentId,\n            class: `${mergedClsPrefix}-data-table-tbody`\n          }, displayedData.map((rowInfo, rowIndex) => {\n            return renderRow(rowInfo, rowIndex, false);\n          })) : null);\n        } else {\n          return h(VirtualList, {\n            ref: \"virtualListRef\",\n            items: displayedData,\n            itemSize: 28,\n            visibleItemsTag: VirtualListItemWrapper,\n            visibleItemsProps: {\n              clsPrefix: mergedClsPrefix,\n              id: componentId,\n              cols,\n              onMouseenter: handleMouseenterTable,\n              onMouseleave: handleMouseleaveTable\n            },\n            showScrollbar: false,\n            onResize: this.handleVirtualListResize,\n            onScroll: this.handleVirtualListScroll,\n            itemsStyle: contentStyle,\n            itemResizable: true\n          }, {\n            default: ({\n              item,\n              index\n            }) => renderRow(item, index, true)\n          });\n        }\n      }\n    });\n\n    if (this.empty) {\n      const createEmptyNode = () => h(\"div\", {\n        class: [`${mergedClsPrefix}-data-table-empty`, this.loading && `${mergedClsPrefix}-data-table-empty--hide`],\n        style: this.bodyStyle,\n        ref: \"emptyElRef\"\n      }, resolveSlot(this.dataTableSlots.empty, () => [h(NEmpty, {\n        theme: this.mergedTheme.peers.Empty,\n        themeOverrides: this.mergedTheme.peerOverrides.Empty\n      })]));\n\n      if (this.shouldDisplaySomeTablePart) {\n        return h(Fragment, null, tableNode, createEmptyNode());\n      } else {\n        return h(VResizeObserver, {\n          onResize: this.onResize\n        }, {\n          default: createEmptyNode\n        });\n      }\n    }\n\n    return tableNode;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/TableParts/Body.js"],"names":["h","ref","defineComponent","inject","watchEffect","onUnmounted","computed","Fragment","pxfy","repeat","VirtualList","VResizeObserver","useMemo","cssrAnchorMetaName","c","NScrollbar","formatLength","resolveSlot","NEmpty","dataTableInjectionKey","createRowClassName","getColKey","isColumnSorting","Cell","ExpandTrigger","RenderSafeCheckbox","TableHeader","flatten","rowInfos","expandedRowKeys","fRows","traverse","rs","forEach","r","children","has","key","push","tmNode","striped","rowInfo","VirtualListItemWrapper","props","clsPrefix","type","String","required","id","cols","Array","onMouseenter","Function","onMouseleave","render","style","tableLayout","class","map","col","$slots","name","onResize","showHeader","Boolean","flexHeight","bodyStyle","Object","setup","slots","dataTableSlots","mergedExpandedRowKeysRef","mergedClsPrefixRef","mergedThemeRef","scrollXRef","colsRef","paginatedDataRef","rawPaginatedDataRef","fixedColumnLeftMapRef","fixedColumnRightMapRef","mergedCurrentPageRef","rowClassNameRef","leftActiveFixedColKeyRef","leftActiveFixedChildrenColKeysRef","rightActiveFixedColKeyRef","rightActiveFixedChildrenColKeysRef","renderExpandRef","hoverKeyRef","summaryRef","mergedSortStateRef","virtualScrollRef","componentId","scrollPartRef","mergedTableLayoutRef","firstContentfulColIndexRef","indentRef","rowPropsRef","maxHeightRef","stripedRef","loadingRef","onLoadRef","loadingKeySetRef","setHeaderScrollLeft","doUpdateExpandedRowKeys","handleTableBodyScroll","doCheck","doUncheck","scrollbarInstRef","virtualListRef","emptyElRef","emptyRef","value","length","shouldDisplaySomeTablePartRef","bodyShowHeaderOnlyRef","lastSelectedKey","mergedExpandedRowKeySetRef","Set","handleCheckboxUpdateChecked","checked","shiftKey","lastIndex","findIndex","item","currentIndex","start","Math","min","end","max","rowKeysToCheck","slice","disabled","getScrollContainer","emptyEl","virtualListContainer","containerRef","handleUpdateExpanded","_a","mergedExpandedRowKeys","index","indexOf","nextExpandedKeys","from","splice","isLeaf","shallowLoaded","add","call","rawNode","then","futureMergedExpandedRowKeys","futureNextExpandedKeys","finally","delete","handleMouseleaveTable","handleMouseenterTable","listElRef","virtualListContent","itemsElRef","handleVirtualListScroll","e","sync","handleVirtualListResize","exposedMethods","cProps","createActiveLeftFixedStyle","leftActiveFixedColKey","boxShadow","createActiveRightFixedStyle","rightActiveFixedColKey","leftActiveFixedChildrenColKeys","rightActiveFixedChildrenColKeys","fixedStyleMounted","mount","force","anchorMetaName","unmount","assign","summary","mergedClsPrefix","mergedTheme","scrollX","loading","bodyShowHeaderOnly","shouldDisplaySomeTablePart","empty","paginatedDataAndInfo","hasChildren","data","rawPaginatedData","fixedColumnLeftMap","fixedColumnRightMap","currentPage","rowClassName","renderExpand","mergedExpandedRowKeySet","hoverKey","mergedSortState","virtualScroll","mergedTableLayout","firstContentfulColIndex","indent","rowProps","maxHeight","loadingKeySet","scrollable","undefined","isBasicAutoLayout","xScrollable","contentStyle","minWidth","width","tableNode","theme","peers","Scrollbar","themeOverrides","peerOverrides","container","content","horizontalRailStyle","zIndex","verticalRailStyle","onScroll","internalOnUpdateScrollLeft","default","cordToPass","cordKey","colCount","mergedData","paginatedData","mergedPaginationData","summaryRows","isArray","row","i","isSummaryRow","indentStyle","displayedData","isExpandedRow","rowCount","rowIndexToKey","rowIndex","renderRow","isVirtual","colspan","isSummary","rowKey","rowData","expanded","mergedRowClassName","colIndex","_b","_c","_d","_e","cordOfRowToPass","indexInCordOfRowToPass","column","colKey","rowSpan","colSpan","mergedColSpan","mergedRowSpan","isLastCol","isLastRow","isCrossRowTd","j","ellipsis","cellProps","resolvedCellProps","textAlign","align","left","right","rowspan","className","includes","fixed","tooltip","level","onClick","onUpdateChecked","expandable","discrete","items","itemSize","visibleItemsTag","visibleItemsProps","showScrollbar","itemsStyle","itemResizable","createEmptyNode","Empty"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport TableHeader from './Header';\nfunction flatten(rowInfos, expandedRowKeys) {\n    const fRows = [];\n    function traverse(rs) {\n        rs.forEach((r) => {\n            if (r.children && expandedRowKeys.has(r.key)) {\n                fRows.push({\n                    tmNode: r,\n                    striped: false,\n                    key: r.key\n                });\n                traverse(r.children);\n            }\n            else {\n                fRows.push({\n                    key: r.key,\n                    tmNode: r,\n                    striped: false\n                });\n            }\n        });\n    }\n    rowInfos.forEach((rowInfo) => {\n        fRows.push(rowInfo);\n        const { children } = rowInfo.tmNode;\n        if (children && expandedRowKeys.has(rowInfo.key)) {\n            traverse(children);\n        }\n    });\n    return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        id: {\n            type: String,\n            required: true\n        },\n        cols: {\n            type: Array,\n            required: true\n        },\n        onMouseenter: Function,\n        onMouseleave: Function\n    },\n    render() {\n        const { clsPrefix, id, cols, onMouseenter, onMouseleave } = this;\n        return (h(\"table\", { style: { tableLayout: 'fixed' }, class: `${clsPrefix}-data-table-table`, onMouseenter: onMouseenter, onMouseleave: onMouseleave },\n            h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n            h(\"tbody\", { \"data-n-id\": id, class: `${clsPrefix}-data-table-tbody` }, this.$slots)));\n    }\n});\nexport default defineComponent({\n    name: 'DataTableBody',\n    props: {\n        onResize: Function,\n        showHeader: Boolean,\n        flexHeight: Boolean,\n        bodyStyle: Object\n    },\n    setup(props) {\n        const { slots: dataTableSlots, mergedExpandedRowKeysRef, mergedClsPrefixRef, mergedThemeRef, scrollXRef, colsRef, paginatedDataRef, rawPaginatedDataRef, fixedColumnLeftMapRef, fixedColumnRightMapRef, mergedCurrentPageRef, rowClassNameRef, leftActiveFixedColKeyRef, leftActiveFixedChildrenColKeysRef, rightActiveFixedColKeyRef, rightActiveFixedChildrenColKeysRef, renderExpandRef, hoverKeyRef, summaryRef, mergedSortStateRef, virtualScrollRef, componentId, scrollPartRef, mergedTableLayoutRef, firstContentfulColIndexRef, indentRef, rowPropsRef, maxHeightRef, stripedRef, loadingRef, onLoadRef, loadingKeySetRef, setHeaderScrollLeft, doUpdateExpandedRowKeys, handleTableBodyScroll, doCheck, doUncheck\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        const scrollbarInstRef = ref(null);\n        const virtualListRef = ref(null);\n        const emptyElRef = ref(null);\n        const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n        // If header is not inside & empty is displayed, no table part would be\n        // shown. So to collect a body width, we need to put a ref on empty element\n        const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n        // If no body is shown, we shouldn't show scrollbar\n        const bodyShowHeaderOnlyRef = useMemo(() => {\n            return props.showHeader || emptyRef.value;\n        });\n        let lastSelectedKey = '';\n        const mergedExpandedRowKeySetRef = computed(() => {\n            return new Set(mergedExpandedRowKeysRef.value);\n        });\n        function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n            if (shiftKey) {\n                const lastIndex = paginatedDataRef.value.findIndex((item) => item.key === lastSelectedKey);\n                if (lastIndex !== -1) {\n                    const currentIndex = paginatedDataRef.value.findIndex((item) => item.key === tmNode.key);\n                    const start = Math.min(lastIndex, currentIndex);\n                    const end = Math.max(lastIndex, currentIndex);\n                    const rowKeysToCheck = [];\n                    paginatedDataRef.value.slice(start, end + 1).forEach((r) => {\n                        if (!r.disabled) {\n                            rowKeysToCheck.push(r.key);\n                        }\n                    });\n                    if (checked) {\n                        doCheck(rowKeysToCheck);\n                    }\n                    else {\n                        doUncheck(rowKeysToCheck);\n                    }\n                    lastSelectedKey = tmNode.key;\n                    return;\n                }\n            }\n            if (checked) {\n                doCheck(tmNode.key);\n            }\n            else {\n                doUncheck(tmNode.key);\n            }\n            lastSelectedKey = tmNode.key;\n        }\n        function getScrollContainer() {\n            if (!shouldDisplaySomeTablePartRef.value) {\n                const { value: emptyEl } = emptyElRef;\n                if (emptyEl) {\n                    return emptyEl;\n                }\n                else {\n                    return null;\n                }\n            }\n            if (virtualScrollRef.value) {\n                return virtualListContainer();\n            }\n            const { value } = scrollbarInstRef;\n            if (value)\n                return value.containerRef;\n            return null;\n        }\n        // For table row with children, tmNode is non-nullable\n        // For table row is expandable but is not tree data, tmNode is null\n        function handleUpdateExpanded(key, tmNode) {\n            var _a;\n            if (loadingKeySetRef.value.has(key))\n                return;\n            const { value: mergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n            const index = mergedExpandedRowKeys.indexOf(key);\n            const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n            if (~index) {\n                nextExpandedKeys.splice(index, 1);\n                doUpdateExpandedRowKeys(nextExpandedKeys);\n            }\n            else {\n                if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n                    loadingKeySetRef.value.add(key);\n                    void ((_a = onLoadRef\n                        .value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n                        const { value: futureMergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n                        const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n                        const index = futureNextExpandedKeys.indexOf(key);\n                        if (!~index) {\n                            futureNextExpandedKeys.push(key);\n                        }\n                        doUpdateExpandedRowKeys(futureNextExpandedKeys);\n                    }).finally(() => {\n                        loadingKeySetRef.value.delete(key);\n                    }));\n                }\n                else {\n                    nextExpandedKeys.push(key);\n                    doUpdateExpandedRowKeys(nextExpandedKeys);\n                }\n            }\n        }\n        function handleMouseleaveTable() {\n            hoverKeyRef.value = null;\n        }\n        function handleMouseenterTable() {\n            scrollPartRef.value = 'body';\n        }\n        function virtualListContainer() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.listElRef;\n        }\n        function virtualListContent() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.itemsElRef;\n        }\n        function handleVirtualListScroll(e) {\n            var _a;\n            handleTableBodyScroll(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        function handleVirtualListResize(e) {\n            var _a;\n            const { onResize } = props;\n            if (onResize)\n                onResize(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        const exposedMethods = {\n            getScrollContainer\n        };\n        // manually control shadow style to avoid rerender\n        const style = c([\n            ({ props: cProps }) => {\n                const createActiveLeftFixedStyle = (leftActiveFixedColKey) => {\n                    if (leftActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, { boxShadow: 'var(--n-box-shadow-after)' });\n                };\n                const createActiveRightFixedStyle = (rightActiveFixedColKey) => {\n                    if (rightActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, { boxShadow: 'var(--n-box-shadow-before)' });\n                };\n                return c([\n                    createActiveLeftFixedStyle(cProps.leftActiveFixedColKey),\n                    createActiveRightFixedStyle(cProps.rightActiveFixedColKey),\n                    cProps.leftActiveFixedChildrenColKeys.map((leftActiveFixedColKey) => createActiveLeftFixedStyle(leftActiveFixedColKey)),\n                    cProps.rightActiveFixedChildrenColKeys.map((rightActiveFixedColKey) => createActiveRightFixedStyle(rightActiveFixedColKey))\n                ]);\n            }\n        ]);\n        let fixedStyleMounted = false;\n        watchEffect(() => {\n            const { value: leftActiveFixedColKey } = leftActiveFixedColKeyRef;\n            const { value: leftActiveFixedChildrenColKeys } = leftActiveFixedChildrenColKeysRef;\n            const { value: rightActiveFixedColKey } = rightActiveFixedColKeyRef;\n            const { value: rightActiveFixedChildrenColKeys } = rightActiveFixedChildrenColKeysRef;\n            if (!fixedStyleMounted &&\n                leftActiveFixedColKey === null &&\n                rightActiveFixedColKey === null) {\n                return;\n            }\n            const cProps = {\n                leftActiveFixedColKey,\n                leftActiveFixedChildrenColKeys,\n                rightActiveFixedColKey,\n                rightActiveFixedChildrenColKeys,\n                componentId\n            };\n            style.mount({\n                id: `n-${componentId}`,\n                force: true,\n                props: cProps,\n                anchorMetaName: cssrAnchorMetaName\n            });\n            fixedStyleMounted = true;\n        });\n        onUnmounted(() => {\n            style.unmount({\n                id: `n-${componentId}`\n            });\n        });\n        return Object.assign({ dataTableSlots,\n            componentId,\n            scrollbarInstRef,\n            virtualListRef,\n            emptyElRef, summary: summaryRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: mergedThemeRef, scrollX: scrollXRef, cols: colsRef, loading: loadingRef, bodyShowHeaderOnly: bodyShowHeaderOnlyRef, shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef, empty: emptyRef, paginatedDataAndInfo: computed(() => {\n                const { value: striped } = stripedRef;\n                let hasChildren = false;\n                const data = paginatedDataRef.value.map(striped\n                    ? (tmNode, index) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: index % 2 === 1\n                        };\n                    }\n                    : (tmNode) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: false\n                        };\n                    });\n                return {\n                    data,\n                    hasChildren\n                };\n            }), rawPaginatedData: rawPaginatedDataRef, fixedColumnLeftMap: fixedColumnLeftMapRef, fixedColumnRightMap: fixedColumnRightMapRef, currentPage: mergedCurrentPageRef, rowClassName: rowClassNameRef, renderExpand: renderExpandRef, mergedExpandedRowKeySet: mergedExpandedRowKeySetRef, hoverKey: hoverKeyRef, mergedSortState: mergedSortStateRef, virtualScroll: virtualScrollRef, mergedTableLayout: mergedTableLayoutRef, firstContentfulColIndex: firstContentfulColIndexRef, indent: indentRef, rowProps: rowPropsRef, maxHeight: maxHeightRef, loadingKeySet: loadingKeySetRef, setHeaderScrollLeft,\n            handleMouseenterTable,\n            handleVirtualListScroll,\n            handleVirtualListResize,\n            handleMouseleaveTable,\n            virtualListContainer,\n            virtualListContent,\n            handleTableBodyScroll,\n            handleCheckboxUpdateChecked,\n            handleUpdateExpanded }, exposedMethods);\n    },\n    render() {\n        const { mergedTheme, scrollX, mergedClsPrefix, virtualScroll, maxHeight, mergedTableLayout, flexHeight, loadingKeySet, onResize, setHeaderScrollLeft } = this;\n        const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n        // For a basic table with auto layout whose content may overflow we will\n        // make it scrollable, which differs from browser's native behavior.\n        // For native behavior, see\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n        const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n        const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n        const contentStyle = {\n            minWidth: formatLength(scrollX) || '100%'\n        };\n        if (scrollX)\n            contentStyle.width = '100%';\n        const tableNode = (h(NScrollbar, { ref: \"scrollbarInstRef\", scrollable: scrollable || isBasicAutoLayout, class: `${mergedClsPrefix}-data-table-base-table-body`, style: this.bodyStyle, theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar, contentStyle: contentStyle, container: virtualScroll ? this.virtualListContainer : undefined, content: virtualScroll ? this.virtualListContent : undefined, horizontalRailStyle: { zIndex: 3 }, verticalRailStyle: { zIndex: 3 }, xScrollable: xScrollable, onScroll: virtualScroll ? undefined : this.handleTableBodyScroll, internalOnUpdateScrollLeft: setHeaderScrollLeft, onResize: onResize }, {\n            default: () => {\n                // coordinate to pass if there are cells that cross row & col\n                const cordToPass = {};\n                // coordinate to related hover keys\n                const cordKey = {};\n                const { cols, paginatedDataAndInfo, mergedTheme, fixedColumnLeftMap, fixedColumnRightMap, currentPage, rowClassName, mergedSortState, mergedExpandedRowKeySet, componentId, firstContentfulColIndex, rowProps, handleMouseenterTable, handleMouseleaveTable, renderExpand, summary, handleCheckboxUpdateChecked, handleUpdateExpanded } = this;\n                const { length: colCount } = cols;\n                let mergedData;\n                // if there is children in data, we should expand mergedData first\n                const { data: paginatedData, hasChildren } = paginatedDataAndInfo;\n                const mergedPaginationData = hasChildren\n                    ? flatten(paginatedData, mergedExpandedRowKeySet)\n                    : paginatedData;\n                if (summary) {\n                    const summaryRows = summary(this.rawPaginatedData);\n                    if (Array.isArray(summaryRows)) {\n                        mergedData = [\n                            ...mergedPaginationData,\n                            ...summaryRows.map((row, i) => ({\n                                isSummaryRow: true,\n                                key: `__n_summary__${i}`,\n                                tmNode: {\n                                    rawNode: row,\n                                    disabled: true\n                                }\n                            }))\n                        ];\n                    }\n                    else {\n                        mergedData = [\n                            ...mergedPaginationData,\n                            {\n                                isSummaryRow: true,\n                                key: '__n_summary__',\n                                tmNode: {\n                                    rawNode: summaryRows,\n                                    disabled: true\n                                }\n                            }\n                        ];\n                    }\n                }\n                else {\n                    mergedData = mergedPaginationData;\n                }\n                const indentStyle = hasChildren\n                    ? { width: pxfy(this.indent) }\n                    : undefined;\n                // Tile the data of the expanded row\n                const displayedData = [];\n                mergedData.forEach((rowInfo) => {\n                    if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key)) {\n                        displayedData.push(rowInfo, {\n                            isExpandedRow: true,\n                            key: `${rowInfo.key}-expand`,\n                            tmNode: rowInfo.tmNode\n                        });\n                    }\n                    else {\n                        displayedData.push(rowInfo);\n                    }\n                });\n                const { length: rowCount } = displayedData;\n                const rowIndexToKey = {};\n                paginatedData.forEach(({ tmNode }, rowIndex) => {\n                    rowIndexToKey[rowIndex] = tmNode.key;\n                });\n                const renderRow = (rowInfo, rowIndex, isVirtual) => {\n                    if ('isExpandedRow' in rowInfo) {\n                        const { tmNode: { key, rawNode } } = rowInfo;\n                        return (h(\"tr\", { class: `${mergedClsPrefix}-data-table-tr`, key: `${key}__expand` },\n                            h(\"td\", { class: [\n                                    `${mergedClsPrefix}-data-table-td`,\n                                    `${mergedClsPrefix}-data-table-td--last-col`,\n                                    rowIndex + 1 === rowCount &&\n                                        `${mergedClsPrefix}-data-table-td--last-row`\n                                ], colspan: colCount }, renderExpand(rawNode, rowIndex))));\n                    }\n                    const isSummary = 'isSummaryRow' in rowInfo;\n                    const striped = !isSummary && rowInfo.striped;\n                    const { tmNode, key: rowKey } = rowInfo;\n                    const { rawNode: rowData } = tmNode;\n                    const expanded = mergedExpandedRowKeySet.has(rowKey);\n                    const props = rowProps ? rowProps(rowData, rowIndex) : undefined;\n                    const mergedRowClassName = typeof rowClassName === 'string'\n                        ? rowClassName\n                        : createRowClassName(rowData, rowIndex, rowClassName);\n                    const row = (h(\"tr\", Object.assign({ onMouseenter: () => {\n                            this.hoverKey = rowKey;\n                        }, key: rowKey, class: [\n                            `${mergedClsPrefix}-data-table-tr`,\n                            isSummary && `${mergedClsPrefix}-data-table-tr--summary`,\n                            striped && `${mergedClsPrefix}-data-table-tr--striped`,\n                            mergedRowClassName\n                        ] }, props), cols.map((col, colIndex) => {\n                        var _a, _b, _c, _d, _e;\n                        if (!isVirtual && rowIndex in cordToPass) {\n                            const cordOfRowToPass = cordToPass[rowIndex];\n                            const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n                            if (~indexInCordOfRowToPass) {\n                                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                                return null;\n                            }\n                        }\n                        // TODO: Simplify row calculation\n                        const { column } = col;\n                        const colKey = getColKey(col);\n                        const { rowSpan, colSpan } = column;\n                        const mergedColSpan = isSummary\n                            ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n                            : colSpan\n                                ? colSpan(rowData, rowIndex)\n                                : 1;\n                        const mergedRowSpan = isSummary\n                            ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n                            : rowSpan\n                                ? rowSpan(rowData, rowIndex)\n                                : 1;\n                        const isLastCol = colIndex + mergedColSpan === colCount;\n                        const isLastRow = rowIndex + mergedRowSpan === rowCount;\n                        const isCrossRowTd = mergedRowSpan > 1;\n                        if (isCrossRowTd) {\n                            cordKey[rowIndex] = {\n                                [colIndex]: []\n                            };\n                        }\n                        if (mergedColSpan > 1 || isCrossRowTd) {\n                            for (let i = rowIndex; i < rowIndex + mergedRowSpan; ++i) {\n                                if (isCrossRowTd) {\n                                    cordKey[rowIndex][colIndex].push(rowIndexToKey[i]);\n                                }\n                                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                                    if (i === rowIndex && j === colIndex)\n                                        continue;\n                                    if (!(i in cordToPass)) {\n                                        cordToPass[i] = [j];\n                                    }\n                                    else {\n                                        cordToPass[i].push(j);\n                                    }\n                                }\n                            }\n                        }\n                        const hoverKey = isCrossRowTd ? this.hoverKey : null;\n                        const { ellipsis, cellProps } = column;\n                        const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, rowIndex);\n                        return (h(\"td\", Object.assign({}, resolvedCellProps, { key: colKey, style: [\n                                {\n                                    textAlign: column.align || undefined,\n                                    left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                                    right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n                                },\n                                (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''\n                            ], colspan: mergedColSpan, rowspan: isVirtual ? undefined : mergedRowSpan, \"data-col-key\": colKey, class: [\n                                `${mergedClsPrefix}-data-table-td`,\n                                column.className,\n                                resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class,\n                                isSummary &&\n                                    `${mergedClsPrefix}-data-table-td--summary`,\n                                ((hoverKey !== null &&\n                                    cordKey[rowIndex][colIndex].includes(hoverKey)) ||\n                                    isColumnSorting(column, mergedSortState)) &&\n                                    `${mergedClsPrefix}-data-table-td--hover`,\n                                column.fixed &&\n                                    `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`,\n                                column.align &&\n                                    `${mergedClsPrefix}-data-table-td--${column.align}-align`,\n                                {\n                                    [`${mergedClsPrefix}-data-table-td--ellipsis`]: ellipsis === true ||\n                                        // don't add ellipsis class if tooltip exists\n                                        (ellipsis && !ellipsis.tooltip),\n                                    [`${mergedClsPrefix}-data-table-td--selection`]: column.type === 'selection',\n                                    [`${mergedClsPrefix}-data-table-td--expand`]: column.type === 'expand',\n                                    [`${mergedClsPrefix}-data-table-td--last-col`]: isLastCol,\n                                    [`${mergedClsPrefix}-data-table-td--last-row`]: isLastRow\n                                }\n                            ] }),\n                            hasChildren && colIndex === firstContentfulColIndex\n                                ? [\n                                    repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", { class: `${mergedClsPrefix}-data-table-indent`, style: indentStyle })),\n                                    isSummary || rowInfo.tmNode.isLeaf ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-expand-placeholder` })) : (h(ExpandTrigger, { class: `${mergedClsPrefix}-data-table-expand-trigger`, clsPrefix: mergedClsPrefix, expanded: expanded, loading: loadingKeySet.has(rowInfo.key), onClick: () => {\n                                            handleUpdateExpanded(rowKey, rowInfo.tmNode);\n                                        } }))\n                                ]\n                                : null,\n                            column.type === 'selection' ? (!isSummary ? (h(RenderSafeCheckbox, { key: currentPage, rowKey: rowKey, disabled: rowInfo.tmNode.disabled, onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey) })) : null) : column.type === 'expand' ? (!isSummary ? (!column.expandable ||\n                                ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData, rowIndex)) ? (h(ExpandTrigger, { clsPrefix: mergedClsPrefix, expanded: expanded, onClick: () => handleUpdateExpanded(rowKey, null) })) : null) : null) : (h(Cell, { index: rowIndex, row: rowData, column: column, isSummary: isSummary, mergedTheme: mergedTheme }))));\n                    })));\n                    return row;\n                };\n                if (!virtualScroll) {\n                    return (h(\"table\", { class: `${mergedClsPrefix}-data-table-table`, onMouseleave: handleMouseleaveTable, onMouseenter: handleMouseenterTable, style: {\n                            tableLayout: this.mergedTableLayout\n                        } },\n                        h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n                        this.showHeader ? h(TableHeader, { discrete: false }) : null,\n                        !this.empty ? (h(\"tbody\", { \"data-n-id\": componentId, class: `${mergedClsPrefix}-data-table-tbody` }, displayedData.map((rowInfo, rowIndex) => {\n                            return renderRow(rowInfo, rowIndex, false);\n                        }))) : null));\n                }\n                else {\n                    return (h(VirtualList, { ref: \"virtualListRef\", items: displayedData, itemSize: 28, visibleItemsTag: VirtualListItemWrapper, visibleItemsProps: {\n                            clsPrefix: mergedClsPrefix,\n                            id: componentId,\n                            cols,\n                            onMouseenter: handleMouseenterTable,\n                            onMouseleave: handleMouseleaveTable\n                        }, showScrollbar: false, onResize: this.handleVirtualListResize, onScroll: this.handleVirtualListScroll, itemsStyle: contentStyle, itemResizable: true }, {\n                        default: ({ item, index }) => renderRow(item, index, true)\n                    }));\n                }\n            }\n        }));\n        if (this.empty) {\n            const createEmptyNode = () => (h(\"div\", { class: [\n                    `${mergedClsPrefix}-data-table-empty`,\n                    this.loading && `${mergedClsPrefix}-data-table-empty--hide`\n                ], style: this.bodyStyle, ref: \"emptyElRef\" }, resolveSlot(this.dataTableSlots.empty, () => [\n                h(NEmpty, { theme: this.mergedTheme.peers.Empty, themeOverrides: this.mergedTheme.peerOverrides.Empty })\n            ])));\n            if (this.shouldDisplaySomeTablePart) {\n                return (h(Fragment, null,\n                    tableNode,\n                    createEmptyNode()));\n            }\n            else {\n                return (h(VResizeObserver, { onResize: this.onResize }, { default: createEmptyNode }));\n            }\n        }\n        return tableNode;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}