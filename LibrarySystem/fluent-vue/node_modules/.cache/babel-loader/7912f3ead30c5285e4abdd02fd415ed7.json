{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, booleanConverter } from \"@microsoft/fast-element\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { FlipperDirection } from \"./flipper.options\";\nexport { FlipperDirection };\n/**\n * A Flipper Custom HTML Element.\n * Flippers are a form of button that implies directional content navigation, such as in a carousel.\n *\n * @public\n */\n\nexport class Flipper extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.\n     *\n     * @public\n     * @defaultValue - true\n     * @remarks\n     * HTML Attribute: aria-hidden\n     */\n\n    this.hiddenFromAT = true;\n    /**\n     * The direction that the flipper implies navigating.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: direction\n     */\n\n    this.direction = FlipperDirection.next;\n  }\n  /**\n   * Simulate a click event when the flipper has focus and the user hits enter or space keys\n   * Blur focus if the user hits escape key\n   * @param e - Keyboard event\n   * @public\n   */\n\n\n  keyupHandler(e) {\n    if (!this.hiddenFromAT) {\n      const key = e.key;\n\n      if (key === \"Enter\") {\n        this.$emit(\"click\", e);\n      }\n\n      if (key === \"Escape\") {\n        this.blur();\n      }\n    }\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], Flipper.prototype, \"disabled\", void 0);\n\n__decorate([attr({\n  attribute: \"aria-hidden\",\n  converter: booleanConverter\n})], Flipper.prototype, \"hiddenFromAT\", void 0);\n\n__decorate([attr], Flipper.prototype, \"direction\", void 0);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/flipper/flipper.js"],"names":["__decorate","attr","booleanConverter","FoundationElement","FlipperDirection","Flipper","constructor","arguments","hiddenFromAT","direction","next","keyupHandler","e","key","$emit","blur","mode","prototype","attribute","converter"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,yBAAvC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASA,gBAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAN,SAAsBF,iBAAtB,CAAwC;AAC3CG,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoB,IAApB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiBL,gBAAgB,CAACM,IAAlC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACC,CAAD,EAAI;AACZ,QAAI,CAAC,KAAKJ,YAAV,EAAwB;AACpB,YAAMK,GAAG,GAAGD,CAAC,CAACC,GAAd;;AACA,UAAIA,GAAG,KAAK,OAAZ,EAAqB;AACjB,aAAKC,KAAL,CAAW,OAAX,EAAoBF,CAApB;AACH;;AACD,UAAIC,GAAG,KAAK,QAAZ,EAAsB;AAClB,aAAKE,IAAL;AACH;AACJ;AACJ;;AArC0C;;AAuC/Cf,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEe,EAAAA,IAAI,EAAE;AAAR,CAAD,CADG,CAAD,EAEPX,OAAO,CAACY,SAFD,EAEY,UAFZ,EAEwB,KAAK,CAF7B,CAAV;;AAGAjB,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEiB,EAAAA,SAAS,EAAE,aAAb;AAA4BC,EAAAA,SAAS,EAAEjB;AAAvC,CAAD,CADG,CAAD,EAEPG,OAAO,CAACY,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAjB,UAAU,CAAC,CACPC,IADO,CAAD,EAEPI,OAAO,CAACY,SAFD,EAEY,WAFZ,EAEyB,KAAK,CAF9B,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, booleanConverter } from \"@microsoft/fast-element\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { FlipperDirection } from \"./flipper.options\";\nexport { FlipperDirection };\n/**\n * A Flipper Custom HTML Element.\n * Flippers are a form of button that implies directional content navigation, such as in a carousel.\n *\n * @public\n */\nexport class Flipper extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.\n         *\n         * @public\n         * @defaultValue - true\n         * @remarks\n         * HTML Attribute: aria-hidden\n         */\n        this.hiddenFromAT = true;\n        /**\n         * The direction that the flipper implies navigating.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: direction\n         */\n        this.direction = FlipperDirection.next;\n    }\n    /**\n     * Simulate a click event when the flipper has focus and the user hits enter or space keys\n     * Blur focus if the user hits escape key\n     * @param e - Keyboard event\n     * @public\n     */\n    keyupHandler(e) {\n        if (!this.hiddenFromAT) {\n            const key = e.key;\n            if (key === \"Enter\") {\n                this.$emit(\"click\", e);\n            }\n            if (key === \"Escape\") {\n                this.blur();\n            }\n        }\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], Flipper.prototype, \"disabled\", void 0);\n__decorate([\n    attr({ attribute: \"aria-hidden\", converter: booleanConverter })\n], Flipper.prototype, \"hiddenFromAT\", void 0);\n__decorate([\n    attr\n], Flipper.prototype, \"direction\", void 0);\n"]},"metadata":{},"sourceType":"module"}