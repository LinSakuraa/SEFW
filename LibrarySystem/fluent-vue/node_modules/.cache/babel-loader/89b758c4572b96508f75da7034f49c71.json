{"ast":null,"code":"import { h, defineComponent, inject, getCurrentInstance } from 'vue';\nimport { pxfy } from 'seemly';\nimport { keysOf } from '../../_utils';\nimport { gridInjectionKey } from './config';\nexport const defaultSpan = 1;\nexport const gridItemProps = {\n  span: {\n    type: [Number, String],\n    default: defaultSpan\n  },\n  offset: {\n    type: [Number, String],\n    default: 0\n  },\n  suffix: Boolean,\n  // private props\n  privateOffset: Number,\n  privateSpan: Number,\n  privateColStart: Number,\n  privateShow: {\n    type: Boolean,\n    default: true\n  }\n};\nexport const gridItemPropKeys = keysOf(gridItemProps);\nexport default defineComponent({\n  __GRID_ITEM__: true,\n  name: 'GridItem',\n  alias: ['Gi'],\n  props: gridItemProps,\n\n  setup() {\n    const {\n      xGapRef,\n      itemStyleRef,\n      overflowRef // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(gridInjectionKey);\n    const self = getCurrentInstance();\n    return {\n      overflow: overflowRef,\n      itemStyle: itemStyleRef,\n      deriveStyle: () => {\n        // Here is quite a hack, I hope there is a better way to solve it\n        const {\n          privateSpan = defaultSpan,\n          privateShow = true,\n          privateColStart = undefined,\n          privateOffset = 0 // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        } = self.vnode.props;\n        const {\n          value: xGap\n        } = xGapRef;\n        const mergedXGap = pxfy(xGap || 0);\n        return {\n          display: !privateShow ? 'none' : '',\n          gridColumn: `${privateColStart !== null && privateColStart !== void 0 ? privateColStart : `span ${privateSpan}`} / span ${privateSpan}`,\n          marginLeft: privateOffset ? `calc((100% - (${privateSpan} - 1) * ${mergedXGap}) / ${privateSpan} * ${privateOffset} + ${mergedXGap} * ${privateOffset})` : ''\n        };\n      }\n    };\n  },\n\n  render() {\n    var _a, _b;\n\n    return h(\"div\", {\n      style: [this.itemStyle, this.deriveStyle()]\n    }, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      overflow: this.overflow\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/grid/src/GridItem.js"],"names":["h","defineComponent","inject","getCurrentInstance","pxfy","keysOf","gridInjectionKey","defaultSpan","gridItemProps","span","type","Number","String","default","offset","suffix","Boolean","privateOffset","privateSpan","privateColStart","privateShow","gridItemPropKeys","__GRID_ITEM__","name","alias","props","setup","xGapRef","itemStyleRef","overflowRef","self","overflow","itemStyle","deriveStyle","undefined","vnode","value","xGap","mergedXGap","display","gridColumn","marginLeft","render","_a","_b","style","$slots","call"],"mappings":"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","sourcesContent":["import { h, defineComponent, inject, getCurrentInstance } from 'vue';\nimport { pxfy } from 'seemly';\nimport { keysOf } from '../../_utils';\nimport { gridInjectionKey } from './config';\nexport const defaultSpan = 1;\nexport const gridItemProps = {\n    span: {\n        type: [Number, String],\n        default: defaultSpan\n    },\n    offset: {\n        type: [Number, String],\n        default: 0\n    },\n    suffix: Boolean,\n    // private props\n    privateOffset: Number,\n    privateSpan: Number,\n    privateColStart: Number,\n    privateShow: {\n        type: Boolean,\n        default: true\n    }\n};\nexport const gridItemPropKeys = keysOf(gridItemProps);\nexport default defineComponent({\n    __GRID_ITEM__: true,\n    name: 'GridItem',\n    alias: ['Gi'],\n    props: gridItemProps,\n    setup() {\n        const { xGapRef, itemStyleRef, overflowRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(gridInjectionKey);\n        const self = getCurrentInstance();\n        return {\n            overflow: overflowRef,\n            itemStyle: itemStyleRef,\n            deriveStyle: () => {\n                // Here is quite a hack, I hope there is a better way to solve it\n                const { privateSpan = defaultSpan, privateShow = true, privateColStart = undefined, privateOffset = 0\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                 } = self.vnode.props;\n                const { value: xGap } = xGapRef;\n                const mergedXGap = pxfy(xGap || 0);\n                return {\n                    display: !privateShow ? 'none' : '',\n                    gridColumn: `${privateColStart !== null && privateColStart !== void 0 ? privateColStart : `span ${privateSpan}`} / span ${privateSpan}`,\n                    marginLeft: privateOffset\n                        ? `calc((100% - (${privateSpan} - 1) * ${mergedXGap}) / ${privateSpan} * ${privateOffset} + ${mergedXGap} * ${privateOffset})`\n                        : ''\n                };\n            }\n        };\n    },\n    render() {\n        var _a, _b;\n        return (h(\"div\", { style: [this.itemStyle, this.deriveStyle()] }, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, { overflow: this.overflow })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}