{"ast":null,"code":"import { h, defineComponent, ref, inject, TransitionGroup, Transition, Fragment } from 'vue';\nimport { VirtualList } from 'vueuc';\nimport { NEmpty } from '../../empty';\nimport { NScrollbar } from '../../_internal';\nimport { transferInjectionKey } from './interface';\nimport NTransferListItem from './TransferListItem';\nexport default defineComponent({\n  name: 'TransferList',\n  props: {\n    virtualScroll: {\n      type: Boolean,\n      required: true\n    },\n    itemSize: {\n      type: Number,\n      required: true\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    disabled: {\n      type: Boolean,\n      required: true\n    },\n    isMounted: {\n      type: Boolean,\n      required: true\n    },\n    isInputing: {\n      type: Boolean,\n      required: true\n    },\n    source: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const {\n      mergedThemeRef,\n      mergedClsPrefixRef\n    } = inject(transferInjectionKey);\n    const scrollerInstRef = ref(null);\n    const vlInstRef = ref(null);\n\n    function syncVLScroller() {\n      var _a;\n\n      (_a = scrollerInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n\n    function scrollContainer() {\n      const {\n        value\n      } = vlInstRef;\n      if (!value) return null;\n      const {\n        listElRef\n      } = value;\n      return listElRef;\n    }\n\n    function scrollContent() {\n      const {\n        value\n      } = vlInstRef;\n      if (!value) return null;\n      const {\n        itemsElRef\n      } = value;\n      return itemsElRef;\n    }\n\n    return {\n      mergedTheme: mergedThemeRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      scrollerInstRef,\n      vlInstRef,\n      syncVLScroller,\n      scrollContainer,\n      scrollContent\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      mergedClsPrefix,\n      virtualScroll,\n      syncVLScroller\n    } = this;\n    return h(Fragment, null, h(NScrollbar, {\n      ref: \"scrollerInstRef\",\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      container: virtualScroll ? this.scrollContainer : undefined,\n      content: virtualScroll ? this.scrollContent : undefined\n    }, {\n      default: () => virtualScroll ? h(VirtualList, {\n        ref: \"vlInstRef\",\n        style: {\n          height: '100%'\n        },\n        class: `${mergedClsPrefix}-transfer-list-content`,\n        items: this.options,\n        itemSize: this.itemSize,\n        showScrollbar: false,\n        onResize: syncVLScroller,\n        onScroll: syncVLScroller,\n        keyField: \"value\"\n      }, {\n        default: ({\n          item\n        }) => {\n          const {\n            source,\n            disabled\n          } = this;\n          return h(NTransferListItem, {\n            source: source,\n            key: item.value,\n            value: item.value,\n            disabled: item.disabled || disabled,\n            label: item.label\n          });\n        }\n      }) : h(\"div\", {\n        class: `${mergedClsPrefix}-transfer-list-content`\n      }, h(TransitionGroup, {\n        name: \"item\",\n        appear: this.isMounted,\n        css: !this.isInputing\n      }, {\n        default: () => {\n          const {\n            source,\n            disabled\n          } = this;\n          return this.options.map(option => h(NTransferListItem, {\n            source: source,\n            key: option.value,\n            value: option.value,\n            disabled: option.disabled || disabled,\n            label: option.label\n          }));\n        }\n      }))\n    }), h(Transition, {\n      name: \"fade-in-transition\",\n      appear: this.isMounted,\n      css: !this.isInputing\n    }, {\n      default: () => this.options.length ? null : h(NEmpty, {\n        theme: mergedTheme.peers.Empty,\n        themeOverrides: mergedTheme.peerOverrides.Empty\n      })\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/transfer/src/TransferList.js"],"names":["h","defineComponent","ref","inject","TransitionGroup","Transition","Fragment","VirtualList","NEmpty","NScrollbar","transferInjectionKey","NTransferListItem","name","props","virtualScroll","type","Boolean","required","itemSize","Number","options","Array","disabled","isMounted","isInputing","source","default","setup","mergedThemeRef","mergedClsPrefixRef","scrollerInstRef","vlInstRef","syncVLScroller","_a","value","sync","scrollContainer","listElRef","scrollContent","itemsElRef","mergedTheme","mergedClsPrefix","render","theme","peers","Scrollbar","themeOverrides","peerOverrides","container","undefined","content","style","height","class","items","showScrollbar","onResize","onScroll","keyField","item","key","label","appear","css","map","option","length","Empty"],"mappings":"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","sourcesContent":["import { h, defineComponent, ref, inject, TransitionGroup, Transition, Fragment } from 'vue';\nimport { VirtualList } from 'vueuc';\nimport { NEmpty } from '../../empty';\nimport { NScrollbar } from '../../_internal';\nimport { transferInjectionKey } from './interface';\nimport NTransferListItem from './TransferListItem';\nexport default defineComponent({\n    name: 'TransferList',\n    props: {\n        virtualScroll: {\n            type: Boolean,\n            required: true\n        },\n        itemSize: {\n            type: Number,\n            required: true\n        },\n        options: {\n            type: Array,\n            required: true\n        },\n        disabled: {\n            type: Boolean,\n            required: true\n        },\n        isMounted: {\n            type: Boolean,\n            required: true\n        },\n        isInputing: {\n            type: Boolean,\n            required: true\n        },\n        source: {\n            type: Boolean,\n            default: false\n        }\n    },\n    setup() {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { mergedThemeRef, mergedClsPrefixRef } = inject(transferInjectionKey);\n        const scrollerInstRef = ref(null);\n        const vlInstRef = ref(null);\n        function syncVLScroller() {\n            var _a;\n            (_a = scrollerInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        function scrollContainer() {\n            const { value } = vlInstRef;\n            if (!value)\n                return null;\n            const { listElRef } = value;\n            return listElRef;\n        }\n        function scrollContent() {\n            const { value } = vlInstRef;\n            if (!value)\n                return null;\n            const { itemsElRef } = value;\n            return itemsElRef;\n        }\n        return {\n            mergedTheme: mergedThemeRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            scrollerInstRef,\n            vlInstRef,\n            syncVLScroller,\n            scrollContainer,\n            scrollContent\n        };\n    },\n    render() {\n        const { mergedTheme, mergedClsPrefix, virtualScroll, syncVLScroller } = this;\n        return (h(Fragment, null,\n            h(NScrollbar, { ref: \"scrollerInstRef\", theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar, container: virtualScroll ? this.scrollContainer : undefined, content: virtualScroll ? this.scrollContent : undefined }, {\n                default: () => virtualScroll ? (h(VirtualList, { ref: \"vlInstRef\", style: { height: '100%' }, class: `${mergedClsPrefix}-transfer-list-content`, items: this.options, itemSize: this.itemSize, showScrollbar: false, onResize: syncVLScroller, onScroll: syncVLScroller, keyField: \"value\" }, {\n                    default: ({ item }) => {\n                        const { source, disabled } = this;\n                        return (h(NTransferListItem, { source: source, key: item.value, value: item.value, disabled: item.disabled || disabled, label: item.label }));\n                    }\n                })) : (h(\"div\", { class: `${mergedClsPrefix}-transfer-list-content` },\n                    h(TransitionGroup, { name: \"item\", appear: this.isMounted, css: !this.isInputing }, {\n                        default: () => {\n                            const { source, disabled } = this;\n                            return this.options.map((option) => (h(NTransferListItem, { source: source, key: option.value, value: option.value, disabled: option.disabled || disabled, label: option.label })));\n                        }\n                    })))\n            }),\n            h(Transition, { name: \"fade-in-transition\", appear: this.isMounted, css: !this.isInputing }, {\n                default: () => this.options.length ? null : (h(NEmpty, { theme: mergedTheme.peers.Empty, themeOverrides: mergedTheme.peerOverrides.Empty }))\n            })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}