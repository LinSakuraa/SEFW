{"ast":null,"code":"/* eslint-disable @typescript-eslint/prefer-ts-expect-error */\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nimport hash from './hash';\nimport { render } from './render';\nimport { createElement, queryElement, removeElement } from './utils';\n\nif (typeof window !== 'undefined') {\n  window.__cssrContext = {};\n}\n\nexport function unmount(intance, node, id) {\n  const {\n    els\n  } = node; // If id is undefined, unmount all styles\n\n  if (id === undefined) {\n    els.forEach(removeElement);\n    node.els = [];\n  } else {\n    const target = queryElement(id); // eslint-disable-next-line\n\n    if (target && els.includes(target)) {\n      removeElement(target);\n      node.els = els.filter(el => el !== target);\n    }\n  }\n}\n\nfunction addElementToList(els, target) {\n  els.push(target);\n}\n\nfunction mount(instance, node, id, props, head, silent, force, anchorMetaName, ssrAdapter // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n) {\n  if (silent && !ssrAdapter) {\n    if (id === undefined) {\n      // it is possible to use hash to get rid of the requirements of id\n      // if you are interested in it, please create a pr\n      // i have no time to impl it\n      console.error('[css-render/mount]: `id` is required in `silent` mode.');\n      return;\n    }\n\n    const cssrContext = window.__cssrContext;\n\n    if (!cssrContext[id]) {\n      cssrContext[id] = true;\n      render(node, instance, props, silent);\n    }\n\n    return;\n  }\n\n  let style;\n\n  if (id === undefined) {\n    style = node.render(props);\n    id = hash(style);\n  }\n\n  if (ssrAdapter) {\n    ssrAdapter.adapter(id, style !== null && style !== void 0 ? style : node.render(props));\n    return;\n  }\n\n  const queriedTarget = queryElement(id);\n\n  if (queriedTarget !== null && !force) {\n    return queriedTarget;\n  }\n\n  const target = queriedTarget !== null && queriedTarget !== void 0 ? queriedTarget : createElement(id);\n  if (style === undefined) style = node.render(props);\n  target.textContent = style;\n  if (queriedTarget !== null) return queriedTarget;\n\n  if (anchorMetaName) {\n    const anchorMetaEl = document.head.querySelector(`meta[name=\"${anchorMetaName}\"]`);\n\n    if (anchorMetaEl) {\n      document.head.insertBefore(target, anchorMetaEl);\n      addElementToList(node.els, target);\n      return target;\n    }\n  }\n\n  if (head) {\n    document.head.insertBefore(target, document.head.querySelector('style, link'));\n  } else {\n    document.head.appendChild(target);\n  }\n\n  addElementToList(node.els, target);\n  return target;\n}\n\nexport { mount };","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/css-render/esm/mount.js"],"names":["hash","render","createElement","queryElement","removeElement","window","__cssrContext","unmount","intance","node","id","els","undefined","forEach","target","includes","filter","el","addElementToList","push","mount","instance","props","head","silent","force","anchorMetaName","ssrAdapter","console","error","cssrContext","style","adapter","queriedTarget","textContent","anchorMetaEl","document","querySelector","insertBefore","appendChild"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/prefer-ts-expect-error */\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nimport hash from './hash';\nimport { render } from './render';\nimport { createElement, queryElement, removeElement } from './utils';\nif (typeof window !== 'undefined') {\n    window.__cssrContext = {};\n}\nexport function unmount(intance, node, id) {\n    const { els } = node;\n    // If id is undefined, unmount all styles\n    if (id === undefined) {\n        els.forEach(removeElement);\n        node.els = [];\n    }\n    else {\n        const target = queryElement(id);\n        // eslint-disable-next-line\n        if (target && els.includes(target)) {\n            removeElement(target);\n            node.els = els.filter((el) => el !== target);\n        }\n    }\n}\nfunction addElementToList(els, target) {\n    els.push(target);\n}\nfunction mount(instance, node, id, props, head, silent, force, anchorMetaName, ssrAdapter\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n) {\n    if (silent && !ssrAdapter) {\n        if (id === undefined) {\n            // it is possible to use hash to get rid of the requirements of id\n            // if you are interested in it, please create a pr\n            // i have no time to impl it\n            console.error('[css-render/mount]: `id` is required in `silent` mode.');\n            return;\n        }\n        const cssrContext = window.__cssrContext;\n        if (!cssrContext[id]) {\n            cssrContext[id] = true;\n            render(node, instance, props, silent);\n        }\n        return;\n    }\n    let style;\n    if (id === undefined) {\n        style = node.render(props);\n        id = hash(style);\n    }\n    if (ssrAdapter) {\n        ssrAdapter.adapter(id, style !== null && style !== void 0 ? style : node.render(props));\n        return;\n    }\n    const queriedTarget = queryElement(id);\n    if (queriedTarget !== null && !force) {\n        return queriedTarget;\n    }\n    const target = queriedTarget !== null && queriedTarget !== void 0 ? queriedTarget : createElement(id);\n    if (style === undefined)\n        style = node.render(props);\n    target.textContent = style;\n    if (queriedTarget !== null)\n        return queriedTarget;\n    if (anchorMetaName) {\n        const anchorMetaEl = document.head.querySelector(`meta[name=\"${anchorMetaName}\"]`);\n        if (anchorMetaEl) {\n            document.head.insertBefore(target, anchorMetaEl);\n            addElementToList(node.els, target);\n            return target;\n        }\n    }\n    if (head) {\n        document.head.insertBefore(target, document.head.querySelector('style, link'));\n    }\n    else {\n        document.head.appendChild(target);\n    }\n    addElementToList(node.els, target);\n    return target;\n}\nexport { mount };\n"]},"metadata":{},"sourceType":"module"}