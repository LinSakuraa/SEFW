{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, computed, defineComponent, inject, toRef, watch, nextTick, watchEffect } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { happensIn } from 'seemly';\nimport { tmOptions } from '../../select/src/utils';\nimport { useConfig } from '../../_mixins';\nimport { NInternalSelectMenu } from '../../_internal';\nimport { call, keysOf, warn } from '../../_utils';\nimport { popselectInjectionKey } from './interface';\nexport const panelProps = {\n  multiple: Boolean,\n  value: {\n    type: [String, Number, Array],\n    default: null\n  },\n  cancelable: Boolean,\n  options: {\n    type: Array,\n    default: () => []\n  },\n  size: {\n    type: String,\n    default: 'medium'\n  },\n  scrollable: Boolean,\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  onMouseenter: Function,\n  onMouseleave: Function,\n  renderLabel: Function,\n  // deprecated\n  onChange: [Function, Array]\n};\nexport const panelPropKeys = keysOf(panelProps);\nexport default defineComponent({\n  name: 'PopselectPanel',\n  props: panelProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange !== undefined) {\n          warn('popselect', '`on-change` is deprecated, please use `on-update:value` instead.');\n        }\n      });\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    const NPopselect = inject(popselectInjectionKey);\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const treeMateRef = computed(() => {\n      return createTreeMate(props.options, tmOptions);\n    });\n\n    function doUpdateValue(value, option) {\n      const {\n        onUpdateValue,\n        'onUpdate:value': _onUpdateValue,\n        onChange\n      } = props;\n      if (onUpdateValue) call(onUpdateValue, value, option);\n\n      if (_onUpdateValue) {\n        call(_onUpdateValue, value, option);\n      }\n\n      if (onChange) call(onChange, value, option);\n    }\n\n    function handleToggle(tmNode) {\n      toggle(tmNode.key);\n    }\n\n    function handleMenuMousedown(e) {\n      if (!happensIn(e, 'action')) e.preventDefault();\n    }\n\n    function toggle(value) {\n      const {\n        value: {\n          getNode\n        }\n      } = treeMateRef;\n\n      if (props.multiple) {\n        if (Array.isArray(props.value)) {\n          const newValue = [];\n          const newOptions = [];\n          let shouldAddValue = true;\n          props.value.forEach(v => {\n            if (v === value) {\n              shouldAddValue = false;\n              return;\n            }\n\n            const tmNode = getNode(v);\n\n            if (tmNode) {\n              newValue.push(tmNode.key);\n              newOptions.push(tmNode.rawNode);\n            }\n          });\n\n          if (shouldAddValue) {\n            newValue.push(value);\n            newOptions.push(getNode(value).rawNode);\n          }\n\n          doUpdateValue(newValue, newOptions);\n        } else {\n          const tmNode = getNode(value);\n\n          if (tmNode) {\n            doUpdateValue([value], [tmNode.rawNode]);\n          }\n        }\n      } else {\n        if (props.value === value && props.cancelable) {\n          doUpdateValue(null, null);\n        } else {\n          const tmNode = getNode(value);\n\n          if (tmNode) {\n            doUpdateValue(value, tmNode.rawNode);\n          }\n\n          NPopselect.setShow(false);\n        }\n      }\n\n      void nextTick(() => {\n        NPopselect.syncPosition();\n      });\n    }\n\n    watch(toRef(props, 'options'), () => {\n      void nextTick(() => {\n        NPopselect.syncPosition();\n      });\n    });\n    return {\n      mergedTheme: NPopselect.mergedThemeRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      treeMate: treeMateRef,\n      handleToggle,\n      handleMenuMousedown\n    };\n  },\n\n  render() {\n    return h(NInternalSelectMenu, {\n      clsPrefix: this.mergedClsPrefix,\n      focusable: true,\n      theme: this.mergedTheme.peers.InternalSelectMenu,\n      themeOverrides: this.mergedTheme.peerOverrides.InternalSelectMenu,\n      multiple: this.multiple,\n      treeMate: this.treeMate,\n      size: this.size,\n      value: this.value,\n      virtualScroll: false,\n      scrollable: this.scrollable,\n      renderLabel: this.renderLabel,\n      onToggle: this.handleToggle,\n      onMouseenter: this.onMouseenter,\n      onMouseleave: this.onMouseenter,\n      onMousedown: this.handleMenuMousedown\n    }, {\n      action: () => {\n        var _a, _b;\n\n        return ((_b = (_a = this.$slots).action) === null || _b === void 0 ? void 0 : _b.call(_a)) || [];\n      },\n      empty: () => {\n        var _a, _b;\n\n        return ((_b = (_a = this.$slots).empty) === null || _b === void 0 ? void 0 : _b.call(_a)) || [];\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/popselect/src/PopselectPanel.js"],"names":["h","computed","defineComponent","inject","toRef","watch","nextTick","watchEffect","createTreeMate","happensIn","tmOptions","useConfig","NInternalSelectMenu","call","keysOf","warn","popselectInjectionKey","panelProps","multiple","Boolean","value","type","String","Number","Array","default","cancelable","options","size","scrollable","Function","onUpdateValue","onMouseenter","onMouseleave","renderLabel","onChange","panelPropKeys","name","props","setup","process","env","NODE_ENV","undefined","NPopselect","mergedClsPrefixRef","treeMateRef","doUpdateValue","option","_onUpdateValue","handleToggle","tmNode","toggle","key","handleMenuMousedown","e","preventDefault","getNode","isArray","newValue","newOptions","shouldAddValue","forEach","v","push","rawNode","setShow","syncPosition","mergedTheme","mergedThemeRef","mergedClsPrefix","treeMate","render","clsPrefix","focusable","theme","peers","InternalSelectMenu","themeOverrides","peerOverrides","virtualScroll","onToggle","onMousedown","action","_a","_b","$slots","empty"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, computed, defineComponent, inject, toRef, watch, nextTick, watchEffect } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { happensIn } from 'seemly';\nimport { tmOptions } from '../../select/src/utils';\nimport { useConfig } from '../../_mixins';\nimport { NInternalSelectMenu } from '../../_internal';\nimport { call, keysOf, warn } from '../../_utils';\nimport { popselectInjectionKey } from './interface';\nexport const panelProps = {\n    multiple: Boolean,\n    value: {\n        type: [String, Number, Array],\n        default: null\n    },\n    cancelable: Boolean,\n    options: {\n        type: Array,\n        default: () => []\n    },\n    size: {\n        type: String,\n        default: 'medium'\n    },\n    scrollable: Boolean,\n    'onUpdate:value': [Function, Array],\n    onUpdateValue: [Function, Array],\n    onMouseenter: Function,\n    onMouseleave: Function,\n    renderLabel: Function,\n    // deprecated\n    onChange: [Function, Array]\n};\nexport const panelPropKeys = keysOf(panelProps);\nexport default defineComponent({\n    name: 'PopselectPanel',\n    props: panelProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.onChange !== undefined) {\n                    warn('popselect', '`on-change` is deprecated, please use `on-update:value` instead.');\n                }\n            });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NPopselect = inject(popselectInjectionKey);\n        const { mergedClsPrefixRef } = useConfig(props);\n        const treeMateRef = computed(() => {\n            return createTreeMate(props.options, tmOptions);\n        });\n        function doUpdateValue(value, option) {\n            const { onUpdateValue, 'onUpdate:value': _onUpdateValue, onChange } = props;\n            if (onUpdateValue)\n                call(onUpdateValue, value, option);\n            if (_onUpdateValue) {\n                call(_onUpdateValue, value, option);\n            }\n            if (onChange)\n                call(onChange, value, option);\n        }\n        function handleToggle(tmNode) {\n            toggle(tmNode.key);\n        }\n        function handleMenuMousedown(e) {\n            if (!happensIn(e, 'action'))\n                e.preventDefault();\n        }\n        function toggle(value) {\n            const { value: { getNode } } = treeMateRef;\n            if (props.multiple) {\n                if (Array.isArray(props.value)) {\n                    const newValue = [];\n                    const newOptions = [];\n                    let shouldAddValue = true;\n                    props.value.forEach((v) => {\n                        if (v === value) {\n                            shouldAddValue = false;\n                            return;\n                        }\n                        const tmNode = getNode(v);\n                        if (tmNode) {\n                            newValue.push(tmNode.key);\n                            newOptions.push(tmNode.rawNode);\n                        }\n                    });\n                    if (shouldAddValue) {\n                        newValue.push(value);\n                        newOptions.push(getNode(value).rawNode);\n                    }\n                    doUpdateValue(newValue, newOptions);\n                }\n                else {\n                    const tmNode = getNode(value);\n                    if (tmNode) {\n                        doUpdateValue([value], [tmNode.rawNode]);\n                    }\n                }\n            }\n            else {\n                if (props.value === value && props.cancelable) {\n                    doUpdateValue(null, null);\n                }\n                else {\n                    const tmNode = getNode(value);\n                    if (tmNode) {\n                        doUpdateValue(value, tmNode.rawNode);\n                    }\n                    NPopselect.setShow(false);\n                }\n            }\n            void nextTick(() => {\n                NPopselect.syncPosition();\n            });\n        }\n        watch(toRef(props, 'options'), () => {\n            void nextTick(() => {\n                NPopselect.syncPosition();\n            });\n        });\n        return {\n            mergedTheme: NPopselect.mergedThemeRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            treeMate: treeMateRef,\n            handleToggle,\n            handleMenuMousedown\n        };\n    },\n    render() {\n        return (h(NInternalSelectMenu, { clsPrefix: this.mergedClsPrefix, focusable: true, theme: this.mergedTheme.peers.InternalSelectMenu, themeOverrides: this.mergedTheme.peerOverrides.InternalSelectMenu, multiple: this.multiple, treeMate: this.treeMate, size: this.size, value: this.value, virtualScroll: false, scrollable: this.scrollable, renderLabel: this.renderLabel, onToggle: this.handleToggle, onMouseenter: this.onMouseenter, onMouseleave: this.onMouseenter, onMousedown: this.handleMenuMousedown }, {\n            action: () => { var _a, _b; return ((_b = (_a = this.$slots).action) === null || _b === void 0 ? void 0 : _b.call(_a)) || []; },\n            empty: () => { var _a, _b; return ((_b = (_a = this.$slots).empty) === null || _b === void 0 ? void 0 : _b.call(_a)) || []; }\n        }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}