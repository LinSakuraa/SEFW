{"ast":null,"code":"import { h, computed, defineComponent, Fragment } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { dividerLight } from '../styles';\nimport style from './styles/index.cssr';\nconst dividerProps = Object.assign(Object.assign({}, useTheme.props), {\n  titlePlacement: {\n    type: String,\n    default: 'center'\n  },\n  dashed: Boolean,\n  vertical: Boolean\n});\nexport default defineComponent({\n  name: 'Divider',\n  props: dividerProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Divider', '-divider', style, dividerLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          color,\n          textColor,\n          fontWeight\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-color': color,\n        '--n-text-color': textColor,\n        '--n-font-weight': fontWeight\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('divider', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      $slots,\n      titlePlacement,\n      vertical,\n      dashed,\n      cssVars,\n      mergedClsPrefix\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"div\", {\n      role: \"separator\",\n      class: [`${mergedClsPrefix}-divider`, this.themeClass, {\n        [`${mergedClsPrefix}-divider--vertical`]: vertical,\n        [`${mergedClsPrefix}-divider--no-title`]: !$slots.default,\n        [`${mergedClsPrefix}-divider--dashed`]: dashed,\n        [`${mergedClsPrefix}-divider--title-position-${titlePlacement}`]: $slots.default && titlePlacement\n      }],\n      style: cssVars\n    }, !vertical ? h(\"div\", {\n      class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--left`\n    }) : null, !vertical && $slots.default ? h(Fragment, null, h(\"div\", {\n      class: `${mergedClsPrefix}-divider__title`\n    }, this.$slots), h(\"div\", {\n      class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--right`\n    })) : null);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/divider/src/Divider.js"],"names":["h","computed","defineComponent","Fragment","useConfig","useTheme","useThemeClass","dividerLight","style","dividerProps","Object","assign","props","titlePlacement","type","String","default","dashed","Boolean","vertical","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","cssVarsRef","common","cubicBezierEaseInOut","self","color","textColor","fontWeight","value","themeClassHandle","undefined","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","$slots","call","role","class"],"mappings":"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","sourcesContent":["import { h, computed, defineComponent, Fragment } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { dividerLight } from '../styles';\nimport style from './styles/index.cssr';\nconst dividerProps = Object.assign(Object.assign({}, useTheme.props), { titlePlacement: {\n        type: String,\n        default: 'center'\n    }, dashed: Boolean, vertical: Boolean });\nexport default defineComponent({\n    name: 'Divider',\n    props: dividerProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Divider', '-divider', style, dividerLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { color, textColor, fontWeight } } = themeRef.value;\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-color': color,\n                '--n-text-color': textColor,\n                '--n-font-weight': fontWeight\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('divider', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        const { $slots, titlePlacement, vertical, dashed, cssVars, mergedClsPrefix } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"div\", { role: \"separator\", class: [\n                `${mergedClsPrefix}-divider`,\n                this.themeClass,\n                {\n                    [`${mergedClsPrefix}-divider--vertical`]: vertical,\n                    [`${mergedClsPrefix}-divider--no-title`]: !$slots.default,\n                    [`${mergedClsPrefix}-divider--dashed`]: dashed,\n                    [`${mergedClsPrefix}-divider--title-position-${titlePlacement}`]: $slots.default && titlePlacement\n                }\n            ], style: cssVars },\n            !vertical ? (h(\"div\", { class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--left` })) : null,\n            !vertical && $slots.default ? (h(Fragment, null,\n                h(\"div\", { class: `${mergedClsPrefix}-divider__title` }, this.$slots),\n                h(\"div\", { class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--right` }))) : null));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}