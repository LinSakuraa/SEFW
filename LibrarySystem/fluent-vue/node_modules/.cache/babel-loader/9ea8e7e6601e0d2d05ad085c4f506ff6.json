{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { call } from '../../_utils'; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nexport function useCheck(props, data) {\n  const {\n    paginatedDataRef,\n    treeMateRef,\n    selectionColumnRef\n  } = data;\n  const uncontrolledCheckedRowKeysRef = ref(props.defaultCheckedRowKeys);\n  const mergedCheckState = computed(() => {\n    const {\n      checkedRowKeys\n    } = props;\n    return treeMateRef.value.getCheckedKeys(checkedRowKeys === undefined ? uncontrolledCheckedRowKeysRef.value : checkedRowKeys, {\n      cascade: props.cascade,\n      allowNotLoaded: props.allowCheckingNotLoaded\n    });\n  });\n  const mergedCheckedRowKeysRef = computed(() => mergedCheckState.value.checkedKeys);\n  const mergedInderminateRowKeysRef = computed(() => mergedCheckState.value.indeterminateKeys);\n  const mergedCheckedRowKeySetRef = computed(() => {\n    return new Set(mergedCheckedRowKeysRef.value);\n  });\n  const mergedInderminateRowKeySetRef = computed(() => {\n    return new Set(mergedInderminateRowKeysRef.value);\n  });\n  const countOfCurrentPageCheckedRowsRef = computed(() => {\n    const {\n      value: mergedCheckedRowKeySet\n    } = mergedCheckedRowKeySetRef;\n    return paginatedDataRef.value.reduce((total, tmNode) => {\n      const {\n        key,\n        disabled\n      } = tmNode;\n      return total + (!disabled && mergedCheckedRowKeySet.has(key) ? 1 : 0);\n    }, 0);\n  });\n  const countOfCurrentPageDisabledRowsRef = computed(() => {\n    return paginatedDataRef.value.filter(item => item.disabled).length;\n  });\n  const someRowsCheckedRef = computed(() => {\n    const {\n      length\n    } = paginatedDataRef.value;\n    const {\n      value: mergedInderminateRowKeySet\n    } = mergedInderminateRowKeySetRef;\n    return countOfCurrentPageCheckedRowsRef.value > 0 && countOfCurrentPageCheckedRowsRef.value < length - countOfCurrentPageDisabledRowsRef.value || paginatedDataRef.value.some(rowData => mergedInderminateRowKeySet.has(rowData.key));\n  });\n  const allRowsCheckedRef = computed(() => {\n    const {\n      length\n    } = paginatedDataRef.value;\n    return countOfCurrentPageCheckedRowsRef.value !== 0 && countOfCurrentPageCheckedRowsRef.value === length - countOfCurrentPageDisabledRowsRef.value;\n  });\n  const headerCheckboxDisabledRef = computed(() => {\n    return paginatedDataRef.value.length === 0;\n  });\n\n  function doUpdateCheckedRowKeys(keys) {\n    const {\n      'onUpdate:checkedRowKeys': _onUpdateCheckedRowKeys,\n      onUpdateCheckedRowKeys,\n      onCheckedRowKeysChange\n    } = props;\n    if (_onUpdateCheckedRowKeys) call(_onUpdateCheckedRowKeys, keys);\n    if (onUpdateCheckedRowKeys) call(onUpdateCheckedRowKeys, keys);\n    if (onCheckedRowKeysChange) call(onCheckedRowKeysChange, keys);\n    uncontrolledCheckedRowKeysRef.value = keys;\n  }\n\n  function doCheck(rowKey) {\n    if (props.loading) return;\n    doUpdateCheckedRowKeys(treeMateRef.value.check(rowKey, mergedCheckedRowKeysRef.value, {\n      cascade: props.cascade,\n      allowNotLoaded: props.allowCheckingNotLoaded\n    }).checkedKeys);\n  }\n\n  function doUncheck(rowKey) {\n    if (props.loading) return;\n    doUpdateCheckedRowKeys(treeMateRef.value.uncheck(rowKey, mergedCheckedRowKeysRef.value, {\n      cascade: props.cascade,\n      allowNotLoaded: props.allowCheckingNotLoaded\n    }).checkedKeys);\n  }\n\n  function doCheckAll(checkWholeTable = false) {\n    const {\n      value: column\n    } = selectionColumnRef;\n    if (!column || props.loading) return;\n    const rowKeysToCheck = [];\n    (checkWholeTable ? treeMateRef.value.treeNodes : paginatedDataRef.value).forEach(tmNode => {\n      if (!tmNode.disabled) {\n        rowKeysToCheck.push(tmNode.key);\n      }\n    }); // alway cascade, to emit correct row keys\n\n    doUpdateCheckedRowKeys(treeMateRef.value.check(rowKeysToCheck, mergedCheckedRowKeysRef.value, {\n      cascade: true,\n      allowNotLoaded: props.allowCheckingNotLoaded\n    }).checkedKeys);\n  }\n\n  function doUncheckAll(checkWholeTable = false) {\n    const {\n      value: column\n    } = selectionColumnRef;\n    if (!column || props.loading) return;\n    const rowKeysToUncheck = [];\n    (checkWholeTable ? treeMateRef.value.treeNodes : paginatedDataRef.value).forEach(tmNode => {\n      if (!tmNode.disabled) {\n        rowKeysToUncheck.push(tmNode.key);\n      }\n    }); // alway cascade, to emit correct row keys\n\n    doUpdateCheckedRowKeys(treeMateRef.value.uncheck(rowKeysToUncheck, mergedCheckedRowKeysRef.value, {\n      cascade: true,\n      allowNotLoaded: props.allowCheckingNotLoaded\n    }).checkedKeys);\n  }\n\n  return {\n    mergedCheckedRowKeySetRef,\n    mergedCheckedRowKeysRef,\n    mergedInderminateRowKeySetRef,\n    someRowsCheckedRef,\n    allRowsCheckedRef,\n    headerCheckboxDisabledRef,\n    doUpdateCheckedRowKeys,\n    doCheckAll,\n    doUncheckAll,\n    doCheck,\n    doUncheck\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/use-check.js"],"names":["computed","ref","call","useCheck","props","data","paginatedDataRef","treeMateRef","selectionColumnRef","uncontrolledCheckedRowKeysRef","defaultCheckedRowKeys","mergedCheckState","checkedRowKeys","value","getCheckedKeys","undefined","cascade","allowNotLoaded","allowCheckingNotLoaded","mergedCheckedRowKeysRef","checkedKeys","mergedInderminateRowKeysRef","indeterminateKeys","mergedCheckedRowKeySetRef","Set","mergedInderminateRowKeySetRef","countOfCurrentPageCheckedRowsRef","mergedCheckedRowKeySet","reduce","total","tmNode","key","disabled","has","countOfCurrentPageDisabledRowsRef","filter","item","length","someRowsCheckedRef","mergedInderminateRowKeySet","some","rowData","allRowsCheckedRef","headerCheckboxDisabledRef","doUpdateCheckedRowKeys","keys","_onUpdateCheckedRowKeys","onUpdateCheckedRowKeys","onCheckedRowKeysChange","doCheck","rowKey","loading","check","doUncheck","uncheck","doCheckAll","checkWholeTable","column","rowKeysToCheck","treeNodes","forEach","push","doUncheckAll","rowKeysToUncheck"],"mappings":"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","sourcesContent":["import { computed, ref } from 'vue';\nimport { call } from '../../_utils';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useCheck(props, data) {\n    const { paginatedDataRef, treeMateRef, selectionColumnRef } = data;\n    const uncontrolledCheckedRowKeysRef = ref(props.defaultCheckedRowKeys);\n    const mergedCheckState = computed(() => {\n        const { checkedRowKeys } = props;\n        return treeMateRef.value.getCheckedKeys(checkedRowKeys === undefined\n            ? uncontrolledCheckedRowKeysRef.value\n            : checkedRowKeys, {\n            cascade: props.cascade,\n            allowNotLoaded: props.allowCheckingNotLoaded\n        });\n    });\n    const mergedCheckedRowKeysRef = computed(() => mergedCheckState.value.checkedKeys);\n    const mergedInderminateRowKeysRef = computed(() => mergedCheckState.value.indeterminateKeys);\n    const mergedCheckedRowKeySetRef = computed(() => {\n        return new Set(mergedCheckedRowKeysRef.value);\n    });\n    const mergedInderminateRowKeySetRef = computed(() => {\n        return new Set(mergedInderminateRowKeysRef.value);\n    });\n    const countOfCurrentPageCheckedRowsRef = computed(() => {\n        const { value: mergedCheckedRowKeySet } = mergedCheckedRowKeySetRef;\n        return paginatedDataRef.value.reduce((total, tmNode) => {\n            const { key, disabled } = tmNode;\n            return total + (!disabled && mergedCheckedRowKeySet.has(key) ? 1 : 0);\n        }, 0);\n    });\n    const countOfCurrentPageDisabledRowsRef = computed(() => {\n        return paginatedDataRef.value.filter((item) => item.disabled).length;\n    });\n    const someRowsCheckedRef = computed(() => {\n        const { length } = paginatedDataRef.value;\n        const { value: mergedInderminateRowKeySet } = mergedInderminateRowKeySetRef;\n        return ((countOfCurrentPageCheckedRowsRef.value > 0 &&\n            countOfCurrentPageCheckedRowsRef.value <\n                length - countOfCurrentPageDisabledRowsRef.value) ||\n            paginatedDataRef.value.some((rowData) => mergedInderminateRowKeySet.has(rowData.key)));\n    });\n    const allRowsCheckedRef = computed(() => {\n        const { length } = paginatedDataRef.value;\n        return (countOfCurrentPageCheckedRowsRef.value !== 0 &&\n            countOfCurrentPageCheckedRowsRef.value ===\n                length - countOfCurrentPageDisabledRowsRef.value);\n    });\n    const headerCheckboxDisabledRef = computed(() => {\n        return paginatedDataRef.value.length === 0;\n    });\n    function doUpdateCheckedRowKeys(keys) {\n        const { 'onUpdate:checkedRowKeys': _onUpdateCheckedRowKeys, onUpdateCheckedRowKeys, onCheckedRowKeysChange } = props;\n        if (_onUpdateCheckedRowKeys)\n            call(_onUpdateCheckedRowKeys, keys);\n        if (onUpdateCheckedRowKeys)\n            call(onUpdateCheckedRowKeys, keys);\n        if (onCheckedRowKeysChange)\n            call(onCheckedRowKeysChange, keys);\n        uncontrolledCheckedRowKeysRef.value = keys;\n    }\n    function doCheck(rowKey) {\n        if (props.loading)\n            return;\n        doUpdateCheckedRowKeys(treeMateRef.value.check(rowKey, mergedCheckedRowKeysRef.value, {\n            cascade: props.cascade,\n            allowNotLoaded: props.allowCheckingNotLoaded\n        }).checkedKeys);\n    }\n    function doUncheck(rowKey) {\n        if (props.loading)\n            return;\n        doUpdateCheckedRowKeys(treeMateRef.value.uncheck(rowKey, mergedCheckedRowKeysRef.value, {\n            cascade: props.cascade,\n            allowNotLoaded: props.allowCheckingNotLoaded\n        }).checkedKeys);\n    }\n    function doCheckAll(checkWholeTable = false) {\n        const { value: column } = selectionColumnRef;\n        if (!column || props.loading)\n            return;\n        const rowKeysToCheck = [];\n        (checkWholeTable\n            ? treeMateRef.value.treeNodes\n            : paginatedDataRef.value).forEach((tmNode) => {\n            if (!tmNode.disabled) {\n                rowKeysToCheck.push(tmNode.key);\n            }\n        });\n        // alway cascade, to emit correct row keys\n        doUpdateCheckedRowKeys(treeMateRef.value.check(rowKeysToCheck, mergedCheckedRowKeysRef.value, {\n            cascade: true,\n            allowNotLoaded: props.allowCheckingNotLoaded\n        }).checkedKeys);\n    }\n    function doUncheckAll(checkWholeTable = false) {\n        const { value: column } = selectionColumnRef;\n        if (!column || props.loading)\n            return;\n        const rowKeysToUncheck = [];\n        (checkWholeTable\n            ? treeMateRef.value.treeNodes\n            : paginatedDataRef.value).forEach((tmNode) => {\n            if (!tmNode.disabled) {\n                rowKeysToUncheck.push(tmNode.key);\n            }\n        });\n        // alway cascade, to emit correct row keys\n        doUpdateCheckedRowKeys(treeMateRef.value.uncheck(rowKeysToUncheck, mergedCheckedRowKeysRef.value, {\n            cascade: true,\n            allowNotLoaded: props.allowCheckingNotLoaded\n        }).checkedKeys);\n    }\n    return {\n        mergedCheckedRowKeySetRef,\n        mergedCheckedRowKeysRef,\n        mergedInderminateRowKeySetRef,\n        someRowsCheckedRef,\n        allRowsCheckedRef,\n        headerCheckboxDisabledRef,\n        doUpdateCheckedRowKeys,\n        doCheckAll,\n        doUncheckAll,\n        doCheck,\n        doUncheck\n    };\n}\n"]},"metadata":{},"sourceType":"module"}