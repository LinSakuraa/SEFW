{"ast":null,"code":"import { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watch, nextTick, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, useAdjustedTo, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, filterTree, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nconst props = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), {\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  cascade: Boolean,\n  checkable: Boolean,\n  clearable: Boolean,\n  clearFilterAfterSelect: {\n    type: Boolean,\n    default: true\n  },\n  consistentMenuWidth: {\n    type: Boolean,\n    default: true\n  },\n  defaultShow: Boolean,\n  defaultValue: {\n    type: [String, Number, Array],\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  filterable: Boolean,\n  checkStrategy: {\n    type: String,\n    default: 'all'\n  },\n  maxTagCount: [String, Number],\n  multiple: Boolean,\n  showPath: Boolean,\n  separator: {\n    type: String,\n    default: ' / '\n  },\n  options: {\n    type: Array,\n    default: () => []\n  },\n  placeholder: String,\n  placement: {\n    type: String,\n    default: 'bottom-start'\n  },\n  show: {\n    type: Boolean,\n    default: undefined\n  },\n  size: String,\n  value: [String, Number, Array],\n  to: useAdjustedTo.propTo,\n  menuProps: Object,\n  virtualScroll: {\n    type: Boolean,\n    default: true\n  },\n  status: String\n}), treeSharedProps), {\n  onBlur: Function,\n  onFocus: Function,\n  onLoad: Function,\n  onUpdateShow: [Function, Array],\n  onUpdateValue: [Function, Array],\n  'onUpdate:value': [Function, Array],\n  'onUpdate:show': [Function, Array],\n\n  /**\n   * @deprecated\n   */\n  leafOnly: {\n    type: Boolean,\n    default: undefined\n  }\n});\nexport default defineComponent({\n  name: 'TreeSelect',\n  props,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.leafOnly !== undefined) {\n          warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n        }\n      });\n    }\n\n    const followerInstRef = ref(null);\n    const triggerInstRef = ref(null);\n    const treeInstRef = ref(null);\n    const menuElRef = ref(null);\n    const {\n      mergedClsPrefixRef,\n      namespaceRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const {\n      localeRef\n    } = useLocale('Select');\n    const {\n      mergedSizeRef,\n      mergedDisabledRef,\n      mergedStatusRef,\n      nTriggerFormBlur,\n      nTriggerFormChange,\n      nTriggerFormFocus,\n      nTriggerFormInput\n    } = useFormItem(props);\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = toRef(props, 'value');\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const uncontrolledShowRef = ref(props.defaultShow);\n    const controlledShowRef = toRef(props, 'show');\n    const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n    const patternRef = ref('');\n    const mergedFilterRef = computed(() => {\n      const {\n        filter\n      } = props;\n      if (filter) return filter;\n      const {\n        labelField\n      } = props;\n      return (pattern, node) => {\n        if (!pattern.length) return true;\n        return node[labelField].toLowerCase().includes(pattern.toLowerCase());\n      };\n    });\n    const filteredTreeInfoRef = computed(() => {\n      if (!props.filterable) {\n        return {\n          filteredTree: props.options,\n          highlightKeySet: undefined,\n          expandedKeys: undefined\n        };\n      }\n\n      const {\n        value: pattern\n      } = patternRef;\n\n      if (!pattern.length || !mergedFilterRef.value) {\n        return {\n          filteredTree: props.options,\n          highlightKeySet: undefined,\n          expandedKeys: undefined\n        };\n      }\n\n      return filterTree(props.options, mergedFilterRef.value, pattern, props.keyField);\n    }); // used to resolve selected options\n\n    const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField)));\n    const displayTreeMateRef = computed(() => createTreeMate(filteredTreeInfoRef.value.filteredTree, createTreeMateOptions(props.keyField, props.childrenField)));\n    const {\n      value: initMergedValue\n    } = mergedValueRef;\n    const pendingNodeKeyRef = ref(props.checkable ? null : Array.isArray(initMergedValue) && initMergedValue.length ? initMergedValue[initMergedValue.length - 1] : null);\n    const mergedCascadeRef = computed(() => {\n      return props.multiple && props.cascade && props.checkable;\n    }); // The same logic as tree, now it's not that complex so I don't extract a\n    // function to reuse it.\n\n    const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll ? displayTreeMateRef.value.getNonLeafKeys() : props.defaultExpandedKeys || props.expandedKeys);\n    const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n    const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n    const focusedRef = ref(false);\n    const mergedPlaceholderRef = computed(() => {\n      const {\n        placeholder\n      } = props;\n      if (placeholder !== undefined) return placeholder;\n      return localeRef.value.placeholder;\n    });\n    const treeSelectedKeysRef = computed(() => {\n      if (props.checkable) return [];\n      return treeCheckedKeysRef.value;\n    });\n    const treeCheckedKeysRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (props.multiple) {\n        if (Array.isArray(mergedValue)) return mergedValue;else return [];\n      } else {\n        if (mergedValue === null || Array.isArray(mergedValue)) return [];else return [mergedValue];\n      }\n    });\n    const selectedOptionRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator,\n        labelField\n      } = props;\n      if (multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (!Array.isArray(mergedValue) && mergedValue !== null) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const tmNode = treeMate.getNode(mergedValue);\n\n        if (tmNode !== null) {\n          return showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField);\n        }\n      }\n\n      return null;\n    });\n    const selectedOptionsRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator\n      } = props;\n      if (!multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (Array.isArray(mergedValue)) {\n        const res = [];\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const {\n          checkedKeys\n        } = treeMate.getCheckedKeys(mergedValue, {\n          checkStrategy: props.checkStrategy,\n          cascade: mergedCascadeRef.value\n        });\n        const {\n          labelField\n        } = props;\n        checkedKeys.forEach(value => {\n          const tmNode = treeMate.getNode(value);\n\n          if (tmNode !== null) {\n            res.push(showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField));\n          }\n        });\n        return res;\n      }\n\n      return [];\n    });\n    const menuPaddingRef = computed(() => {\n      const {\n        self: {\n          menuPadding\n        }\n      } = themeRef.value;\n      return menuPadding;\n    });\n\n    function focusSelection() {\n      var _a;\n\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    function focusSelectionInput() {\n      var _a;\n\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n    }\n\n    function doUpdateShow(value) {\n      const {\n        onUpdateShow,\n        'onUpdate:show': _onUpdateShow\n      } = props;\n      if (onUpdateShow) call(onUpdateShow, value);\n      if (_onUpdateShow) call(_onUpdateShow, value);\n      uncontrolledShowRef.value = value;\n    }\n\n    function doUpdateValue(value, option) {\n      const {\n        onUpdateValue,\n        'onUpdate:value': _onUpdateValue\n      } = props;\n      if (onUpdateValue) call(onUpdateValue, value, option);\n\n      if (_onUpdateValue) {\n        call(_onUpdateValue, value, option);\n      }\n\n      uncontrolledValueRef.value = value;\n      nTriggerFormInput();\n      nTriggerFormChange();\n    }\n\n    function doUpdateIndeterminateKeys(value, option) {\n      const {\n        onUpdateIndeterminateKeys,\n        'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys\n      } = props;\n\n      if (onUpdateIndeterminateKeys) {\n        call(onUpdateIndeterminateKeys, value, option);\n      }\n\n      if (_onUpdateIndeterminateKeys) {\n        call(_onUpdateIndeterminateKeys, value, option);\n      }\n    }\n\n    function doUpdateExpandedKeys(keys, option) {\n      const {\n        onUpdateExpandedKeys,\n        'onUpdate:expandedKeys': _onUpdateExpandedKeys\n      } = props;\n\n      if (onUpdateExpandedKeys) {\n        call(onUpdateExpandedKeys, keys, option);\n      }\n\n      if (_onUpdateExpandedKeys) {\n        call(_onUpdateExpandedKeys, keys, option);\n      }\n\n      uncontrolledExpandedKeysRef.value = keys;\n    }\n\n    function doFocus(e) {\n      const {\n        onFocus\n      } = props;\n      if (onFocus) onFocus(e);\n      nTriggerFormFocus();\n    }\n\n    function doBlur(e) {\n      closeMenu();\n      const {\n        onBlur\n      } = props;\n      if (onBlur) onBlur(e);\n      nTriggerFormBlur();\n    }\n\n    function closeMenu() {\n      doUpdateShow(false);\n    }\n\n    function openMenu() {\n      if (!mergedDisabledRef.value) {\n        patternRef.value = '';\n        doUpdateShow(true);\n\n        if (props.filterable) {\n          focusSelectionInput();\n        }\n      }\n    }\n\n    function handleMenuLeave() {\n      patternRef.value = '';\n    }\n\n    function handleMenuClickoutside(e) {\n      var _a;\n\n      if (mergedShowRef.value) {\n        if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(e.target))) {\n          // outside select, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n\n    function handleTriggerClick() {\n      if (mergedDisabledRef.value) return;\n\n      if (!mergedShowRef.value) {\n        openMenu();\n      } else {\n        if (!props.filterable) {\n          // already focused, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n\n    function getOptionsByKeys(keys) {\n      const {\n        value: {\n          getNode\n        }\n      } = dataTreeMateRef;\n      return keys.map(key => {\n        var _a;\n\n        return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null;\n      });\n    }\n\n    function handleUpdateCheckedKeys(keys) {\n      const options = getOptionsByKeys(keys);\n\n      if (props.multiple) {\n        doUpdateValue(keys, options);\n      } else {\n        keys.length ? doUpdateValue(keys[0], options[0] || null) : doUpdateValue(null, null);\n        closeMenu();\n\n        if (!props.filterable) {\n          // Currently it is not necessary. However if there is an action slot,\n          // it will be useful. So just leave it here.\n          focusSelection();\n        }\n      }\n\n      if (props.filterable) {\n        focusSelectionInput();\n        if (props.clearFilterAfterSelect) patternRef.value = '';\n      }\n    }\n\n    function handleUpdateIndeterminateKeys(keys) {\n      if (props.checkable) {\n        doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n      }\n    }\n\n    function handleTriggerFocus(e) {\n      var _a;\n\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = true;\n      doFocus(e);\n    }\n\n    function handleTriggerBlur(e) {\n      var _a;\n\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = false;\n      doBlur(e);\n    }\n\n    function handleMenuFocusin(e) {\n      var _a, _b, _c;\n\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n\n      focusedRef.value = true;\n      doFocus(e);\n    }\n\n    function handleMenuFocusout(e) {\n      var _a, _b, _c;\n\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n\n      focusedRef.value = false;\n      doBlur(e);\n    }\n\n    function handleClear(e) {\n      e.stopPropagation();\n      const {\n        multiple\n      } = props;\n\n      if (!multiple && props.filterable) {\n        closeMenu();\n      }\n\n      if (multiple) {\n        doUpdateValue([], []);\n      } else {\n        doUpdateValue(null, null);\n      }\n    }\n\n    function handleDeleteOption(option) {\n      // only work for multiple mode\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (Array.isArray(mergedValue)) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef; // all visible checked keys\n\n        const {\n          checkedKeys: checkedKeysValue\n        } = treeMate.getCheckedKeys(mergedValue, {\n          cascade: mergedCascadeRef.value\n        });\n        const index = checkedKeysValue.findIndex(key => key === option.value);\n\n        if (~index) {\n          if (props.checkable) {\n            const {\n              checkedKeys\n            } = treeMate.uncheck(option.value, checkedKeysValue, {\n              checkStrategy: props.checkStrategy,\n              cascade: mergedCascadeRef.value\n            });\n            doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys));\n          } else {\n            const nextValue = Array.from(checkedKeysValue);\n            nextValue.splice(index, 1);\n            doUpdateValue(nextValue, getOptionsByKeys(nextValue));\n          }\n        }\n      }\n    }\n\n    function handlePatternInput(e) {\n      const {\n        value\n      } = e.target;\n      patternRef.value = value;\n    }\n\n    function handleKeydown(e) {\n      const {\n        value: treeInst\n      } = treeInstRef;\n\n      if (treeInst) {\n        treeInst.handleKeydown(e);\n      }\n    }\n\n    function handleKeyup(e) {\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\n        if (mergedShowRef.value) {\n          treeHandleKeyup(e);\n\n          if (!props.multiple) {\n            closeMenu();\n            focusSelection();\n          }\n        } else {\n          openMenu();\n        }\n\n        e.preventDefault();\n      } else if (e.code === 'Escape') {\n        closeMenu();\n        focusSelection();\n      } else {\n        if (mergedShowRef.value) {\n          treeHandleKeyup(e);\n        } else if (e.code === 'ArrowDown') {\n          openMenu();\n        }\n      }\n    }\n\n    function treeHandleKeyup(e) {\n      const {\n        value: treeInst\n      } = treeInstRef;\n\n      if (treeInst) {\n        treeInst.handleKeyup(e);\n      }\n    }\n\n    function handleTabOut() {\n      closeMenu();\n      focusSelection();\n    }\n\n    function handleMenuMousedown(e) {\n      // If there's an action slot later, we need to check if mousedown happens\n      // in action panel\n      if (!happensIn(e, 'action')) e.preventDefault();\n    }\n\n    provide(treeSelectInjectionKey, {\n      pendingNodeKeyRef\n    });\n\n    function syncPosition() {\n      var _a;\n\n      (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n    }\n\n    watch(mergedValueRef, () => {\n      if (!mergedShowRef.value) return;\n      void nextTick(syncPosition);\n    });\n    let memorizedExpandedKeys;\n    watch(patternRef, (value, oldValue) => {\n      if (!value.length) {\n        if (memorizedExpandedKeys !== undefined) {\n          doUpdateExpandedKeys(memorizedExpandedKeys, getOptionsByKeys(memorizedExpandedKeys));\n        }\n      } else {\n        if (!oldValue.length) {\n          memorizedExpandedKeys = mergedExpandedKeysRef.value;\n        }\n\n        const {\n          expandedKeys\n        } = filteredTreeInfoRef.value;\n\n        if (expandedKeys !== undefined) {\n          doUpdateExpandedKeys(expandedKeys, getOptionsByKeys(expandedKeys));\n        }\n      }\n    });\n    const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          menuBoxShadow,\n          menuBorderRadius,\n          menuColor,\n          menuHeight,\n          actionPadding,\n          actionDividerColor,\n          actionTextColor\n        }\n      } = themeRef.value;\n      return {\n        '--n-menu-box-shadow': menuBoxShadow,\n        '--n-menu-border-radius': menuBorderRadius,\n        '--n-menu-color': menuColor,\n        '--n-menu-height': menuHeight,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-action-padding': actionPadding,\n        '--n-action-text-color': actionTextColor,\n        '--n-action-divider-color': actionDividerColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('tree-select', undefined, cssVarsRef, props) : undefined;\n    return {\n      menuElRef,\n      mergedStatus: mergedStatusRef,\n      triggerInstRef,\n      followerInstRef,\n      treeInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedValue: mergedValueRef,\n      mergedShow: mergedShowRef,\n      namespace: namespaceRef,\n      adjustedTo: useAdjustedTo(props),\n      isMounted: useIsMounted(),\n      focused: focusedRef,\n      filteredTreeInfo: filteredTreeInfoRef,\n      dataTreeMate: dataTreeMateRef,\n      displayTreeMate: displayTreeMateRef,\n      menuPadding: menuPaddingRef,\n      mergedPlaceholder: mergedPlaceholderRef,\n      mergedExpandedKeys: mergedExpandedKeysRef,\n      treeSelectedKeys: treeSelectedKeysRef,\n      treeCheckedKeys: treeCheckedKeysRef,\n      mergedSize: mergedSizeRef,\n      mergedDisabled: mergedDisabledRef,\n      selectedOption: selectedOptionRef,\n      selectedOptions: selectedOptionsRef,\n      pattern: patternRef,\n      pendingNodeKey: pendingNodeKeyRef,\n      mergedCascade: mergedCascadeRef,\n      doUpdateExpandedKeys,\n      handleMenuLeave,\n      handleTriggerClick,\n      handleMenuClickoutside,\n      handleUpdateCheckedKeys,\n      handleUpdateIndeterminateKeys,\n      handleTriggerFocus,\n      handleTriggerBlur,\n      handleMenuFocusin,\n      handleMenuFocusout,\n      handleClear,\n      handleDeleteOption,\n      handlePatternInput,\n      handleKeydown,\n      handleKeyup,\n      handleTabOut,\n      handleMenuMousedown,\n      mergedTheme: themeRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      mergedClsPrefix,\n      $slots\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-tree-select`\n    }, h(VBinder, null, {\n      default: () => [h(VTarget, null, {\n        default: () => h(NInternalSelection, {\n          ref: \"triggerInstRef\",\n          status: this.mergedStatus,\n          focused: this.focused,\n          clsPrefix: mergedClsPrefix,\n          theme: mergedTheme.peers.InternalSelection,\n          themeOverrides: mergedTheme.peerOverrides.InternalSelection,\n          selectedOption: this.selectedOption,\n          selectedOptions: this.selectedOptions,\n          size: this.mergedSize,\n          bordered: this.bordered,\n          placeholder: this.mergedPlaceholder,\n          disabled: this.mergedDisabled,\n          active: this.mergedShow,\n          multiple: this.multiple,\n          maxTagCount: this.maxTagCount,\n          showArrow: true,\n          filterable: this.filterable,\n          clearable: this.clearable,\n          pattern: this.pattern,\n          onPatternInput: this.handlePatternInput,\n          onClear: this.handleClear,\n          onClick: this.handleTriggerClick,\n          onFocus: this.handleTriggerFocus,\n          onBlur: this.handleTriggerBlur,\n          onDeleteOption: this.handleDeleteOption,\n          onKeydown: this.handleKeydown,\n          onKeyup: this.handleKeyup\n        })\n      }), h(VFollower, {\n        ref: \"followerInstRef\",\n        show: this.mergedShow,\n        placement: this.placement,\n        to: this.adjustedTo,\n        teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey,\n        containerClass: this.namespace,\n        width: this.consistentMenuWidth ? 'target' : undefined,\n        minWidth: \"target\"\n      }, {\n        default: () => h(Transition, {\n          name: \"fade-in-scale-up-transition\",\n          appear: this.isMounted,\n          onLeave: this.handleMenuLeave\n        }, {\n          default: () => {\n            var _a;\n\n            if (!this.mergedShow) return null;\n            const {\n              mergedClsPrefix,\n              filteredTreeInfo,\n              checkable,\n              multiple,\n              menuProps\n            } = this;\n            (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n            return withDirectives(h(\"div\", Object.assign({}, menuProps, {\n              class: [`${mergedClsPrefix}-tree-select-menu`, menuProps === null || menuProps === void 0 ? void 0 : menuProps.class, this.themeClass],\n              ref: \"menuElRef\",\n              style: [(menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '', this.cssVars],\n              tabindex: 0,\n              onMousedown: this.handleMenuMousedown,\n              onKeyup: this.handleKeyup,\n              onKeydown: this.handleKeydown,\n              onFocusin: this.handleMenuFocusin,\n              onFocusout: this.handleMenuFocusout\n            }), filteredTreeInfo.filteredTree.length ? h(NTree, {\n              ref: \"treeInstRef\",\n              blockLine: true,\n              animated: false,\n              data: filteredTreeInfo.filteredTree,\n              cancelable: multiple,\n              labelField: this.labelField,\n              theme: mergedTheme.peers.Tree,\n              themeOverrides: mergedTheme.peerOverrides.Tree,\n              defaultExpandAll: this.defaultExpandAll,\n              defaultExpandedKeys: this.defaultExpandedKeys,\n              expandedKeys: this.mergedExpandedKeys,\n              checkedKeys: this.treeCheckedKeys,\n              selectedKeys: this.treeSelectedKeys,\n              checkable: checkable,\n              checkStrategy: this.checkStrategy,\n              cascade: this.mergedCascade,\n              leafOnly: this.leafOnly,\n              multiple: this.multiple,\n              virtualScroll: this.consistentMenuWidth && this.virtualScroll,\n              internalTreeSelect: true,\n              internalDataTreeMate: this.dataTreeMate,\n              internalDisplayTreeMate: this.displayTreeMate,\n              internalHighlightKeySet: filteredTreeInfo.highlightKeySet,\n              internalUnifySelectCheck: true,\n              internalScrollable: true,\n              internalScrollablePadding: this.menuPadding,\n              internalFocusable: false,\n              internalCheckboxFocusable: false,\n              onLoad: this.onLoad,\n              onUpdateCheckedKeys: this.handleUpdateCheckedKeys,\n              onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys,\n              onUpdateExpandedKeys: this.doUpdateExpandedKeys\n            }) : h(\"div\", {\n              class: `${mergedClsPrefix}-tree-select-menu__empty`\n            }, $slots.empty ? $slots.empty() : h(NEmpty, {\n              theme: mergedTheme.peers.Empty,\n              themeOverrides: mergedTheme.peerOverrides.Empty\n            })), $slots.action && h(\"div\", {\n              class: `${mergedClsPrefix}-tree-select-menu__action`,\n              \"data-action\": true\n            }, {\n              default: $slots.action\n            }), h(NBaseFocusDetector, {\n              onFocus: this.handleTabOut\n            })), [[clickoutside, this.handleMenuClickoutside, undefined, {\n              capture: true\n            }]]);\n          }\n        })\n      })]\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/tree-select/src/TreeSelect.js"],"names":["h","defineComponent","ref","toRef","Transition","withDirectives","computed","provide","watch","nextTick","watchEffect","VBinder","VFollower","VTarget","useIsMounted","useMergedState","clickoutside","createTreeMate","happensIn","createTreeMateOptions","treeSharedProps","NInternalSelection","NBaseFocusDetector","NTree","NEmpty","useConfig","useFormItem","useLocale","useTheme","useThemeClass","call","useAdjustedTo","warnOnce","treeSelectLight","treeSelectInjectionKey","treeOption2SelectOption","filterTree","treeOption2SelectOptionWithPath","style","props","Object","assign","bordered","type","Boolean","default","cascade","checkable","clearable","clearFilterAfterSelect","consistentMenuWidth","defaultShow","defaultValue","String","Number","Array","disabled","undefined","filterable","checkStrategy","maxTagCount","multiple","showPath","separator","options","placeholder","placement","show","size","value","to","propTo","menuProps","virtualScroll","status","onBlur","Function","onFocus","onLoad","onUpdateShow","onUpdateValue","leafOnly","name","setup","process","env","NODE_ENV","followerInstRef","triggerInstRef","treeInstRef","menuElRef","mergedClsPrefixRef","namespaceRef","inlineThemeDisabled","localeRef","mergedSizeRef","mergedDisabledRef","mergedStatusRef","nTriggerFormBlur","nTriggerFormChange","nTriggerFormFocus","nTriggerFormInput","uncontrolledValueRef","controlledValueRef","mergedValueRef","uncontrolledShowRef","controlledShowRef","mergedShowRef","patternRef","mergedFilterRef","filter","labelField","pattern","node","length","toLowerCase","includes","filteredTreeInfoRef","filteredTree","highlightKeySet","expandedKeys","keyField","dataTreeMateRef","childrenField","displayTreeMateRef","initMergedValue","pendingNodeKeyRef","isArray","mergedCascadeRef","uncontrolledExpandedKeysRef","defaultExpandAll","getNonLeafKeys","defaultExpandedKeys","controlledExpandedKeysRef","mergedExpandedKeysRef","focusedRef","mergedPlaceholderRef","treeSelectedKeysRef","treeCheckedKeysRef","mergedValue","selectedOptionRef","treeMate","tmNode","getNode","getPath","treeNodePath","selectedOptionsRef","res","checkedKeys","getCheckedKeys","forEach","push","menuPaddingRef","self","menuPadding","themeRef","focusSelection","_a","focus","focusSelectionInput","focusInput","doUpdateShow","_onUpdateShow","doUpdateValue","option","_onUpdateValue","doUpdateIndeterminateKeys","onUpdateIndeterminateKeys","_onUpdateIndeterminateKeys","doUpdateExpandedKeys","keys","onUpdateExpandedKeys","_onUpdateExpandedKeys","doFocus","e","doBlur","closeMenu","openMenu","handleMenuLeave","handleMenuClickoutside","$el","contains","target","handleTriggerClick","getOptionsByKeys","map","key","rawNode","handleUpdateCheckedKeys","handleUpdateIndeterminateKeys","handleTriggerFocus","relatedTarget","handleTriggerBlur","handleMenuFocusin","_b","_c","handleMenuFocusout","handleClear","stopPropagation","handleDeleteOption","checkedKeysValue","index","findIndex","uncheck","nextValue","from","splice","handlePatternInput","handleKeydown","treeInst","handleKeyup","code","treeHandleKeyup","preventDefault","handleTabOut","handleMenuMousedown","syncPosition","memorizedExpandedKeys","oldValue","cssVarsRef","common","cubicBezierEaseInOut","menuBoxShadow","menuBorderRadius","menuColor","menuHeight","actionPadding","actionDividerColor","actionTextColor","themeClassHandle","mergedStatus","mergedClsPrefix","mergedShow","namespace","adjustedTo","isMounted","focused","filteredTreeInfo","dataTreeMate","displayTreeMate","mergedPlaceholder","mergedExpandedKeys","treeSelectedKeys","treeCheckedKeys","mergedSize","mergedDisabled","selectedOption","selectedOptions","pendingNodeKey","mergedCascade","mergedTheme","cssVars","themeClass","onRender","render","$slots","class","clsPrefix","theme","peers","InternalSelection","themeOverrides","peerOverrides","active","showArrow","onPatternInput","onClear","onClick","onDeleteOption","onKeydown","onKeyup","teleportDisabled","tdkey","containerClass","width","minWidth","appear","onLeave","tabindex","onMousedown","onFocusin","onFocusout","blockLine","animated","data","cancelable","Tree","selectedKeys","internalTreeSelect","internalDataTreeMate","internalDisplayTreeMate","internalHighlightKeySet","internalUnifySelectCheck","internalScrollable","internalScrollablePadding","internalFocusable","internalCheckboxFocusable","onUpdateCheckedKeys","empty","Empty","action","capture"],"mappings":"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","sourcesContent":["import { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watch, nextTick, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, useAdjustedTo, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, filterTree, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nconst props = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), { bordered: {\n        type: Boolean,\n        default: true\n    }, cascade: Boolean, checkable: Boolean, clearable: Boolean, clearFilterAfterSelect: {\n        type: Boolean,\n        default: true\n    }, consistentMenuWidth: {\n        type: Boolean,\n        default: true\n    }, defaultShow: Boolean, defaultValue: {\n        type: [String, Number, Array],\n        default: null\n    }, disabled: {\n        type: Boolean,\n        default: undefined\n    }, filterable: Boolean, checkStrategy: {\n        type: String,\n        default: 'all'\n    }, maxTagCount: [String, Number], multiple: Boolean, showPath: Boolean, separator: {\n        type: String,\n        default: ' / '\n    }, options: {\n        type: Array,\n        default: () => []\n    }, placeholder: String, placement: {\n        type: String,\n        default: 'bottom-start'\n    }, show: {\n        type: Boolean,\n        default: undefined\n    }, size: String, value: [String, Number, Array], to: useAdjustedTo.propTo, menuProps: Object, virtualScroll: {\n        type: Boolean,\n        default: true\n    }, status: String }), treeSharedProps), { onBlur: Function, onFocus: Function, onLoad: Function, onUpdateShow: [Function, Array], onUpdateValue: [Function, Array], 'onUpdate:value': [Function, Array], 'onUpdate:show': [Function, Array], \n    /**\n     * @deprecated\n     */\n    leafOnly: {\n        type: Boolean,\n        default: undefined\n    } });\nexport default defineComponent({\n    name: 'TreeSelect',\n    props,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.leafOnly !== undefined) {\n                    warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n                }\n            });\n        }\n        const followerInstRef = ref(null);\n        const triggerInstRef = ref(null);\n        const treeInstRef = ref(null);\n        const menuElRef = ref(null);\n        const { mergedClsPrefixRef, namespaceRef, inlineThemeDisabled } = useConfig(props);\n        const { localeRef } = useLocale('Select');\n        const { mergedSizeRef, mergedDisabledRef, mergedStatusRef, nTriggerFormBlur, nTriggerFormChange, nTriggerFormFocus, nTriggerFormInput } = useFormItem(props);\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = toRef(props, 'value');\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const uncontrolledShowRef = ref(props.defaultShow);\n        const controlledShowRef = toRef(props, 'show');\n        const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n        const patternRef = ref('');\n        const mergedFilterRef = computed(() => {\n            const { filter } = props;\n            if (filter)\n                return filter;\n            const { labelField } = props;\n            return (pattern, node) => {\n                if (!pattern.length)\n                    return true;\n                return node[labelField]\n                    .toLowerCase()\n                    .includes(pattern.toLowerCase());\n            };\n        });\n        const filteredTreeInfoRef = computed(() => {\n            if (!props.filterable) {\n                return {\n                    filteredTree: props.options,\n                    highlightKeySet: undefined,\n                    expandedKeys: undefined\n                };\n            }\n            const { value: pattern } = patternRef;\n            if (!pattern.length || !mergedFilterRef.value) {\n                return {\n                    filteredTree: props.options,\n                    highlightKeySet: undefined,\n                    expandedKeys: undefined\n                };\n            }\n            return filterTree(props.options, mergedFilterRef.value, pattern, props.keyField);\n        });\n        // used to resolve selected options\n        const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField)));\n        const displayTreeMateRef = computed(() => createTreeMate(filteredTreeInfoRef.value.filteredTree, createTreeMateOptions(props.keyField, props.childrenField)));\n        const { value: initMergedValue } = mergedValueRef;\n        const pendingNodeKeyRef = ref(props.checkable\n            ? null\n            : Array.isArray(initMergedValue) && initMergedValue.length\n                ? initMergedValue[initMergedValue.length - 1]\n                : null);\n        const mergedCascadeRef = computed(() => {\n            return props.multiple && props.cascade && props.checkable;\n        });\n        // The same logic as tree, now it's not that complex so I don't extract a\n        // function to reuse it.\n        const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll\n            ? displayTreeMateRef.value.getNonLeafKeys()\n            : props.defaultExpandedKeys || props.expandedKeys);\n        const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n        const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n        const focusedRef = ref(false);\n        const mergedPlaceholderRef = computed(() => {\n            const { placeholder } = props;\n            if (placeholder !== undefined)\n                return placeholder;\n            return localeRef.value.placeholder;\n        });\n        const treeSelectedKeysRef = computed(() => {\n            if (props.checkable)\n                return [];\n            return treeCheckedKeysRef.value;\n        });\n        const treeCheckedKeysRef = computed(() => {\n            const { value: mergedValue } = mergedValueRef;\n            if (props.multiple) {\n                if (Array.isArray(mergedValue))\n                    return mergedValue;\n                else\n                    return [];\n            }\n            else {\n                if (mergedValue === null || Array.isArray(mergedValue))\n                    return [];\n                else\n                    return [mergedValue];\n            }\n        });\n        const selectedOptionRef = computed(() => {\n            const { multiple, showPath, separator, labelField } = props;\n            if (multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (!Array.isArray(mergedValue) && mergedValue !== null) {\n                const { value: treeMate } = dataTreeMateRef;\n                const tmNode = treeMate.getNode(mergedValue);\n                if (tmNode !== null) {\n                    return showPath\n                        ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField)\n                        : treeOption2SelectOption(tmNode, labelField);\n                }\n            }\n            return null;\n        });\n        const selectedOptionsRef = computed(() => {\n            const { multiple, showPath, separator } = props;\n            if (!multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const res = [];\n                const { value: treeMate } = dataTreeMateRef;\n                const { checkedKeys } = treeMate.getCheckedKeys(mergedValue, {\n                    checkStrategy: props.checkStrategy,\n                    cascade: mergedCascadeRef.value\n                });\n                const { labelField } = props;\n                checkedKeys.forEach((value) => {\n                    const tmNode = treeMate.getNode(value);\n                    if (tmNode !== null) {\n                        res.push(showPath\n                            ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField)\n                            : treeOption2SelectOption(tmNode, labelField));\n                    }\n                });\n                return res;\n            }\n            return [];\n        });\n        const menuPaddingRef = computed(() => {\n            const { self: { menuPadding } } = themeRef.value;\n            return menuPadding;\n        });\n        function focusSelection() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        function focusSelectionInput() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n        }\n        function doUpdateShow(value) {\n            const { onUpdateShow, 'onUpdate:show': _onUpdateShow } = props;\n            if (onUpdateShow)\n                call(onUpdateShow, value);\n            if (_onUpdateShow)\n                call(_onUpdateShow, value);\n            uncontrolledShowRef.value = value;\n        }\n        function doUpdateValue(value, option) {\n            const { onUpdateValue, 'onUpdate:value': _onUpdateValue } = props;\n            if (onUpdateValue)\n                call(onUpdateValue, value, option);\n            if (_onUpdateValue) {\n                call(_onUpdateValue, value, option);\n            }\n            uncontrolledValueRef.value = value;\n            nTriggerFormInput();\n            nTriggerFormChange();\n        }\n        function doUpdateIndeterminateKeys(value, option) {\n            const { onUpdateIndeterminateKeys, 'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys } = props;\n            if (onUpdateIndeterminateKeys) {\n                call(onUpdateIndeterminateKeys, value, option);\n            }\n            if (_onUpdateIndeterminateKeys) {\n                call(_onUpdateIndeterminateKeys, value, option);\n            }\n        }\n        function doUpdateExpandedKeys(keys, option) {\n            const { onUpdateExpandedKeys, 'onUpdate:expandedKeys': _onUpdateExpandedKeys } = props;\n            if (onUpdateExpandedKeys) {\n                call(onUpdateExpandedKeys, keys, option);\n            }\n            if (_onUpdateExpandedKeys) {\n                call(_onUpdateExpandedKeys, keys, option);\n            }\n            uncontrolledExpandedKeysRef.value = keys;\n        }\n        function doFocus(e) {\n            const { onFocus } = props;\n            if (onFocus)\n                onFocus(e);\n            nTriggerFormFocus();\n        }\n        function doBlur(e) {\n            closeMenu();\n            const { onBlur } = props;\n            if (onBlur)\n                onBlur(e);\n            nTriggerFormBlur();\n        }\n        function closeMenu() {\n            doUpdateShow(false);\n        }\n        function openMenu() {\n            if (!mergedDisabledRef.value) {\n                patternRef.value = '';\n                doUpdateShow(true);\n                if (props.filterable) {\n                    focusSelectionInput();\n                }\n            }\n        }\n        function handleMenuLeave() {\n            patternRef.value = '';\n        }\n        function handleMenuClickoutside(e) {\n            var _a;\n            if (mergedShowRef.value) {\n                if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(e.target))) {\n                    // outside select, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function handleTriggerClick() {\n            if (mergedDisabledRef.value)\n                return;\n            if (!mergedShowRef.value) {\n                openMenu();\n            }\n            else {\n                if (!props.filterable) {\n                    // already focused, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function getOptionsByKeys(keys) {\n            const { value: { getNode } } = dataTreeMateRef;\n            return keys.map((key) => { var _a; return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null; });\n        }\n        function handleUpdateCheckedKeys(keys) {\n            const options = getOptionsByKeys(keys);\n            if (props.multiple) {\n                doUpdateValue(keys, options);\n            }\n            else {\n                keys.length\n                    ? doUpdateValue(keys[0], options[0] || null)\n                    : doUpdateValue(null, null);\n                closeMenu();\n                if (!props.filterable) {\n                    // Currently it is not necessary. However if there is an action slot,\n                    // it will be useful. So just leave it here.\n                    focusSelection();\n                }\n            }\n            if (props.filterable) {\n                focusSelectionInput();\n                if (props.clearFilterAfterSelect)\n                    patternRef.value = '';\n            }\n        }\n        function handleUpdateIndeterminateKeys(keys) {\n            if (props.checkable) {\n                doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n            }\n        }\n        function handleTriggerFocus(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleTriggerBlur(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleMenuFocusin(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleMenuFocusout(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleClear(e) {\n            e.stopPropagation();\n            const { multiple } = props;\n            if (!multiple && props.filterable) {\n                closeMenu();\n            }\n            if (multiple) {\n                doUpdateValue([], []);\n            }\n            else {\n                doUpdateValue(null, null);\n            }\n        }\n        function handleDeleteOption(option) {\n            // only work for multiple mode\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const { value: treeMate } = dataTreeMateRef;\n                // all visible checked keys\n                const { checkedKeys: checkedKeysValue } = treeMate.getCheckedKeys(mergedValue, {\n                    cascade: mergedCascadeRef.value\n                });\n                const index = checkedKeysValue.findIndex((key) => key === option.value);\n                if (~index) {\n                    if (props.checkable) {\n                        const { checkedKeys } = treeMate.uncheck(option.value, checkedKeysValue, {\n                            checkStrategy: props.checkStrategy,\n                            cascade: mergedCascadeRef.value\n                        });\n                        doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys));\n                    }\n                    else {\n                        const nextValue = Array.from(checkedKeysValue);\n                        nextValue.splice(index, 1);\n                        doUpdateValue(nextValue, getOptionsByKeys(nextValue));\n                    }\n                }\n            }\n        }\n        function handlePatternInput(e) {\n            const { value } = e.target;\n            patternRef.value = value;\n        }\n        function handleKeydown(e) {\n            const { value: treeInst } = treeInstRef;\n            if (treeInst) {\n                treeInst.handleKeydown(e);\n            }\n        }\n        function handleKeyup(e) {\n            if (e.code === 'Enter' || e.code === 'NumpadEnter') {\n                if (mergedShowRef.value) {\n                    treeHandleKeyup(e);\n                    if (!props.multiple) {\n                        closeMenu();\n                        focusSelection();\n                    }\n                }\n                else {\n                    openMenu();\n                }\n                e.preventDefault();\n            }\n            else if (e.code === 'Escape') {\n                closeMenu();\n                focusSelection();\n            }\n            else {\n                if (mergedShowRef.value) {\n                    treeHandleKeyup(e);\n                }\n                else if (e.code === 'ArrowDown') {\n                    openMenu();\n                }\n            }\n        }\n        function treeHandleKeyup(e) {\n            const { value: treeInst } = treeInstRef;\n            if (treeInst) {\n                treeInst.handleKeyup(e);\n            }\n        }\n        function handleTabOut() {\n            closeMenu();\n            focusSelection();\n        }\n        function handleMenuMousedown(e) {\n            // If there's an action slot later, we need to check if mousedown happens\n            // in action panel\n            if (!happensIn(e, 'action'))\n                e.preventDefault();\n        }\n        provide(treeSelectInjectionKey, {\n            pendingNodeKeyRef\n        });\n        function syncPosition() {\n            var _a;\n            (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n        }\n        watch(mergedValueRef, () => {\n            if (!mergedShowRef.value)\n                return;\n            void nextTick(syncPosition);\n        });\n        let memorizedExpandedKeys;\n        watch(patternRef, (value, oldValue) => {\n            if (!value.length) {\n                if (memorizedExpandedKeys !== undefined) {\n                    doUpdateExpandedKeys(memorizedExpandedKeys, getOptionsByKeys(memorizedExpandedKeys));\n                }\n            }\n            else {\n                if (!oldValue.length) {\n                    memorizedExpandedKeys = mergedExpandedKeysRef.value;\n                }\n                const { expandedKeys } = filteredTreeInfoRef.value;\n                if (expandedKeys !== undefined) {\n                    doUpdateExpandedKeys(expandedKeys, getOptionsByKeys(expandedKeys));\n                }\n            }\n        });\n        const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { menuBoxShadow, menuBorderRadius, menuColor, menuHeight, actionPadding, actionDividerColor, actionTextColor } } = themeRef.value;\n            return {\n                '--n-menu-box-shadow': menuBoxShadow,\n                '--n-menu-border-radius': menuBorderRadius,\n                '--n-menu-color': menuColor,\n                '--n-menu-height': menuHeight,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-action-padding': actionPadding,\n                '--n-action-text-color': actionTextColor,\n                '--n-action-divider-color': actionDividerColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('tree-select', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            menuElRef,\n            mergedStatus: mergedStatusRef,\n            triggerInstRef,\n            followerInstRef,\n            treeInstRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedValue: mergedValueRef,\n            mergedShow: mergedShowRef,\n            namespace: namespaceRef,\n            adjustedTo: useAdjustedTo(props),\n            isMounted: useIsMounted(),\n            focused: focusedRef,\n            filteredTreeInfo: filteredTreeInfoRef,\n            dataTreeMate: dataTreeMateRef,\n            displayTreeMate: displayTreeMateRef,\n            menuPadding: menuPaddingRef,\n            mergedPlaceholder: mergedPlaceholderRef,\n            mergedExpandedKeys: mergedExpandedKeysRef,\n            treeSelectedKeys: treeSelectedKeysRef,\n            treeCheckedKeys: treeCheckedKeysRef,\n            mergedSize: mergedSizeRef,\n            mergedDisabled: mergedDisabledRef,\n            selectedOption: selectedOptionRef,\n            selectedOptions: selectedOptionsRef,\n            pattern: patternRef,\n            pendingNodeKey: pendingNodeKeyRef,\n            mergedCascade: mergedCascadeRef,\n            doUpdateExpandedKeys,\n            handleMenuLeave,\n            handleTriggerClick,\n            handleMenuClickoutside,\n            handleUpdateCheckedKeys,\n            handleUpdateIndeterminateKeys,\n            handleTriggerFocus,\n            handleTriggerBlur,\n            handleMenuFocusin,\n            handleMenuFocusout,\n            handleClear,\n            handleDeleteOption,\n            handlePatternInput,\n            handleKeydown,\n            handleKeyup,\n            handleTabOut,\n            handleMenuMousedown,\n            mergedTheme: themeRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedTheme, mergedClsPrefix, $slots } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-tree-select` },\n            h(VBinder, null, {\n                default: () => [\n                    h(VTarget, null, {\n                        default: () => (h(NInternalSelection, { ref: \"triggerInstRef\", status: this.mergedStatus, focused: this.focused, clsPrefix: mergedClsPrefix, theme: mergedTheme.peers.InternalSelection, themeOverrides: mergedTheme.peerOverrides.InternalSelection, selectedOption: this.selectedOption, selectedOptions: this.selectedOptions, size: this.mergedSize, bordered: this.bordered, placeholder: this.mergedPlaceholder, disabled: this.mergedDisabled, active: this.mergedShow, multiple: this.multiple, maxTagCount: this.maxTagCount, showArrow: true, filterable: this.filterable, clearable: this.clearable, pattern: this.pattern, onPatternInput: this.handlePatternInput, onClear: this.handleClear, onClick: this.handleTriggerClick, onFocus: this.handleTriggerFocus, onBlur: this.handleTriggerBlur, onDeleteOption: this.handleDeleteOption, onKeydown: this.handleKeydown, onKeyup: this.handleKeyup }))\n                    }),\n                    h(VFollower, { ref: \"followerInstRef\", show: this.mergedShow, placement: this.placement, to: this.adjustedTo, teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey, containerClass: this.namespace, width: this.consistentMenuWidth ? 'target' : undefined, minWidth: \"target\" }, {\n                        default: () => (h(Transition, { name: \"fade-in-scale-up-transition\", appear: this.isMounted, onLeave: this.handleMenuLeave }, {\n                            default: () => {\n                                var _a;\n                                if (!this.mergedShow)\n                                    return null;\n                                const { mergedClsPrefix, filteredTreeInfo, checkable, multiple, menuProps } = this;\n                                (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n                                return withDirectives(h(\"div\", Object.assign({}, menuProps, { class: [\n                                        `${mergedClsPrefix}-tree-select-menu`,\n                                        menuProps === null || menuProps === void 0 ? void 0 : menuProps.class,\n                                        this.themeClass\n                                    ], ref: \"menuElRef\", style: [\n                                        (menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '',\n                                        this.cssVars\n                                    ], tabindex: 0, onMousedown: this.handleMenuMousedown, onKeyup: this.handleKeyup, onKeydown: this.handleKeydown, onFocusin: this.handleMenuFocusin, onFocusout: this.handleMenuFocusout }),\n                                    filteredTreeInfo.filteredTree.length ? (h(NTree, { ref: \"treeInstRef\", blockLine: true, animated: false, data: filteredTreeInfo.filteredTree, cancelable: multiple, labelField: this.labelField, theme: mergedTheme.peers.Tree, themeOverrides: mergedTheme.peerOverrides.Tree, defaultExpandAll: this.defaultExpandAll, defaultExpandedKeys: this.defaultExpandedKeys, expandedKeys: this.mergedExpandedKeys, checkedKeys: this.treeCheckedKeys, selectedKeys: this.treeSelectedKeys, checkable: checkable, checkStrategy: this.checkStrategy, cascade: this.mergedCascade, leafOnly: this.leafOnly, multiple: this.multiple, virtualScroll: this.consistentMenuWidth &&\n                                            this.virtualScroll, internalTreeSelect: true, internalDataTreeMate: this.dataTreeMate, internalDisplayTreeMate: this.displayTreeMate, internalHighlightKeySet: filteredTreeInfo.highlightKeySet, internalUnifySelectCheck: true, internalScrollable: true, internalScrollablePadding: this.menuPadding, internalFocusable: false, internalCheckboxFocusable: false, onLoad: this.onLoad, onUpdateCheckedKeys: this.handleUpdateCheckedKeys, onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys, onUpdateExpandedKeys: this.doUpdateExpandedKeys })) : (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__empty` }, $slots.empty ? ($slots.empty()) : (h(NEmpty, { theme: mergedTheme.peers.Empty, themeOverrides: mergedTheme.peerOverrides.Empty })))),\n                                    $slots.action && (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__action`, \"data-action\": true }, {\n                                        default: $slots.action\n                                    })),\n                                    h(NBaseFocusDetector, { onFocus: this.handleTabOut })), [\n                                    [\n                                        clickoutside,\n                                        this.handleMenuClickoutside,\n                                        undefined,\n                                        { capture: true }\n                                    ]\n                                ]);\n                            }\n                        }))\n                    })\n                ]\n            })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}