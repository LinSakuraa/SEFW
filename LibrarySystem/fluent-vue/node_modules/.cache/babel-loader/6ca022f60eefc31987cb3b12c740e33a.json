{"ast":null,"code":"import { defineComponent, h, ref, provide, getCurrentInstance } from 'vue';\nimport { createId } from 'seemly';\nimport { createInjectionKey } from '../../_utils';\nimport { useConfig } from '../../_mixins';\nimport NImagePreview from './ImagePreview';\nimport { imagePreviewSharedProps } from './interface';\nexport const imageGroupInjectionKey = createInjectionKey('n-image-group');\nconst imageGroupProps = imagePreviewSharedProps;\nexport default defineComponent({\n  name: 'ImageGroup',\n  props: imageGroupProps,\n\n  setup(props) {\n    let currentSrc;\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const groupId = `c${createId()}`;\n    const vm = getCurrentInstance();\n\n    const setPreviewSrc = src => {\n      var _a;\n\n      currentSrc = src;\n      (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setPreviewSrc(src);\n    };\n\n    function go(step) {\n      if (!(vm === null || vm === void 0 ? void 0 : vm.proxy)) return;\n      const container = vm.proxy.$el.parentElement; // use dom api since we can't get the correct order before all children are rendered\n\n      const imgs = container.querySelectorAll(`.${groupId}:not([data-error=true])`);\n      if (!imgs.length) return;\n      const index = Array.from(imgs).findIndex(img => img.dataset.previewSrc === currentSrc);\n\n      if (~index) {\n        setPreviewSrc(imgs[(index + step + imgs.length) % imgs.length].dataset.previewSrc);\n      } else {\n        setPreviewSrc(imgs[0].dataset.previewSrc);\n      }\n    }\n\n    provide(imageGroupInjectionKey, {\n      mergedClsPrefixRef,\n      setPreviewSrc,\n      setThumbnailEl: el => {\n        var _a;\n\n        (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setThumbnailEl(el);\n      },\n      toggleShow: () => {\n        var _a;\n\n        (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.toggleShow();\n      },\n      groupId\n    });\n    const previewInstRef = ref(null);\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      previewInstRef,\n      next: () => go(1),\n      prev: () => go(-1)\n    };\n  },\n\n  render() {\n    return h(NImagePreview, {\n      theme: this.theme,\n      themeOverrides: this.themeOverrides,\n      clsPrefix: this.mergedClsPrefix,\n      ref: \"previewInstRef\",\n      onPrev: this.prev,\n      onNext: this.next,\n      showToolbar: this.showToolbar,\n      showToolbarTooltip: this.showToolbarTooltip\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/image/src/ImageGroup.js"],"names":["defineComponent","h","ref","provide","getCurrentInstance","createId","createInjectionKey","useConfig","NImagePreview","imagePreviewSharedProps","imageGroupInjectionKey","imageGroupProps","name","props","setup","currentSrc","mergedClsPrefixRef","groupId","vm","setPreviewSrc","src","_a","previewInstRef","value","go","step","proxy","container","$el","parentElement","imgs","querySelectorAll","length","index","Array","from","findIndex","img","dataset","previewSrc","setThumbnailEl","el","toggleShow","mergedClsPrefix","next","prev","render","theme","themeOverrides","clsPrefix","onPrev","onNext","showToolbar","showToolbarTooltip","$slots"],"mappings":"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","sourcesContent":["import { defineComponent, h, ref, provide, getCurrentInstance } from 'vue';\nimport { createId } from 'seemly';\nimport { createInjectionKey } from '../../_utils';\nimport { useConfig } from '../../_mixins';\nimport NImagePreview from './ImagePreview';\nimport { imagePreviewSharedProps } from './interface';\nexport const imageGroupInjectionKey = createInjectionKey('n-image-group');\nconst imageGroupProps = imagePreviewSharedProps;\nexport default defineComponent({\n    name: 'ImageGroup',\n    props: imageGroupProps,\n    setup(props) {\n        let currentSrc;\n        const { mergedClsPrefixRef } = useConfig(props);\n        const groupId = `c${createId()}`;\n        const vm = getCurrentInstance();\n        const setPreviewSrc = (src) => {\n            var _a;\n            currentSrc = src;\n            (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setPreviewSrc(src);\n        };\n        function go(step) {\n            if (!(vm === null || vm === void 0 ? void 0 : vm.proxy))\n                return;\n            const container = vm.proxy.$el.parentElement;\n            // use dom api since we can't get the correct order before all children are rendered\n            const imgs = container.querySelectorAll(`.${groupId}:not([data-error=true])`);\n            if (!imgs.length)\n                return;\n            const index = Array.from(imgs).findIndex((img) => img.dataset.previewSrc === currentSrc);\n            if (~index) {\n                setPreviewSrc(imgs[(index + step + imgs.length) % imgs.length].dataset.previewSrc);\n            }\n            else {\n                setPreviewSrc(imgs[0].dataset.previewSrc);\n            }\n        }\n        provide(imageGroupInjectionKey, {\n            mergedClsPrefixRef,\n            setPreviewSrc,\n            setThumbnailEl: (el) => {\n                var _a;\n                (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setThumbnailEl(el);\n            },\n            toggleShow: () => {\n                var _a;\n                (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.toggleShow();\n            },\n            groupId\n        });\n        const previewInstRef = ref(null);\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            previewInstRef,\n            next: () => go(1),\n            prev: () => go(-1)\n        };\n    },\n    render() {\n        return (h(NImagePreview, { theme: this.theme, themeOverrides: this.themeOverrides, clsPrefix: this.mergedClsPrefix, ref: \"previewInstRef\", onPrev: this.prev, onNext: this.next, showToolbar: this.showToolbar, showToolbarTooltip: this.showToolbarTooltip }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}