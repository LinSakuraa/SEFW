{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nexport function depx(value) {\n  if (typeof value === 'string') {\n    if (value.endsWith('px')) {\n      return Number(value.slice(0, value.length - 2));\n    }\n\n    return Number(value);\n  }\n\n  return value;\n}\n\nfunction pxfy(value) {\n  if (value === undefined || value === null) return undefined;\n  if (typeof value === 'number') return `${value}px`;\n  if (value.endsWith('px')) return value;\n  return `${value}px`;\n}\n\nexport { pxfy };\n\nfunction getMargin(value, position) {\n  const parts = value.trim().split(/\\s+/g);\n  const margin = {\n    top: parts[0]\n  };\n\n  switch (parts.length) {\n    case 1:\n      margin.right = parts[0];\n      margin.bottom = parts[0];\n      margin.left = parts[0];\n      break;\n\n    case 2:\n      margin.right = parts[1];\n      margin.left = parts[1];\n      margin.bottom = parts[0];\n      break;\n\n    case 3:\n      margin.right = parts[1];\n      margin.bottom = parts[2];\n      margin.left = parts[1];\n      break;\n\n    case 4:\n      margin.right = parts[1];\n      margin.bottom = parts[2];\n      margin.left = parts[3];\n      break;\n\n    default:\n      throw new Error('[seemly/getMargin]:' + value + ' is not a valid value.');\n  }\n\n  if (position === undefined) return margin;\n  return margin[position];\n}\n\nfunction getGap(value, orient) {\n  const [rowGap, colGap] = value.split(' ');\n  if (!orient) return {\n    row: rowGap,\n    col: colGap || rowGap\n  };\n  return orient === 'row' ? rowGap : colGap;\n}\n\nexport { getMargin, getMargin as getPadding, getGap };\nexport { parseResponsiveProp, parseResponsivePropValue } from './responsive';","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/seemly/es/css/index.js"],"names":["depx","value","endsWith","Number","slice","length","pxfy","undefined","getMargin","position","parts","trim","split","margin","top","right","bottom","left","Error","getGap","orient","rowGap","colGap","row","col","getPadding","parseResponsiveProp","parseResponsivePropValue"],"mappings":"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","sourcesContent":["export function depx(value) {\n    if (typeof value === 'string') {\n        if (value.endsWith('px')) {\n            return Number(value.slice(0, value.length - 2));\n        }\n        return Number(value);\n    }\n    return value;\n}\nfunction pxfy(value) {\n    if (value === undefined || value === null)\n        return undefined;\n    if (typeof value === 'number')\n        return `${value}px`;\n    if (value.endsWith('px'))\n        return value;\n    return `${value}px`;\n}\nexport { pxfy };\nfunction getMargin(value, position) {\n    const parts = value.trim().split(/\\s+/g);\n    const margin = {\n        top: parts[0]\n    };\n    switch (parts.length) {\n        case 1:\n            margin.right = parts[0];\n            margin.bottom = parts[0];\n            margin.left = parts[0];\n            break;\n        case 2:\n            margin.right = parts[1];\n            margin.left = parts[1];\n            margin.bottom = parts[0];\n            break;\n        case 3:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[1];\n            break;\n        case 4:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[3];\n            break;\n        default:\n            throw new Error('[seemly/getMargin]:' + value + ' is not a valid value.');\n    }\n    if (position === undefined)\n        return margin;\n    return margin[position];\n}\nfunction getGap(value, orient) {\n    const [rowGap, colGap] = value.split(' ');\n    if (!orient)\n        return {\n            row: rowGap,\n            col: colGap || rowGap\n        };\n    return orient === 'row' ? rowGap : colGap;\n}\nexport { getMargin, getMargin as getPadding, getGap };\nexport { parseResponsiveProp, parseResponsivePropValue } from './responsive';\n"]},"metadata":{},"sourceType":"module"}