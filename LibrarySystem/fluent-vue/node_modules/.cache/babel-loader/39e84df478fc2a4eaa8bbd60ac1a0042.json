{"ast":null,"code":"import { parseSelectorPath } from './parse';\nimport { isMediaOrSupports } from './utils';\nconst kebabRegex = /[A-Z]/g;\n\nfunction kebabCase(pattern) {\n  return pattern.replace(kebabRegex, match => '-' + match.toLowerCase());\n}\n/** TODO: refine it to solve nested object */\n\n\nfunction unwrapProperty(prop, indent = '  ') {\n  if (typeof prop === 'object' && prop !== null) {\n    return ' {\\n' + Object.entries(prop).map(v => {\n      return indent + `  ${kebabCase(v[0])}: ${v[1]};`;\n    }).join('\\n') + '\\n' + indent + '}';\n  }\n\n  return `: ${prop};`;\n}\n/** unwrap properties */\n\n\nfunction unwrapProperties(props, instance, params) {\n  if (typeof props === 'function') {\n    return props({\n      context: instance.context,\n      props: params\n    });\n  }\n\n  return props;\n}\n\nfunction createStyle(selector, props, instance, params) {\n  if (!props) return ''; // eslint-disable-next-line\n\n  const unwrappedProps = unwrapProperties(props, instance, params);\n  if (!unwrappedProps) return '';\n\n  if (typeof unwrappedProps === 'string') {\n    return `${selector} {\\n${unwrappedProps}\\n}`;\n  }\n\n  const propertyNames = Object.keys(unwrappedProps);\n\n  if (propertyNames.length === 0) {\n    if (instance.config.keepEmptyBlock) return selector + ' {\\n}';\n    return '';\n  }\n\n  const statements = selector ? [selector + ' {'] : [];\n  propertyNames.forEach(propertyName => {\n    const property = unwrappedProps[propertyName];\n\n    if (propertyName === 'raw') {\n      statements.push('\\n' + property + '\\n');\n      return;\n    }\n\n    propertyName = kebabCase(propertyName);\n\n    if (property !== null && property !== undefined) {\n      statements.push(`  ${propertyName}${unwrapProperty(property)}`);\n    }\n  });\n\n  if (selector) {\n    statements.push('}');\n  }\n\n  return statements.join('\\n');\n}\n\nfunction loopCNodeListWithCallback(children, options, callback) {\n  /* istanbul ignore if */\n  if (!children) return;\n  children.forEach(child => {\n    if (Array.isArray(child)) {\n      loopCNodeListWithCallback(child, options, callback);\n    } else if (typeof child === 'function') {\n      const grandChildren = child(options);\n\n      if (Array.isArray(grandChildren)) {\n        loopCNodeListWithCallback(grandChildren, options, callback);\n      } else if (grandChildren) {\n        callback(grandChildren);\n      }\n    } else if (child) {\n      callback(child);\n    }\n  });\n}\n\nfunction traverseCNode(node, selectorPaths, styles, instance, params, styleSheet) {\n  const $ = node.$;\n  let blockSelector = '';\n\n  if (!$ || typeof $ === 'string') {\n    if (isMediaOrSupports($)) {\n      blockSelector = $;\n    } else {\n      // as a string selector\n      selectorPaths.push($);\n    }\n  } else if (typeof $ === 'function') {\n    const selector = $({\n      context: instance.context,\n      props: params\n    });\n\n    if (isMediaOrSupports(selector)) {\n      blockSelector = selector;\n    } else {\n      // as a lazy selector\n      selectorPaths.push(selector);\n    }\n  } else {\n    // as a option selector\n    if ($.before) $.before(instance.context);\n\n    if (!$.$ || typeof $.$ === 'string') {\n      if (isMediaOrSupports($.$)) {\n        blockSelector = $.$;\n      } else {\n        // as a string selector\n        selectorPaths.push($.$);\n      }\n    } else\n      /* istanbul ignore else */\n      if ($.$) {\n        const selector = $.$({\n          context: instance.context,\n          props: params\n        });\n\n        if (isMediaOrSupports(selector)) {\n          blockSelector = selector;\n        } else {\n          // as a lazy selector\n          selectorPaths.push(selector);\n        }\n      }\n  }\n\n  const selector = parseSelectorPath(selectorPaths);\n  const style = createStyle(selector, node.props, instance, params);\n\n  if (blockSelector) {\n    styles.push(`${blockSelector} {`);\n\n    if (styleSheet && style) {\n      styleSheet.insertRule(`${blockSelector} {\\n${style}\\n}\\n`);\n    }\n  } else {\n    if (styleSheet && style) {\n      styleSheet.insertRule(style);\n    }\n\n    if (!styleSheet && style.length) styles.push(style);\n  }\n\n  if (node.children) {\n    loopCNodeListWithCallback(node.children, {\n      context: instance.context,\n      props: params\n    }, childNode => {\n      if (typeof childNode === 'string') {\n        const style = createStyle(selector, {\n          raw: childNode\n        }, instance, params);\n\n        if (styleSheet) {\n          styleSheet.insertRule(style);\n        } else {\n          styles.push(style);\n        }\n      } else {\n        traverseCNode(childNode, selectorPaths, styles, instance, params, styleSheet);\n      }\n    });\n  }\n\n  selectorPaths.pop();\n\n  if (blockSelector) {\n    styles.push('}');\n  }\n\n  if ($ && $.after) $.after(instance.context);\n}\n\nexport function render(node, instance, props, insertRule = false) {\n  const styles = [];\n  traverseCNode(node, [], styles, instance, props, insertRule ? node.instance.__styleSheet : undefined);\n  if (insertRule) return '';\n  return styles.join('\\n\\n');\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/css-render/esm/render.js"],"names":["parseSelectorPath","isMediaOrSupports","kebabRegex","kebabCase","pattern","replace","match","toLowerCase","unwrapProperty","prop","indent","Object","entries","map","v","join","unwrapProperties","props","instance","params","context","createStyle","selector","unwrappedProps","propertyNames","keys","length","config","keepEmptyBlock","statements","forEach","propertyName","property","push","undefined","loopCNodeListWithCallback","children","options","callback","child","Array","isArray","grandChildren","traverseCNode","node","selectorPaths","styles","styleSheet","$","blockSelector","before","style","insertRule","childNode","raw","pop","after","render","__styleSheet"],"mappings":"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","sourcesContent":["import { parseSelectorPath } from './parse';\nimport { isMediaOrSupports } from './utils';\nconst kebabRegex = /[A-Z]/g;\nfunction kebabCase(pattern) {\n    return pattern.replace(kebabRegex, match => '-' + match.toLowerCase());\n}\n/** TODO: refine it to solve nested object */\nfunction unwrapProperty(prop, indent = '  ') {\n    if (typeof prop === 'object' && prop !== null) {\n        return (' {\\n' +\n            Object.entries(prop).map(v => {\n                return indent + `  ${kebabCase(v[0])}: ${v[1]};`;\n            }).join('\\n') +\n            '\\n' + indent + '}');\n    }\n    return `: ${prop};`;\n}\n/** unwrap properties */\nfunction unwrapProperties(props, instance, params) {\n    if (typeof props === 'function') {\n        return props({\n            context: instance.context,\n            props: params\n        });\n    }\n    return props;\n}\nfunction createStyle(selector, props, instance, params) {\n    if (!props)\n        return '';\n    // eslint-disable-next-line\n    const unwrappedProps = unwrapProperties(props, instance, params);\n    if (!unwrappedProps)\n        return '';\n    if (typeof unwrappedProps === 'string') {\n        return `${selector} {\\n${unwrappedProps}\\n}`;\n    }\n    const propertyNames = Object.keys(unwrappedProps);\n    if (propertyNames.length === 0) {\n        if (instance.config.keepEmptyBlock)\n            return selector + ' {\\n}';\n        return '';\n    }\n    const statements = selector\n        ? [\n            selector + ' {'\n        ]\n        : [];\n    propertyNames.forEach(propertyName => {\n        const property = unwrappedProps[propertyName];\n        if (propertyName === 'raw') {\n            statements.push('\\n' + property + '\\n');\n            return;\n        }\n        propertyName = kebabCase(propertyName);\n        if (property !== null && property !== undefined) {\n            statements.push(`  ${propertyName}${unwrapProperty(property)}`);\n        }\n    });\n    if (selector) {\n        statements.push('}');\n    }\n    return statements.join('\\n');\n}\nfunction loopCNodeListWithCallback(children, options, callback) {\n    /* istanbul ignore if */\n    if (!children)\n        return;\n    children.forEach(child => {\n        if (Array.isArray(child)) {\n            loopCNodeListWithCallback(child, options, callback);\n        }\n        else if (typeof child === 'function') {\n            const grandChildren = child(options);\n            if (Array.isArray(grandChildren)) {\n                loopCNodeListWithCallback(grandChildren, options, callback);\n            }\n            else if (grandChildren) {\n                callback(grandChildren);\n            }\n        }\n        else if (child) {\n            callback(child);\n        }\n    });\n}\nfunction traverseCNode(node, selectorPaths, styles, instance, params, styleSheet) {\n    const $ = node.$;\n    let blockSelector = '';\n    if (!$ || typeof $ === 'string') {\n        if (isMediaOrSupports($)) {\n            blockSelector = $;\n        }\n        else {\n            // as a string selector\n            selectorPaths.push($);\n        }\n    }\n    else if (typeof $ === 'function') {\n        const selector = $({\n            context: instance.context,\n            props: params\n        });\n        if (isMediaOrSupports(selector)) {\n            blockSelector = selector;\n        }\n        else {\n            // as a lazy selector\n            selectorPaths.push(selector);\n        }\n    }\n    else { // as a option selector\n        if ($.before)\n            $.before(instance.context);\n        if (!$.$ || typeof $.$ === 'string') {\n            if (isMediaOrSupports($.$)) {\n                blockSelector = $.$;\n            }\n            else {\n                // as a string selector\n                selectorPaths.push($.$);\n            }\n        }\n        else /* istanbul ignore else */ if ($.$) {\n            const selector = $.$({\n                context: instance.context,\n                props: params\n            });\n            if (isMediaOrSupports(selector)) {\n                blockSelector = selector;\n            }\n            else {\n                // as a lazy selector\n                selectorPaths.push(selector);\n            }\n        }\n    }\n    const selector = parseSelectorPath(selectorPaths);\n    const style = createStyle(selector, node.props, instance, params);\n    if (blockSelector) {\n        styles.push(`${blockSelector} {`);\n        if (styleSheet && style) {\n            styleSheet.insertRule(`${blockSelector} {\\n${style}\\n}\\n`);\n        }\n    }\n    else {\n        if (styleSheet && style) {\n            styleSheet.insertRule(style);\n        }\n        if (!styleSheet && style.length)\n            styles.push(style);\n    }\n    if (node.children) {\n        loopCNodeListWithCallback(node.children, {\n            context: instance.context,\n            props: params\n        }, childNode => {\n            if (typeof childNode === 'string') {\n                const style = createStyle(selector, { raw: childNode }, instance, params);\n                if (styleSheet) {\n                    styleSheet.insertRule(style);\n                }\n                else {\n                    styles.push(style);\n                }\n            }\n            else {\n                traverseCNode(childNode, selectorPaths, styles, instance, params, styleSheet);\n            }\n        });\n    }\n    selectorPaths.pop();\n    if (blockSelector) {\n        styles.push('}');\n    }\n    if ($ && $.after)\n        $.after(instance.context);\n}\nexport function render(node, instance, props, insertRule = false) {\n    const styles = [];\n    traverseCNode(node, [], styles, instance, props, insertRule\n        ? node.instance.__styleSheet\n        : undefined);\n    if (insertRule)\n        return '';\n    return styles.join('\\n\\n');\n}\n"]},"metadata":{},"sourceType":"module"}