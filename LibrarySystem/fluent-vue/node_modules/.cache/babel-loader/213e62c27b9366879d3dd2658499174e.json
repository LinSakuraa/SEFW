{"ast":null,"code":"function spilloverSubscribe(subscriber) {\n  const spillover = this.spillover;\n  const index = spillover.indexOf(subscriber);\n\n  if (index === -1) {\n    spillover.push(subscriber);\n  }\n}\n\nfunction spilloverUnsubscribe(subscriber) {\n  const spillover = this.spillover;\n  const index = spillover.indexOf(subscriber);\n\n  if (index !== -1) {\n    spillover.splice(index, 1);\n  }\n}\n\nfunction spilloverNotifySubscribers(args) {\n  const spillover = this.spillover;\n  const source = this.source;\n\n  for (let i = 0, ii = spillover.length; i < ii; ++i) {\n    spillover[i].handleChange(source, args);\n  }\n}\n\nfunction spilloverHas(subscriber) {\n  return this.spillover.indexOf(subscriber) !== -1;\n}\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\n\n\nexport class SubscriberSet {\n  /**\n   * Creates an instance of SubscriberSet for the specified source.\n   * @param source - The object source that subscribers will receive notifications from.\n   * @param initialSubscriber - An initial subscriber to changes.\n   */\n  constructor(source, initialSubscriber) {\n    this.sub1 = void 0;\n    this.sub2 = void 0;\n    this.spillover = void 0;\n    this.source = source;\n    this.sub1 = initialSubscriber;\n  }\n  /**\n   * Checks whether the provided subscriber has been added to this set.\n   * @param subscriber - The subscriber to test for inclusion in this set.\n   */\n\n\n  has(subscriber) {\n    return this.sub1 === subscriber || this.sub2 === subscriber;\n  }\n  /**\n   * Subscribes to notification of changes in an object's state.\n   * @param subscriber - The object that is subscribing for change notification.\n   */\n\n\n  subscribe(subscriber) {\n    if (this.has(subscriber)) {\n      return;\n    }\n\n    if (this.sub1 === void 0) {\n      this.sub1 = subscriber;\n      return;\n    }\n\n    if (this.sub2 === void 0) {\n      this.sub2 = subscriber;\n      return;\n    }\n\n    this.spillover = [this.sub1, this.sub2, subscriber];\n    this.subscribe = spilloverSubscribe;\n    this.unsubscribe = spilloverUnsubscribe;\n    this.notify = spilloverNotifySubscribers;\n    this.has = spilloverHas;\n    this.sub1 = void 0;\n    this.sub2 = void 0;\n  }\n  /**\n   * Unsubscribes from notification of changes in an object's state.\n   * @param subscriber - The object that is unsubscribing from change notification.\n   */\n\n\n  unsubscribe(subscriber) {\n    if (this.sub1 === subscriber) {\n      this.sub1 = void 0;\n    } else if (this.sub2 === subscriber) {\n      this.sub2 = void 0;\n    }\n  }\n  /**\n   * Notifies all subscribers.\n   * @param args - Data passed along to subscribers during notification.\n   */\n\n\n  notify(args) {\n    const sub1 = this.sub1;\n    const sub2 = this.sub2;\n    const source = this.source;\n\n    if (sub1 !== void 0) {\n      sub1.handleChange(source, args);\n    }\n\n    if (sub2 !== void 0) {\n      sub2.handleChange(source, args);\n    }\n  }\n\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\n\nexport class PropertyChangeNotifier {\n  /**\n   * Creates an instance of PropertyChangeNotifier for the specified source.\n   * @param source - The object source that subscribers will receive notifications from.\n   */\n  constructor(source) {\n    this.subscribers = {};\n    this.sourceSubscribers = null;\n    this.source = source;\n  }\n  /**\n   * Notifies all subscribers, based on the specified property.\n   * @param propertyName - The property name, passed along to subscribers during notification.\n   */\n\n\n  notify(propertyName) {\n    var _a;\n\n    const subscribers = this.subscribers[propertyName];\n\n    if (subscribers !== void 0) {\n      subscribers.notify(propertyName);\n    }\n\n    (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n  }\n  /**\n   * Subscribes to notification of changes in an object's state.\n   * @param subscriber - The object that is subscribing for change notification.\n   * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n   */\n\n\n  subscribe(subscriber, propertyToWatch) {\n    var _a;\n\n    if (propertyToWatch) {\n      let subscribers = this.subscribers[propertyToWatch];\n\n      if (subscribers === void 0) {\n        this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n      }\n\n      subscribers.subscribe(subscriber);\n    } else {\n      this.sourceSubscribers = (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n      this.sourceSubscribers.subscribe(subscriber);\n    }\n  }\n  /**\n   * Unsubscribes from notification of changes in an object's state.\n   * @param subscriber - The object that is unsubscribing from change notification.\n   * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n   */\n\n\n  unsubscribe(subscriber, propertyToUnwatch) {\n    var _a;\n\n    if (propertyToUnwatch) {\n      const subscribers = this.subscribers[propertyToUnwatch];\n\n      if (subscribers !== void 0) {\n        subscribers.unsubscribe(subscriber);\n      }\n    } else {\n      (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/observation/notifier.js"],"names":["spilloverSubscribe","subscriber","spillover","index","indexOf","push","spilloverUnsubscribe","splice","spilloverNotifySubscribers","args","source","i","ii","length","handleChange","spilloverHas","SubscriberSet","constructor","initialSubscriber","sub1","sub2","has","subscribe","unsubscribe","notify","PropertyChangeNotifier","subscribers","sourceSubscribers","propertyName","_a","propertyToWatch","propertyToUnwatch"],"mappings":"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","sourcesContent":["function spilloverSubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index === -1) {\n        spillover.push(subscriber);\n    }\n}\nfunction spilloverUnsubscribe(subscriber) {\n    const spillover = this.spillover;\n    const index = spillover.indexOf(subscriber);\n    if (index !== -1) {\n        spillover.splice(index, 1);\n    }\n}\nfunction spilloverNotifySubscribers(args) {\n    const spillover = this.spillover;\n    const source = this.source;\n    for (let i = 0, ii = spillover.length; i < ii; ++i) {\n        spillover[i].handleChange(source, args);\n    }\n}\nfunction spilloverHas(subscriber) {\n    return this.spillover.indexOf(subscriber) !== -1;\n}\n/**\n * An implementation of {@link Notifier} that efficiently keeps track of\n * subscribers interested in a specific change notification on an\n * observable source.\n *\n * @remarks\n * This set is optimized for the most common scenario of 1 or 2 subscribers.\n * With this in mind, it can store a subscriber in an internal field, allowing it to avoid Array#push operations.\n * If the set ever exceeds two subscribers, it upgrades to an array automatically.\n * @public\n */\nexport class SubscriberSet {\n    /**\n     * Creates an instance of SubscriberSet for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     * @param initialSubscriber - An initial subscriber to changes.\n     */\n    constructor(source, initialSubscriber) {\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n        this.spillover = void 0;\n        this.source = source;\n        this.sub1 = initialSubscriber;\n    }\n    /**\n     * Checks whether the provided subscriber has been added to this set.\n     * @param subscriber - The subscriber to test for inclusion in this set.\n     */\n    has(subscriber) {\n        return this.sub1 === subscriber || this.sub2 === subscriber;\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     */\n    subscribe(subscriber) {\n        if (this.has(subscriber)) {\n            return;\n        }\n        if (this.sub1 === void 0) {\n            this.sub1 = subscriber;\n            return;\n        }\n        if (this.sub2 === void 0) {\n            this.sub2 = subscriber;\n            return;\n        }\n        this.spillover = [this.sub1, this.sub2, subscriber];\n        this.subscribe = spilloverSubscribe;\n        this.unsubscribe = spilloverUnsubscribe;\n        this.notify = spilloverNotifySubscribers;\n        this.has = spilloverHas;\n        this.sub1 = void 0;\n        this.sub2 = void 0;\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     */\n    unsubscribe(subscriber) {\n        if (this.sub1 === subscriber) {\n            this.sub1 = void 0;\n        }\n        else if (this.sub2 === subscriber) {\n            this.sub2 = void 0;\n        }\n    }\n    /**\n     * Notifies all subscribers.\n     * @param args - Data passed along to subscribers during notification.\n     */\n    notify(args) {\n        const sub1 = this.sub1;\n        const sub2 = this.sub2;\n        const source = this.source;\n        if (sub1 !== void 0) {\n            sub1.handleChange(source, args);\n        }\n        if (sub2 !== void 0) {\n            sub2.handleChange(source, args);\n        }\n    }\n}\n/**\n * An implementation of Notifier that allows subscribers to be notified\n * of individual property changes on an object.\n * @public\n */\nexport class PropertyChangeNotifier {\n    /**\n     * Creates an instance of PropertyChangeNotifier for the specified source.\n     * @param source - The object source that subscribers will receive notifications from.\n     */\n    constructor(source) {\n        this.subscribers = {};\n        this.sourceSubscribers = null;\n        this.source = source;\n    }\n    /**\n     * Notifies all subscribers, based on the specified property.\n     * @param propertyName - The property name, passed along to subscribers during notification.\n     */\n    notify(propertyName) {\n        var _a;\n        const subscribers = this.subscribers[propertyName];\n        if (subscribers !== void 0) {\n            subscribers.notify(propertyName);\n        }\n        (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.notify(propertyName);\n    }\n    /**\n     * Subscribes to notification of changes in an object's state.\n     * @param subscriber - The object that is subscribing for change notification.\n     * @param propertyToWatch - The name of the property that the subscriber is interested in watching for changes.\n     */\n    subscribe(subscriber, propertyToWatch) {\n        var _a;\n        if (propertyToWatch) {\n            let subscribers = this.subscribers[propertyToWatch];\n            if (subscribers === void 0) {\n                this.subscribers[propertyToWatch] = subscribers = new SubscriberSet(this.source);\n            }\n            subscribers.subscribe(subscriber);\n        }\n        else {\n            this.sourceSubscribers = (_a = this.sourceSubscribers) !== null && _a !== void 0 ? _a : new SubscriberSet(this.source);\n            this.sourceSubscribers.subscribe(subscriber);\n        }\n    }\n    /**\n     * Unsubscribes from notification of changes in an object's state.\n     * @param subscriber - The object that is unsubscribing from change notification.\n     * @param propertyToUnwatch - The name of the property that the subscriber is no longer interested in watching.\n     */\n    unsubscribe(subscriber, propertyToUnwatch) {\n        var _a;\n        if (propertyToUnwatch) {\n            const subscribers = this.subscribers[propertyToUnwatch];\n            if (subscribers !== void 0) {\n                subscribers.unsubscribe(subscriber);\n            }\n        }\n        else {\n            (_a = this.sourceSubscribers) === null || _a === void 0 ? void 0 : _a.unsubscribe(subscriber);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}