{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, Observable, observable } from \"@microsoft/fast-element\";\nimport { uniqueId } from \"@microsoft/fast-web-utilities\";\nimport { DelegatesARIAListbox, Listbox } from \"../listbox\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FormAssociatedSelect } from \"./select.form-associated\";\nimport { SelectPosition } from \"./select.options\";\n/**\n * A Select Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.\n *\n * @public\n */\n\nexport class Select extends FormAssociatedSelect {\n  constructor() {\n    super(...arguments);\n    /**\n     * The open attribute.\n     *\n     * @internal\n     */\n\n    this.open = false;\n    /**\n     * Indicates the initial state of the position attribute.\n     *\n     * @internal\n     */\n\n    this.forcedPosition = false;\n    /**\n     * Holds the current state for the calculated position of the listbox.\n     *\n     * @public\n     */\n\n    this.position = SelectPosition.below;\n    /**\n     * The unique id for the internal listbox element.\n     *\n     * @internal\n     */\n\n    this.listboxId = uniqueId(\"listbox-\");\n    /**\n     * The max height for the listbox when opened.\n     *\n     * @internal\n     */\n\n    this.maxHeight = 0;\n    /**\n     * The value displayed on the button.\n     *\n     * @public\n     */\n\n    this.displayValue = \"\";\n  }\n\n  openChanged() {\n    if (this.open) {\n      this.ariaControls = this.listboxId;\n      this.ariaExpanded = \"true\";\n      this.setPositioning();\n      this.focusAndScrollOptionIntoView();\n      this.indexWhenOpened = this.selectedIndex; // focus is directed to the element when `open` is changed programmatically\n\n      DOM.queueUpdate(() => this.focus());\n      return;\n    }\n\n    this.ariaControls = \"\";\n    this.ariaExpanded = \"false\";\n  }\n  /**\n   * The value property.\n   *\n   * @public\n   */\n\n\n  get value() {\n    Observable.track(this, \"value\");\n    return this._value;\n  }\n\n  set value(next) {\n    var _a;\n\n    const prev = `${this._value}`;\n\n    if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {\n      const selectedIndex = this.options.findIndex(el => el.value === next);\n      const prevSelectedOption = this.options[this.selectedIndex];\n      const nextSelectedOption = this.options[selectedIndex];\n      const prevSelectedValue = prevSelectedOption ? prevSelectedOption.value : null;\n      const nextSelectedValue = nextSelectedOption ? nextSelectedOption.value : null;\n\n      if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {\n        next = \"\";\n        this.selectedIndex = selectedIndex;\n      }\n\n      if (this.firstSelectedOption) {\n        next = this.firstSelectedOption.value;\n      }\n    }\n\n    if (prev !== next) {\n      this._value = next;\n      super.valueChanged(prev, next);\n      Observable.notify(this, \"value\");\n    }\n  }\n\n  updateValue(shouldEmit) {\n    if (this.$fastController.isConnected) {\n      this.value = this.firstSelectedOption ? this.firstSelectedOption.value : \"\";\n      this.displayValue = this.firstSelectedOption ? this.firstSelectedOption.textContent || this.firstSelectedOption.value : this.value;\n    }\n\n    if (shouldEmit) {\n      this.$emit(\"input\");\n      this.$emit(\"change\", this, {\n        bubbles: true,\n        composed: undefined\n      });\n    }\n  }\n  /**\n   * Updates the proxy value when the selected index changes.\n   *\n   * @param prev - the previous selected index\n   * @param next - the next selected index\n   *\n   * @internal\n   */\n\n\n  selectedIndexChanged(prev, next) {\n    super.selectedIndexChanged(prev, next);\n    this.updateValue();\n  }\n\n  positionChanged() {\n    this.positionAttribute = this.position;\n    this.setPositioning();\n  }\n  /**\n   * Calculate and apply listbox positioning based on available viewport space.\n   *\n   * @param force - direction to force the listbox to display\n   * @public\n   */\n\n\n  setPositioning() {\n    const currentBox = this.getBoundingClientRect();\n    const viewportHeight = window.innerHeight;\n    const availableBottom = viewportHeight - currentBox.bottom;\n    this.position = this.forcedPosition ? this.positionAttribute : currentBox.top > availableBottom ? SelectPosition.above : SelectPosition.below;\n    this.positionAttribute = this.forcedPosition ? this.positionAttribute : this.position;\n    this.maxHeight = this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;\n  }\n\n  maxHeightChanged() {\n    if (this.listbox) {\n      this.listbox.style.setProperty(\"--max-height\", `${this.maxHeight}px`);\n    }\n  }\n  /**\n   * Synchronize the `aria-disabled` property when the `disabled` property changes.\n   *\n   * @param prev - The previous disabled value\n   * @param next - The next disabled value\n   *\n   * @internal\n   */\n\n\n  disabledChanged(prev, next) {\n    if (super.disabledChanged) {\n      super.disabledChanged(prev, next);\n    }\n\n    this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n  }\n  /**\n   * Reset the element to its first selectable option when its parent form is reset.\n   *\n   * @internal\n   */\n\n\n  formResetCallback() {\n    this.setProxyOptions(); // Call the base class's implementation setDefaultSelectedOption instead of the select's\n    // override, in order to reset the selectedIndex without using the value property.\n\n    super.setDefaultSelectedOption();\n    this.value = this.firstSelectedOption.value;\n  }\n  /**\n   * Handle opening and closing the listbox when the select is clicked.\n   *\n   * @param e - the mouse event\n   * @internal\n   */\n\n\n  clickHandler(e) {\n    // do nothing if the select is disabled\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.open) {\n      const captured = e.target.closest(`option,[role=option]`);\n\n      if (captured && captured.disabled) {\n        return;\n      }\n    }\n\n    super.clickHandler(e);\n    this.open = !this.open;\n\n    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n      this.updateValue(true);\n    }\n\n    return true;\n  }\n  /**\n   * Handle focus state when the element or its children lose focus.\n   *\n   * @param e - The focus event\n   * @internal\n   */\n\n\n  focusoutHandler(e) {\n    var _a;\n\n    if (!this.open) {\n      return true;\n    }\n\n    const focusTarget = e.relatedTarget;\n\n    if (this.isSameNode(focusTarget)) {\n      this.focus();\n      return;\n    }\n\n    if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.includes(focusTarget))) {\n      this.open = false;\n\n      if (this.indexWhenOpened !== this.selectedIndex) {\n        this.updateValue(true);\n      }\n    }\n  }\n  /**\n   * Synchronize the form-associated proxy and update the value property of the element.\n   *\n   * @param prev - the previous collection of slotted option elements\n   * @param next - the next collection of slotted option elements\n   *\n   * @internal\n   */\n\n\n  slottedOptionsChanged(prev, next) {\n    super.slottedOptionsChanged(prev, next);\n    this.setProxyOptions();\n    this.updateValue();\n  }\n\n  setDefaultSelectedOption() {\n    var _a;\n\n    const options = (_a = this.options) !== null && _a !== void 0 ? _a : Array.from(this.children).filter(Listbox.slottedOptionFilter);\n    const selectedIndex = options === null || options === void 0 ? void 0 : options.findIndex(el => el.hasAttribute(\"selected\") || el.selected || el.value === this.value);\n\n    if (selectedIndex !== -1) {\n      this.selectedIndex = selectedIndex;\n      return;\n    }\n\n    this.selectedIndex = 0;\n  }\n  /**\n   * Reset and fill the proxy to match the component's options.\n   *\n   * @internal\n   */\n\n\n  setProxyOptions() {\n    if (this.proxy instanceof HTMLSelectElement && this.options) {\n      this.proxy.options.length = 0;\n      this.options.forEach(option => {\n        const proxyOption = option.proxy || (option instanceof HTMLOptionElement ? option.cloneNode() : null);\n\n        if (proxyOption) {\n          this.proxy.appendChild(proxyOption);\n        }\n      });\n    }\n  }\n  /**\n   * Handle keyboard interaction for the select.\n   *\n   * @param e - the keyboard event\n   * @internal\n   */\n\n\n  keydownHandler(e) {\n    super.keydownHandler(e);\n    const key = e.key || e.key.charCodeAt(0);\n\n    switch (key) {\n      case \" \":\n        {\n          if (this.typeaheadExpired) {\n            e.preventDefault();\n            this.open = !this.open;\n          }\n\n          break;\n        }\n\n      case \"Enter\":\n        {\n          e.preventDefault();\n          this.open = !this.open;\n          break;\n        }\n\n      case \"Escape\":\n        {\n          if (this.open) {\n            e.preventDefault();\n            this.open = false;\n          }\n\n          break;\n        }\n\n      case \"Tab\":\n        {\n          if (!this.open) {\n            return true;\n          }\n\n          e.preventDefault();\n          this.open = false;\n        }\n    }\n\n    if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n      this.updateValue(true);\n      this.indexWhenOpened = this.selectedIndex;\n    }\n\n    return true;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.forcedPosition = !!this.positionAttribute;\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"open\",\n  mode: \"boolean\"\n})], Select.prototype, \"open\", void 0);\n\n__decorate([attr({\n  attribute: \"position\"\n})], Select.prototype, \"positionAttribute\", void 0);\n\n__decorate([observable], Select.prototype, \"position\", void 0);\n\n__decorate([observable], Select.prototype, \"maxHeight\", void 0);\n\n__decorate([observable], Select.prototype, \"displayValue\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA select role.\n *\n * @public\n */\n\n\nexport class DelegatesARIASelect {}\n\n__decorate([observable], DelegatesARIASelect.prototype, \"ariaControls\", void 0);\n\napplyMixins(DelegatesARIASelect, DelegatesARIAListbox);\napplyMixins(Select, StartEnd, DelegatesARIASelect);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/select/select.js"],"names":["__decorate","attr","DOM","Observable","observable","uniqueId","DelegatesARIAListbox","Listbox","StartEnd","applyMixins","FormAssociatedSelect","SelectPosition","Select","constructor","arguments","open","forcedPosition","position","below","listboxId","maxHeight","displayValue","openChanged","ariaControls","ariaExpanded","setPositioning","focusAndScrollOptionIntoView","indexWhenOpened","selectedIndex","queueUpdate","focus","value","track","_value","next","_a","prev","options","length","findIndex","el","prevSelectedOption","nextSelectedOption","prevSelectedValue","nextSelectedValue","firstSelectedOption","valueChanged","notify","updateValue","shouldEmit","$fastController","isConnected","textContent","$emit","bubbles","composed","undefined","selectedIndexChanged","positionChanged","positionAttribute","currentBox","getBoundingClientRect","viewportHeight","window","innerHeight","availableBottom","bottom","top","above","maxHeightChanged","listbox","style","setProperty","disabledChanged","ariaDisabled","disabled","formResetCallback","setProxyOptions","setDefaultSelectedOption","clickHandler","e","captured","target","closest","focusoutHandler","focusTarget","relatedTarget","isSameNode","includes","slottedOptionsChanged","Array","from","children","filter","slottedOptionFilter","hasAttribute","selected","proxy","HTMLSelectElement","forEach","option","proxyOption","HTMLOptionElement","cloneNode","appendChild","keydownHandler","key","charCodeAt","typeaheadExpired","preventDefault","connectedCallback","attribute","mode","prototype","DelegatesARIASelect"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, Observable, observable } from \"@microsoft/fast-element\";\nimport { uniqueId } from \"@microsoft/fast-web-utilities\";\nimport { DelegatesARIAListbox, Listbox } from \"../listbox\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FormAssociatedSelect } from \"./select.form-associated\";\nimport { SelectPosition } from \"./select.options\";\n/**\n * A Select Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.\n *\n * @public\n */\nexport class Select extends FormAssociatedSelect {\n    constructor() {\n        super(...arguments);\n        /**\n         * The open attribute.\n         *\n         * @internal\n         */\n        this.open = false;\n        /**\n         * Indicates the initial state of the position attribute.\n         *\n         * @internal\n         */\n        this.forcedPosition = false;\n        /**\n         * Holds the current state for the calculated position of the listbox.\n         *\n         * @public\n         */\n        this.position = SelectPosition.below;\n        /**\n         * The unique id for the internal listbox element.\n         *\n         * @internal\n         */\n        this.listboxId = uniqueId(\"listbox-\");\n        /**\n         * The max height for the listbox when opened.\n         *\n         * @internal\n         */\n        this.maxHeight = 0;\n        /**\n         * The value displayed on the button.\n         *\n         * @public\n         */\n        this.displayValue = \"\";\n    }\n    openChanged() {\n        if (this.open) {\n            this.ariaControls = this.listboxId;\n            this.ariaExpanded = \"true\";\n            this.setPositioning();\n            this.focusAndScrollOptionIntoView();\n            this.indexWhenOpened = this.selectedIndex;\n            // focus is directed to the element when `open` is changed programmatically\n            DOM.queueUpdate(() => this.focus());\n            return;\n        }\n        this.ariaControls = \"\";\n        this.ariaExpanded = \"false\";\n    }\n    /**\n     * The value property.\n     *\n     * @public\n     */\n    get value() {\n        Observable.track(this, \"value\");\n        return this._value;\n    }\n    set value(next) {\n        var _a;\n        const prev = `${this._value}`;\n        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {\n            const selectedIndex = this.options.findIndex(el => el.value === next);\n            const prevSelectedOption = this.options[this.selectedIndex];\n            const nextSelectedOption = this.options[selectedIndex];\n            const prevSelectedValue = prevSelectedOption\n                ? prevSelectedOption.value\n                : null;\n            const nextSelectedValue = nextSelectedOption\n                ? nextSelectedOption.value\n                : null;\n            if (selectedIndex === -1 || prevSelectedValue !== nextSelectedValue) {\n                next = \"\";\n                this.selectedIndex = selectedIndex;\n            }\n            if (this.firstSelectedOption) {\n                next = this.firstSelectedOption.value;\n            }\n        }\n        if (prev !== next) {\n            this._value = next;\n            super.valueChanged(prev, next);\n            Observable.notify(this, \"value\");\n        }\n    }\n    updateValue(shouldEmit) {\n        if (this.$fastController.isConnected) {\n            this.value = this.firstSelectedOption ? this.firstSelectedOption.value : \"\";\n            this.displayValue = this.firstSelectedOption\n                ? this.firstSelectedOption.textContent || this.firstSelectedOption.value\n                : this.value;\n        }\n        if (shouldEmit) {\n            this.$emit(\"input\");\n            this.$emit(\"change\", this, {\n                bubbles: true,\n                composed: undefined,\n            });\n        }\n    }\n    /**\n     * Updates the proxy value when the selected index changes.\n     *\n     * @param prev - the previous selected index\n     * @param next - the next selected index\n     *\n     * @internal\n     */\n    selectedIndexChanged(prev, next) {\n        super.selectedIndexChanged(prev, next);\n        this.updateValue();\n    }\n    positionChanged() {\n        this.positionAttribute = this.position;\n        this.setPositioning();\n    }\n    /**\n     * Calculate and apply listbox positioning based on available viewport space.\n     *\n     * @param force - direction to force the listbox to display\n     * @public\n     */\n    setPositioning() {\n        const currentBox = this.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const availableBottom = viewportHeight - currentBox.bottom;\n        this.position = this.forcedPosition\n            ? this.positionAttribute\n            : currentBox.top > availableBottom\n                ? SelectPosition.above\n                : SelectPosition.below;\n        this.positionAttribute = this.forcedPosition\n            ? this.positionAttribute\n            : this.position;\n        this.maxHeight =\n            this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;\n    }\n    maxHeightChanged() {\n        if (this.listbox) {\n            this.listbox.style.setProperty(\"--max-height\", `${this.maxHeight}px`);\n        }\n    }\n    /**\n     * Synchronize the `aria-disabled` property when the `disabled` property changes.\n     *\n     * @param prev - The previous disabled value\n     * @param next - The next disabled value\n     *\n     * @internal\n     */\n    disabledChanged(prev, next) {\n        if (super.disabledChanged) {\n            super.disabledChanged(prev, next);\n        }\n        this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n    }\n    /**\n     * Reset the element to its first selectable option when its parent form is reset.\n     *\n     * @internal\n     */\n    formResetCallback() {\n        this.setProxyOptions();\n        // Call the base class's implementation setDefaultSelectedOption instead of the select's\n        // override, in order to reset the selectedIndex without using the value property.\n        super.setDefaultSelectedOption();\n        this.value = this.firstSelectedOption.value;\n    }\n    /**\n     * Handle opening and closing the listbox when the select is clicked.\n     *\n     * @param e - the mouse event\n     * @internal\n     */\n    clickHandler(e) {\n        // do nothing if the select is disabled\n        if (this.disabled) {\n            return;\n        }\n        if (this.open) {\n            const captured = e.target.closest(`option,[role=option]`);\n            if (captured && captured.disabled) {\n                return;\n            }\n        }\n        super.clickHandler(e);\n        this.open = !this.open;\n        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n            this.updateValue(true);\n        }\n        return true;\n    }\n    /**\n     * Handle focus state when the element or its children lose focus.\n     *\n     * @param e - The focus event\n     * @internal\n     */\n    focusoutHandler(e) {\n        var _a;\n        if (!this.open) {\n            return true;\n        }\n        const focusTarget = e.relatedTarget;\n        if (this.isSameNode(focusTarget)) {\n            this.focus();\n            return;\n        }\n        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.includes(focusTarget))) {\n            this.open = false;\n            if (this.indexWhenOpened !== this.selectedIndex) {\n                this.updateValue(true);\n            }\n        }\n    }\n    /**\n     * Synchronize the form-associated proxy and update the value property of the element.\n     *\n     * @param prev - the previous collection of slotted option elements\n     * @param next - the next collection of slotted option elements\n     *\n     * @internal\n     */\n    slottedOptionsChanged(prev, next) {\n        super.slottedOptionsChanged(prev, next);\n        this.setProxyOptions();\n        this.updateValue();\n    }\n    setDefaultSelectedOption() {\n        var _a;\n        const options = (_a = this.options) !== null && _a !== void 0 ? _a : Array.from(this.children).filter(Listbox.slottedOptionFilter);\n        const selectedIndex = options === null || options === void 0 ? void 0 : options.findIndex(el => el.hasAttribute(\"selected\") || el.selected || el.value === this.value);\n        if (selectedIndex !== -1) {\n            this.selectedIndex = selectedIndex;\n            return;\n        }\n        this.selectedIndex = 0;\n    }\n    /**\n     * Reset and fill the proxy to match the component's options.\n     *\n     * @internal\n     */\n    setProxyOptions() {\n        if (this.proxy instanceof HTMLSelectElement && this.options) {\n            this.proxy.options.length = 0;\n            this.options.forEach(option => {\n                const proxyOption = option.proxy ||\n                    (option instanceof HTMLOptionElement ? option.cloneNode() : null);\n                if (proxyOption) {\n                    this.proxy.appendChild(proxyOption);\n                }\n            });\n        }\n    }\n    /**\n     * Handle keyboard interaction for the select.\n     *\n     * @param e - the keyboard event\n     * @internal\n     */\n    keydownHandler(e) {\n        super.keydownHandler(e);\n        const key = e.key || e.key.charCodeAt(0);\n        switch (key) {\n            case \" \": {\n                if (this.typeaheadExpired) {\n                    e.preventDefault();\n                    this.open = !this.open;\n                }\n                break;\n            }\n            case \"Enter\": {\n                e.preventDefault();\n                this.open = !this.open;\n                break;\n            }\n            case \"Escape\": {\n                if (this.open) {\n                    e.preventDefault();\n                    this.open = false;\n                }\n                break;\n            }\n            case \"Tab\": {\n                if (!this.open) {\n                    return true;\n                }\n                e.preventDefault();\n                this.open = false;\n            }\n        }\n        if (!this.open && this.indexWhenOpened !== this.selectedIndex) {\n            this.updateValue(true);\n            this.indexWhenOpened = this.selectedIndex;\n        }\n        return true;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.forcedPosition = !!this.positionAttribute;\n    }\n}\n__decorate([\n    attr({ attribute: \"open\", mode: \"boolean\" })\n], Select.prototype, \"open\", void 0);\n__decorate([\n    attr({ attribute: \"position\" })\n], Select.prototype, \"positionAttribute\", void 0);\n__decorate([\n    observable\n], Select.prototype, \"position\", void 0);\n__decorate([\n    observable\n], Select.prototype, \"maxHeight\", void 0);\n__decorate([\n    observable\n], Select.prototype, \"displayValue\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA select role.\n *\n * @public\n */\nexport class DelegatesARIASelect {\n}\n__decorate([\n    observable\n], DelegatesARIASelect.prototype, \"ariaControls\", void 0);\napplyMixins(DelegatesARIASelect, DelegatesARIAListbox);\napplyMixins(Select, StartEnd, DelegatesARIASelect);\n"]},"metadata":{},"sourceType":"module"}