{"ast":null,"code":"import { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from '../../_utils'; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nexport function useExpand(props) {\n  const renderExpandRef = useMemo(() => {\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n          warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n        }\n\n        return col.renderExpand;\n      }\n    }\n  });\n  const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandedRowKeys);\n  const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n  const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n\n  function doUpdateExpandedRowKeys(expandedKeys) {\n    const {\n      onUpdateExpandedRowKeys,\n      'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys\n    } = props;\n\n    if (onUpdateExpandedRowKeys) {\n      call(onUpdateExpandedRowKeys, expandedKeys);\n    }\n\n    if (_onUpdateExpandedRowKeys) {\n      call(_onUpdateExpandedRowKeys, expandedKeys);\n    }\n\n    uncontrolledExpandedRowKeysRef.value = expandedKeys;\n  }\n\n  return {\n    mergedExpandedRowKeysRef,\n    renderExpandRef,\n    doUpdateExpandedRowKeys\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/use-expand.js"],"names":["toRef","ref","useMemo","useMergedState","call","warn","useExpand","props","renderExpandRef","col","columns","type","process","env","NODE_ENV","renderExpand","uncontrolledExpandedRowKeysRef","defaultExpandedRowKeys","controlledExpandedRowKeysRef","mergedExpandedRowKeysRef","doUpdateExpandedRowKeys","expandedKeys","onUpdateExpandedRowKeys","_onUpdateExpandedRowKeys","value"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,QAA2B,KAA3B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,OAAxC;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,cAA3B,C,CACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,QAAMC,eAAe,GAAGN,OAAO,CAAC,MAAM;AAClC,SAAK,MAAMO,GAAX,IAAkBF,KAAK,CAACG,OAAxB,EAAiC;AAC7B,UAAID,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;AACvB,YAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACL,GAAG,CAACM,YAAlD,EAAgE;AAC5DV,UAAAA,IAAI,CAAC,YAAD,EAAe,uDAAf,CAAJ;AACH;;AACD,eAAOI,GAAG,CAACM,YAAX;AACH;AACJ;AACJ,GAT8B,CAA/B;AAUA,QAAMC,8BAA8B,GAAGf,GAAG,CAACM,KAAK,CAACU,sBAAP,CAA1C;AACA,QAAMC,4BAA4B,GAAGlB,KAAK,CAACO,KAAD,EAAQ,iBAAR,CAA1C;AACA,QAAMY,wBAAwB,GAAGhB,cAAc,CAACe,4BAAD,EAA+BF,8BAA/B,CAA/C;;AACA,WAASI,uBAAT,CAAiCC,YAAjC,EAA+C;AAC3C,UAAM;AAAEC,MAAAA,uBAAF;AAA2B,kCAA4BC;AAAvD,QAAoFhB,KAA1F;;AACA,QAAIe,uBAAJ,EAA6B;AACzBlB,MAAAA,IAAI,CAACkB,uBAAD,EAA0BD,YAA1B,CAAJ;AACH;;AACD,QAAIE,wBAAJ,EAA8B;AAC1BnB,MAAAA,IAAI,CAACmB,wBAAD,EAA2BF,YAA3B,CAAJ;AACH;;AACDL,IAAAA,8BAA8B,CAACQ,KAA/B,GAAuCH,YAAvC;AACH;;AACD,SAAO;AACHF,IAAAA,wBADG;AAEHX,IAAAA,eAFG;AAGHY,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from '../../_utils';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useExpand(props) {\n    const renderExpandRef = useMemo(() => {\n        for (const col of props.columns) {\n            if (col.type === 'expand') {\n                if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n                    warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n                }\n                return col.renderExpand;\n            }\n        }\n    });\n    const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandedRowKeys);\n    const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n    const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n    function doUpdateExpandedRowKeys(expandedKeys) {\n        const { onUpdateExpandedRowKeys, 'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys } = props;\n        if (onUpdateExpandedRowKeys) {\n            call(onUpdateExpandedRowKeys, expandedKeys);\n        }\n        if (_onUpdateExpandedRowKeys) {\n            call(_onUpdateExpandedRowKeys, expandedKeys);\n        }\n        uncontrolledExpandedRowKeysRef.value = expandedKeys;\n    }\n    return {\n        mergedExpandedRowKeysRef,\n        renderExpandRef,\n        doUpdateExpandedRowKeys\n    };\n}\n"]},"metadata":{},"sourceType":"module"}