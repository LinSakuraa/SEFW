{"ast":null,"code":"import { ElementStyles } from \"@microsoft/fast-element\";\nimport { DI, Registration } from \"../di/di\";\n\nfunction presentationKeyFromTag(tagName) {\n  return `${tagName.toLowerCase()}:presentation`;\n}\n\nconst presentationRegistry = new Map();\n/**\n * An API gateway to component presentation features.\n * @public\n */\n\nexport const ComponentPresentation = Object.freeze({\n  /**\n   * Defines a component presentation for an element.\n   * @param tagName - The element name to define the presentation for.\n   * @param presentation - The presentation that will be applied to matching elements.\n   * @param container - The dependency injection container to register the configuration in.\n   * @public\n   */\n  define(tagName, presentation, container) {\n    const key = presentationKeyFromTag(tagName);\n    const existing = presentationRegistry.get(key);\n\n    if (existing === void 0) {\n      presentationRegistry.set(key, presentation);\n    } else {\n      // false indicates that we have more than one presentation\n      // registered for a tagName and we must resolve through DI\n      presentationRegistry.set(key, false);\n    }\n\n    container.register(Registration.instance(key, presentation));\n  },\n\n  /**\n   * Finds a component presentation for the specified element name,\n   * searching the DOM hierarchy starting from the provided element.\n   * @param tagName - The name of the element to locate the presentation for.\n   * @param element - The element to begin the search from.\n   * @returns The component presentation or null if none is found.\n   * @public\n   */\n  forTag(tagName, element) {\n    const key = presentationKeyFromTag(tagName);\n    const existing = presentationRegistry.get(key);\n\n    if (existing === false) {\n      const container = DI.findResponsibleContainer(element);\n      return container.get(key);\n    }\n\n    return existing || null;\n  }\n\n});\n/**\n * The default implementation of ComponentPresentation, used by FoundationElement.\n * @public\n */\n\nexport class DefaultComponentPresentation {\n  /**\n   * Creates an instance of DefaultComponentPresentation.\n   * @param template - The template to apply to the element.\n   * @param styles - The styles to apply to the element.\n   * @public\n   */\n  constructor(template, styles) {\n    this.template = template || null;\n    this.styles = styles === void 0 ? null : Array.isArray(styles) ? ElementStyles.create(styles) : styles instanceof ElementStyles ? styles : ElementStyles.create([styles]);\n  }\n  /**\n   * Applies the presentation details to the specified element.\n   * @param element - The element to apply the presentation details to.\n   * @public\n   */\n\n\n  applyTo(element) {\n    const controller = element.$fastController;\n\n    if (controller.template === null) {\n      controller.template = this.template;\n    }\n\n    if (controller.styles === null) {\n      controller.styles = this.styles;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/design-system/component-presentation.js"],"names":["ElementStyles","DI","Registration","presentationKeyFromTag","tagName","toLowerCase","presentationRegistry","Map","ComponentPresentation","Object","freeze","define","presentation","container","key","existing","get","set","register","instance","forTag","element","findResponsibleContainer","DefaultComponentPresentation","constructor","template","styles","Array","isArray","create","applyTo","controller","$fastController"],"mappings":"AAAA,SAASA,aAAT,QAA+B,yBAA/B;AACA,SAASC,EAAT,EAAaC,YAAb,QAAiC,UAAjC;;AACA,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACrC,SAAQ,GAAEA,OAAO,CAACC,WAAR,EAAsB,eAAhC;AACH;;AACD,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,MAAM,CAACP,OAAD,EAAUQ,YAAV,EAAwBC,SAAxB,EAAmC;AACrC,UAAMC,GAAG,GAAGX,sBAAsB,CAACC,OAAD,CAAlC;AACA,UAAMW,QAAQ,GAAGT,oBAAoB,CAACU,GAArB,CAAyBF,GAAzB,CAAjB;;AACA,QAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACrBT,MAAAA,oBAAoB,CAACW,GAArB,CAAyBH,GAAzB,EAA8BF,YAA9B;AACH,KAFD,MAGK;AACD;AACA;AACAN,MAAAA,oBAAoB,CAACW,GAArB,CAAyBH,GAAzB,EAA8B,KAA9B;AACH;;AACDD,IAAAA,SAAS,CAACK,QAAV,CAAmBhB,YAAY,CAACiB,QAAb,CAAsBL,GAAtB,EAA2BF,YAA3B,CAAnB;AACH,GApB8C;;AAqB/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIQ,EAAAA,MAAM,CAAChB,OAAD,EAAUiB,OAAV,EAAmB;AACrB,UAAMP,GAAG,GAAGX,sBAAsB,CAACC,OAAD,CAAlC;AACA,UAAMW,QAAQ,GAAGT,oBAAoB,CAACU,GAArB,CAAyBF,GAAzB,CAAjB;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACpB,YAAMF,SAAS,GAAGZ,EAAE,CAACqB,wBAAH,CAA4BD,OAA5B,CAAlB;AACA,aAAOR,SAAS,CAACG,GAAV,CAAcF,GAAd,CAAP;AACH;;AACD,WAAOC,QAAQ,IAAI,IAAnB;AACH;;AArC8C,CAAd,CAA9B;AAuCP;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,4BAAN,CAAmC;AACtC;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC1B,SAAKD,QAAL,GAAgBA,QAAQ,IAAI,IAA5B;AACA,SAAKC,MAAL,GACIA,MAAM,KAAK,KAAK,CAAhB,GACM,IADN,GAEMC,KAAK,CAACC,OAAN,CAAcF,MAAd,IACI1B,aAAa,CAAC6B,MAAd,CAAqBH,MAArB,CADJ,GAEIA,MAAM,YAAY1B,aAAlB,GACI0B,MADJ,GAEI1B,aAAa,CAAC6B,MAAd,CAAqB,CAACH,MAAD,CAArB,CAPlB;AAQH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,OAAO,CAACT,OAAD,EAAU;AACb,UAAMU,UAAU,GAAGV,OAAO,CAACW,eAA3B;;AACA,QAAID,UAAU,CAACN,QAAX,KAAwB,IAA5B,EAAkC;AAC9BM,MAAAA,UAAU,CAACN,QAAX,GAAsB,KAAKA,QAA3B;AACH;;AACD,QAAIM,UAAU,CAACL,MAAX,KAAsB,IAA1B,EAAgC;AAC5BK,MAAAA,UAAU,CAACL,MAAX,GAAoB,KAAKA,MAAzB;AACH;AACJ;;AA/BqC","sourcesContent":["import { ElementStyles, } from \"@microsoft/fast-element\";\nimport { DI, Registration } from \"../di/di\";\nfunction presentationKeyFromTag(tagName) {\n    return `${tagName.toLowerCase()}:presentation`;\n}\nconst presentationRegistry = new Map();\n/**\n * An API gateway to component presentation features.\n * @public\n */\nexport const ComponentPresentation = Object.freeze({\n    /**\n     * Defines a component presentation for an element.\n     * @param tagName - The element name to define the presentation for.\n     * @param presentation - The presentation that will be applied to matching elements.\n     * @param container - The dependency injection container to register the configuration in.\n     * @public\n     */\n    define(tagName, presentation, container) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === void 0) {\n            presentationRegistry.set(key, presentation);\n        }\n        else {\n            // false indicates that we have more than one presentation\n            // registered for a tagName and we must resolve through DI\n            presentationRegistry.set(key, false);\n        }\n        container.register(Registration.instance(key, presentation));\n    },\n    /**\n     * Finds a component presentation for the specified element name,\n     * searching the DOM hierarchy starting from the provided element.\n     * @param tagName - The name of the element to locate the presentation for.\n     * @param element - The element to begin the search from.\n     * @returns The component presentation or null if none is found.\n     * @public\n     */\n    forTag(tagName, element) {\n        const key = presentationKeyFromTag(tagName);\n        const existing = presentationRegistry.get(key);\n        if (existing === false) {\n            const container = DI.findResponsibleContainer(element);\n            return container.get(key);\n        }\n        return existing || null;\n    },\n});\n/**\n * The default implementation of ComponentPresentation, used by FoundationElement.\n * @public\n */\nexport class DefaultComponentPresentation {\n    /**\n     * Creates an instance of DefaultComponentPresentation.\n     * @param template - The template to apply to the element.\n     * @param styles - The styles to apply to the element.\n     * @public\n     */\n    constructor(template, styles) {\n        this.template = template || null;\n        this.styles =\n            styles === void 0\n                ? null\n                : Array.isArray(styles)\n                    ? ElementStyles.create(styles)\n                    : styles instanceof ElementStyles\n                        ? styles\n                        : ElementStyles.create([styles]);\n    }\n    /**\n     * Applies the presentation details to the specified element.\n     * @param element - The element to apply the presentation details to.\n     * @public\n     */\n    applyTo(element) {\n        const controller = element.$fastController;\n        if (controller.template === null) {\n            controller.template = this.template;\n        }\n        if (controller.styles === null) {\n            controller.styles = this.styles;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}