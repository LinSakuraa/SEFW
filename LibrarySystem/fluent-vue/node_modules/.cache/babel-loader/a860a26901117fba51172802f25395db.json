{"ast":null,"code":"import { inject, ref } from 'vue';\nimport { treeSelectInjectionKey } from '../../tree-select/src/interface';\nexport function useKeyboard({\n  fNodesRef,\n  mergedExpandedKeysRef,\n  mergedSelectedKeysRef,\n  handleSelect,\n  handleSwitcherClick\n}) {\n  const {\n    value: mergedSelectedKeys\n  } = mergedSelectedKeysRef; // If it's used in tree-select, make it take over pending state\n\n  const treeSelectInjection = inject(treeSelectInjectionKey, null);\n  const pendingNodeKeyRef = treeSelectInjection ? treeSelectInjection.pendingNodeKeyRef : ref(mergedSelectedKeys.length ? mergedSelectedKeys[mergedSelectedKeys.length - 1] : null);\n\n  function handleKeyup(e) {\n    const {\n      value: pendingNodeKey\n    } = pendingNodeKeyRef;\n\n    if (pendingNodeKey === null) {\n      if (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'].includes(e.code)) {\n        if (pendingNodeKey === null) {\n          const {\n            value: fNodes\n          } = fNodesRef;\n          let fIndex = 0;\n\n          while (fIndex < fNodes.length) {\n            if (!fNodes[fIndex].disabled) {\n              pendingNodeKeyRef.value = fNodes[fIndex].key;\n              break;\n            }\n\n            fIndex += 1;\n          }\n        }\n      }\n    } else {\n      const {\n        value: fNodes\n      } = fNodesRef;\n      let fIndex = fNodes.findIndex(tmNode => tmNode.key === pendingNodeKey);\n      if (!~fIndex) return;\n\n      if (e.code === 'Enter' || e.code === 'NumpadEnter') {\n        handleSelect(fNodes[fIndex]);\n      } else if (e.code === 'ArrowDown') {\n        fIndex += 1;\n\n        while (fIndex < fNodes.length) {\n          if (!fNodes[fIndex].disabled) {\n            pendingNodeKeyRef.value = fNodes[fIndex].key;\n            break;\n          }\n\n          fIndex += 1;\n        }\n      } else if (e.code === 'ArrowUp') {\n        fIndex -= 1;\n\n        while (fIndex >= 0) {\n          if (!fNodes[fIndex].disabled) {\n            pendingNodeKeyRef.value = fNodes[fIndex].key;\n            break;\n          }\n\n          fIndex -= 1;\n        }\n      } else if (e.code === 'ArrowLeft') {\n        const pendingNode = fNodes[fIndex];\n\n        if (pendingNode.isLeaf || !mergedExpandedKeysRef.value.includes(pendingNodeKey)) {\n          const parentTmNode = pendingNode.getParent();\n\n          if (parentTmNode) {\n            pendingNodeKeyRef.value = parentTmNode.key;\n          }\n        } else {\n          handleSwitcherClick(pendingNode);\n        }\n      } else if (e.code === 'ArrowRight') {\n        const pendingNode = fNodes[fIndex];\n        if (pendingNode.isLeaf) return;\n\n        if (!mergedExpandedKeysRef.value.includes(pendingNodeKey)) {\n          handleSwitcherClick(pendingNode);\n        } else {\n          // Tha same as ArrowDown\n          fIndex += 1;\n\n          while (fIndex < fNodes.length) {\n            if (!fNodes[fIndex].disabled) {\n              pendingNodeKeyRef.value = fNodes[fIndex].key;\n              break;\n            }\n\n            fIndex += 1;\n          }\n        }\n      }\n    }\n  }\n\n  function handleKeydown(e) {\n    switch (e.code) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n        e.preventDefault();\n    }\n  }\n\n  return {\n    pendingNodeKeyRef,\n    handleKeyup,\n    handleKeydown\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/tree/src/keyboard.js"],"names":["inject","ref","treeSelectInjectionKey","useKeyboard","fNodesRef","mergedExpandedKeysRef","mergedSelectedKeysRef","handleSelect","handleSwitcherClick","value","mergedSelectedKeys","treeSelectInjection","pendingNodeKeyRef","length","handleKeyup","e","pendingNodeKey","includes","code","fNodes","fIndex","disabled","key","findIndex","tmNode","pendingNode","isLeaf","parentTmNode","getParent","handleKeydown","preventDefault"],"mappings":"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","sourcesContent":["import { inject, ref } from 'vue';\nimport { treeSelectInjectionKey } from '../../tree-select/src/interface';\nexport function useKeyboard({ fNodesRef, mergedExpandedKeysRef, mergedSelectedKeysRef, handleSelect, handleSwitcherClick }) {\n    const { value: mergedSelectedKeys } = mergedSelectedKeysRef;\n    // If it's used in tree-select, make it take over pending state\n    const treeSelectInjection = inject(treeSelectInjectionKey, null);\n    const pendingNodeKeyRef = treeSelectInjection\n        ? treeSelectInjection.pendingNodeKeyRef\n        : ref(mergedSelectedKeys.length\n            ? mergedSelectedKeys[mergedSelectedKeys.length - 1]\n            : null);\n    function handleKeyup(e) {\n        const { value: pendingNodeKey } = pendingNodeKeyRef;\n        if (pendingNodeKey === null) {\n            if (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'].includes(e.code)) {\n                if (pendingNodeKey === null) {\n                    const { value: fNodes } = fNodesRef;\n                    let fIndex = 0;\n                    while (fIndex < fNodes.length) {\n                        if (!fNodes[fIndex].disabled) {\n                            pendingNodeKeyRef.value = fNodes[fIndex].key;\n                            break;\n                        }\n                        fIndex += 1;\n                    }\n                }\n            }\n        }\n        else {\n            const { value: fNodes } = fNodesRef;\n            let fIndex = fNodes.findIndex((tmNode) => tmNode.key === pendingNodeKey);\n            if (!~fIndex)\n                return;\n            if (e.code === 'Enter' || e.code === 'NumpadEnter') {\n                handleSelect(fNodes[fIndex]);\n            }\n            else if (e.code === 'ArrowDown') {\n                fIndex += 1;\n                while (fIndex < fNodes.length) {\n                    if (!fNodes[fIndex].disabled) {\n                        pendingNodeKeyRef.value = fNodes[fIndex].key;\n                        break;\n                    }\n                    fIndex += 1;\n                }\n            }\n            else if (e.code === 'ArrowUp') {\n                fIndex -= 1;\n                while (fIndex >= 0) {\n                    if (!fNodes[fIndex].disabled) {\n                        pendingNodeKeyRef.value = fNodes[fIndex].key;\n                        break;\n                    }\n                    fIndex -= 1;\n                }\n            }\n            else if (e.code === 'ArrowLeft') {\n                const pendingNode = fNodes[fIndex];\n                if (pendingNode.isLeaf ||\n                    !mergedExpandedKeysRef.value.includes(pendingNodeKey)) {\n                    const parentTmNode = pendingNode.getParent();\n                    if (parentTmNode) {\n                        pendingNodeKeyRef.value = parentTmNode.key;\n                    }\n                }\n                else {\n                    handleSwitcherClick(pendingNode);\n                }\n            }\n            else if (e.code === 'ArrowRight') {\n                const pendingNode = fNodes[fIndex];\n                if (pendingNode.isLeaf)\n                    return;\n                if (!mergedExpandedKeysRef.value.includes(pendingNodeKey)) {\n                    handleSwitcherClick(pendingNode);\n                }\n                else {\n                    // Tha same as ArrowDown\n                    fIndex += 1;\n                    while (fIndex < fNodes.length) {\n                        if (!fNodes[fIndex].disabled) {\n                            pendingNodeKeyRef.value = fNodes[fIndex].key;\n                            break;\n                        }\n                        fIndex += 1;\n                    }\n                }\n            }\n        }\n    }\n    function handleKeydown(e) {\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'ArrowDown':\n                e.preventDefault();\n        }\n    }\n    return {\n        pendingNodeKeyRef,\n        handleKeyup,\n        handleKeydown\n    };\n}\n"]},"metadata":{},"sourceType":"module"}