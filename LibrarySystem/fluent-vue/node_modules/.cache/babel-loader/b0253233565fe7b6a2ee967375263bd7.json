{"ast":null,"code":"import { computed, defineComponent, h, provide } from 'vue';\nimport { useIsMounted } from 'vooks';\nimport { depx } from 'seemly';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../_internal/icons';\nimport { NBaseIcon } from '../../_internal';\nimport { NButton } from '../../button';\nimport { useLocale, useFormItem, useTheme, useConfig } from '../../_mixins';\nimport { createKey } from '../../_utils/cssr';\nimport { warn, call } from '../../_utils';\nimport { transferLight } from '../styles';\nimport NTransferHeader from './TransferHeader';\nimport NTransferList from './TransferList';\nimport NTransferFilter from './TransferFilter';\nimport { useTransferData } from './use-transfer-data';\nimport style from './styles/index.cssr';\nimport { transferInjectionKey } from './interface';\nconst transferProps = Object.assign(Object.assign({}, useTheme.props), {\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  options: {\n    type: Array,\n    default: () => []\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  virtualScroll: Boolean,\n  sourceTitle: String,\n  targetTitle: String,\n  filterable: Boolean,\n  sourceFilterPlaceholder: String,\n  targetFilterPlaceholder: String,\n  filter: {\n    type: Function,\n    default: (pattern, option) => {\n      if (!pattern) return true;\n      return ~('' + option.label).toLowerCase().indexOf(('' + pattern).toLowerCase());\n    }\n  },\n  size: String,\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  onChange: {\n    type: [Function, Array],\n    validator: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('transfer', '`on-change` is deprecated, please use `on-update:value` instead.');\n      }\n\n      return true;\n    },\n    default: undefined\n  }\n});\nexport default defineComponent({\n  name: 'Transfer',\n  props: transferProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const themeRef = useTheme('Transfer', '-transfer', style, transferLight, props, mergedClsPrefixRef);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const itemSizeRef = computed(() => {\n      const {\n        value: size\n      } = mergedSizeRef;\n      const {\n        self: {\n          [createKey('itemHeight', size)]: itemSize\n        }\n      } = themeRef.value;\n      return depx(itemSize);\n    });\n    const {\n      uncontrolledValue: uncontrolledValueRef,\n      mergedValue: mergedValueRef,\n      avlSrcValueSet: avlSrcValueSetRef,\n      avlTgtValueSet: avlTgtValueSetRef,\n      tgtOpts: tgtOptsRef,\n      srcOpts: srcOptsRef,\n      filteredSrcOpts: filteredSrcOptsRef,\n      filteredTgtOpts: filteredTgtOptsRef,\n      srcCheckedValues: srcCheckedValuesRef,\n      tgtCheckedValues: tgtCheckedValuesRef,\n      srcCheckedStatus: srcCheckedStatusRef,\n      tgtCheckedStatus: tgtCheckedStatusRef,\n      srcPattern: srcPatternRef,\n      tgtPattern: tgtPatternRef,\n      isInputing: isInputingRef,\n      fromButtonDisabled: fromButtonDisabledRef,\n      toButtonDisabled: toButtonDisabledRef,\n      handleInputFocus,\n      handleInputBlur,\n      handleTgtFilterUpdateValue,\n      handleSrcFilterUpdateValue\n    } = useTransferData(props, mergedDisabledRef);\n\n    function doUpdateValue(value) {\n      const {\n        onUpdateValue,\n        'onUpdate:value': _onUpdateValue,\n        onChange\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateValue) call(onUpdateValue, value);\n      if (_onUpdateValue) call(_onUpdateValue, value);\n      if (onChange) call(onChange, value);\n      uncontrolledValueRef.value = value;\n      nTriggerFormInput();\n      nTriggerFormChange();\n    }\n\n    function handleSrcHeaderCheck(value) {\n      const {\n        value: {\n          checked,\n          indeterminate\n        }\n      } = srcCheckedStatusRef;\n\n      if (indeterminate || checked) {\n        srcCheckedValuesRef.value = [];\n      } else {\n        srcCheckedValuesRef.value = Array.from(avlSrcValueSetRef.value);\n      }\n    }\n\n    function handleTgtHeaderCheck() {\n      const {\n        value: {\n          checked,\n          indeterminate\n        }\n      } = tgtCheckedStatusRef;\n\n      if (indeterminate || checked) {\n        tgtCheckedValuesRef.value = [];\n      } else {\n        tgtCheckedValuesRef.value = Array.from(avlTgtValueSetRef.value);\n      }\n    }\n\n    function handleTgtCheckboxClick(checked, optionValue) {\n      if (checked) {\n        tgtCheckedValuesRef.value.push(optionValue);\n      } else {\n        const index = tgtCheckedValuesRef.value.findIndex(v => v === optionValue);\n\n        if (~index) {\n          tgtCheckedValuesRef.value.splice(index, 1);\n        }\n      }\n    }\n\n    function handleSrcCheckboxClick(checked, optionValue) {\n      if (checked) {\n        srcCheckedValuesRef.value.push(optionValue);\n      } else {\n        const index = srcCheckedValuesRef.value.findIndex(v => v === optionValue);\n\n        if (~index) {\n          srcCheckedValuesRef.value.splice(index, 1);\n        }\n      }\n    }\n\n    function handleToTgtClick() {\n      doUpdateValue(srcCheckedValuesRef.value.concat(mergedValueRef.value || []));\n      srcCheckedValuesRef.value = [];\n    }\n\n    function handleToSrcClick() {\n      const tgtCheckedValueSet = new Set(tgtCheckedValuesRef.value);\n      doUpdateValue((mergedValueRef.value || []).filter(v => !tgtCheckedValueSet.has(v)));\n      tgtCheckedValuesRef.value = [];\n    }\n\n    provide(transferInjectionKey, {\n      mergedClsPrefixRef,\n      mergedSizeRef,\n      disabledRef: mergedDisabledRef,\n      mergedThemeRef: themeRef,\n      srcCheckedValuesRef,\n      tgtCheckedValuesRef,\n      srcOptsRef,\n      tgtOptsRef,\n      srcCheckedStatusRef,\n      tgtCheckedStatusRef,\n      handleSrcCheckboxClick,\n      handleTgtCheckboxClick\n    });\n    const {\n      localeRef\n    } = useLocale('Transfer');\n    return {\n      locale: localeRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedDisabled: mergedDisabledRef,\n      itemSize: itemSizeRef,\n      isMounted: useIsMounted(),\n      isInputing: isInputingRef,\n      mergedTheme: themeRef,\n      filteredSrcOpts: filteredSrcOptsRef,\n      filteredTgtOpts: filteredTgtOptsRef,\n      srcPattern: srcPatternRef,\n      tgtPattern: tgtPatternRef,\n      toButtonDisabled: toButtonDisabledRef,\n      fromButtonDisabled: fromButtonDisabledRef,\n      handleSrcHeaderCheck,\n      handleTgtHeaderCheck,\n      handleToSrcClick,\n      handleToTgtClick,\n      handleInputFocus,\n      handleInputBlur,\n      handleTgtFilterUpdateValue,\n      handleSrcFilterUpdateValue,\n      cssVars: computed(() => {\n        const {\n          value: size\n        } = mergedSizeRef;\n        const {\n          common: {\n            cubicBezierEaseInOut,\n            cubicBezierEaseIn,\n            cubicBezierEaseOut\n          },\n          self: {\n            width,\n            borderRadius,\n            borderColor,\n            listColor,\n            headerColor,\n            titleTextColor,\n            titleTextColorDisabled,\n            extraTextColor,\n            filterDividerColor,\n            itemTextColor,\n            itemColorPending,\n            itemTextColorDisabled,\n            extraFontSize,\n            titleFontWeight,\n            iconColor,\n            iconColorDisabled,\n            [createKey('fontSize', size)]: fontSize,\n            [createKey('itemHeight', size)]: itemHeight\n          }\n        } = themeRef.value;\n        return {\n          '--n-bezier': cubicBezierEaseInOut,\n          '--n-bezier-ease-in': cubicBezierEaseIn,\n          '--n-bezier-ease-out': cubicBezierEaseOut,\n          '--n-border-color': borderColor,\n          '--n-border-radius': borderRadius,\n          '--n-extra-font-size': extraFontSize,\n          '--n-filter-divider-color': filterDividerColor,\n          '--n-font-size': fontSize,\n          '--n-header-color': headerColor,\n          '--n-header-extra-text-color': extraTextColor,\n          '--n-header-font-weight': titleFontWeight,\n          '--n-header-text-color': titleTextColor,\n          '--n-header-text-color-disabled': titleTextColorDisabled,\n          '--n-item-color-pending': itemColorPending,\n          '--n-item-height': itemHeight,\n          '--n-item-text-color': itemTextColor,\n          '--n-item-text-color-disabled': itemTextColorDisabled,\n          '--n-list-color': listColor,\n          '--n-width': width,\n          '--n-icon-color': iconColor,\n          '--n-icon-color-disabled': iconColorDisabled\n        };\n      })\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-transfer`, this.mergedDisabled && `${mergedClsPrefix}-transfer--disabled`, this.filterable && `${mergedClsPrefix}-transfer--filterable`],\n      style: this.cssVars\n    }, h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list`\n    }, h(NTransferHeader, {\n      source: true,\n      onChange: this.handleSrcHeaderCheck,\n      title: this.sourceTitle || this.locale.sourceTitle\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-body`\n    }, this.filterable ? h(NTransferFilter, {\n      onUpdateValue: this.handleSrcFilterUpdateValue,\n      value: this.srcPattern,\n      disabled: this.mergedDisabled,\n      placeholder: this.sourceFilterPlaceholder,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur\n    }) : null, h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-flex-container`\n    }, h(NTransferList, {\n      source: true,\n      options: this.filteredSrcOpts,\n      disabled: this.mergedDisabled,\n      virtualScroll: this.virtualScroll,\n      isMounted: this.isMounted,\n      isInputing: this.isInputing,\n      itemSize: this.itemSize\n    }))), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list__border`\n    })), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-gap`\n    }, h(NButton, {\n      disabled: this.toButtonDisabled || this.mergedDisabled,\n      theme: this.mergedTheme.peers.Button,\n      themeOverrides: this.mergedTheme.peerOverrides.Button,\n      onClick: this.handleToTgtClick\n    }, {\n      icon: () => h(NBaseIcon, {\n        clsPrefix: mergedClsPrefix\n      }, {\n        default: () => h(ChevronRightIcon, null)\n      })\n    }), h(NButton, {\n      disabled: this.fromButtonDisabled || this.mergedDisabled,\n      theme: this.mergedTheme.peers.Button,\n      themeOverrides: this.mergedTheme.peerOverrides.Button,\n      onClick: this.handleToSrcClick\n    }, {\n      icon: () => h(NBaseIcon, {\n        clsPrefix: mergedClsPrefix\n      }, {\n        default: () => h(ChevronLeftIcon, null)\n      })\n    })), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list`\n    }, h(NTransferHeader, {\n      onChange: this.handleTgtHeaderCheck,\n      title: this.targetTitle || this.locale.targetTitle\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-body`\n    }, this.filterable ? h(NTransferFilter, {\n      onUpdateValue: this.handleTgtFilterUpdateValue,\n      value: this.tgtPattern,\n      disabled: this.mergedDisabled,\n      placeholder: this.targetFilterPlaceholder,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur\n    }) : null, h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-flex-container`\n    }, h(NTransferList, {\n      options: this.filteredTgtOpts,\n      disabled: this.mergedDisabled,\n      virtualScroll: this.virtualScroll,\n      isMounted: this.isMounted,\n      isInputing: this.isInputing,\n      itemSize: this.itemSize\n    }))), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list__border`\n    })));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/transfer/src/Transfer.js"],"names":["computed","defineComponent","h","provide","useIsMounted","depx","ChevronLeftIcon","ChevronRightIcon","NBaseIcon","NButton","useLocale","useFormItem","useTheme","useConfig","createKey","warn","call","transferLight","NTransferHeader","NTransferList","NTransferFilter","useTransferData","style","transferInjectionKey","transferProps","Object","assign","props","value","Array","defaultValue","type","default","options","disabled","Boolean","undefined","virtualScroll","sourceTitle","String","targetTitle","filterable","sourceFilterPlaceholder","targetFilterPlaceholder","filter","Function","pattern","option","label","toLowerCase","indexOf","size","onUpdateValue","onChange","validator","process","env","NODE_ENV","name","setup","mergedClsPrefixRef","themeRef","formItem","mergedSizeRef","mergedDisabledRef","itemSizeRef","self","itemSize","uncontrolledValue","uncontrolledValueRef","mergedValue","mergedValueRef","avlSrcValueSet","avlSrcValueSetRef","avlTgtValueSet","avlTgtValueSetRef","tgtOpts","tgtOptsRef","srcOpts","srcOptsRef","filteredSrcOpts","filteredSrcOptsRef","filteredTgtOpts","filteredTgtOptsRef","srcCheckedValues","srcCheckedValuesRef","tgtCheckedValues","tgtCheckedValuesRef","srcCheckedStatus","srcCheckedStatusRef","tgtCheckedStatus","tgtCheckedStatusRef","srcPattern","srcPatternRef","tgtPattern","tgtPatternRef","isInputing","isInputingRef","fromButtonDisabled","fromButtonDisabledRef","toButtonDisabled","toButtonDisabledRef","handleInputFocus","handleInputBlur","handleTgtFilterUpdateValue","handleSrcFilterUpdateValue","doUpdateValue","_onUpdateValue","nTriggerFormInput","nTriggerFormChange","handleSrcHeaderCheck","checked","indeterminate","from","handleTgtHeaderCheck","handleTgtCheckboxClick","optionValue","push","index","findIndex","v","splice","handleSrcCheckboxClick","handleToTgtClick","concat","handleToSrcClick","tgtCheckedValueSet","Set","has","disabledRef","mergedThemeRef","localeRef","locale","mergedClsPrefix","mergedDisabled","isMounted","mergedTheme","cssVars","common","cubicBezierEaseInOut","cubicBezierEaseIn","cubicBezierEaseOut","width","borderRadius","borderColor","listColor","headerColor","titleTextColor","titleTextColorDisabled","extraTextColor","filterDividerColor","itemTextColor","itemColorPending","itemTextColorDisabled","extraFontSize","titleFontWeight","iconColor","iconColorDisabled","fontSize","itemHeight","render","class","source","title","placeholder","onFocus","onBlur","theme","peers","Button","themeOverrides","peerOverrides","onClick","icon","clsPrefix"],"mappings":"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","sourcesContent":["import { computed, defineComponent, h, provide } from 'vue';\nimport { useIsMounted } from 'vooks';\nimport { depx } from 'seemly';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../_internal/icons';\nimport { NBaseIcon } from '../../_internal';\nimport { NButton } from '../../button';\nimport { useLocale, useFormItem, useTheme, useConfig } from '../../_mixins';\nimport { createKey } from '../../_utils/cssr';\nimport { warn, call } from '../../_utils';\nimport { transferLight } from '../styles';\nimport NTransferHeader from './TransferHeader';\nimport NTransferList from './TransferList';\nimport NTransferFilter from './TransferFilter';\nimport { useTransferData } from './use-transfer-data';\nimport style from './styles/index.cssr';\nimport { transferInjectionKey } from './interface';\nconst transferProps = Object.assign(Object.assign({}, useTheme.props), { value: Array, defaultValue: {\n        type: Array,\n        default: null\n    }, options: {\n        type: Array,\n        default: () => []\n    }, disabled: {\n        type: Boolean,\n        default: undefined\n    }, virtualScroll: Boolean, sourceTitle: String, targetTitle: String, filterable: Boolean, sourceFilterPlaceholder: String, targetFilterPlaceholder: String, filter: {\n        type: Function,\n        default: (pattern, option) => {\n            if (!pattern)\n                return true;\n            return ~('' + option.label)\n                .toLowerCase()\n                .indexOf(('' + pattern).toLowerCase());\n        }\n    }, size: String, 'onUpdate:value': [Function, Array], onUpdateValue: [Function, Array], onChange: {\n        type: [Function, Array],\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('transfer', '`on-change` is deprecated, please use `on-update:value` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    } });\nexport default defineComponent({\n    name: 'Transfer',\n    props: transferProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Transfer', '-transfer', style, transferLight, props, mergedClsPrefixRef);\n        const formItem = useFormItem(props);\n        const { mergedSizeRef, mergedDisabledRef } = formItem;\n        const itemSizeRef = computed(() => {\n            const { value: size } = mergedSizeRef;\n            const { self: { [createKey('itemHeight', size)]: itemSize } } = themeRef.value;\n            return depx(itemSize);\n        });\n        const { uncontrolledValue: uncontrolledValueRef, mergedValue: mergedValueRef, avlSrcValueSet: avlSrcValueSetRef, avlTgtValueSet: avlTgtValueSetRef, tgtOpts: tgtOptsRef, srcOpts: srcOptsRef, filteredSrcOpts: filteredSrcOptsRef, filteredTgtOpts: filteredTgtOptsRef, srcCheckedValues: srcCheckedValuesRef, tgtCheckedValues: tgtCheckedValuesRef, srcCheckedStatus: srcCheckedStatusRef, tgtCheckedStatus: tgtCheckedStatusRef, srcPattern: srcPatternRef, tgtPattern: tgtPatternRef, isInputing: isInputingRef, fromButtonDisabled: fromButtonDisabledRef, toButtonDisabled: toButtonDisabledRef, handleInputFocus, handleInputBlur, handleTgtFilterUpdateValue, handleSrcFilterUpdateValue } = useTransferData(props, mergedDisabledRef);\n        function doUpdateValue(value) {\n            const { onUpdateValue, 'onUpdate:value': _onUpdateValue, onChange } = props;\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            if (onUpdateValue)\n                call(onUpdateValue, value);\n            if (_onUpdateValue)\n                call(_onUpdateValue, value);\n            if (onChange)\n                call(onChange, value);\n            uncontrolledValueRef.value = value;\n            nTriggerFormInput();\n            nTriggerFormChange();\n        }\n        function handleSrcHeaderCheck(value) {\n            const { value: { checked, indeterminate } } = srcCheckedStatusRef;\n            if (indeterminate || checked) {\n                srcCheckedValuesRef.value = [];\n            }\n            else {\n                srcCheckedValuesRef.value = Array.from(avlSrcValueSetRef.value);\n            }\n        }\n        function handleTgtHeaderCheck() {\n            const { value: { checked, indeterminate } } = tgtCheckedStatusRef;\n            if (indeterminate || checked) {\n                tgtCheckedValuesRef.value = [];\n            }\n            else {\n                tgtCheckedValuesRef.value = Array.from(avlTgtValueSetRef.value);\n            }\n        }\n        function handleTgtCheckboxClick(checked, optionValue) {\n            if (checked) {\n                tgtCheckedValuesRef.value.push(optionValue);\n            }\n            else {\n                const index = tgtCheckedValuesRef.value.findIndex((v) => v === optionValue);\n                if (~index) {\n                    tgtCheckedValuesRef.value.splice(index, 1);\n                }\n            }\n        }\n        function handleSrcCheckboxClick(checked, optionValue) {\n            if (checked) {\n                srcCheckedValuesRef.value.push(optionValue);\n            }\n            else {\n                const index = srcCheckedValuesRef.value.findIndex((v) => v === optionValue);\n                if (~index) {\n                    srcCheckedValuesRef.value.splice(index, 1);\n                }\n            }\n        }\n        function handleToTgtClick() {\n            doUpdateValue(srcCheckedValuesRef.value.concat(mergedValueRef.value || []));\n            srcCheckedValuesRef.value = [];\n        }\n        function handleToSrcClick() {\n            const tgtCheckedValueSet = new Set(tgtCheckedValuesRef.value);\n            doUpdateValue((mergedValueRef.value || []).filter((v) => !tgtCheckedValueSet.has(v)));\n            tgtCheckedValuesRef.value = [];\n        }\n        provide(transferInjectionKey, {\n            mergedClsPrefixRef,\n            mergedSizeRef,\n            disabledRef: mergedDisabledRef,\n            mergedThemeRef: themeRef,\n            srcCheckedValuesRef,\n            tgtCheckedValuesRef,\n            srcOptsRef,\n            tgtOptsRef,\n            srcCheckedStatusRef,\n            tgtCheckedStatusRef,\n            handleSrcCheckboxClick,\n            handleTgtCheckboxClick\n        });\n        const { localeRef } = useLocale('Transfer');\n        return {\n            locale: localeRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedDisabled: mergedDisabledRef,\n            itemSize: itemSizeRef,\n            isMounted: useIsMounted(),\n            isInputing: isInputingRef,\n            mergedTheme: themeRef,\n            filteredSrcOpts: filteredSrcOptsRef,\n            filteredTgtOpts: filteredTgtOptsRef,\n            srcPattern: srcPatternRef,\n            tgtPattern: tgtPatternRef,\n            toButtonDisabled: toButtonDisabledRef,\n            fromButtonDisabled: fromButtonDisabledRef,\n            handleSrcHeaderCheck,\n            handleTgtHeaderCheck,\n            handleToSrcClick,\n            handleToTgtClick,\n            handleInputFocus,\n            handleInputBlur,\n            handleTgtFilterUpdateValue,\n            handleSrcFilterUpdateValue,\n            cssVars: computed(() => {\n                const { value: size } = mergedSizeRef;\n                const { common: { cubicBezierEaseInOut, cubicBezierEaseIn, cubicBezierEaseOut }, self: { width, borderRadius, borderColor, listColor, headerColor, titleTextColor, titleTextColorDisabled, extraTextColor, filterDividerColor, itemTextColor, itemColorPending, itemTextColorDisabled, extraFontSize, titleFontWeight, iconColor, iconColorDisabled, [createKey('fontSize', size)]: fontSize, [createKey('itemHeight', size)]: itemHeight } } = themeRef.value;\n                return {\n                    '--n-bezier': cubicBezierEaseInOut,\n                    '--n-bezier-ease-in': cubicBezierEaseIn,\n                    '--n-bezier-ease-out': cubicBezierEaseOut,\n                    '--n-border-color': borderColor,\n                    '--n-border-radius': borderRadius,\n                    '--n-extra-font-size': extraFontSize,\n                    '--n-filter-divider-color': filterDividerColor,\n                    '--n-font-size': fontSize,\n                    '--n-header-color': headerColor,\n                    '--n-header-extra-text-color': extraTextColor,\n                    '--n-header-font-weight': titleFontWeight,\n                    '--n-header-text-color': titleTextColor,\n                    '--n-header-text-color-disabled': titleTextColorDisabled,\n                    '--n-item-color-pending': itemColorPending,\n                    '--n-item-height': itemHeight,\n                    '--n-item-text-color': itemTextColor,\n                    '--n-item-text-color-disabled': itemTextColorDisabled,\n                    '--n-list-color': listColor,\n                    '--n-width': width,\n                    '--n-icon-color': iconColor,\n                    '--n-icon-color-disabled': iconColorDisabled\n                };\n            })\n        };\n    },\n    render() {\n        const { mergedClsPrefix } = this;\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-transfer`,\n                this.mergedDisabled && `${mergedClsPrefix}-transfer--disabled`,\n                this.filterable && `${mergedClsPrefix}-transfer--filterable`\n            ], style: this.cssVars },\n            h(\"div\", { class: `${mergedClsPrefix}-transfer-list` },\n                h(NTransferHeader, { source: true, onChange: this.handleSrcHeaderCheck, title: this.sourceTitle || this.locale.sourceTitle }),\n                h(\"div\", { class: `${mergedClsPrefix}-transfer-list-body` },\n                    this.filterable ? (h(NTransferFilter, { onUpdateValue: this.handleSrcFilterUpdateValue, value: this.srcPattern, disabled: this.mergedDisabled, placeholder: this.sourceFilterPlaceholder, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur })) : null,\n                    h(\"div\", { class: `${mergedClsPrefix}-transfer-list-flex-container` },\n                        h(NTransferList, { source: true, options: this.filteredSrcOpts, disabled: this.mergedDisabled, virtualScroll: this.virtualScroll, isMounted: this.isMounted, isInputing: this.isInputing, itemSize: this.itemSize }))),\n                h(\"div\", { class: `${mergedClsPrefix}-transfer-list__border` })),\n            h(\"div\", { class: `${mergedClsPrefix}-transfer-gap` },\n                h(NButton, { disabled: this.toButtonDisabled || this.mergedDisabled, theme: this.mergedTheme.peers.Button, themeOverrides: this.mergedTheme.peerOverrides.Button, onClick: this.handleToTgtClick }, {\n                    icon: () => (h(NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => h(ChevronRightIcon, null) }))\n                }),\n                h(NButton, { disabled: this.fromButtonDisabled || this.mergedDisabled, theme: this.mergedTheme.peers.Button, themeOverrides: this.mergedTheme.peerOverrides.Button, onClick: this.handleToSrcClick }, {\n                    icon: () => (h(NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => h(ChevronLeftIcon, null) }))\n                })),\n            h(\"div\", { class: `${mergedClsPrefix}-transfer-list` },\n                h(NTransferHeader, { onChange: this.handleTgtHeaderCheck, title: this.targetTitle || this.locale.targetTitle }),\n                h(\"div\", { class: `${mergedClsPrefix}-transfer-list-body` },\n                    this.filterable ? (h(NTransferFilter, { onUpdateValue: this.handleTgtFilterUpdateValue, value: this.tgtPattern, disabled: this.mergedDisabled, placeholder: this.targetFilterPlaceholder, onFocus: this.handleInputFocus, onBlur: this.handleInputBlur })) : null,\n                    h(\"div\", { class: `${mergedClsPrefix}-transfer-list-flex-container` },\n                        h(NTransferList, { options: this.filteredTgtOpts, disabled: this.mergedDisabled, virtualScroll: this.virtualScroll, isMounted: this.isMounted, isInputing: this.isInputing, itemSize: this.itemSize }))),\n                h(\"div\", { class: `${mergedClsPrefix}-transfer-list__border` }))));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}