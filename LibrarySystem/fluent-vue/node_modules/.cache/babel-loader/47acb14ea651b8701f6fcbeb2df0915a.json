{"ast":null,"code":"import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n  name: 'ColorInput',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    modes: {\n      type: Array,\n      required: true\n    },\n    showAlpha: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      // for hex to get percise value\n      type: String,\n      default: null\n    },\n    valueArr: {\n      type: Array,\n      default: null\n    },\n    onUpdateValue: {\n      type: Function,\n      required: true\n    },\n    onUpdateMode: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    return {\n      handleUnitUpdateValue(index, value) {\n        const {\n          showAlpha\n        } = props;\n\n        if (props.mode === 'hex') {\n          props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n          return;\n        }\n\n        let nextValueArr;\n\n        if (props.valueArr === null) {\n          nextValueArr = [0, 0, 0, 0];\n        } else {\n          nextValueArr = Array.from(props.valueArr);\n        }\n\n        switch (props.mode) {\n          case 'hsv':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n            break;\n\n          case 'rgb':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n            break;\n\n          case 'hsl':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n            break;\n        }\n      }\n\n    };\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      modes\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-input`\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-input__mode`,\n      onClick: this.onUpdateMode,\n      style: {\n        cursor: modes.length === 1 ? '' : 'pointer'\n      }\n    }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')), h(NInputGroup, null, {\n      default: () => {\n        const {\n          mode,\n          valueArr,\n          showAlpha\n        } = this;\n\n        if (mode === 'hex') {\n          // hex and rgba shares the same value arr\n          let hexValue = null;\n\n          try {\n            hexValue = valueArr === null ? null : (showAlpha ? toHexaString : toHexString)(valueArr);\n          } catch (_a) {}\n\n          return h(ColorInputUnit, {\n            label: 'HEX',\n            showAlpha: showAlpha,\n            value: hexValue,\n            onUpdateValue: unitValue => {\n              this.handleUnitUpdateValue(0, unitValue);\n            }\n          });\n        }\n\n        return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => h(ColorInputUnit, {\n          label: v.toUpperCase(),\n          value: valueArr === null ? null : valueArr[i],\n          onUpdateValue: unitValue => {\n            this.handleUnitUpdateValue(i, unitValue);\n          }\n        }));\n      }\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/color-picker/src/ColorInput.js"],"names":["toHsvaString","toRgbaString","toHslaString","toHexaString","toHexString","toHsvString","toRgbString","toHslString","h","defineComponent","NInputGroup","ColorInputUnit","name","props","clsPrefix","type","String","required","mode","modes","Array","showAlpha","Boolean","value","default","valueArr","onUpdateValue","Function","onUpdateMode","setup","handleUnitUpdateValue","index","nextValueArr","from","render","class","onClick","style","cursor","length","toUpperCase","hexValue","_a","label","unitValue","split","map","v","i"],"mappings":"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","sourcesContent":["import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n    name: 'ColorInput',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        mode: {\n            type: String,\n            required: true\n        },\n        modes: {\n            type: Array,\n            required: true\n        },\n        showAlpha: {\n            type: Boolean,\n            required: true\n        },\n        value: {\n            // for hex to get percise value\n            type: String,\n            default: null\n        },\n        valueArr: {\n            type: Array,\n            default: null\n        },\n        onUpdateValue: {\n            type: Function,\n            required: true\n        },\n        onUpdateMode: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        return {\n            handleUnitUpdateValue(index, value) {\n                const { showAlpha } = props;\n                if (props.mode === 'hex') {\n                    props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n                    return;\n                }\n                let nextValueArr;\n                if (props.valueArr === null) {\n                    nextValueArr = [0, 0, 0, 0];\n                }\n                else {\n                    nextValueArr = Array.from(props.valueArr);\n                }\n                switch (props.mode) {\n                    case 'hsv':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n                        break;\n                    case 'rgb':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n                        break;\n                    case 'hsl':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n                        break;\n                }\n            }\n        };\n    },\n    render() {\n        const { clsPrefix, modes } = this;\n        return (h(\"div\", { class: `${clsPrefix}-color-picker-input` },\n            h(\"div\", { class: `${clsPrefix}-color-picker-input__mode`, onClick: this.onUpdateMode, style: {\n                    cursor: modes.length === 1 ? '' : 'pointer'\n                } }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')),\n            h(NInputGroup, null, {\n                default: () => {\n                    const { mode, valueArr, showAlpha } = this;\n                    if (mode === 'hex') {\n                        // hex and rgba shares the same value arr\n                        let hexValue = null;\n                        try {\n                            hexValue =\n                                valueArr === null\n                                    ? null\n                                    : (showAlpha ? toHexaString : toHexString)(valueArr);\n                        }\n                        catch (_a) { }\n                        return (h(ColorInputUnit, { label: 'HEX', showAlpha: showAlpha, value: hexValue, onUpdateValue: (unitValue) => {\n                                this.handleUnitUpdateValue(0, unitValue);\n                            } }));\n                    }\n                    return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => (h(ColorInputUnit, { label: v.toUpperCase(), value: valueArr === null ? null : valueArr[i], onUpdateValue: (unitValue) => {\n                            this.handleUnitUpdateValue(i, unitValue);\n                        } })));\n                }\n            })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}