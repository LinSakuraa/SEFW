{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { Direction, keyArrowDown, keyArrowLeft, keyArrowRight, keyArrowUp, keyEnd, keyHome, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities/direction\";\nimport { convertPixelToPercent } from \"./slider-utilities\";\nimport { FormAssociatedSlider } from \"./slider.form-associated\";\n/**\n * The selection modes of a {@link @microsoft/fast-foundation#(Slider:class)}.\n * @public\n */\n\nexport var SliderMode;\n\n(function (SliderMode) {\n  SliderMode[\"singleValue\"] = \"single-value\";\n})(SliderMode || (SliderMode = {}));\n/**\n * A Slider Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.\n *\n * @public\n */\n\n\nexport class Slider extends FormAssociatedSlider {\n  constructor() {\n    super(...arguments);\n    /**\n     * @internal\n     */\n\n    this.direction = Direction.ltr;\n    /**\n     * @internal\n     */\n\n    this.isDragging = false;\n    /**\n     * @internal\n     */\n\n    this.trackWidth = 0;\n    /**\n     * @internal\n     */\n\n    this.trackMinWidth = 0;\n    /**\n     * @internal\n     */\n\n    this.trackHeight = 0;\n    /**\n     * @internal\n     */\n\n    this.trackLeft = 0;\n    /**\n     * @internal\n     */\n\n    this.trackMinHeight = 0;\n    /**\n     * Custom function that generates a string for the component's \"aria-valuetext\" attribute based on the current value.\n     *\n     * @public\n     */\n\n    this.valueTextFormatter = () => null;\n    /**\n     * The minimum allowed value.\n     *\n     * @defaultValue - 0\n     * @public\n     * @remarks\n     * HTML Attribute: min\n     */\n\n\n    this.min = 0; // Map to proxy element.\n\n    /**\n     * The maximum allowed value.\n     *\n     * @defaultValue - 10\n     * @public\n     * @remarks\n     * HTML Attribute: max\n     */\n\n    this.max = 10; // Map to proxy element.\n\n    /**\n     * Value to increment or decrement via arrow keys, mouse click or drag.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: step\n     */\n\n    this.step = 1; // Map to proxy element.\n\n    /**\n     * The orientation of the slider.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: orientation\n     */\n\n    this.orientation = Orientation.horizontal;\n    /**\n     * The selection mode.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: mode\n     */\n\n    this.mode = SliderMode.singleValue;\n\n    this.keypressHandler = e => {\n      if (e.key === keyHome) {\n        e.preventDefault();\n        this.value = `${this.min}`;\n      } else if (e.key === keyEnd) {\n        e.preventDefault();\n        this.value = `${this.max}`;\n      } else if (!e.shiftKey) {\n        switch (e.key) {\n          case keyArrowRight:\n          case keyArrowUp:\n            e.preventDefault();\n            this.increment();\n            break;\n\n          case keyArrowLeft:\n          case keyArrowDown:\n            e.preventDefault();\n            this.decrement();\n            break;\n        }\n      }\n    };\n\n    this.setupTrackConstraints = () => {\n      const clientRect = this.track.getBoundingClientRect();\n      this.trackWidth = this.track.clientWidth;\n      this.trackMinWidth = this.track.clientLeft;\n      this.trackHeight = clientRect.bottom;\n      this.trackMinHeight = clientRect.top;\n      this.trackLeft = this.getBoundingClientRect().left;\n\n      if (this.trackWidth === 0) {\n        this.trackWidth = 1;\n      }\n    };\n\n    this.setupListeners = (remove = false) => {\n      const eventAction = `${remove ? \"remove\" : \"add\"}EventListener`;\n      this[eventAction](\"keydown\", this.keypressHandler);\n      this[eventAction](\"mousedown\", this.handleMouseDown);\n      this.thumb[eventAction](\"mousedown\", this.handleThumbMouseDown, {\n        passive: true\n      });\n      this.thumb[eventAction](\"touchstart\", this.handleThumbMouseDown, {\n        passive: true\n      }); // removes handlers attached by mousedown handlers\n\n      if (remove) {\n        this.handleMouseDown(null);\n        this.handleThumbMouseDown(null);\n      }\n    };\n    /**\n     * @internal\n     */\n\n\n    this.initialValue = \"\";\n    /**\n     *  Handle mouse moves during a thumb drag operation\n     *  If the event handler is null it removes the events\n     */\n\n    this.handleThumbMouseDown = event => {\n      if (event) {\n        if (this.readOnly || this.disabled || event.defaultPrevented) {\n          return;\n        }\n\n        event.target.focus();\n      }\n\n      const eventAction = `${event !== null ? \"add\" : \"remove\"}EventListener`;\n      window[eventAction](\"mouseup\", this.handleWindowMouseUp);\n      window[eventAction](\"mousemove\", this.handleMouseMove, {\n        passive: true\n      });\n      window[eventAction](\"touchmove\", this.handleMouseMove, {\n        passive: true\n      });\n      window[eventAction](\"touchend\", this.handleWindowMouseUp);\n      this.isDragging = event !== null;\n    };\n    /**\n     *  Handle mouse moves during a thumb drag operation\n     */\n\n\n    this.handleMouseMove = e => {\n      if (this.readOnly || this.disabled || e.defaultPrevented) {\n        return;\n      } // update the value based on current position\n\n\n      const sourceEvent = window.TouchEvent && e instanceof TouchEvent ? e.touches[0] : e;\n      const eventValue = this.orientation === Orientation.horizontal ? sourceEvent.pageX - document.documentElement.scrollLeft - this.trackLeft : sourceEvent.pageY - document.documentElement.scrollTop;\n      this.value = `${this.calculateNewValue(eventValue)}`;\n    };\n\n    this.calculateNewValue = rawValue => {\n      // update the value based on current position\n      const newPosition = convertPixelToPercent(rawValue, this.orientation === Orientation.horizontal ? this.trackMinWidth : this.trackMinHeight, this.orientation === Orientation.horizontal ? this.trackWidth : this.trackHeight, this.direction);\n      const newValue = (this.max - this.min) * newPosition + this.min;\n      return this.convertToConstrainedValue(newValue);\n    };\n    /**\n     * Handle a window mouse up during a drag operation\n     */\n\n\n    this.handleWindowMouseUp = event => {\n      this.stopDragging();\n    };\n\n    this.stopDragging = () => {\n      this.isDragging = false;\n      this.handleMouseDown(null);\n      this.handleThumbMouseDown(null);\n    };\n    /**\n     *\n     * @param e - MouseEvent or null. If there is no event handler it will remove the events\n     */\n\n\n    this.handleMouseDown = e => {\n      const eventAction = `${e !== null ? \"add\" : \"remove\"}EventListener`;\n\n      if (e === null || !this.disabled && !this.readOnly) {\n        window[eventAction](\"mouseup\", this.handleWindowMouseUp);\n        window.document[eventAction](\"mouseleave\", this.handleWindowMouseUp);\n        window[eventAction](\"mousemove\", this.handleMouseMove);\n\n        if (e) {\n          e.preventDefault();\n          this.setupTrackConstraints();\n          e.target.focus();\n          const controlValue = this.orientation === Orientation.horizontal ? e.pageX - document.documentElement.scrollLeft - this.trackLeft : e.pageY - document.documentElement.scrollTop;\n          this.value = `${this.calculateNewValue(controlValue)}`;\n        }\n      }\n    };\n\n    this.convertToConstrainedValue = value => {\n      if (isNaN(value)) {\n        value = this.min;\n      }\n      /**\n       * The following logic intends to overcome the issue with math in JavaScript with regards to floating point numbers.\n       * This is needed as the `step` may be an integer but could also be a float. To accomplish this the step  is assumed to be a float\n       * and is converted to an integer by determining the number of decimal places it represent, multiplying it until it is an\n       * integer and then dividing it to get back to the correct number.\n       */\n\n\n      let constrainedValue = value - this.min;\n      const roundedConstrainedValue = Math.round(constrainedValue / this.step);\n      const remainderValue = constrainedValue - roundedConstrainedValue * (this.stepMultiplier * this.step) / this.stepMultiplier;\n      constrainedValue = remainderValue >= Number(this.step) / 2 ? constrainedValue - remainderValue + Number(this.step) : constrainedValue - remainderValue;\n      return constrainedValue + this.min;\n    };\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.readOnly = this.readOnly;\n    }\n  }\n  /**\n   * The value property, typed as a number.\n   *\n   * @public\n   */\n\n\n  get valueAsNumber() {\n    return parseFloat(super.value);\n  }\n\n  set valueAsNumber(next) {\n    this.value = next.toString();\n  }\n  /**\n   * @internal\n   */\n\n\n  valueChanged(previous, next) {\n    super.valueChanged(previous, next);\n\n    if (this.$fastController.isConnected) {\n      this.setThumbPositionForOrientation(this.direction);\n    }\n\n    this.$emit(\"change\");\n  }\n\n  minChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.min = `${this.min}`;\n    }\n\n    this.validate();\n  }\n\n  maxChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.max = `${this.max}`;\n    }\n\n    this.validate();\n  }\n\n  stepChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.step = `${this.step}`;\n    }\n\n    this.updateStepMultiplier();\n    this.validate();\n  }\n\n  orientationChanged() {\n    if (this.$fastController.isConnected) {\n      this.setThumbPositionForOrientation(this.direction);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.proxy.setAttribute(\"type\", \"range\");\n    this.direction = getDirection(this);\n    this.updateStepMultiplier();\n    this.setupTrackConstraints();\n    this.setupListeners();\n    this.setupDefaultValue();\n    this.setThumbPositionForOrientation(this.direction);\n  }\n  /**\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    this.setupListeners(true);\n  }\n  /**\n   * Increment the value by the step\n   *\n   * @public\n   */\n\n\n  increment() {\n    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) + Number(this.step) : Number(this.value) - Number(this.step);\n    const incrementedVal = this.convertToConstrainedValue(newVal);\n    const incrementedValString = incrementedVal < Number(this.max) ? `${incrementedVal}` : `${this.max}`;\n    this.value = incrementedValString;\n  }\n  /**\n   * Decrement the value by the step\n   *\n   * @public\n   */\n\n\n  decrement() {\n    const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical ? Number(this.value) - Number(this.step) : Number(this.value) + Number(this.step);\n    const decrementedVal = this.convertToConstrainedValue(newVal);\n    const decrementedValString = decrementedVal > Number(this.min) ? `${decrementedVal}` : `${this.min}`;\n    this.value = decrementedValString;\n  }\n  /**\n   * Places the thumb based on the current value\n   *\n   * @public\n   * @param direction - writing mode\n   */\n\n\n  setThumbPositionForOrientation(direction) {\n    const newPct = convertPixelToPercent(Number(this.value), Number(this.min), Number(this.max), direction);\n    const percentage = (1 - newPct) * 100;\n\n    if (this.orientation === Orientation.horizontal) {\n      this.position = this.isDragging ? `right: ${percentage}%; transition: none;` : `right: ${percentage}%; transition: all 0.2s ease;`;\n    } else {\n      this.position = this.isDragging ? `bottom: ${percentage}%; transition: none;` : `bottom: ${percentage}%; transition: all 0.2s ease;`;\n    }\n  }\n  /**\n   * Update the step multiplier used to ensure rounding errors from steps that\n   * are not whole numbers\n   */\n\n\n  updateStepMultiplier() {\n    const stepString = this.step + \"\";\n    const decimalPlacesOfStep = !!(this.step % 1) ? stepString.length - stepString.indexOf(\".\") - 1 : 0;\n    this.stepMultiplier = Math.pow(10, decimalPlacesOfStep);\n  }\n\n  get midpoint() {\n    return `${this.convertToConstrainedValue((this.max + this.min) / 2)}`;\n  }\n\n  setupDefaultValue() {\n    if (typeof this.value === \"string\") {\n      if (this.value.length === 0) {\n        this.initialValue = this.midpoint;\n      } else {\n        const value = parseFloat(this.value);\n\n        if (!Number.isNaN(value) && (value < this.min || value > this.max)) {\n          this.value = this.midpoint;\n        }\n      }\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], Slider.prototype, \"readOnly\", void 0);\n\n__decorate([observable], Slider.prototype, \"direction\", void 0);\n\n__decorate([observable], Slider.prototype, \"isDragging\", void 0);\n\n__decorate([observable], Slider.prototype, \"position\", void 0);\n\n__decorate([observable], Slider.prototype, \"trackWidth\", void 0);\n\n__decorate([observable], Slider.prototype, \"trackMinWidth\", void 0);\n\n__decorate([observable], Slider.prototype, \"trackHeight\", void 0);\n\n__decorate([observable], Slider.prototype, \"trackLeft\", void 0);\n\n__decorate([observable], Slider.prototype, \"trackMinHeight\", void 0);\n\n__decorate([observable], Slider.prototype, \"valueTextFormatter\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], Slider.prototype, \"min\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], Slider.prototype, \"max\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], Slider.prototype, \"step\", void 0);\n\n__decorate([attr], Slider.prototype, \"orientation\", void 0);\n\n__decorate([attr], Slider.prototype, \"mode\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/slider/slider.js"],"names":["__decorate","attr","nullableNumberConverter","observable","Direction","keyArrowDown","keyArrowLeft","keyArrowRight","keyArrowUp","keyEnd","keyHome","Orientation","getDirection","convertPixelToPercent","FormAssociatedSlider","SliderMode","Slider","constructor","arguments","direction","ltr","isDragging","trackWidth","trackMinWidth","trackHeight","trackLeft","trackMinHeight","valueTextFormatter","min","max","step","orientation","horizontal","mode","singleValue","keypressHandler","e","key","preventDefault","value","shiftKey","increment","decrement","setupTrackConstraints","clientRect","track","getBoundingClientRect","clientWidth","clientLeft","bottom","top","left","setupListeners","remove","eventAction","handleMouseDown","thumb","handleThumbMouseDown","passive","initialValue","event","readOnly","disabled","defaultPrevented","target","focus","window","handleWindowMouseUp","handleMouseMove","sourceEvent","TouchEvent","touches","eventValue","pageX","document","documentElement","scrollLeft","pageY","scrollTop","calculateNewValue","rawValue","newPosition","newValue","convertToConstrainedValue","stopDragging","controlValue","isNaN","constrainedValue","roundedConstrainedValue","Math","round","remainderValue","stepMultiplier","Number","readOnlyChanged","proxy","HTMLInputElement","valueAsNumber","parseFloat","next","toString","valueChanged","previous","$fastController","isConnected","setThumbPositionForOrientation","$emit","minChanged","validate","maxChanged","stepChanged","updateStepMultiplier","orientationChanged","connectedCallback","setAttribute","setupDefaultValue","disconnectedCallback","newVal","rtl","vertical","incrementedVal","incrementedValString","decrementedVal","decrementedValString","newPct","percentage","position","stepString","decimalPlacesOfStep","length","indexOf","pow","midpoint","attribute","prototype","converter"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,uBAAf,EAAwCC,UAAxC,QAA2D,yBAA3D;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,YAAlC,EAAgDC,aAAhD,EAA+DC,UAA/D,EAA2EC,MAA3E,EAAmFC,OAAnF,EAA4FC,WAA5F,QAAgH,+BAAhH;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnBA,EAAAA,UAAU,CAAC,aAAD,CAAV,GAA4B,cAA5B;AACH,CAFD,EAEGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAFb;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,MAAN,SAAqBF,oBAArB,CAA0C;AAC7CG,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA;AACR;AACA;;AACQ,SAAKC,SAAL,GAAiBf,SAAS,CAACgB,GAA3B;AACA;AACR;AACA;;AACQ,SAAKC,UAAL,GAAkB,KAAlB;AACA;AACR;AACA;;AACQ,SAAKC,UAAL,GAAkB,CAAlB;AACA;AACR;AACA;;AACQ,SAAKC,aAAL,GAAqB,CAArB;AACA;AACR;AACA;;AACQ,SAAKC,WAAL,GAAmB,CAAnB;AACA;AACR;AACA;;AACQ,SAAKC,SAAL,GAAiB,CAAjB;AACA;AACR;AACA;;AACQ,SAAKC,cAAL,GAAsB,CAAtB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,kBAAL,GAA0B,MAAM,IAAhC;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQ,SAAKC,GAAL,GAAW,CAAX,CA5CU,CA4CI;;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,GAAL,GAAW,EAAX,CArDU,CAqDK;;AACf;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,CAAZ,CA7DU,CA6DK;;AACf;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmBpB,WAAW,CAACqB,UAA/B;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,IAAL,GAAYlB,UAAU,CAACmB,WAAvB;;AACA,SAAKC,eAAL,GAAwBC,CAAD,IAAO;AAC1B,UAAIA,CAAC,CAACC,GAAF,KAAU3B,OAAd,EAAuB;AACnB0B,QAAAA,CAAC,CAACE,cAAF;AACA,aAAKC,KAAL,GAAc,GAAE,KAAKX,GAAI,EAAzB;AACH,OAHD,MAIK,IAAIQ,CAAC,CAACC,GAAF,KAAU5B,MAAd,EAAsB;AACvB2B,QAAAA,CAAC,CAACE,cAAF;AACA,aAAKC,KAAL,GAAc,GAAE,KAAKV,GAAI,EAAzB;AACH,OAHI,MAIA,IAAI,CAACO,CAAC,CAACI,QAAP,EAAiB;AAClB,gBAAQJ,CAAC,CAACC,GAAV;AACI,eAAK9B,aAAL;AACA,eAAKC,UAAL;AACI4B,YAAAA,CAAC,CAACE,cAAF;AACA,iBAAKG,SAAL;AACA;;AACJ,eAAKnC,YAAL;AACA,eAAKD,YAAL;AACI+B,YAAAA,CAAC,CAACE,cAAF;AACA,iBAAKI,SAAL;AACA;AAVR;AAYH;AACJ,KAvBD;;AAwBA,SAAKC,qBAAL,GAA6B,MAAM;AAC/B,YAAMC,UAAU,GAAG,KAAKC,KAAL,CAAWC,qBAAX,EAAnB;AACA,WAAKxB,UAAL,GAAkB,KAAKuB,KAAL,CAAWE,WAA7B;AACA,WAAKxB,aAAL,GAAqB,KAAKsB,KAAL,CAAWG,UAAhC;AACA,WAAKxB,WAAL,GAAmBoB,UAAU,CAACK,MAA9B;AACA,WAAKvB,cAAL,GAAsBkB,UAAU,CAACM,GAAjC;AACA,WAAKzB,SAAL,GAAiB,KAAKqB,qBAAL,GAA6BK,IAA9C;;AACA,UAAI,KAAK7B,UAAL,KAAoB,CAAxB,EAA2B;AACvB,aAAKA,UAAL,GAAkB,CAAlB;AACH;AACJ,KAVD;;AAWA,SAAK8B,cAAL,GAAsB,CAACC,MAAM,GAAG,KAAV,KAAoB;AACtC,YAAMC,WAAW,GAAI,GAAED,MAAM,GAAG,QAAH,GAAc,KAAM,eAAjD;AACA,WAAKC,WAAL,EAAkB,SAAlB,EAA6B,KAAKnB,eAAlC;AACA,WAAKmB,WAAL,EAAkB,WAAlB,EAA+B,KAAKC,eAApC;AACA,WAAKC,KAAL,CAAWF,WAAX,EAAwB,WAAxB,EAAqC,KAAKG,oBAA1C,EAAgE;AAC5DC,QAAAA,OAAO,EAAE;AADmD,OAAhE;AAGA,WAAKF,KAAL,CAAWF,WAAX,EAAwB,YAAxB,EAAsC,KAAKG,oBAA3C,EAAiE;AAC7DC,QAAAA,OAAO,EAAE;AADoD,OAAjE,EAPsC,CAUtC;;AACA,UAAIL,MAAJ,EAAY;AACR,aAAKE,eAAL,CAAqB,IAArB;AACA,aAAKE,oBAAL,CAA0B,IAA1B;AACH;AACJ,KAfD;AAgBA;AACR;AACA;;;AACQ,SAAKE,YAAL,GAAoB,EAApB;AACA;AACR;AACA;AACA;;AACQ,SAAKF,oBAAL,GAA6BG,KAAD,IAAW;AACnC,UAAIA,KAAJ,EAAW;AACP,YAAI,KAAKC,QAAL,IAAiB,KAAKC,QAAtB,IAAkCF,KAAK,CAACG,gBAA5C,EAA8D;AAC1D;AACH;;AACDH,QAAAA,KAAK,CAACI,MAAN,CAAaC,KAAb;AACH;;AACD,YAAMX,WAAW,GAAI,GAAEM,KAAK,KAAK,IAAV,GAAiB,KAAjB,GAAyB,QAAS,eAAzD;AACAM,MAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,SAApB,EAA+B,KAAKa,mBAApC;AACAD,MAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,WAApB,EAAiC,KAAKc,eAAtC,EAAuD;AAAEV,QAAAA,OAAO,EAAE;AAAX,OAAvD;AACAQ,MAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,WAApB,EAAiC,KAAKc,eAAtC,EAAuD;AAAEV,QAAAA,OAAO,EAAE;AAAX,OAAvD;AACAQ,MAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,UAApB,EAAgC,KAAKa,mBAArC;AACA,WAAK9C,UAAL,GAAkBuC,KAAK,KAAK,IAA5B;AACH,KAbD;AAcA;AACR;AACA;;;AACQ,SAAKQ,eAAL,GAAwBhC,CAAD,IAAO;AAC1B,UAAI,KAAKyB,QAAL,IAAiB,KAAKC,QAAtB,IAAkC1B,CAAC,CAAC2B,gBAAxC,EAA0D;AACtD;AACH,OAHyB,CAI1B;;;AACA,YAAMM,WAAW,GAAGH,MAAM,CAACI,UAAP,IAAqBlC,CAAC,YAAYkC,UAAlC,GACdlC,CAAC,CAACmC,OAAF,CAAU,CAAV,CADc,GAEdnC,CAFN;AAGA,YAAMoC,UAAU,GAAG,KAAKzC,WAAL,KAAqBpB,WAAW,CAACqB,UAAjC,GACbqC,WAAW,CAACI,KAAZ,GAAoBC,QAAQ,CAACC,eAAT,CAAyBC,UAA7C,GAA0D,KAAKnD,SADlD,GAEb4C,WAAW,CAACQ,KAAZ,GAAoBH,QAAQ,CAACC,eAAT,CAAyBG,SAFnD;AAGA,WAAKvC,KAAL,GAAc,GAAE,KAAKwC,iBAAL,CAAuBP,UAAvB,CAAmC,EAAnD;AACH,KAZD;;AAaA,SAAKO,iBAAL,GAA0BC,QAAD,IAAc;AACnC;AACA,YAAMC,WAAW,GAAGpE,qBAAqB,CAACmE,QAAD,EAAW,KAAKjD,WAAL,KAAqBpB,WAAW,CAACqB,UAAjC,GAC9C,KAAKT,aADyC,GAE9C,KAAKG,cAF8B,EAEd,KAAKK,WAAL,KAAqBpB,WAAW,CAACqB,UAAjC,GACrB,KAAKV,UADgB,GAErB,KAAKE,WAJ8B,EAIjB,KAAKL,SAJY,CAAzC;AAKA,YAAM+D,QAAQ,GAAG,CAAC,KAAKrD,GAAL,GAAW,KAAKD,GAAjB,IAAwBqD,WAAxB,GAAsC,KAAKrD,GAA5D;AACA,aAAO,KAAKuD,yBAAL,CAA+BD,QAA/B,CAAP;AACH,KATD;AAUA;AACR;AACA;;;AACQ,SAAKf,mBAAL,GAA4BP,KAAD,IAAW;AAClC,WAAKwB,YAAL;AACH,KAFD;;AAGA,SAAKA,YAAL,GAAoB,MAAM;AACtB,WAAK/D,UAAL,GAAkB,KAAlB;AACA,WAAKkC,eAAL,CAAqB,IAArB;AACA,WAAKE,oBAAL,CAA0B,IAA1B;AACH,KAJD;AAKA;AACR;AACA;AACA;;;AACQ,SAAKF,eAAL,GAAwBnB,CAAD,IAAO;AAC1B,YAAMkB,WAAW,GAAI,GAAElB,CAAC,KAAK,IAAN,GAAa,KAAb,GAAqB,QAAS,eAArD;;AACA,UAAIA,CAAC,KAAK,IAAN,IAAe,CAAC,KAAK0B,QAAN,IAAkB,CAAC,KAAKD,QAA3C,EAAsD;AAClDK,QAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,SAApB,EAA+B,KAAKa,mBAApC;AACAD,QAAAA,MAAM,CAACQ,QAAP,CAAgBpB,WAAhB,EAA6B,YAA7B,EAA2C,KAAKa,mBAAhD;AACAD,QAAAA,MAAM,CAACZ,WAAD,CAAN,CAAoB,WAApB,EAAiC,KAAKc,eAAtC;;AACA,YAAIhC,CAAJ,EAAO;AACHA,UAAAA,CAAC,CAACE,cAAF;AACA,eAAKK,qBAAL;AACAP,UAAAA,CAAC,CAAC4B,MAAF,CAASC,KAAT;AACA,gBAAMoB,YAAY,GAAG,KAAKtD,WAAL,KAAqBpB,WAAW,CAACqB,UAAjC,GACfI,CAAC,CAACqC,KAAF,GAAUC,QAAQ,CAACC,eAAT,CAAyBC,UAAnC,GAAgD,KAAKnD,SADtC,GAEfW,CAAC,CAACyC,KAAF,GAAUH,QAAQ,CAACC,eAAT,CAAyBG,SAFzC;AAGA,eAAKvC,KAAL,GAAc,GAAE,KAAKwC,iBAAL,CAAuBM,YAAvB,CAAqC,EAArD;AACH;AACJ;AACJ,KAhBD;;AAiBA,SAAKF,yBAAL,GAAkC5C,KAAD,IAAW;AACxC,UAAI+C,KAAK,CAAC/C,KAAD,CAAT,EAAkB;AACdA,QAAAA,KAAK,GAAG,KAAKX,GAAb;AACH;AACD;AACZ;AACA;AACA;AACA;AACA;;;AACY,UAAI2D,gBAAgB,GAAGhD,KAAK,GAAG,KAAKX,GAApC;AACA,YAAM4D,uBAAuB,GAAGC,IAAI,CAACC,KAAL,CAAWH,gBAAgB,GAAG,KAAKzD,IAAnC,CAAhC;AACA,YAAM6D,cAAc,GAAGJ,gBAAgB,GAClCC,uBAAuB,IAAI,KAAKI,cAAL,GAAsB,KAAK9D,IAA/B,CAAxB,GACI,KAAK8D,cAFb;AAGAL,MAAAA,gBAAgB,GACZI,cAAc,IAAIE,MAAM,CAAC,KAAK/D,IAAN,CAAN,GAAoB,CAAtC,GACMyD,gBAAgB,GAAGI,cAAnB,GAAoCE,MAAM,CAAC,KAAK/D,IAAN,CADhD,GAEMyD,gBAAgB,GAAGI,cAH7B;AAIA,aAAOJ,gBAAgB,GAAG,KAAK3D,GAA/B;AACH,KApBD;AAqBH;;AACDkE,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKC,KAAL,YAAsBC,gBAA1B,EAA4C;AACxC,WAAKD,KAAL,CAAWlC,QAAX,GAAsB,KAAKA,QAA3B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACqB,MAAboC,aAAa,GAAG;AAChB,WAAOC,UAAU,CAAC,MAAM3D,KAAP,CAAjB;AACH;;AACgB,MAAb0D,aAAa,CAACE,IAAD,EAAO;AACpB,SAAK5D,KAAL,GAAa4D,IAAI,CAACC,QAAL,EAAb;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,YAAY,CAACC,QAAD,EAAWH,IAAX,EAAiB;AACzB,UAAME,YAAN,CAAmBC,QAAnB,EAA6BH,IAA7B;;AACA,QAAI,KAAKI,eAAL,CAAqBC,WAAzB,EAAsC;AAClC,WAAKC,8BAAL,CAAoC,KAAKtF,SAAzC;AACH;;AACD,SAAKuF,KAAL,CAAW,QAAX;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKZ,KAAL,YAAsBC,gBAA1B,EAA4C;AACxC,WAAKD,KAAL,CAAWnE,GAAX,GAAkB,GAAE,KAAKA,GAAI,EAA7B;AACH;;AACD,SAAKgF,QAAL;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKd,KAAL,YAAsBC,gBAA1B,EAA4C;AACxC,WAAKD,KAAL,CAAWlE,GAAX,GAAkB,GAAE,KAAKA,GAAI,EAA7B;AACH;;AACD,SAAK+E,QAAL;AACH;;AACDE,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKf,KAAL,YAAsBC,gBAA1B,EAA4C;AACxC,WAAKD,KAAL,CAAWjE,IAAX,GAAmB,GAAE,KAAKA,IAAK,EAA/B;AACH;;AACD,SAAKiF,oBAAL;AACA,SAAKH,QAAL;AACH;;AACDI,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKT,eAAL,CAAqBC,WAAzB,EAAsC;AAClC,WAAKC,8BAAL,CAAoC,KAAKtF,SAAzC;AACH;AACJ;AACD;AACJ;AACA;;;AACI8F,EAAAA,iBAAiB,GAAG;AAChB,UAAMA,iBAAN;AACA,SAAKlB,KAAL,CAAWmB,YAAX,CAAwB,MAAxB,EAAgC,OAAhC;AACA,SAAK/F,SAAL,GAAiBP,YAAY,CAAC,IAAD,CAA7B;AACA,SAAKmG,oBAAL;AACA,SAAKpE,qBAAL;AACA,SAAKS,cAAL;AACA,SAAK+D,iBAAL;AACA,SAAKV,8BAAL,CAAoC,KAAKtF,SAAzC;AACH;AACD;AACJ;AACA;;;AACIiG,EAAAA,oBAAoB,GAAG;AACnB,SAAKhE,cAAL,CAAoB,IAApB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIX,EAAAA,SAAS,GAAG;AACR,UAAM4E,MAAM,GAAG,KAAKlG,SAAL,KAAmBf,SAAS,CAACkH,GAA7B,IAAoC,KAAKvF,WAAL,KAAqBpB,WAAW,CAAC4G,QAArE,GACT1B,MAAM,CAAC,KAAKtD,KAAN,CAAN,GAAqBsD,MAAM,CAAC,KAAK/D,IAAN,CADlB,GAET+D,MAAM,CAAC,KAAKtD,KAAN,CAAN,GAAqBsD,MAAM,CAAC,KAAK/D,IAAN,CAFjC;AAGA,UAAM0F,cAAc,GAAG,KAAKrC,yBAAL,CAA+BkC,MAA/B,CAAvB;AACA,UAAMI,oBAAoB,GAAGD,cAAc,GAAG3B,MAAM,CAAC,KAAKhE,GAAN,CAAvB,GAAqC,GAAE2F,cAAe,EAAtD,GAA2D,GAAE,KAAK3F,GAAI,EAAnG;AACA,SAAKU,KAAL,GAAakF,oBAAb;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI/E,EAAAA,SAAS,GAAG;AACR,UAAM2E,MAAM,GAAG,KAAKlG,SAAL,KAAmBf,SAAS,CAACkH,GAA7B,IAAoC,KAAKvF,WAAL,KAAqBpB,WAAW,CAAC4G,QAArE,GACT1B,MAAM,CAAC,KAAKtD,KAAN,CAAN,GAAqBsD,MAAM,CAAC,KAAK/D,IAAN,CADlB,GAET+D,MAAM,CAAC,KAAKtD,KAAN,CAAN,GAAqBsD,MAAM,CAAC,KAAK/D,IAAN,CAFjC;AAGA,UAAM4F,cAAc,GAAG,KAAKvC,yBAAL,CAA+BkC,MAA/B,CAAvB;AACA,UAAMM,oBAAoB,GAAGD,cAAc,GAAG7B,MAAM,CAAC,KAAKjE,GAAN,CAAvB,GAAqC,GAAE8F,cAAe,EAAtD,GAA2D,GAAE,KAAK9F,GAAI,EAAnG;AACA,SAAKW,KAAL,GAAaoF,oBAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIlB,EAAAA,8BAA8B,CAACtF,SAAD,EAAY;AACtC,UAAMyG,MAAM,GAAG/G,qBAAqB,CAACgF,MAAM,CAAC,KAAKtD,KAAN,CAAP,EAAqBsD,MAAM,CAAC,KAAKjE,GAAN,CAA3B,EAAuCiE,MAAM,CAAC,KAAKhE,GAAN,CAA7C,EAAyDV,SAAzD,CAApC;AACA,UAAM0G,UAAU,GAAG,CAAC,IAAID,MAAL,IAAe,GAAlC;;AACA,QAAI,KAAK7F,WAAL,KAAqBpB,WAAW,CAACqB,UAArC,EAAiD;AAC7C,WAAK8F,QAAL,GAAgB,KAAKzG,UAAL,GACT,UAASwG,UAAW,sBADX,GAET,UAASA,UAAW,+BAF3B;AAGH,KAJD,MAKK;AACD,WAAKC,QAAL,GAAgB,KAAKzG,UAAL,GACT,WAAUwG,UAAW,sBADZ,GAET,WAAUA,UAAW,+BAF5B;AAGH;AACJ;AACD;AACJ;AACA;AACA;;;AACId,EAAAA,oBAAoB,GAAG;AACnB,UAAMgB,UAAU,GAAG,KAAKjG,IAAL,GAAY,EAA/B;AACA,UAAMkG,mBAAmB,GAAG,CAAC,EAAE,KAAKlG,IAAL,GAAY,CAAd,CAAD,GACtBiG,UAAU,CAACE,MAAX,GAAoBF,UAAU,CAACG,OAAX,CAAmB,GAAnB,CAApB,GAA8C,CADxB,GAEtB,CAFN;AAGA,SAAKtC,cAAL,GAAsBH,IAAI,CAAC0C,GAAL,CAAS,EAAT,EAAaH,mBAAb,CAAtB;AACH;;AACW,MAARI,QAAQ,GAAG;AACX,WAAQ,GAAE,KAAKjD,yBAAL,CAA+B,CAAC,KAAKtD,GAAL,GAAW,KAAKD,GAAjB,IAAwB,CAAvD,CAA0D,EAApE;AACH;;AACDuF,EAAAA,iBAAiB,GAAG;AAChB,QAAI,OAAO,KAAK5E,KAAZ,KAAsB,QAA1B,EAAoC;AAChC,UAAI,KAAKA,KAAL,CAAW0F,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAKtE,YAAL,GAAoB,KAAKyE,QAAzB;AACH,OAFD,MAGK;AACD,cAAM7F,KAAK,GAAG2D,UAAU,CAAC,KAAK3D,KAAN,CAAxB;;AACA,YAAI,CAACsD,MAAM,CAACP,KAAP,CAAa/C,KAAb,CAAD,KAAyBA,KAAK,GAAG,KAAKX,GAAb,IAAoBW,KAAK,GAAG,KAAKV,GAA1D,CAAJ,EAAoE;AAChE,eAAKU,KAAL,GAAa,KAAK6F,QAAlB;AACH;AACJ;AACJ;AACJ;;AArX4C;;AAuXjDpI,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEoI,EAAAA,SAAS,EAAE,UAAb;AAAyBpG,EAAAA,IAAI,EAAE;AAA/B,CAAD,CADG,CAAD,EAEPjB,MAAM,CAACsH,SAFA,EAEW,UAFX,EAEuB,KAAK,CAF5B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,WAFX,EAEwB,KAAK,CAF7B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,YAFX,EAEyB,KAAK,CAF9B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,UAFX,EAEuB,KAAK,CAF5B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,YAFX,EAEyB,KAAK,CAF9B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,eAFX,EAE4B,KAAK,CAFjC,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,aAFX,EAE0B,KAAK,CAF/B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,WAFX,EAEwB,KAAK,CAF7B,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,gBAFX,EAE6B,KAAK,CAFlC,CAAV;;AAGAtI,UAAU,CAAC,CACPG,UADO,CAAD,EAEPa,MAAM,CAACsH,SAFA,EAEW,oBAFX,EAEiC,KAAK,CAFtC,CAAV;;AAGAtI,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEsI,EAAAA,SAAS,EAAErI;AAAb,CAAD,CADG,CAAD,EAEPc,MAAM,CAACsH,SAFA,EAEW,KAFX,EAEkB,KAAK,CAFvB,CAAV;;AAGAtI,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEsI,EAAAA,SAAS,EAAErI;AAAb,CAAD,CADG,CAAD,EAEPc,MAAM,CAACsH,SAFA,EAEW,KAFX,EAEkB,KAAK,CAFvB,CAAV;;AAGAtI,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEsI,EAAAA,SAAS,EAAErI;AAAb,CAAD,CADG,CAAD,EAEPc,MAAM,CAACsH,SAFA,EAEW,MAFX,EAEmB,KAAK,CAFxB,CAAV;;AAGAtI,UAAU,CAAC,CACPC,IADO,CAAD,EAEPe,MAAM,CAACsH,SAFA,EAEW,aAFX,EAE0B,KAAK,CAF/B,CAAV;;AAGAtI,UAAU,CAAC,CACPC,IADO,CAAD,EAEPe,MAAM,CAACsH,SAFA,EAEW,MAFX,EAEmB,KAAK,CAFxB,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter, observable, } from \"@microsoft/fast-element\";\nimport { Direction, keyArrowDown, keyArrowLeft, keyArrowRight, keyArrowUp, keyEnd, keyHome, Orientation, } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities/direction\";\nimport { convertPixelToPercent } from \"./slider-utilities\";\nimport { FormAssociatedSlider } from \"./slider.form-associated\";\n/**\n * The selection modes of a {@link @microsoft/fast-foundation#(Slider:class)}.\n * @public\n */\nexport var SliderMode;\n(function (SliderMode) {\n    SliderMode[\"singleValue\"] = \"single-value\";\n})(SliderMode || (SliderMode = {}));\n/**\n * A Slider Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.\n *\n * @public\n */\nexport class Slider extends FormAssociatedSlider {\n    constructor() {\n        super(...arguments);\n        /**\n         * @internal\n         */\n        this.direction = Direction.ltr;\n        /**\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * @internal\n         */\n        this.trackWidth = 0;\n        /**\n         * @internal\n         */\n        this.trackMinWidth = 0;\n        /**\n         * @internal\n         */\n        this.trackHeight = 0;\n        /**\n         * @internal\n         */\n        this.trackLeft = 0;\n        /**\n         * @internal\n         */\n        this.trackMinHeight = 0;\n        /**\n         * Custom function that generates a string for the component's \"aria-valuetext\" attribute based on the current value.\n         *\n         * @public\n         */\n        this.valueTextFormatter = () => null;\n        /**\n         * The minimum allowed value.\n         *\n         * @defaultValue - 0\n         * @public\n         * @remarks\n         * HTML Attribute: min\n         */\n        this.min = 0; // Map to proxy element.\n        /**\n         * The maximum allowed value.\n         *\n         * @defaultValue - 10\n         * @public\n         * @remarks\n         * HTML Attribute: max\n         */\n        this.max = 10; // Map to proxy element.\n        /**\n         * Value to increment or decrement via arrow keys, mouse click or drag.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: step\n         */\n        this.step = 1; // Map to proxy element.\n        /**\n         * The orientation of the slider.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: orientation\n         */\n        this.orientation = Orientation.horizontal;\n        /**\n         * The selection mode.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: mode\n         */\n        this.mode = SliderMode.singleValue;\n        this.keypressHandler = (e) => {\n            if (e.key === keyHome) {\n                e.preventDefault();\n                this.value = `${this.min}`;\n            }\n            else if (e.key === keyEnd) {\n                e.preventDefault();\n                this.value = `${this.max}`;\n            }\n            else if (!e.shiftKey) {\n                switch (e.key) {\n                    case keyArrowRight:\n                    case keyArrowUp:\n                        e.preventDefault();\n                        this.increment();\n                        break;\n                    case keyArrowLeft:\n                    case keyArrowDown:\n                        e.preventDefault();\n                        this.decrement();\n                        break;\n                }\n            }\n        };\n        this.setupTrackConstraints = () => {\n            const clientRect = this.track.getBoundingClientRect();\n            this.trackWidth = this.track.clientWidth;\n            this.trackMinWidth = this.track.clientLeft;\n            this.trackHeight = clientRect.bottom;\n            this.trackMinHeight = clientRect.top;\n            this.trackLeft = this.getBoundingClientRect().left;\n            if (this.trackWidth === 0) {\n                this.trackWidth = 1;\n            }\n        };\n        this.setupListeners = (remove = false) => {\n            const eventAction = `${remove ? \"remove\" : \"add\"}EventListener`;\n            this[eventAction](\"keydown\", this.keypressHandler);\n            this[eventAction](\"mousedown\", this.handleMouseDown);\n            this.thumb[eventAction](\"mousedown\", this.handleThumbMouseDown, {\n                passive: true,\n            });\n            this.thumb[eventAction](\"touchstart\", this.handleThumbMouseDown, {\n                passive: true,\n            });\n            // removes handlers attached by mousedown handlers\n            if (remove) {\n                this.handleMouseDown(null);\n                this.handleThumbMouseDown(null);\n            }\n        };\n        /**\n         * @internal\n         */\n        this.initialValue = \"\";\n        /**\n         *  Handle mouse moves during a thumb drag operation\n         *  If the event handler is null it removes the events\n         */\n        this.handleThumbMouseDown = (event) => {\n            if (event) {\n                if (this.readOnly || this.disabled || event.defaultPrevented) {\n                    return;\n                }\n                event.target.focus();\n            }\n            const eventAction = `${event !== null ? \"add\" : \"remove\"}EventListener`;\n            window[eventAction](\"mouseup\", this.handleWindowMouseUp);\n            window[eventAction](\"mousemove\", this.handleMouseMove, { passive: true });\n            window[eventAction](\"touchmove\", this.handleMouseMove, { passive: true });\n            window[eventAction](\"touchend\", this.handleWindowMouseUp);\n            this.isDragging = event !== null;\n        };\n        /**\n         *  Handle mouse moves during a thumb drag operation\n         */\n        this.handleMouseMove = (e) => {\n            if (this.readOnly || this.disabled || e.defaultPrevented) {\n                return;\n            }\n            // update the value based on current position\n            const sourceEvent = window.TouchEvent && e instanceof TouchEvent\n                ? e.touches[0]\n                : e;\n            const eventValue = this.orientation === Orientation.horizontal\n                ? sourceEvent.pageX - document.documentElement.scrollLeft - this.trackLeft\n                : sourceEvent.pageY - document.documentElement.scrollTop;\n            this.value = `${this.calculateNewValue(eventValue)}`;\n        };\n        this.calculateNewValue = (rawValue) => {\n            // update the value based on current position\n            const newPosition = convertPixelToPercent(rawValue, this.orientation === Orientation.horizontal\n                ? this.trackMinWidth\n                : this.trackMinHeight, this.orientation === Orientation.horizontal\n                ? this.trackWidth\n                : this.trackHeight, this.direction);\n            const newValue = (this.max - this.min) * newPosition + this.min;\n            return this.convertToConstrainedValue(newValue);\n        };\n        /**\n         * Handle a window mouse up during a drag operation\n         */\n        this.handleWindowMouseUp = (event) => {\n            this.stopDragging();\n        };\n        this.stopDragging = () => {\n            this.isDragging = false;\n            this.handleMouseDown(null);\n            this.handleThumbMouseDown(null);\n        };\n        /**\n         *\n         * @param e - MouseEvent or null. If there is no event handler it will remove the events\n         */\n        this.handleMouseDown = (e) => {\n            const eventAction = `${e !== null ? \"add\" : \"remove\"}EventListener`;\n            if (e === null || (!this.disabled && !this.readOnly)) {\n                window[eventAction](\"mouseup\", this.handleWindowMouseUp);\n                window.document[eventAction](\"mouseleave\", this.handleWindowMouseUp);\n                window[eventAction](\"mousemove\", this.handleMouseMove);\n                if (e) {\n                    e.preventDefault();\n                    this.setupTrackConstraints();\n                    e.target.focus();\n                    const controlValue = this.orientation === Orientation.horizontal\n                        ? e.pageX - document.documentElement.scrollLeft - this.trackLeft\n                        : e.pageY - document.documentElement.scrollTop;\n                    this.value = `${this.calculateNewValue(controlValue)}`;\n                }\n            }\n        };\n        this.convertToConstrainedValue = (value) => {\n            if (isNaN(value)) {\n                value = this.min;\n            }\n            /**\n             * The following logic intends to overcome the issue with math in JavaScript with regards to floating point numbers.\n             * This is needed as the `step` may be an integer but could also be a float. To accomplish this the step  is assumed to be a float\n             * and is converted to an integer by determining the number of decimal places it represent, multiplying it until it is an\n             * integer and then dividing it to get back to the correct number.\n             */\n            let constrainedValue = value - this.min;\n            const roundedConstrainedValue = Math.round(constrainedValue / this.step);\n            const remainderValue = constrainedValue -\n                (roundedConstrainedValue * (this.stepMultiplier * this.step)) /\n                    this.stepMultiplier;\n            constrainedValue =\n                remainderValue >= Number(this.step) / 2\n                    ? constrainedValue - remainderValue + Number(this.step)\n                    : constrainedValue - remainderValue;\n            return constrainedValue + this.min;\n        };\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n    /**\n     * The value property, typed as a number.\n     *\n     * @public\n     */\n    get valueAsNumber() {\n        return parseFloat(super.value);\n    }\n    set valueAsNumber(next) {\n        this.value = next.toString();\n    }\n    /**\n     * @internal\n     */\n    valueChanged(previous, next) {\n        super.valueChanged(previous, next);\n        if (this.$fastController.isConnected) {\n            this.setThumbPositionForOrientation(this.direction);\n        }\n        this.$emit(\"change\");\n    }\n    minChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.min = `${this.min}`;\n        }\n        this.validate();\n    }\n    maxChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.max = `${this.max}`;\n        }\n        this.validate();\n    }\n    stepChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.step = `${this.step}`;\n        }\n        this.updateStepMultiplier();\n        this.validate();\n    }\n    orientationChanged() {\n        if (this.$fastController.isConnected) {\n            this.setThumbPositionForOrientation(this.direction);\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.proxy.setAttribute(\"type\", \"range\");\n        this.direction = getDirection(this);\n        this.updateStepMultiplier();\n        this.setupTrackConstraints();\n        this.setupListeners();\n        this.setupDefaultValue();\n        this.setThumbPositionForOrientation(this.direction);\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        this.setupListeners(true);\n    }\n    /**\n     * Increment the value by the step\n     *\n     * @public\n     */\n    increment() {\n        const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical\n            ? Number(this.value) + Number(this.step)\n            : Number(this.value) - Number(this.step);\n        const incrementedVal = this.convertToConstrainedValue(newVal);\n        const incrementedValString = incrementedVal < Number(this.max) ? `${incrementedVal}` : `${this.max}`;\n        this.value = incrementedValString;\n    }\n    /**\n     * Decrement the value by the step\n     *\n     * @public\n     */\n    decrement() {\n        const newVal = this.direction !== Direction.rtl && this.orientation !== Orientation.vertical\n            ? Number(this.value) - Number(this.step)\n            : Number(this.value) + Number(this.step);\n        const decrementedVal = this.convertToConstrainedValue(newVal);\n        const decrementedValString = decrementedVal > Number(this.min) ? `${decrementedVal}` : `${this.min}`;\n        this.value = decrementedValString;\n    }\n    /**\n     * Places the thumb based on the current value\n     *\n     * @public\n     * @param direction - writing mode\n     */\n    setThumbPositionForOrientation(direction) {\n        const newPct = convertPixelToPercent(Number(this.value), Number(this.min), Number(this.max), direction);\n        const percentage = (1 - newPct) * 100;\n        if (this.orientation === Orientation.horizontal) {\n            this.position = this.isDragging\n                ? `right: ${percentage}%; transition: none;`\n                : `right: ${percentage}%; transition: all 0.2s ease;`;\n        }\n        else {\n            this.position = this.isDragging\n                ? `bottom: ${percentage}%; transition: none;`\n                : `bottom: ${percentage}%; transition: all 0.2s ease;`;\n        }\n    }\n    /**\n     * Update the step multiplier used to ensure rounding errors from steps that\n     * are not whole numbers\n     */\n    updateStepMultiplier() {\n        const stepString = this.step + \"\";\n        const decimalPlacesOfStep = !!(this.step % 1)\n            ? stepString.length - stepString.indexOf(\".\") - 1\n            : 0;\n        this.stepMultiplier = Math.pow(10, decimalPlacesOfStep);\n    }\n    get midpoint() {\n        return `${this.convertToConstrainedValue((this.max + this.min) / 2)}`;\n    }\n    setupDefaultValue() {\n        if (typeof this.value === \"string\") {\n            if (this.value.length === 0) {\n                this.initialValue = this.midpoint;\n            }\n            else {\n                const value = parseFloat(this.value);\n                if (!Number.isNaN(value) && (value < this.min || value > this.max)) {\n                    this.value = this.midpoint;\n                }\n            }\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], Slider.prototype, \"readOnly\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"direction\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"isDragging\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"position\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"trackWidth\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"trackMinWidth\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"trackHeight\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"trackLeft\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"trackMinHeight\", void 0);\n__decorate([\n    observable\n], Slider.prototype, \"valueTextFormatter\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], Slider.prototype, \"min\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], Slider.prototype, \"max\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], Slider.prototype, \"step\", void 0);\n__decorate([\n    attr\n], Slider.prototype, \"orientation\", void 0);\n__decorate([\n    attr\n], Slider.prototype, \"mode\", void 0);\n"]},"metadata":{},"sourceType":"module"}