{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, Observable, observable } from \"@microsoft/fast-element\";\nimport { Direction, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { convertPixelToPercent } from \"../slider/slider-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nconst defaultConfig = {\n  min: 0,\n  max: 0,\n  direction: Direction.ltr,\n  orientation: Orientation.horizontal,\n  disabled: false\n};\n/**\n * A label element intended to be used with the {@link @microsoft/fast-foundation#(Slider:class)} component.\n *\n * @public\n */\n\nexport class SliderLabel extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Hides the tick mark.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: hide-mark\n     */\n\n    this.hideMark = false;\n    /**\n     * @internal\n     */\n\n    this.sliderDirection = Direction.ltr;\n\n    this.getSliderConfiguration = () => {\n      if (!this.isSliderConfig(this.parentNode)) {\n        this.sliderDirection = defaultConfig.direction || Direction.ltr;\n        this.sliderOrientation = defaultConfig.orientation || Orientation.horizontal;\n        this.sliderMaxPosition = defaultConfig.max;\n        this.sliderMinPosition = defaultConfig.min;\n      } else {\n        const parentSlider = this.parentNode;\n        const {\n          min,\n          max,\n          direction,\n          orientation,\n          disabled\n        } = parentSlider;\n\n        if (disabled !== undefined) {\n          this.disabled = disabled;\n        }\n\n        this.sliderDirection = direction || Direction.ltr;\n        this.sliderOrientation = orientation || Orientation.horizontal;\n        this.sliderMaxPosition = max;\n        this.sliderMinPosition = min;\n      }\n    };\n\n    this.positionAsStyle = () => {\n      const direction = this.sliderDirection ? this.sliderDirection : Direction.ltr;\n      const pct = convertPixelToPercent(Number(this.position), Number(this.sliderMinPosition), Number(this.sliderMaxPosition));\n      let rightNum = Math.round((1 - pct) * 100);\n      let leftNum = Math.round(pct * 100);\n\n      if (Number.isNaN(leftNum) && Number.isNaN(rightNum)) {\n        rightNum = 50;\n        leftNum = 50;\n      }\n\n      if (this.sliderOrientation === Orientation.horizontal) {\n        return direction === Direction.rtl ? `right: ${leftNum}%; left: ${rightNum}%;` : `left: ${leftNum}%; right: ${rightNum}%;`;\n      } else {\n        return `top: ${leftNum}%; bottom: ${rightNum}%;`;\n      }\n    };\n  }\n\n  positionChanged() {\n    this.positionStyle = this.positionAsStyle();\n  }\n  /**\n   * @internal\n   */\n\n\n  sliderOrientationChanged() {\n    void 0;\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.getSliderConfiguration();\n    this.positionStyle = this.positionAsStyle();\n    this.notifier = Observable.getNotifier(this.parentNode);\n    this.notifier.subscribe(this, \"orientation\");\n    this.notifier.subscribe(this, \"direction\");\n    this.notifier.subscribe(this, \"max\");\n    this.notifier.subscribe(this, \"min\");\n  }\n  /**\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.notifier.unsubscribe(this, \"orientation\");\n    this.notifier.unsubscribe(this, \"direction\");\n    this.notifier.unsubscribe(this, \"max\");\n    this.notifier.unsubscribe(this, \"min\");\n  }\n  /**\n   * @internal\n   */\n\n\n  handleChange(source, propertyName) {\n    switch (propertyName) {\n      case \"direction\":\n        this.sliderDirection = source.direction;\n        break;\n\n      case \"orientation\":\n        this.sliderOrientation = source.orientation;\n        break;\n\n      case \"max\":\n        this.sliderMinPosition = source.max;\n        break;\n\n      case \"min\":\n        this.sliderMinPosition = source.min;\n        break;\n\n      default:\n        break;\n    }\n\n    this.positionStyle = this.positionAsStyle();\n  }\n\n  isSliderConfig(node) {\n    return node.max !== undefined && node.min !== undefined;\n  }\n\n}\n\n__decorate([observable], SliderLabel.prototype, \"positionStyle\", void 0);\n\n__decorate([attr], SliderLabel.prototype, \"position\", void 0);\n\n__decorate([attr({\n  attribute: \"hide-mark\",\n  mode: \"boolean\"\n})], SliderLabel.prototype, \"hideMark\", void 0);\n\n__decorate([attr({\n  attribute: \"disabled\",\n  mode: \"boolean\"\n})], SliderLabel.prototype, \"disabled\", void 0);\n\n__decorate([observable], SliderLabel.prototype, \"sliderOrientation\", void 0);\n\n__decorate([observable], SliderLabel.prototype, \"sliderMinPosition\", void 0);\n\n__decorate([observable], SliderLabel.prototype, \"sliderMaxPosition\", void 0);\n\n__decorate([observable], SliderLabel.prototype, \"sliderDirection\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/slider-label/slider-label.js"],"names":["__decorate","attr","Observable","observable","Direction","Orientation","convertPixelToPercent","FoundationElement","defaultConfig","min","max","direction","ltr","orientation","horizontal","disabled","SliderLabel","constructor","arguments","hideMark","sliderDirection","getSliderConfiguration","isSliderConfig","parentNode","sliderOrientation","sliderMaxPosition","sliderMinPosition","parentSlider","undefined","positionAsStyle","pct","Number","position","rightNum","Math","round","leftNum","isNaN","rtl","positionChanged","positionStyle","sliderOrientationChanged","connectedCallback","notifier","getNotifier","subscribe","disconnectedCallback","unsubscribe","handleChange","source","propertyName","node","prototype","attribute","mode"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, Observable, observable } from \"@microsoft/fast-element\";\nimport { Direction, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { convertPixelToPercent } from \"../slider/slider-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nconst defaultConfig = {\n    min: 0,\n    max: 0,\n    direction: Direction.ltr,\n    orientation: Orientation.horizontal,\n    disabled: false,\n};\n/**\n * A label element intended to be used with the {@link @microsoft/fast-foundation#(Slider:class)} component.\n *\n * @public\n */\nexport class SliderLabel extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Hides the tick mark.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: hide-mark\n         */\n        this.hideMark = false;\n        /**\n         * @internal\n         */\n        this.sliderDirection = Direction.ltr;\n        this.getSliderConfiguration = () => {\n            if (!this.isSliderConfig(this.parentNode)) {\n                this.sliderDirection = defaultConfig.direction || Direction.ltr;\n                this.sliderOrientation = defaultConfig.orientation || Orientation.horizontal;\n                this.sliderMaxPosition = defaultConfig.max;\n                this.sliderMinPosition = defaultConfig.min;\n            }\n            else {\n                const parentSlider = this\n                    .parentNode;\n                const { min, max, direction, orientation, disabled } = parentSlider;\n                if (disabled !== undefined) {\n                    this.disabled = disabled;\n                }\n                this.sliderDirection = direction || Direction.ltr;\n                this.sliderOrientation = orientation || Orientation.horizontal;\n                this.sliderMaxPosition = max;\n                this.sliderMinPosition = min;\n            }\n        };\n        this.positionAsStyle = () => {\n            const direction = this.sliderDirection\n                ? this.sliderDirection\n                : Direction.ltr;\n            const pct = convertPixelToPercent(Number(this.position), Number(this.sliderMinPosition), Number(this.sliderMaxPosition));\n            let rightNum = Math.round((1 - pct) * 100);\n            let leftNum = Math.round(pct * 100);\n            if (Number.isNaN(leftNum) && Number.isNaN(rightNum)) {\n                rightNum = 50;\n                leftNum = 50;\n            }\n            if (this.sliderOrientation === Orientation.horizontal) {\n                return direction === Direction.rtl\n                    ? `right: ${leftNum}%; left: ${rightNum}%;`\n                    : `left: ${leftNum}%; right: ${rightNum}%;`;\n            }\n            else {\n                return `top: ${leftNum}%; bottom: ${rightNum}%;`;\n            }\n        };\n    }\n    positionChanged() {\n        this.positionStyle = this.positionAsStyle();\n    }\n    /**\n     * @internal\n     */\n    sliderOrientationChanged() {\n        void 0;\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.getSliderConfiguration();\n        this.positionStyle = this.positionAsStyle();\n        this.notifier = Observable.getNotifier(this.parentNode);\n        this.notifier.subscribe(this, \"orientation\");\n        this.notifier.subscribe(this, \"direction\");\n        this.notifier.subscribe(this, \"max\");\n        this.notifier.subscribe(this, \"min\");\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.notifier.unsubscribe(this, \"orientation\");\n        this.notifier.unsubscribe(this, \"direction\");\n        this.notifier.unsubscribe(this, \"max\");\n        this.notifier.unsubscribe(this, \"min\");\n    }\n    /**\n     * @internal\n     */\n    handleChange(source, propertyName) {\n        switch (propertyName) {\n            case \"direction\":\n                this.sliderDirection = source.direction;\n                break;\n            case \"orientation\":\n                this.sliderOrientation = source.orientation;\n                break;\n            case \"max\":\n                this.sliderMinPosition = source.max;\n                break;\n            case \"min\":\n                this.sliderMinPosition = source.min;\n                break;\n            default:\n                break;\n        }\n        this.positionStyle = this.positionAsStyle();\n    }\n    isSliderConfig(node) {\n        return node.max !== undefined && node.min !== undefined;\n    }\n}\n__decorate([\n    observable\n], SliderLabel.prototype, \"positionStyle\", void 0);\n__decorate([\n    attr\n], SliderLabel.prototype, \"position\", void 0);\n__decorate([\n    attr({ attribute: \"hide-mark\", mode: \"boolean\" })\n], SliderLabel.prototype, \"hideMark\", void 0);\n__decorate([\n    attr({ attribute: \"disabled\", mode: \"boolean\" })\n], SliderLabel.prototype, \"disabled\", void 0);\n__decorate([\n    observable\n], SliderLabel.prototype, \"sliderOrientation\", void 0);\n__decorate([\n    observable\n], SliderLabel.prototype, \"sliderMinPosition\", void 0);\n__decorate([\n    observable\n], SliderLabel.prototype, \"sliderMaxPosition\", void 0);\n__decorate([\n    observable\n], SliderLabel.prototype, \"sliderDirection\", void 0);\n"]},"metadata":{},"sourceType":"module"}