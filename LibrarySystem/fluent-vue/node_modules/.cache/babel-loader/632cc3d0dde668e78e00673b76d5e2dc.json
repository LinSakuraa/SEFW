{"ast":null,"code":"import { html, repeat, when } from \"@microsoft/fast-element\";\nimport { endTemplate, startTemplate } from \"../patterns/start-end\";\nimport { DataGrid, DataGridCell, DataGridRow } from \"../data-grid\";\n/**\n * A basic Calendar title template that includes the month and year\n * @returns - A calendar title template\n * @public\n */\n\nexport const CalendarTitleTemplate = html`\n    <div\n        class=\"title\"\n        part=\"title\"\n        aria-label=\"${x => x.dateFormatter.getDate(`${x.month}-2-${x.year}`, {\n  month: \"long\",\n  year: \"numeric\"\n})}\"\n    >\n        <span part=\"month\">\n            ${x => x.dateFormatter.getMonth(x.month)}\n        </span>\n        <span part=\"year\">${x => x.dateFormatter.getYear(x.year)}</span>\n    </div>\n`;\n/**\n * Calendar weekday label template\n * @returns - The weekday labels template\n * @public\n */\n\nexport const calendarWeekdayTemplate = context => {\n  const cellTag = context.tagFor(DataGridCell);\n  return html`\n        <${cellTag}\n            class=\"week-day\"\n            part=\"week-day\"\n            tabindex=\"-1\"\n            grid-column=\"${(x, c) => c.index + 1}\"\n            abbr=\"${x => x.abbr}\"\n        >\n            ${x => x.text}\n        </${cellTag}>\n    `;\n};\n/**\n * A calendar day template\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param todayString - A string representation for todays date\n * @returns - A calendar cell template for a given date\n * @public\n */\n\nexport const calendarCellTemplate = (context, todayString) => {\n  const cellTag = context.tagFor(DataGridCell);\n  return html`\n        <${cellTag}\n            class=\"${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}\"\n            part=\"day\"\n            tabindex=\"-1\"\n            role=\"gridcell\"\n            grid-column=\"${(x, c) => c.index + 1}\"\n            @click=\"${(x, c) => c.parentContext.parent.handleDateSelect(c.event, x)}\"\n            @keydown=\"${(x, c) => c.parentContext.parent.handleKeydown(c.event, x)}\"\n            aria-label=\"${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, {\n    month: \"long\",\n    day: \"numeric\"\n  })}\"\n        >\n            <div\n                class=\"date\"\n                part=\"${x => todayString === `${x.month}-${x.day}-${x.year}` ? \"today\" : \"date\"}\"\n            >\n                ${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}\n            </div>\n            <slot name=\"${x => x.month}-${x => x.day}-${x => x.year}\"></slot>\n        </${cellTag}>\n    `;\n};\n/**\n *\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param todayString - A string representation for todays date\n * @returns - A template for a week of days\n * @public\n */\n\nexport const calendarRowTemplate = (context, todayString) => {\n  const rowTag = context.tagFor(DataGridRow);\n  return html`\n        <${rowTag}\n            class=\"week\"\n            part=\"week\"\n            role=\"row\"\n            role-type=\"default\"\n            grid-template-columns=\"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n        >\n        ${repeat(x => x, calendarCellTemplate(context, todayString), {\n    positioning: true\n  })}\n        </${rowTag}>\n    `;\n};\n/**\n * Interactive template using DataGrid\n * @param context - The templates context\n * @param todayString - string representation of todays date\n * @returns - interactive calendar template\n *\n * @internal\n */\n\nexport const interactiveCalendarGridTemplate = (context, todayString) => {\n  const gridTag = context.tagFor(DataGrid);\n  const rowTag = context.tagFor(DataGridRow);\n  return html`\n    <${gridTag} class=\"days interact\" part=\"days\" generate-header=\"none\">\n        <${rowTag}\n            class=\"week-days\"\n            part=\"week-days\"\n            role=\"row\"\n            row-type=\"header\"\n            grid-template-columns=\"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n        >\n            ${repeat(x => x.getWeekdayText(), calendarWeekdayTemplate(context), {\n    positioning: true\n  })}\n        </${rowTag}>\n        ${repeat(x => x.getDays(), calendarRowTemplate(context, todayString))}\n    </${gridTag}>\n`;\n};\n/**\n * Non-interactive calendar template used for a readonly calendar\n * @param todayString - string representation of todays date\n * @returns - non-interactive calendar template\n *\n * @internal\n */\n\nexport const noninteractiveCalendarTemplate = todayString => {\n  return html`\n        <div class=\"days\" part=\"days\">\n            <div class=\"week-days\" part=\"week-days\">\n                ${repeat(x => x.getWeekdayText(), html`\n                        <div class=\"week-day\" part=\"week-day\" abbr=\"${x => x.abbr}\">\n                            ${x => x.text}\n                        </div>\n                    `)}\n            </div>\n            ${repeat(x => x.getDays(), html`\n                    <div class=\"week\">\n                        ${repeat(x => x, html`\n                                <div\n                                    class=\"${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}\"\n                                    part=\"day\"\n                                    aria-label=\"${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, {\n    month: \"long\",\n    day: \"numeric\"\n  })}\"\n                                >\n                                    <div\n                                        class=\"date\"\n                                        part=\"${x => todayString === `${x.month}-${x.day}-${x.year}` ? \"today\" : \"date\"}\"\n                                    >\n                                        ${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}\n                                    </div>\n                                    <slot\n                                        name=\"${x => x.month}-${x => x.day}-${x => x.year}\"\n                                    ></slot>\n                                </div>\n                            `)}\n                    </div>\n                `)}\n        </div>\n    `;\n};\n/**\n * The template for the {@link @microsoft/fast-foundation#(Calendar:class)} component.\n *\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param definition - Foundation element definition\n * @returns - a template for a calendar month\n * @public\n */\n\nexport const calendarTemplate = (context, definition) => {\n  var _a;\n\n  const today = new Date();\n  const todayString = `${today.getMonth() + 1}-${today.getDate()}-${today.getFullYear()}`;\n  return html`\n        <template>\n            ${startTemplate}\n            ${definition.title instanceof Function ? definition.title(context, definition) : (_a = definition.title) !== null && _a !== void 0 ? _a : \"\"}\n            <slot></slot>\n            ${when(x => x.readonly === false, interactiveCalendarGridTemplate(context, todayString))}\n            ${when(x => x.readonly === true, noninteractiveCalendarTemplate(todayString))}\n            ${endTemplate}\n        </template>\n    `;\n};","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/calendar/calendar.template.js"],"names":["html","repeat","when","endTemplate","startTemplate","DataGrid","DataGridCell","DataGridRow","CalendarTitleTemplate","x","dateFormatter","getDate","month","year","getMonth","getYear","calendarWeekdayTemplate","context","cellTag","tagFor","c","index","abbr","text","calendarCellTemplate","todayString","parentContext","parent","getDayClassNames","handleDateSelect","event","handleKeydown","day","getDay","calendarRowTemplate","rowTag","positioning","interactiveCalendarGridTemplate","gridTag","getWeekdayText","getDays","noninteractiveCalendarTemplate","calendarTemplate","definition","_a","today","Date","getFullYear","title","Function","readonly"],"mappings":"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","sourcesContent":["import { html, repeat, when } from \"@microsoft/fast-element\";\nimport { endTemplate, startTemplate } from \"../patterns/start-end\";\nimport { DataGrid, DataGridCell, DataGridRow } from \"../data-grid\";\n/**\n * A basic Calendar title template that includes the month and year\n * @returns - A calendar title template\n * @public\n */\nexport const CalendarTitleTemplate = html `\n    <div\n        class=\"title\"\n        part=\"title\"\n        aria-label=\"${(x) => x.dateFormatter.getDate(`${x.month}-2-${x.year}`, {\n    month: \"long\",\n    year: \"numeric\",\n})}\"\n    >\n        <span part=\"month\">\n            ${(x) => x.dateFormatter.getMonth(x.month)}\n        </span>\n        <span part=\"year\">${(x) => x.dateFormatter.getYear(x.year)}</span>\n    </div>\n`;\n/**\n * Calendar weekday label template\n * @returns - The weekday labels template\n * @public\n */\nexport const calendarWeekdayTemplate = context => {\n    const cellTag = context.tagFor(DataGridCell);\n    return html `\n        <${cellTag}\n            class=\"week-day\"\n            part=\"week-day\"\n            tabindex=\"-1\"\n            grid-column=\"${(x, c) => c.index + 1}\"\n            abbr=\"${x => x.abbr}\"\n        >\n            ${x => x.text}\n        </${cellTag}>\n    `;\n};\n/**\n * A calendar day template\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param todayString - A string representation for todays date\n * @returns - A calendar cell template for a given date\n * @public\n */\nexport const calendarCellTemplate = (context, todayString) => {\n    const cellTag = context.tagFor(DataGridCell);\n    return html `\n        <${cellTag}\n            class=\"${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}\"\n            part=\"day\"\n            tabindex=\"-1\"\n            role=\"gridcell\"\n            grid-column=\"${(x, c) => c.index + 1}\"\n            @click=\"${(x, c) => c.parentContext.parent.handleDateSelect(c.event, x)}\"\n            @keydown=\"${(x, c) => c.parentContext.parent.handleKeydown(c.event, x)}\"\n            aria-label=\"${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, { month: \"long\", day: \"numeric\" })}\"\n        >\n            <div\n                class=\"date\"\n                part=\"${x => todayString === `${x.month}-${x.day}-${x.year}` ? \"today\" : \"date\"}\"\n            >\n                ${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}\n            </div>\n            <slot name=\"${x => x.month}-${x => x.day}-${x => x.year}\"></slot>\n        </${cellTag}>\n    `;\n};\n/**\n *\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param todayString - A string representation for todays date\n * @returns - A template for a week of days\n * @public\n */\nexport const calendarRowTemplate = (context, todayString) => {\n    const rowTag = context.tagFor(DataGridRow);\n    return html `\n        <${rowTag}\n            class=\"week\"\n            part=\"week\"\n            role=\"row\"\n            role-type=\"default\"\n            grid-template-columns=\"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n        >\n        ${repeat(x => x, calendarCellTemplate(context, todayString), {\n        positioning: true,\n    })}\n        </${rowTag}>\n    `;\n};\n/**\n * Interactive template using DataGrid\n * @param context - The templates context\n * @param todayString - string representation of todays date\n * @returns - interactive calendar template\n *\n * @internal\n */\nexport const interactiveCalendarGridTemplate = (context, todayString) => {\n    const gridTag = context.tagFor(DataGrid);\n    const rowTag = context.tagFor(DataGridRow);\n    return html `\n    <${gridTag} class=\"days interact\" part=\"days\" generate-header=\"none\">\n        <${rowTag}\n            class=\"week-days\"\n            part=\"week-days\"\n            role=\"row\"\n            row-type=\"header\"\n            grid-template-columns=\"1fr 1fr 1fr 1fr 1fr 1fr 1fr\"\n        >\n            ${repeat(x => x.getWeekdayText(), calendarWeekdayTemplate(context), {\n        positioning: true,\n    })}\n        </${rowTag}>\n        ${repeat(x => x.getDays(), calendarRowTemplate(context, todayString))}\n    </${gridTag}>\n`;\n};\n/**\n * Non-interactive calendar template used for a readonly calendar\n * @param todayString - string representation of todays date\n * @returns - non-interactive calendar template\n *\n * @internal\n */\nexport const noninteractiveCalendarTemplate = (todayString) => {\n    return html `\n        <div class=\"days\" part=\"days\">\n            <div class=\"week-days\" part=\"week-days\">\n                ${repeat(x => x.getWeekdayText(), html `\n                        <div class=\"week-day\" part=\"week-day\" abbr=\"${x => x.abbr}\">\n                            ${x => x.text}\n                        </div>\n                    `)}\n            </div>\n            ${repeat(x => x.getDays(), html `\n                    <div class=\"week\">\n                        ${repeat(x => x, html `\n                                <div\n                                    class=\"${(x, c) => c.parentContext.parent.getDayClassNames(x, todayString)}\"\n                                    part=\"day\"\n                                    aria-label=\"${(x, c) => c.parentContext.parent.dateFormatter.getDate(`${x.month}-${x.day}-${x.year}`, { month: \"long\", day: \"numeric\" })}\"\n                                >\n                                    <div\n                                        class=\"date\"\n                                        part=\"${x => todayString ===\n        `${x.month}-${x.day}-${x.year}`\n        ? \"today\"\n        : \"date\"}\"\n                                    >\n                                        ${(x, c) => c.parentContext.parent.dateFormatter.getDay(x.day)}\n                                    </div>\n                                    <slot\n                                        name=\"${x => x.month}-${x => x.day}-${x => x.year}\"\n                                    ></slot>\n                                </div>\n                            `)}\n                    </div>\n                `)}\n        </div>\n    `;\n};\n/**\n * The template for the {@link @microsoft/fast-foundation#(Calendar:class)} component.\n *\n * @param context - Element definition context for getting the cell tag for calendar-cell\n * @param definition - Foundation element definition\n * @returns - a template for a calendar month\n * @public\n */\nexport const calendarTemplate = (context, definition) => {\n    var _a;\n    const today = new Date();\n    const todayString = `${today.getMonth() + 1}-${today.getDate()}-${today.getFullYear()}`;\n    return html `\n        <template>\n            ${startTemplate}\n            ${definition.title instanceof Function\n        ? definition.title(context, definition)\n        : (_a = definition.title) !== null && _a !== void 0 ? _a : \"\"}\n            <slot></slot>\n            ${when(x => x.readonly === false, interactiveCalendarGridTemplate(context, todayString))}\n            ${when(x => x.readonly === true, noninteractiveCalendarTemplate(todayString))}\n            ${endTemplate}\n        </template>\n    `;\n};\n"]},"metadata":{},"sourceType":"module"}