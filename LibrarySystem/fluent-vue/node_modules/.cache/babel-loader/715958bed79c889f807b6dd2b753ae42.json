{"ast":null,"code":"import { h, computed, onMounted, ref, defineComponent, Transition } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { NBaseSlotMachine, NBaseWave } from '../../_internal';\nimport { color2Class, createKey, getTitleAttribute, isSlotEmpty, resolveSlot } from '../../_utils';\nimport { badgeLight } from '../styles';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst badgeProps = Object.assign(Object.assign({}, useTheme.props), {\n  value: [String, Number],\n  max: Number,\n  dot: Boolean,\n  type: {\n    type: String,\n    default: 'default'\n  },\n  show: {\n    type: Boolean,\n    default: true\n  },\n  showZero: Boolean,\n  processing: Boolean,\n  color: String\n});\nexport default defineComponent({\n  name: 'Badge',\n  props: badgeProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Badge', '-badge', style, badgeLight, props, mergedClsPrefixRef);\n    const appearedRef = ref(false);\n\n    const handleAfterEnter = () => {\n      appearedRef.value = true;\n    };\n\n    const handleAfterLeave = () => {\n      appearedRef.value = false;\n    };\n\n    const showBadgeRef = computed(() => {\n      return props.show && (props.dot || props.value !== undefined && !(!props.showZero && props.value <= 0) || !isSlotEmpty(slots.value));\n    });\n    onMounted(() => {\n      if (showBadgeRef.value) appearedRef.value = true;\n    });\n    const rtlEnabledRef = useRtl('Badge', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        type,\n        color: propColor\n      } = props;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self: {\n          [createKey('color', type)]: color,\n          fontFamily,\n          fontSize\n        }\n      } = themeRef.value;\n      return {\n        '--n-font-size': fontSize,\n        '--n-font-family': fontFamily,\n        '--n-color': propColor || color,\n        '--n-ripple-color': propColor || color,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-ripple-bezier': cubicBezierEaseOut\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('badge', computed(() => {\n      let hash = '';\n      const {\n        type,\n        color\n      } = props;\n\n      if (type) {\n        hash += type[0];\n      }\n\n      if (color) {\n        hash += color2Class(color);\n      }\n\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      rtlEnabled: rtlEnabledRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      appeared: appearedRef,\n      showBadge: showBadgeRef,\n      handleAfterEnter,\n      handleAfterLeave,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix,\n      onRender,\n      themeClass,\n      $slots\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-badge`, this.rtlEnabled && `${mergedClsPrefix}-badge--rtl`, themeClass, {\n        [`${mergedClsPrefix}-badge--dot`]: this.dot,\n        [`${mergedClsPrefix}-badge--as-is`]: !children\n      }],\n      style: this.cssVars\n    }, children, h(Transition, {\n      name: \"fade-in-scale-up-transition\",\n      onAfterEnter: this.handleAfterEnter,\n      onAfterLeave: this.handleAfterLeave\n    }, {\n      default: () => this.showBadge ? h(\"sup\", {\n        class: `${mergedClsPrefix}-badge-sup`,\n        title: getTitleAttribute(this.value)\n      }, resolveSlot($slots.value, () => [!this.dot ? h(NBaseSlotMachine, {\n        clsPrefix: mergedClsPrefix,\n        appeared: this.appeared,\n        max: this.max,\n        value: this.value\n      }) : null]), this.processing ? h(NBaseWave, {\n        clsPrefix: mergedClsPrefix\n      }) : null) : null\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/badge/src/Badge.js"],"names":["h","computed","onMounted","ref","defineComponent","Transition","useConfig","useTheme","useThemeClass","NBaseSlotMachine","NBaseWave","color2Class","createKey","getTitleAttribute","isSlotEmpty","resolveSlot","badgeLight","style","useRtl","badgeProps","Object","assign","props","value","String","Number","max","dot","Boolean","type","default","show","showZero","processing","color","name","setup","slots","mergedClsPrefixRef","inlineThemeDisabled","mergedRtlRef","themeRef","appearedRef","handleAfterEnter","handleAfterLeave","showBadgeRef","undefined","rtlEnabledRef","cssVarsRef","propColor","common","cubicBezierEaseInOut","cubicBezierEaseOut","self","fontFamily","fontSize","themeClassHandle","hash","rtlEnabled","mergedClsPrefix","appeared","showBadge","cssVars","themeClass","onRender","render","_a","$slots","children","call","class","onAfterEnter","onAfterLeave","title","clsPrefix"],"mappings":"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","sourcesContent":["import { h, computed, onMounted, ref, defineComponent, Transition } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { NBaseSlotMachine, NBaseWave } from '../../_internal';\nimport { color2Class, createKey, getTitleAttribute, isSlotEmpty, resolveSlot } from '../../_utils';\nimport { badgeLight } from '../styles';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst badgeProps = Object.assign(Object.assign({}, useTheme.props), { value: [String, Number], max: Number, dot: Boolean, type: {\n        type: String,\n        default: 'default'\n    }, show: {\n        type: Boolean,\n        default: true\n    }, showZero: Boolean, processing: Boolean, color: String });\nexport default defineComponent({\n    name: 'Badge',\n    props: badgeProps,\n    setup(props, { slots }) {\n        const { mergedClsPrefixRef, inlineThemeDisabled, mergedRtlRef } = useConfig(props);\n        const themeRef = useTheme('Badge', '-badge', style, badgeLight, props, mergedClsPrefixRef);\n        const appearedRef = ref(false);\n        const handleAfterEnter = () => {\n            appearedRef.value = true;\n        };\n        const handleAfterLeave = () => {\n            appearedRef.value = false;\n        };\n        const showBadgeRef = computed(() => {\n            return (props.show &&\n                (props.dot ||\n                    (props.value !== undefined &&\n                        !(!props.showZero && props.value <= 0)) ||\n                    !isSlotEmpty(slots.value)));\n        });\n        onMounted(() => {\n            if (showBadgeRef.value)\n                appearedRef.value = true;\n        });\n        const rtlEnabledRef = useRtl('Badge', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { type, color: propColor } = props;\n            const { common: { cubicBezierEaseInOut, cubicBezierEaseOut }, self: { [createKey('color', type)]: color, fontFamily, fontSize } } = themeRef.value;\n            return {\n                '--n-font-size': fontSize,\n                '--n-font-family': fontFamily,\n                '--n-color': propColor || color,\n                '--n-ripple-color': propColor || color,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-ripple-bezier': cubicBezierEaseOut\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('badge', computed(() => {\n                let hash = '';\n                const { type, color } = props;\n                if (type) {\n                    hash += type[0];\n                }\n                if (color) {\n                    hash += color2Class(color);\n                }\n                return hash;\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            rtlEnabled: rtlEnabledRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            appeared: appearedRef,\n            showBadge: showBadgeRef,\n            handleAfterEnter,\n            handleAfterLeave,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, onRender, themeClass, $slots } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        const children = (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-badge`,\n                this.rtlEnabled && `${mergedClsPrefix}-badge--rtl`,\n                themeClass,\n                {\n                    [`${mergedClsPrefix}-badge--dot`]: this.dot,\n                    [`${mergedClsPrefix}-badge--as-is`]: !children\n                }\n            ], style: this.cssVars },\n            children,\n            h(Transition, { name: \"fade-in-scale-up-transition\", onAfterEnter: this.handleAfterEnter, onAfterLeave: this.handleAfterLeave }, {\n                default: () => this.showBadge ? (h(\"sup\", { class: `${mergedClsPrefix}-badge-sup`, title: getTitleAttribute(this.value) },\n                    resolveSlot($slots.value, () => [\n                        !this.dot ? (h(NBaseSlotMachine, { clsPrefix: mergedClsPrefix, appeared: this.appeared, max: this.max, value: this.value })) : null\n                    ]),\n                    this.processing ? (h(NBaseWave, { clsPrefix: mergedClsPrefix })) : null)) : null\n            })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}