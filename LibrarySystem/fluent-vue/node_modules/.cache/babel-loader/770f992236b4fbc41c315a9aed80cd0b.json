{"ast":null,"code":"// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\n\nexport class HTMLView {\n  /**\n   * Constructs an instance of HTMLView.\n   * @param fragment - The html fragment that contains the nodes for this view.\n   * @param behaviors - The behaviors to be applied to this view.\n   */\n  constructor(fragment, behaviors) {\n    this.fragment = fragment;\n    this.behaviors = behaviors;\n    /**\n     * The data that the view is bound to.\n     */\n\n    this.source = null;\n    /**\n     * The execution context the view is running within.\n     */\n\n    this.context = null;\n    this.firstChild = fragment.firstChild;\n    this.lastChild = fragment.lastChild;\n  }\n  /**\n   * Appends the view's DOM nodes to the referenced node.\n   * @param node - The parent node to append the view's DOM nodes to.\n   */\n\n\n  appendTo(node) {\n    node.appendChild(this.fragment);\n  }\n  /**\n   * Inserts the view's DOM nodes before the referenced node.\n   * @param node - The node to insert the view's DOM before.\n   */\n\n\n  insertBefore(node) {\n    if (this.fragment.hasChildNodes()) {\n      node.parentNode.insertBefore(this.fragment, node);\n    } else {\n      const parentNode = node.parentNode;\n      const end = this.lastChild;\n      let current = this.firstChild;\n      let next;\n\n      while (current !== end) {\n        next = current.nextSibling;\n        parentNode.insertBefore(current, node);\n        current = next;\n      }\n\n      parentNode.insertBefore(end, node);\n    }\n  }\n  /**\n   * Removes the view's DOM nodes.\n   * The nodes are not disposed and the view can later be re-inserted.\n   */\n\n\n  remove() {\n    const fragment = this.fragment;\n    const end = this.lastChild;\n    let current = this.firstChild;\n    let next;\n\n    while (current !== end) {\n      next = current.nextSibling;\n      fragment.appendChild(current);\n      current = next;\n    }\n\n    fragment.appendChild(end);\n  }\n  /**\n   * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n   * Once a view has been disposed, it cannot be inserted or bound again.\n   */\n\n\n  dispose() {\n    const parent = this.firstChild.parentNode;\n    const end = this.lastChild;\n    let current = this.firstChild;\n    let next;\n\n    while (current !== end) {\n      next = current.nextSibling;\n      parent.removeChild(current);\n      current = next;\n    }\n\n    parent.removeChild(end);\n    const behaviors = this.behaviors;\n    const oldSource = this.source;\n\n    for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n      behaviors[i].unbind(oldSource);\n    }\n  }\n  /**\n   * Binds a view's behaviors to its binding source.\n   * @param source - The binding source for the view's binding behaviors.\n   * @param context - The execution context to run the behaviors within.\n   */\n\n\n  bind(source, context) {\n    const behaviors = this.behaviors;\n\n    if (this.source === source) {\n      return;\n    } else if (this.source !== null) {\n      const oldSource = this.source;\n      this.source = source;\n      this.context = context;\n\n      for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n        const current = behaviors[i];\n        current.unbind(oldSource);\n        current.bind(source, context);\n      }\n    } else {\n      this.source = source;\n      this.context = context;\n\n      for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n        behaviors[i].bind(source, context);\n      }\n    }\n  }\n  /**\n   * Unbinds a view's behaviors from its binding source.\n   */\n\n\n  unbind() {\n    if (this.source === null) {\n      return;\n    }\n\n    const behaviors = this.behaviors;\n    const oldSource = this.source;\n\n    for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n      behaviors[i].unbind(oldSource);\n    }\n\n    this.source = null;\n  }\n  /**\n   * Efficiently disposes of a contiguous range of synthetic view instances.\n   * @param views - A contiguous range of views to be disposed.\n   */\n\n\n  static disposeContiguousBatch(views) {\n    if (views.length === 0) {\n      return;\n    }\n\n    range.setStartBefore(views[0].firstChild);\n    range.setEndAfter(views[views.length - 1].lastChild);\n    range.deleteContents();\n\n    for (let i = 0, ii = views.length; i < ii; ++i) {\n      const view = views[i];\n      const behaviors = view.behaviors;\n      const oldSource = view.source;\n\n      for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n        behaviors[j].unbind(oldSource);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/templating/view.js"],"names":["range","document","createRange","HTMLView","constructor","fragment","behaviors","source","context","firstChild","lastChild","appendTo","node","appendChild","insertBefore","hasChildNodes","parentNode","end","current","next","nextSibling","remove","dispose","parent","removeChild","oldSource","i","ii","length","unbind","bind","disposeContiguousBatch","views","setStartBefore","setEndAfter","deleteContents","view","j","jj"],"mappings":"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","sourcesContent":["// A singleton Range instance used to efficiently remove ranges of DOM nodes.\n// See the implementation of HTMLView below for further details.\nconst range = document.createRange();\n/**\n * The standard View implementation, which also implements ElementView and SyntheticView.\n * @public\n */\nexport class HTMLView {\n    /**\n     * Constructs an instance of HTMLView.\n     * @param fragment - The html fragment that contains the nodes for this view.\n     * @param behaviors - The behaviors to be applied to this view.\n     */\n    constructor(fragment, behaviors) {\n        this.fragment = fragment;\n        this.behaviors = behaviors;\n        /**\n         * The data that the view is bound to.\n         */\n        this.source = null;\n        /**\n         * The execution context the view is running within.\n         */\n        this.context = null;\n        this.firstChild = fragment.firstChild;\n        this.lastChild = fragment.lastChild;\n    }\n    /**\n     * Appends the view's DOM nodes to the referenced node.\n     * @param node - The parent node to append the view's DOM nodes to.\n     */\n    appendTo(node) {\n        node.appendChild(this.fragment);\n    }\n    /**\n     * Inserts the view's DOM nodes before the referenced node.\n     * @param node - The node to insert the view's DOM before.\n     */\n    insertBefore(node) {\n        if (this.fragment.hasChildNodes()) {\n            node.parentNode.insertBefore(this.fragment, node);\n        }\n        else {\n            const parentNode = node.parentNode;\n            const end = this.lastChild;\n            let current = this.firstChild;\n            let next;\n            while (current !== end) {\n                next = current.nextSibling;\n                parentNode.insertBefore(current, node);\n                current = next;\n            }\n            parentNode.insertBefore(end, node);\n        }\n    }\n    /**\n     * Removes the view's DOM nodes.\n     * The nodes are not disposed and the view can later be re-inserted.\n     */\n    remove() {\n        const fragment = this.fragment;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            fragment.appendChild(current);\n            current = next;\n        }\n        fragment.appendChild(end);\n    }\n    /**\n     * Removes the view and unbinds its behaviors, disposing of DOM nodes afterward.\n     * Once a view has been disposed, it cannot be inserted or bound again.\n     */\n    dispose() {\n        const parent = this.firstChild.parentNode;\n        const end = this.lastChild;\n        let current = this.firstChild;\n        let next;\n        while (current !== end) {\n            next = current.nextSibling;\n            parent.removeChild(current);\n            current = next;\n        }\n        parent.removeChild(end);\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n    }\n    /**\n     * Binds a view's behaviors to its binding source.\n     * @param source - The binding source for the view's binding behaviors.\n     * @param context - The execution context to run the behaviors within.\n     */\n    bind(source, context) {\n        const behaviors = this.behaviors;\n        if (this.source === source) {\n            return;\n        }\n        else if (this.source !== null) {\n            const oldSource = this.source;\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                const current = behaviors[i];\n                current.unbind(oldSource);\n                current.bind(source, context);\n            }\n        }\n        else {\n            this.source = source;\n            this.context = context;\n            for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n                behaviors[i].bind(source, context);\n            }\n        }\n    }\n    /**\n     * Unbinds a view's behaviors from its binding source.\n     */\n    unbind() {\n        if (this.source === null) {\n            return;\n        }\n        const behaviors = this.behaviors;\n        const oldSource = this.source;\n        for (let i = 0, ii = behaviors.length; i < ii; ++i) {\n            behaviors[i].unbind(oldSource);\n        }\n        this.source = null;\n    }\n    /**\n     * Efficiently disposes of a contiguous range of synthetic view instances.\n     * @param views - A contiguous range of views to be disposed.\n     */\n    static disposeContiguousBatch(views) {\n        if (views.length === 0) {\n            return;\n        }\n        range.setStartBefore(views[0].firstChild);\n        range.setEndAfter(views[views.length - 1].lastChild);\n        range.deleteContents();\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            const view = views[i];\n            const behaviors = view.behaviors;\n            const oldSource = view.source;\n            for (let j = 0, jj = behaviors.length; j < jj; ++j) {\n                behaviors[j].unbind(oldSource);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}