{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter } from \"@microsoft/fast-element\";\nimport { keyEnter } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DateFormatter } from \"./date-formatter\";\n/**\n * Calendar component\n * @public\n */\n\nexport class Calendar extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * date formatter utitlity for getting localized strings\n     * @public\n     */\n\n    this.dateFormatter = new DateFormatter();\n    /**\n     * Readonly attribute for turning off data-grid\n     * @public\n     */\n\n    this.readonly = false;\n    /**\n     * String repesentation of the full locale including market, calendar type and numbering system\n     * @public\n     */\n\n    this.locale = \"en-US\";\n    /**\n     * Month to display\n     * @public\n     */\n\n    this.month = new Date().getMonth() + 1;\n    /**\n     * Year of the month to display\n     * @public\n     */\n\n    this.year = new Date().getFullYear();\n    /**\n     * Format style for the day\n     * @public\n     */\n\n    this.dayFormat = \"numeric\";\n    /**\n     * Format style for the week day labels\n     * @public\n     */\n\n    this.weekdayFormat = \"short\";\n    /**\n     * Format style for the month label\n     * @public\n     */\n\n    this.monthFormat = \"long\";\n    /**\n     * Format style for the year used in the title\n     * @public\n     */\n\n    this.yearFormat = \"numeric\";\n    /**\n     * Minimum number of weeks to show for the month\n     * This can be used to normalize the calendar view\n     *  when changing or across multiple calendars\n     * @public\n     */\n\n    this.minWeeks = 0;\n    /**\n     * A list of dates that should be shown as disabled\n     * @public\n     */\n\n    this.disabledDates = \"\";\n    /**\n     * A list of dates that should be shown as highlighted\n     * @public\n     */\n\n    this.selectedDates = \"\";\n    /**\n     * The number of miliseconds in a day\n     * @internal\n     */\n\n    this.oneDayInMs = 86400000;\n  }\n\n  localeChanged() {\n    this.dateFormatter.locale = this.locale;\n  }\n\n  dayFormatChanged() {\n    this.dateFormatter.dayFormat = this.dayFormat;\n  }\n\n  weekdayFormatChanged() {\n    this.dateFormatter.weekdayFormat = this.weekdayFormat;\n  }\n\n  monthFormatChanged() {\n    this.dateFormatter.monthFormat = this.monthFormat;\n  }\n\n  yearFormatChanged() {\n    this.dateFormatter.yearFormat = this.yearFormat;\n  }\n  /**\n   * Gets data needed to render about a calendar month as well as the previous and next months\n   * @param year - year of the calendar\n   * @param month - month of the calendar\n   * @returns - an object with data about the current and 2 surrounding months\n   * @public\n   */\n\n\n  getMonthInfo(month = this.month, year = this.year) {\n    const getFirstDay = date => new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n\n    const getLength = date => {\n      const nextMonth = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n      return new Date(nextMonth.getTime() - this.oneDayInMs).getDate();\n    };\n\n    const thisMonth = new Date(year, month - 1);\n    const nextMonth = new Date(year, month);\n    const previousMonth = new Date(year, month - 2);\n    return {\n      length: getLength(thisMonth),\n      month,\n      start: getFirstDay(thisMonth),\n      year,\n      previous: {\n        length: getLength(previousMonth),\n        month: previousMonth.getMonth() + 1,\n        start: getFirstDay(previousMonth),\n        year: previousMonth.getFullYear()\n      },\n      next: {\n        length: getLength(nextMonth),\n        month: nextMonth.getMonth() + 1,\n        start: getFirstDay(nextMonth),\n        year: nextMonth.getFullYear()\n      }\n    };\n  }\n  /**\n   * A list of calendar days\n   * @param info - an object containing the information needed to render a calendar month\n   * @param minWeeks - minimum number of weeks to show\n   * @returns a list of days in a calendar month\n   * @public\n   */\n\n\n  getDays(info = this.getMonthInfo(), minWeeks = this.minWeeks) {\n    minWeeks = minWeeks > 10 ? 10 : minWeeks;\n    const {\n      start,\n      length,\n      previous,\n      next\n    } = info;\n    const days = [];\n    let dayCount = 1 - start;\n\n    while (dayCount < length + 1 || days.length < minWeeks || days[days.length - 1].length % 7 !== 0) {\n      const {\n        month,\n        year\n      } = dayCount < 1 ? previous : dayCount > length ? next : info;\n      const day = dayCount < 1 ? previous.length + dayCount : dayCount > length ? dayCount - length : dayCount;\n      const dateString = `${month}-${day}-${year}`;\n      const disabled = this.dateInString(dateString, this.disabledDates);\n      const selected = this.dateInString(dateString, this.selectedDates);\n      const date = {\n        day,\n        month,\n        year,\n        disabled,\n        selected\n      };\n      const target = days[days.length - 1];\n\n      if (days.length === 0 || target.length % 7 === 0) {\n        days.push([date]);\n      } else {\n        target.push(date);\n      }\n\n      dayCount++;\n    }\n\n    return days;\n  }\n  /**\n   * A helper function that checks if a date exists in a list of dates\n   * @param date - A date objec that includes the day, month and year\n   * @param datesString - a comma separated list of dates\n   * @returns - Returns true if it found the date in the list of dates\n   * @public\n   */\n\n\n  dateInString(date, datesString) {\n    const dates = datesString.split(\",\").map(str => str.trim());\n    date = typeof date === \"string\" ? date : `${date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}`;\n    return dates.some(d => d === date);\n  }\n  /**\n   * Creates a class string for the day container\n   * @param date - date of the calendar cell\n   * @returns - string of class names\n   * @public\n   */\n\n\n  getDayClassNames(date, todayString) {\n    const {\n      day,\n      month,\n      year,\n      disabled,\n      selected\n    } = date;\n    const today = todayString === `${month}-${day}-${year}`;\n    const inactive = this.month !== month;\n    return [\"day\", today && \"today\", inactive && \"inactive\", disabled && \"disabled\", selected && \"selected\"].filter(Boolean).join(\" \");\n  }\n  /**\n   * Returns a list of weekday labels\n   * @returns An array of weekday text and full text if abbreviated\n   * @public\n   */\n\n\n  getWeekdayText() {\n    const weekdayText = this.dateFormatter.getWeekdays().map(text => ({\n      text\n    }));\n\n    if (this.weekdayFormat !== \"long\") {\n      const longText = this.dateFormatter.getWeekdays(\"long\");\n      weekdayText.forEach((weekday, index) => {\n        weekday.abbr = longText[index];\n      });\n    }\n\n    return weekdayText;\n  }\n  /**\n   * Emits the \"date-select\" event with the day, month and year.\n   * @param date - Date cell\n   * @public\n   */\n\n\n  handleDateSelect(event, day) {\n    event.preventDefault;\n    this.$emit(\"dateselected\", day);\n  }\n  /**\n   * Handles keyboard events on a cell\n   * @param event - Keyboard event\n   * @param date - Date of the cell selected\n   */\n\n\n  handleKeydown(event, date) {\n    if (event.key === keyEnter) {\n      this.handleDateSelect(event, date);\n    }\n\n    return true;\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], Calendar.prototype, \"readonly\", void 0);\n\n__decorate([attr], Calendar.prototype, \"locale\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], Calendar.prototype, \"month\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], Calendar.prototype, \"year\", void 0);\n\n__decorate([attr({\n  attribute: \"day-format\",\n  mode: \"fromView\"\n})], Calendar.prototype, \"dayFormat\", void 0);\n\n__decorate([attr({\n  attribute: \"weekday-format\",\n  mode: \"fromView\"\n})], Calendar.prototype, \"weekdayFormat\", void 0);\n\n__decorate([attr({\n  attribute: \"month-format\",\n  mode: \"fromView\"\n})], Calendar.prototype, \"monthFormat\", void 0);\n\n__decorate([attr({\n  attribute: \"year-format\",\n  mode: \"fromView\"\n})], Calendar.prototype, \"yearFormat\", void 0);\n\n__decorate([attr({\n  attribute: \"min-weeks\",\n  converter: nullableNumberConverter\n})], Calendar.prototype, \"minWeeks\", void 0);\n\n__decorate([attr({\n  attribute: \"disabled-dates\"\n})], Calendar.prototype, \"disabledDates\", void 0);\n\n__decorate([attr({\n  attribute: \"selected-dates\"\n})], Calendar.prototype, \"selectedDates\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/calendar/calendar.js"],"names":["__decorate","attr","nullableNumberConverter","keyEnter","FoundationElement","DateFormatter","Calendar","constructor","arguments","dateFormatter","readonly","locale","month","Date","getMonth","year","getFullYear","dayFormat","weekdayFormat","monthFormat","yearFormat","minWeeks","disabledDates","selectedDates","oneDayInMs","localeChanged","dayFormatChanged","weekdayFormatChanged","monthFormatChanged","yearFormatChanged","getMonthInfo","getFirstDay","date","getDay","getLength","nextMonth","getTime","getDate","thisMonth","previousMonth","length","start","previous","next","getDays","info","days","dayCount","day","dateString","disabled","dateInString","selected","target","push","datesString","dates","split","map","str","trim","some","d","getDayClassNames","todayString","today","inactive","filter","Boolean","join","getWeekdayText","weekdayText","getWeekdays","text","longText","forEach","weekday","index","abbr","handleDateSelect","event","preventDefault","$emit","handleKeydown","key","mode","prototype","converter","attribute"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter, } from \"@microsoft/fast-element\";\nimport { keyEnter } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DateFormatter } from \"./date-formatter\";\n/**\n * Calendar component\n * @public\n */\nexport class Calendar extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * date formatter utitlity for getting localized strings\n         * @public\n         */\n        this.dateFormatter = new DateFormatter();\n        /**\n         * Readonly attribute for turning off data-grid\n         * @public\n         */\n        this.readonly = false;\n        /**\n         * String repesentation of the full locale including market, calendar type and numbering system\n         * @public\n         */\n        this.locale = \"en-US\";\n        /**\n         * Month to display\n         * @public\n         */\n        this.month = new Date().getMonth() + 1;\n        /**\n         * Year of the month to display\n         * @public\n         */\n        this.year = new Date().getFullYear();\n        /**\n         * Format style for the day\n         * @public\n         */\n        this.dayFormat = \"numeric\";\n        /**\n         * Format style for the week day labels\n         * @public\n         */\n        this.weekdayFormat = \"short\";\n        /**\n         * Format style for the month label\n         * @public\n         */\n        this.monthFormat = \"long\";\n        /**\n         * Format style for the year used in the title\n         * @public\n         */\n        this.yearFormat = \"numeric\";\n        /**\n         * Minimum number of weeks to show for the month\n         * This can be used to normalize the calendar view\n         *  when changing or across multiple calendars\n         * @public\n         */\n        this.minWeeks = 0;\n        /**\n         * A list of dates that should be shown as disabled\n         * @public\n         */\n        this.disabledDates = \"\";\n        /**\n         * A list of dates that should be shown as highlighted\n         * @public\n         */\n        this.selectedDates = \"\";\n        /**\n         * The number of miliseconds in a day\n         * @internal\n         */\n        this.oneDayInMs = 86400000;\n    }\n    localeChanged() {\n        this.dateFormatter.locale = this.locale;\n    }\n    dayFormatChanged() {\n        this.dateFormatter.dayFormat = this.dayFormat;\n    }\n    weekdayFormatChanged() {\n        this.dateFormatter.weekdayFormat = this.weekdayFormat;\n    }\n    monthFormatChanged() {\n        this.dateFormatter.monthFormat = this.monthFormat;\n    }\n    yearFormatChanged() {\n        this.dateFormatter.yearFormat = this.yearFormat;\n    }\n    /**\n     * Gets data needed to render about a calendar month as well as the previous and next months\n     * @param year - year of the calendar\n     * @param month - month of the calendar\n     * @returns - an object with data about the current and 2 surrounding months\n     * @public\n     */\n    getMonthInfo(month = this.month, year = this.year) {\n        const getFirstDay = (date) => new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n        const getLength = (date) => {\n            const nextMonth = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n            return new Date(nextMonth.getTime() - this.oneDayInMs).getDate();\n        };\n        const thisMonth = new Date(year, month - 1);\n        const nextMonth = new Date(year, month);\n        const previousMonth = new Date(year, month - 2);\n        return {\n            length: getLength(thisMonth),\n            month,\n            start: getFirstDay(thisMonth),\n            year,\n            previous: {\n                length: getLength(previousMonth),\n                month: previousMonth.getMonth() + 1,\n                start: getFirstDay(previousMonth),\n                year: previousMonth.getFullYear(),\n            },\n            next: {\n                length: getLength(nextMonth),\n                month: nextMonth.getMonth() + 1,\n                start: getFirstDay(nextMonth),\n                year: nextMonth.getFullYear(),\n            },\n        };\n    }\n    /**\n     * A list of calendar days\n     * @param info - an object containing the information needed to render a calendar month\n     * @param minWeeks - minimum number of weeks to show\n     * @returns a list of days in a calendar month\n     * @public\n     */\n    getDays(info = this.getMonthInfo(), minWeeks = this.minWeeks) {\n        minWeeks = minWeeks > 10 ? 10 : minWeeks;\n        const { start, length, previous, next } = info;\n        const days = [];\n        let dayCount = 1 - start;\n        while (dayCount < length + 1 ||\n            days.length < minWeeks ||\n            days[days.length - 1].length % 7 !== 0) {\n            const { month, year } = dayCount < 1 ? previous : dayCount > length ? next : info;\n            const day = dayCount < 1\n                ? previous.length + dayCount\n                : dayCount > length\n                    ? dayCount - length\n                    : dayCount;\n            const dateString = `${month}-${day}-${year}`;\n            const disabled = this.dateInString(dateString, this.disabledDates);\n            const selected = this.dateInString(dateString, this.selectedDates);\n            const date = {\n                day,\n                month,\n                year,\n                disabled,\n                selected,\n            };\n            const target = days[days.length - 1];\n            if (days.length === 0 || target.length % 7 === 0) {\n                days.push([date]);\n            }\n            else {\n                target.push(date);\n            }\n            dayCount++;\n        }\n        return days;\n    }\n    /**\n     * A helper function that checks if a date exists in a list of dates\n     * @param date - A date objec that includes the day, month and year\n     * @param datesString - a comma separated list of dates\n     * @returns - Returns true if it found the date in the list of dates\n     * @public\n     */\n    dateInString(date, datesString) {\n        const dates = datesString.split(\",\").map(str => str.trim());\n        date =\n            typeof date === \"string\"\n                ? date\n                : `${date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}`;\n        return dates.some(d => d === date);\n    }\n    /**\n     * Creates a class string for the day container\n     * @param date - date of the calendar cell\n     * @returns - string of class names\n     * @public\n     */\n    getDayClassNames(date, todayString) {\n        const { day, month, year, disabled, selected } = date;\n        const today = todayString === `${month}-${day}-${year}`;\n        const inactive = this.month !== month;\n        return [\n            \"day\",\n            today && \"today\",\n            inactive && \"inactive\",\n            disabled && \"disabled\",\n            selected && \"selected\",\n        ]\n            .filter(Boolean)\n            .join(\" \");\n    }\n    /**\n     * Returns a list of weekday labels\n     * @returns An array of weekday text and full text if abbreviated\n     * @public\n     */\n    getWeekdayText() {\n        const weekdayText = this.dateFormatter.getWeekdays().map(text => ({ text }));\n        if (this.weekdayFormat !== \"long\") {\n            const longText = this.dateFormatter.getWeekdays(\"long\");\n            weekdayText.forEach((weekday, index) => {\n                weekday.abbr = longText[index];\n            });\n        }\n        return weekdayText;\n    }\n    /**\n     * Emits the \"date-select\" event with the day, month and year.\n     * @param date - Date cell\n     * @public\n     */\n    handleDateSelect(event, day) {\n        event.preventDefault;\n        this.$emit(\"dateselected\", day);\n    }\n    /**\n     * Handles keyboard events on a cell\n     * @param event - Keyboard event\n     * @param date - Date of the cell selected\n     */\n    handleKeydown(event, date) {\n        if (event.key === keyEnter) {\n            this.handleDateSelect(event, date);\n        }\n        return true;\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], Calendar.prototype, \"readonly\", void 0);\n__decorate([\n    attr\n], Calendar.prototype, \"locale\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], Calendar.prototype, \"month\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], Calendar.prototype, \"year\", void 0);\n__decorate([\n    attr({ attribute: \"day-format\", mode: \"fromView\" })\n], Calendar.prototype, \"dayFormat\", void 0);\n__decorate([\n    attr({ attribute: \"weekday-format\", mode: \"fromView\" })\n], Calendar.prototype, \"weekdayFormat\", void 0);\n__decorate([\n    attr({ attribute: \"month-format\", mode: \"fromView\" })\n], Calendar.prototype, \"monthFormat\", void 0);\n__decorate([\n    attr({ attribute: \"year-format\", mode: \"fromView\" })\n], Calendar.prototype, \"yearFormat\", void 0);\n__decorate([\n    attr({ attribute: \"min-weeks\", converter: nullableNumberConverter })\n], Calendar.prototype, \"minWeeks\", void 0);\n__decorate([\n    attr({ attribute: \"disabled-dates\" })\n], Calendar.prototype, \"disabledDates\", void 0);\n__decorate([\n    attr({ attribute: \"selected-dates\" })\n], Calendar.prototype, \"selectedDates\", void 0);\n"]},"metadata":{},"sourceType":"module"}