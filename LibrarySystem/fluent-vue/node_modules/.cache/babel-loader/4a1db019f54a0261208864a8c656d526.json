{"ast":null,"code":"import { beforeNextFrameOnce } from 'seemly';\nimport { computed, watch, ref } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { getNumberColWidth, getColKey } from './utils'; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nexport function useScroll(props, {\n  mainTableInstRef,\n  mergedCurrentPageRef,\n  bodyWidthRef,\n  scrollPartRef\n}) {\n  let scrollLeft = 0;\n  const leftActiveFixedColKeyRef = ref(null);\n  const leftActiveFixedChildrenColKeysRef = ref([]);\n  const rightActiveFixedColKeyRef = ref(null);\n  const rightActiveFixedChildrenColKeysRef = ref([]);\n  const styleScrollXRef = computed(() => {\n    return formatLength(props.scrollX);\n  });\n  const leftFixedColumnsRef = computed(() => {\n    return props.columns.filter(column => column.fixed === 'left');\n  });\n  const rightFixedColumnsRef = computed(() => {\n    return props.columns.filter(column => column.fixed === 'right');\n  });\n  const fixedColumnLeftMapRef = computed(() => {\n    const columns = {};\n    let left = 0;\n\n    function traverse(cols) {\n      cols.forEach(col => {\n        const positionInfo = {\n          start: left,\n          end: 0\n        };\n        columns[getColKey(col)] = positionInfo;\n\n        if ('children' in col) {\n          traverse(col.children);\n          positionInfo.end = left;\n        } else {\n          left += getNumberColWidth(col) || 0;\n          positionInfo.end = left;\n        }\n      });\n    }\n\n    traverse(leftFixedColumnsRef.value);\n    return columns;\n  });\n  const fixedColumnRightMapRef = computed(() => {\n    const columns = {};\n    let right = 0;\n\n    function traverse(cols) {\n      for (let i = cols.length - 1; i >= 0; --i) {\n        const col = cols[i];\n        const positionInfo = {\n          start: right,\n          end: 0\n        };\n        columns[getColKey(col)] = positionInfo;\n\n        if ('children' in col) {\n          traverse(col.children);\n          positionInfo.end = right;\n        } else {\n          right += getNumberColWidth(col) || 0;\n          positionInfo.end = right;\n        }\n      }\n    }\n\n    traverse(rightFixedColumnsRef.value);\n    return columns;\n  });\n\n  function deriveActiveLeftFixedColumn() {\n    var _a, _b; // target is header element\n\n\n    const {\n      value: leftFixedColumns\n    } = leftFixedColumnsRef;\n    let leftWidth = 0;\n    const {\n      value: fixedColumnLeftMap\n    } = fixedColumnLeftMapRef;\n    let leftActiveFixedColKey = null;\n\n    for (let i = 0; i < leftFixedColumns.length; ++i) {\n      const key = getColKey(leftFixedColumns[i]);\n\n      if (scrollLeft > (((_a = fixedColumnLeftMap[key]) === null || _a === void 0 ? void 0 : _a.start) || 0) - leftWidth) {\n        leftActiveFixedColKey = key;\n        leftWidth = ((_b = fixedColumnLeftMap[key]) === null || _b === void 0 ? void 0 : _b.end) || 0;\n      } else {\n        break;\n      }\n    }\n\n    leftActiveFixedColKeyRef.value = leftActiveFixedColKey;\n  }\n\n  function deriveActiveLeftFixedChildrenColumns() {\n    leftActiveFixedChildrenColKeysRef.value = [];\n    let activeLeftFixedColumn = props.columns.find(col => getColKey(col) === leftActiveFixedColKeyRef.value);\n\n    while (activeLeftFixedColumn && 'children' in activeLeftFixedColumn) {\n      const length = activeLeftFixedColumn.children.length;\n      if (length === 0) break;\n      const nextActiveLeftFixedColumn = activeLeftFixedColumn.children[length - 1];\n      leftActiveFixedChildrenColKeysRef.value.push(getColKey(nextActiveLeftFixedColumn));\n      activeLeftFixedColumn = nextActiveLeftFixedColumn;\n    }\n  }\n\n  function deriveActiveRightFixedColumn() {\n    var _a, _b; // target is header element\n\n\n    const {\n      value: rightFixedColumns\n    } = rightFixedColumnsRef;\n    const scrollWidth = Number(props.scrollX);\n    const {\n      value: tableWidth\n    } = bodyWidthRef;\n    if (tableWidth === null) return;\n    let rightWidth = 0;\n    let rightActiveFixedColKey = null;\n    const {\n      value: fixedColumnRightMap\n    } = fixedColumnRightMapRef;\n\n    for (let i = rightFixedColumns.length - 1; i >= 0; --i) {\n      const key = getColKey(rightFixedColumns[i]);\n\n      if (Math.round(scrollLeft + (((_a = fixedColumnRightMap[key]) === null || _a === void 0 ? void 0 : _a.start) || 0) + tableWidth - rightWidth) < scrollWidth) {\n        rightActiveFixedColKey = key;\n        rightWidth = ((_b = fixedColumnRightMap[key]) === null || _b === void 0 ? void 0 : _b.end) || 0;\n      } else {\n        break;\n      }\n    }\n\n    rightActiveFixedColKeyRef.value = rightActiveFixedColKey;\n  }\n\n  function deriveActiveRightFixedChildrenColumns() {\n    rightActiveFixedChildrenColKeysRef.value = [];\n    let activeRightFixedColumn = props.columns.find(col => getColKey(col) === rightActiveFixedColKeyRef.value);\n\n    while (activeRightFixedColumn && 'children' in activeRightFixedColumn && activeRightFixedColumn.children.length) {\n      const nextActiveRightFixedColumn = activeRightFixedColumn.children[0];\n      rightActiveFixedChildrenColKeysRef.value.push(getColKey(nextActiveRightFixedColumn));\n      activeRightFixedColumn = nextActiveRightFixedColumn;\n    }\n  }\n\n  function getScrollElements() {\n    const header = mainTableInstRef.value ? mainTableInstRef.value.getHeaderElement() : null;\n    const body = mainTableInstRef.value ? mainTableInstRef.value.getBodyElement() : null;\n    return {\n      header,\n      body\n    };\n  }\n\n  function scrollMainTableBodyToTop() {\n    const {\n      body\n    } = getScrollElements();\n\n    if (body) {\n      body.scrollTop = 0;\n    }\n  }\n\n  function handleTableHeaderScroll() {\n    if (scrollPartRef.value === 'head') {\n      beforeNextFrameOnce(syncScrollState);\n    }\n  }\n\n  function handleTableBodyScroll() {\n    if (scrollPartRef.value === 'body') {\n      beforeNextFrameOnce(syncScrollState);\n    }\n  }\n\n  function syncScrollState() {\n    // We can't simply use props.scrollX to determine whether the table has\n    // need to be sync since user may set column width for each column.\n    // Just let it be, the scroll listener won't be triggered for a basic table.\n    const {\n      header,\n      body\n    } = getScrollElements();\n    if (!body) return;\n    const {\n      value: tableWidth\n    } = bodyWidthRef;\n    if (tableWidth === null) return;\n    const {\n      value: scrollPart\n    } = scrollPartRef;\n\n    if (props.maxHeight || props.flexHeight) {\n      if (!header) return; // we need to deal with overscroll\n\n      if (scrollPart === 'head') {\n        scrollLeft = header.scrollLeft;\n        body.scrollLeft = scrollLeft;\n      } else {\n        scrollLeft = body.scrollLeft;\n        header.scrollLeft = scrollLeft;\n      }\n    } else {\n      scrollLeft = body.scrollLeft;\n    }\n\n    deriveActiveLeftFixedColumn();\n    deriveActiveLeftFixedChildrenColumns();\n    deriveActiveRightFixedColumn();\n    deriveActiveRightFixedChildrenColumns();\n  }\n\n  function setHeaderScrollLeft(left) {\n    const {\n      header\n    } = getScrollElements();\n    if (!header) return;\n    header.scrollLeft = left;\n    syncScrollState();\n  }\n\n  watch(mergedCurrentPageRef, () => {\n    scrollMainTableBodyToTop();\n  });\n  return {\n    styleScrollXRef,\n    fixedColumnLeftMapRef,\n    fixedColumnRightMapRef,\n    leftFixedColumnsRef,\n    rightFixedColumnsRef,\n    leftActiveFixedColKeyRef,\n    leftActiveFixedChildrenColKeysRef,\n    rightActiveFixedColKeyRef,\n    rightActiveFixedChildrenColKeysRef,\n    syncScrollState,\n    handleTableBodyScroll,\n    handleTableHeaderScroll,\n    setHeaderScrollLeft\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/use-scroll.js"],"names":["beforeNextFrameOnce","computed","watch","ref","formatLength","getNumberColWidth","getColKey","useScroll","props","mainTableInstRef","mergedCurrentPageRef","bodyWidthRef","scrollPartRef","scrollLeft","leftActiveFixedColKeyRef","leftActiveFixedChildrenColKeysRef","rightActiveFixedColKeyRef","rightActiveFixedChildrenColKeysRef","styleScrollXRef","scrollX","leftFixedColumnsRef","columns","filter","column","fixed","rightFixedColumnsRef","fixedColumnLeftMapRef","left","traverse","cols","forEach","col","positionInfo","start","end","children","value","fixedColumnRightMapRef","right","i","length","deriveActiveLeftFixedColumn","_a","_b","leftFixedColumns","leftWidth","fixedColumnLeftMap","leftActiveFixedColKey","key","deriveActiveLeftFixedChildrenColumns","activeLeftFixedColumn","find","nextActiveLeftFixedColumn","push","deriveActiveRightFixedColumn","rightFixedColumns","scrollWidth","Number","tableWidth","rightWidth","rightActiveFixedColKey","fixedColumnRightMap","Math","round","deriveActiveRightFixedChildrenColumns","activeRightFixedColumn","nextActiveRightFixedColumn","getScrollElements","header","getHeaderElement","body","getBodyElement","scrollMainTableBodyToTop","scrollTop","handleTableHeaderScroll","syncScrollState","handleTableBodyScroll","scrollPart","maxHeight","flexHeight","setHeaderScrollLeft"],"mappings":"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","sourcesContent":["import { beforeNextFrameOnce } from 'seemly';\nimport { computed, watch, ref } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { getNumberColWidth, getColKey } from './utils';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useScroll(props, { mainTableInstRef, mergedCurrentPageRef, bodyWidthRef, scrollPartRef }) {\n    let scrollLeft = 0;\n    const leftActiveFixedColKeyRef = ref(null);\n    const leftActiveFixedChildrenColKeysRef = ref([]);\n    const rightActiveFixedColKeyRef = ref(null);\n    const rightActiveFixedChildrenColKeysRef = ref([]);\n    const styleScrollXRef = computed(() => {\n        return formatLength(props.scrollX);\n    });\n    const leftFixedColumnsRef = computed(() => {\n        return props.columns.filter((column) => column.fixed === 'left');\n    });\n    const rightFixedColumnsRef = computed(() => {\n        return props.columns.filter((column) => column.fixed === 'right');\n    });\n    const fixedColumnLeftMapRef = computed(() => {\n        const columns = {};\n        let left = 0;\n        function traverse(cols) {\n            cols.forEach((col) => {\n                const positionInfo = { start: left, end: 0 };\n                columns[getColKey(col)] = positionInfo;\n                if ('children' in col) {\n                    traverse(col.children);\n                    positionInfo.end = left;\n                }\n                else {\n                    left += getNumberColWidth(col) || 0;\n                    positionInfo.end = left;\n                }\n            });\n        }\n        traverse(leftFixedColumnsRef.value);\n        return columns;\n    });\n    const fixedColumnRightMapRef = computed(() => {\n        const columns = {};\n        let right = 0;\n        function traverse(cols) {\n            for (let i = cols.length - 1; i >= 0; --i) {\n                const col = cols[i];\n                const positionInfo = { start: right, end: 0 };\n                columns[getColKey(col)] = positionInfo;\n                if ('children' in col) {\n                    traverse(col.children);\n                    positionInfo.end = right;\n                }\n                else {\n                    right += getNumberColWidth(col) || 0;\n                    positionInfo.end = right;\n                }\n            }\n        }\n        traverse(rightFixedColumnsRef.value);\n        return columns;\n    });\n    function deriveActiveLeftFixedColumn() {\n        var _a, _b;\n        // target is header element\n        const { value: leftFixedColumns } = leftFixedColumnsRef;\n        let leftWidth = 0;\n        const { value: fixedColumnLeftMap } = fixedColumnLeftMapRef;\n        let leftActiveFixedColKey = null;\n        for (let i = 0; i < leftFixedColumns.length; ++i) {\n            const key = getColKey(leftFixedColumns[i]);\n            if (scrollLeft > (((_a = fixedColumnLeftMap[key]) === null || _a === void 0 ? void 0 : _a.start) || 0) - leftWidth) {\n                leftActiveFixedColKey = key;\n                leftWidth = ((_b = fixedColumnLeftMap[key]) === null || _b === void 0 ? void 0 : _b.end) || 0;\n            }\n            else {\n                break;\n            }\n        }\n        leftActiveFixedColKeyRef.value = leftActiveFixedColKey;\n    }\n    function deriveActiveLeftFixedChildrenColumns() {\n        leftActiveFixedChildrenColKeysRef.value = [];\n        let activeLeftFixedColumn = props.columns.find((col) => getColKey(col) === leftActiveFixedColKeyRef.value);\n        while (activeLeftFixedColumn && 'children' in activeLeftFixedColumn) {\n            const length = activeLeftFixedColumn.children.length;\n            if (length === 0)\n                break;\n            const nextActiveLeftFixedColumn = activeLeftFixedColumn.children[length - 1];\n            leftActiveFixedChildrenColKeysRef.value.push(getColKey(nextActiveLeftFixedColumn));\n            activeLeftFixedColumn = nextActiveLeftFixedColumn;\n        }\n    }\n    function deriveActiveRightFixedColumn() {\n        var _a, _b;\n        // target is header element\n        const { value: rightFixedColumns } = rightFixedColumnsRef;\n        const scrollWidth = Number(props.scrollX);\n        const { value: tableWidth } = bodyWidthRef;\n        if (tableWidth === null)\n            return;\n        let rightWidth = 0;\n        let rightActiveFixedColKey = null;\n        const { value: fixedColumnRightMap } = fixedColumnRightMapRef;\n        for (let i = rightFixedColumns.length - 1; i >= 0; --i) {\n            const key = getColKey(rightFixedColumns[i]);\n            if (Math.round(scrollLeft +\n                (((_a = fixedColumnRightMap[key]) === null || _a === void 0 ? void 0 : _a.start) || 0) +\n                tableWidth -\n                rightWidth) < scrollWidth) {\n                rightActiveFixedColKey = key;\n                rightWidth = ((_b = fixedColumnRightMap[key]) === null || _b === void 0 ? void 0 : _b.end) || 0;\n            }\n            else {\n                break;\n            }\n        }\n        rightActiveFixedColKeyRef.value = rightActiveFixedColKey;\n    }\n    function deriveActiveRightFixedChildrenColumns() {\n        rightActiveFixedChildrenColKeysRef.value = [];\n        let activeRightFixedColumn = props.columns.find((col) => getColKey(col) === rightActiveFixedColKeyRef.value);\n        while (activeRightFixedColumn &&\n            'children' in activeRightFixedColumn &&\n            activeRightFixedColumn.children.length) {\n            const nextActiveRightFixedColumn = activeRightFixedColumn.children[0];\n            rightActiveFixedChildrenColKeysRef.value.push(getColKey(nextActiveRightFixedColumn));\n            activeRightFixedColumn = nextActiveRightFixedColumn;\n        }\n    }\n    function getScrollElements() {\n        const header = mainTableInstRef.value\n            ? mainTableInstRef.value.getHeaderElement()\n            : null;\n        const body = mainTableInstRef.value\n            ? mainTableInstRef.value.getBodyElement()\n            : null;\n        return {\n            header,\n            body\n        };\n    }\n    function scrollMainTableBodyToTop() {\n        const { body } = getScrollElements();\n        if (body) {\n            body.scrollTop = 0;\n        }\n    }\n    function handleTableHeaderScroll() {\n        if (scrollPartRef.value === 'head') {\n            beforeNextFrameOnce(syncScrollState);\n        }\n    }\n    function handleTableBodyScroll() {\n        if (scrollPartRef.value === 'body') {\n            beforeNextFrameOnce(syncScrollState);\n        }\n    }\n    function syncScrollState() {\n        // We can't simply use props.scrollX to determine whether the table has\n        // need to be sync since user may set column width for each column.\n        // Just let it be, the scroll listener won't be triggered for a basic table.\n        const { header, body } = getScrollElements();\n        if (!body)\n            return;\n        const { value: tableWidth } = bodyWidthRef;\n        if (tableWidth === null)\n            return;\n        const { value: scrollPart } = scrollPartRef;\n        if (props.maxHeight || props.flexHeight) {\n            if (!header)\n                return;\n            // we need to deal with overscroll\n            if (scrollPart === 'head') {\n                scrollLeft = header.scrollLeft;\n                body.scrollLeft = scrollLeft;\n            }\n            else {\n                scrollLeft = body.scrollLeft;\n                header.scrollLeft = scrollLeft;\n            }\n        }\n        else {\n            scrollLeft = body.scrollLeft;\n        }\n        deriveActiveLeftFixedColumn();\n        deriveActiveLeftFixedChildrenColumns();\n        deriveActiveRightFixedColumn();\n        deriveActiveRightFixedChildrenColumns();\n    }\n    function setHeaderScrollLeft(left) {\n        const { header } = getScrollElements();\n        if (!header)\n            return;\n        header.scrollLeft = left;\n        syncScrollState();\n    }\n    watch(mergedCurrentPageRef, () => {\n        scrollMainTableBodyToTop();\n    });\n    return {\n        styleScrollXRef,\n        fixedColumnLeftMapRef,\n        fixedColumnRightMapRef,\n        leftFixedColumnsRef,\n        rightFixedColumnsRef,\n        leftActiveFixedColKeyRef,\n        leftActiveFixedChildrenColKeysRef,\n        rightActiveFixedColKeyRef,\n        rightActiveFixedChildrenColKeysRef,\n        syncScrollState,\n        handleTableBodyScroll,\n        handleTableHeaderScroll,\n        setHeaderScrollLeft\n    };\n}\n"]},"metadata":{},"sourceType":"module"}