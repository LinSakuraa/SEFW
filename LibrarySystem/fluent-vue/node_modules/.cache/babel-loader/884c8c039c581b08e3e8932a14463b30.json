{"ast":null,"code":"import { h, inject, defineComponent, Transition } from 'vue';\nimport { useMemo } from 'vooks';\nimport { CheckmarkIcon } from '../../icons';\nimport NBaseIcon from '../../icon';\nimport { render } from '../../../_utils';\nimport { internalSelectionMenuInjectionKey } from './interface';\nconst checkMarkIcon = h(CheckmarkIcon);\n\nfunction renderCheckMark(show, clsPrefix) {\n  return h(Transition, {\n    name: \"fade-in-scale-up-transition\"\n  }, {\n    default: () => show ? h(NBaseIcon, {\n      clsPrefix: clsPrefix,\n      class: `${clsPrefix}-base-select-option__check`\n    }, {\n      default: () => checkMarkIcon\n    }) : null\n  });\n}\n\nexport default defineComponent({\n  name: 'NBaseSelectOption',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const {\n      valueRef,\n      pendingTmNodeRef,\n      multipleRef,\n      valueSetRef,\n      renderLabelRef,\n      renderOptionRef,\n      handleOptionClick,\n      handleOptionMouseEnter // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(internalSelectionMenuInjectionKey);\n    const isPendingRef = useMemo(() => {\n      const {\n        value: pendingTmNode\n      } = pendingTmNodeRef;\n      if (!pendingTmNode) return false;\n      return props.tmNode.key === pendingTmNode.key;\n    });\n\n    function handleClick(e) {\n      const {\n        tmNode\n      } = props;\n      if (tmNode.disabled) return;\n      handleOptionClick(e, tmNode);\n    }\n\n    function handleMouseEnter(e) {\n      const {\n        tmNode\n      } = props;\n      if (tmNode.disabled) return;\n      handleOptionMouseEnter(e, tmNode);\n    }\n\n    function handleMouseMove(e) {\n      const {\n        tmNode\n      } = props;\n      const {\n        value: isPending\n      } = isPendingRef;\n      if (tmNode.disabled || isPending) return;\n      handleOptionMouseEnter(e, tmNode);\n    }\n\n    return {\n      multiple: multipleRef,\n      isGrouped: useMemo(() => {\n        const {\n          tmNode\n        } = props;\n        const {\n          parent\n        } = tmNode;\n        return parent && parent.rawNode.type === 'group';\n      }),\n      isPending: isPendingRef,\n      isSelected: useMemo(() => {\n        const {\n          value\n        } = valueRef;\n        const {\n          value: multiple\n        } = multipleRef;\n        if (value === null) return false;\n        const optionValue = props.tmNode.rawNode.value;\n\n        if (multiple) {\n          const {\n            value: valueSet\n          } = valueSetRef;\n          return valueSet.has(optionValue);\n        } else {\n          return value === optionValue;\n        }\n      }),\n      renderLabel: renderLabelRef,\n      renderOption: renderOptionRef,\n      handleMouseMove,\n      handleMouseEnter,\n      handleClick\n    };\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      tmNode: {\n        rawNode\n      },\n      isSelected,\n      isPending,\n      isGrouped,\n      multiple,\n      renderOption,\n      renderLabel,\n      handleClick,\n      handleMouseEnter,\n      handleMouseMove\n    } = this;\n    const showCheckMark = multiple && isSelected;\n    const checkmark = renderCheckMark(showCheckMark, clsPrefix);\n    const children = renderLabel ? [renderLabel(rawNode, isSelected), checkmark] : [render(rawNode.label, rawNode, isSelected), checkmark];\n    const node = h(\"div\", {\n      class: [`${clsPrefix}-base-select-option`, rawNode.class, {\n        [`${clsPrefix}-base-select-option--disabled`]: rawNode.disabled,\n        [`${clsPrefix}-base-select-option--selected`]: isSelected,\n        [`${clsPrefix}-base-select-option--grouped`]: isGrouped,\n        [`${clsPrefix}-base-select-option--pending`]: isPending\n      }],\n      style: rawNode.style,\n      onClick: handleClick,\n      onMouseenter: handleMouseEnter,\n      onMousemove: handleMouseMove\n    }, h(\"div\", {\n      class: `${clsPrefix}-base-select-option__content`\n    }, children));\n    return rawNode.render ? rawNode.render({\n      node,\n      option: rawNode,\n      selected: isSelected\n    }) : renderOption ? renderOption({\n      node,\n      option: rawNode,\n      selected: isSelected\n    }) : node;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_internal/select-menu/src/SelectOption.js"],"names":["h","inject","defineComponent","Transition","useMemo","CheckmarkIcon","NBaseIcon","render","internalSelectionMenuInjectionKey","checkMarkIcon","renderCheckMark","show","clsPrefix","name","default","class","props","type","String","required","tmNode","Object","setup","valueRef","pendingTmNodeRef","multipleRef","valueSetRef","renderLabelRef","renderOptionRef","handleOptionClick","handleOptionMouseEnter","isPendingRef","value","pendingTmNode","key","handleClick","e","disabled","handleMouseEnter","handleMouseMove","isPending","multiple","isGrouped","parent","rawNode","isSelected","optionValue","valueSet","has","renderLabel","renderOption","showCheckMark","checkmark","children","label","node","style","onClick","onMouseenter","onMousemove","option","selected"],"mappings":"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","sourcesContent":["import { h, inject, defineComponent, Transition } from 'vue';\nimport { useMemo } from 'vooks';\nimport { CheckmarkIcon } from '../../icons';\nimport NBaseIcon from '../../icon';\nimport { render } from '../../../_utils';\nimport { internalSelectionMenuInjectionKey } from './interface';\nconst checkMarkIcon = h(CheckmarkIcon);\nfunction renderCheckMark(show, clsPrefix) {\n    return (h(Transition, { name: \"fade-in-scale-up-transition\" }, {\n        default: () => show ? (h(NBaseIcon, { clsPrefix: clsPrefix, class: `${clsPrefix}-base-select-option__check` }, {\n            default: () => checkMarkIcon\n        })) : null\n    }));\n}\nexport default defineComponent({\n    name: 'NBaseSelectOption',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        const { valueRef, pendingTmNodeRef, multipleRef, valueSetRef, renderLabelRef, renderOptionRef, handleOptionClick, handleOptionMouseEnter\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(internalSelectionMenuInjectionKey);\n        const isPendingRef = useMemo(() => {\n            const { value: pendingTmNode } = pendingTmNodeRef;\n            if (!pendingTmNode)\n                return false;\n            return props.tmNode.key === pendingTmNode.key;\n        });\n        function handleClick(e) {\n            const { tmNode } = props;\n            if (tmNode.disabled)\n                return;\n            handleOptionClick(e, tmNode);\n        }\n        function handleMouseEnter(e) {\n            const { tmNode } = props;\n            if (tmNode.disabled)\n                return;\n            handleOptionMouseEnter(e, tmNode);\n        }\n        function handleMouseMove(e) {\n            const { tmNode } = props;\n            const { value: isPending } = isPendingRef;\n            if (tmNode.disabled || isPending)\n                return;\n            handleOptionMouseEnter(e, tmNode);\n        }\n        return {\n            multiple: multipleRef,\n            isGrouped: useMemo(() => {\n                const { tmNode } = props;\n                const { parent } = tmNode;\n                return parent && parent.rawNode.type === 'group';\n            }),\n            isPending: isPendingRef,\n            isSelected: useMemo(() => {\n                const { value } = valueRef;\n                const { value: multiple } = multipleRef;\n                if (value === null)\n                    return false;\n                const optionValue = props.tmNode.rawNode.value;\n                if (multiple) {\n                    const { value: valueSet } = valueSetRef;\n                    return valueSet.has(optionValue);\n                }\n                else {\n                    return value === optionValue;\n                }\n            }),\n            renderLabel: renderLabelRef,\n            renderOption: renderOptionRef,\n            handleMouseMove,\n            handleMouseEnter,\n            handleClick\n        };\n    },\n    render() {\n        const { clsPrefix, tmNode: { rawNode }, isSelected, isPending, isGrouped, multiple, renderOption, renderLabel, handleClick, handleMouseEnter, handleMouseMove } = this;\n        const showCheckMark = multiple && isSelected;\n        const checkmark = renderCheckMark(showCheckMark, clsPrefix);\n        const children = renderLabel\n            ? [renderLabel(rawNode, isSelected), checkmark]\n            : [render(rawNode.label, rawNode, isSelected), checkmark];\n        const node = (h(\"div\", { class: [\n                `${clsPrefix}-base-select-option`,\n                rawNode.class,\n                {\n                    [`${clsPrefix}-base-select-option--disabled`]: rawNode.disabled,\n                    [`${clsPrefix}-base-select-option--selected`]: isSelected,\n                    [`${clsPrefix}-base-select-option--grouped`]: isGrouped,\n                    [`${clsPrefix}-base-select-option--pending`]: isPending\n                }\n            ], style: rawNode.style, onClick: handleClick, onMouseenter: handleMouseEnter, onMousemove: handleMouseMove },\n            h(\"div\", { class: `${clsPrefix}-base-select-option__content` }, children)));\n        return rawNode.render\n            ? rawNode.render({ node, option: rawNode, selected: isSelected })\n            : renderOption\n                ? renderOption({ node, option: rawNode, selected: isSelected })\n                : node;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}