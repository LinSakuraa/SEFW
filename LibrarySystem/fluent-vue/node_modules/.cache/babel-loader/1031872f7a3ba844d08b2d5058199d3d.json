{"ast":null,"code":"import { h, nextTick, toRef, watch, ref, inject, defineComponent, provide, withDirectives, vShow, Transition, mergeProps, cloneVNode } from 'vue';\nimport { clickoutside } from 'vdirs';\nimport { VFocusTrap } from 'vueuc';\nimport { dialogPropKeys } from '../../dialog/src/dialogProps';\nimport { NDialog } from '../../dialog/src/Dialog';\nimport { cardBasePropKeys } from '../../card/src/Card';\nimport { drawerBodyInjectionKey } from '../../drawer/src/interface';\nimport { popoverBodyInjectionKey } from '../../popover/src/interface';\nimport { NScrollbar } from '../../_internal';\nimport { NCard } from '../../card';\nimport { getFirstSlotVNode, keep, warn } from '../../_utils';\nimport { modalBodyInjectionKey, modalInjectionKey } from './interface';\nimport { presetProps } from './presetProps';\nexport default defineComponent({\n  name: 'ModalBody',\n  inheritAttrs: false,\n  props: Object.assign(Object.assign({\n    show: {\n      type: Boolean,\n      required: true\n    },\n    preset: String,\n    displayDirective: {\n      type: String,\n      required: true\n    },\n    trapFocus: {\n      type: Boolean,\n      default: true\n    },\n    autoFocus: {\n      type: Boolean,\n      default: true\n    }\n  }, presetProps), {\n    // events\n    onClickoutside: {\n      type: Function,\n      required: true\n    },\n    onBeforeLeave: {\n      type: Function,\n      required: true\n    },\n    onAfterLeave: {\n      type: Function,\n      required: true\n    },\n    onPositiveClick: {\n      type: Function,\n      required: true\n    },\n    onNegativeClick: {\n      type: Function,\n      required: true\n    },\n    onClose: {\n      type: Function,\n      required: true\n    },\n    onAfterEnter: Function,\n    onEsc: Function\n  }),\n\n  setup(props) {\n    const bodyRef = ref(null);\n    const scrollbarRef = ref(null);\n    const displayedRef = ref(props.show);\n    const transformOriginXRef = ref(null);\n    const transformOriginYRef = ref(null);\n    watch(toRef(props, 'show'), value => {\n      if (value) displayedRef.value = true;\n    }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const NModal = inject(modalInjectionKey);\n\n    function styleTransformOrigin() {\n      if (NModal.transformOriginRef.value === 'center') {\n        return '';\n      }\n\n      const {\n        value: transformOriginX\n      } = transformOriginXRef;\n      const {\n        value: transformOriginY\n      } = transformOriginYRef;\n\n      if (transformOriginX === null || transformOriginY === null) {\n        return '';\n      } else if (scrollbarRef.value) {\n        const scrollTop = scrollbarRef.value.containerScrollTop;\n        return `${transformOriginX}px ${transformOriginY + scrollTop}px`;\n      }\n\n      return '';\n    }\n\n    function syncTransformOrigin(el) {\n      if (NModal.transformOriginRef.value === 'center') {\n        return;\n      }\n\n      const mousePosition = NModal.getMousePosition();\n\n      if (!mousePosition) {\n        return;\n      }\n\n      if (!scrollbarRef.value) return;\n      const scrollTop = scrollbarRef.value.containerScrollTop;\n      const {\n        offsetLeft,\n        offsetTop\n      } = el;\n\n      if (mousePosition) {\n        const top = mousePosition.y;\n        const left = mousePosition.x;\n        transformOriginXRef.value = -(offsetLeft - left);\n        transformOriginYRef.value = -(offsetTop - top - scrollTop);\n      }\n\n      el.style.transformOrigin = styleTransformOrigin();\n    }\n\n    function handleEnter(el) {\n      void nextTick(() => {\n        syncTransformOrigin(el);\n      });\n    }\n\n    function handleBeforeLeave(el) {\n      el.style.transformOrigin = styleTransformOrigin();\n      props.onBeforeLeave();\n    }\n\n    function handleAfterLeave() {\n      displayedRef.value = false;\n      transformOriginXRef.value = null;\n      transformOriginYRef.value = null;\n      props.onAfterLeave();\n    }\n\n    function handleCloseClick() {\n      const {\n        onClose\n      } = props;\n\n      if (onClose) {\n        onClose();\n      }\n    }\n\n    function handleNegativeClick() {\n      props.onNegativeClick();\n    }\n\n    function handlePositiveClick() {\n      props.onPositiveClick();\n    }\n\n    function handleClickOutside(e) {\n      props.onClickoutside(e);\n    }\n\n    const childNodeRef = ref(null);\n    watch(childNodeRef, node => {\n      if (node) {\n        void nextTick(() => {\n          const el = node.el;\n\n          if (el && bodyRef.value !== el) {\n            bodyRef.value = el;\n          }\n        });\n      }\n    });\n    provide(modalBodyInjectionKey, bodyRef);\n    provide(drawerBodyInjectionKey, null);\n    provide(popoverBodyInjectionKey, null);\n    return {\n      mergedTheme: NModal.mergedThemeRef,\n      appear: NModal.appearRef,\n      isMounted: NModal.isMountedRef,\n      mergedClsPrefix: NModal.mergedClsPrefixRef,\n      bodyRef,\n      scrollbarRef,\n      displayed: displayedRef,\n      childNodeRef,\n      handleClickOutside,\n      handlePositiveClick,\n      handleNegativeClick,\n      handleCloseClick,\n      handleAfterLeave,\n      handleBeforeLeave,\n      handleEnter\n    };\n  },\n\n  render() {\n    const {\n      $slots,\n      $attrs,\n      handleEnter,\n      handleAfterLeave,\n      handleBeforeLeave,\n      handleClickOutside,\n      preset,\n      mergedClsPrefix\n    } = this;\n    let childNode = null;\n\n    if (!preset) {\n      childNode = getFirstSlotVNode($slots);\n\n      if (!childNode) {\n        warn('modal', 'default slot is empty');\n        return;\n      }\n\n      childNode = cloneVNode(childNode);\n      childNode.props = mergeProps({\n        class: `${mergedClsPrefix}-modal`\n      }, $attrs, childNode.props || {});\n    }\n\n    return this.displayDirective === 'show' || this.displayed || this.show ? withDirectives(h(\"div\", {\n      role: \"none\",\n      class: `${mergedClsPrefix}-modal-body-wrapper`\n    }, h(NScrollbar, {\n      ref: \"scrollbarRef\",\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      contentClass: `${mergedClsPrefix}-modal-scroll-content`\n    }, {\n      default: () => h(VFocusTrap, {\n        disabled: !this.trapFocus,\n        active: this.show,\n        onEsc: this.onEsc,\n        autoFocus: this.autoFocus\n      }, {\n        default: () => {\n          var _a;\n\n          return h(Transition, {\n            name: \"fade-in-scale-up-transition\",\n            appear: (_a = this.appear) !== null && _a !== void 0 ? _a : this.isMounted,\n            onEnter: handleEnter,\n            onAfterEnter: this.onAfterEnter,\n            onAfterLeave: handleAfterLeave,\n            onBeforeLeave: handleBeforeLeave\n          }, {\n            default: () => withDirectives(this.preset === 'confirm' || this.preset === 'dialog' ? h(NDialog, Object.assign({}, this.$attrs, {\n              class: [`${mergedClsPrefix}-modal`, this.$attrs.class],\n              ref: \"bodyRef\",\n              theme: this.mergedTheme.peers.Dialog,\n              themeOverrides: this.mergedTheme.peerOverrides.Dialog\n            }, keep(this.$props, dialogPropKeys), {\n              \"aria-modal\": \"true\"\n            }), $slots) : this.preset === 'card' ? h(NCard, Object.assign({}, this.$attrs, {\n              ref: \"bodyRef\",\n              class: [`${mergedClsPrefix}-modal`, this.$attrs.class],\n              theme: this.mergedTheme.peers.Card,\n              themeOverrides: this.mergedTheme.peerOverrides.Card\n            }, keep(this.$props, cardBasePropKeys), {\n              \"aria-modal\": \"true\",\n              role: \"dialog\"\n            }), $slots) : this.childNodeRef = childNode, [[vShow, this.show], [clickoutside, handleClickOutside, undefined, {\n              capture: true\n            }]])\n          });\n        }\n      })\n    })), [[vShow, this.displayDirective === 'if' || this.displayed || this.show]]) : null;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/modal/src/BodyWrapper.js"],"names":["h","nextTick","toRef","watch","ref","inject","defineComponent","provide","withDirectives","vShow","Transition","mergeProps","cloneVNode","clickoutside","VFocusTrap","dialogPropKeys","NDialog","cardBasePropKeys","drawerBodyInjectionKey","popoverBodyInjectionKey","NScrollbar","NCard","getFirstSlotVNode","keep","warn","modalBodyInjectionKey","modalInjectionKey","presetProps","name","inheritAttrs","props","Object","assign","show","type","Boolean","required","preset","String","displayDirective","trapFocus","default","autoFocus","onClickoutside","Function","onBeforeLeave","onAfterLeave","onPositiveClick","onNegativeClick","onClose","onAfterEnter","onEsc","setup","bodyRef","scrollbarRef","displayedRef","transformOriginXRef","transformOriginYRef","value","NModal","styleTransformOrigin","transformOriginRef","transformOriginX","transformOriginY","scrollTop","containerScrollTop","syncTransformOrigin","el","mousePosition","getMousePosition","offsetLeft","offsetTop","top","y","left","x","style","transformOrigin","handleEnter","handleBeforeLeave","handleAfterLeave","handleCloseClick","handleNegativeClick","handlePositiveClick","handleClickOutside","e","childNodeRef","node","mergedTheme","mergedThemeRef","appear","appearRef","isMounted","isMountedRef","mergedClsPrefix","mergedClsPrefixRef","displayed","render","$slots","$attrs","childNode","class","role","theme","peers","Scrollbar","themeOverrides","peerOverrides","contentClass","disabled","active","_a","onEnter","Dialog","$props","Card","undefined","capture"],"mappings":"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","sourcesContent":["import { h, nextTick, toRef, watch, ref, inject, defineComponent, provide, withDirectives, vShow, Transition, mergeProps, cloneVNode } from 'vue';\nimport { clickoutside } from 'vdirs';\nimport { VFocusTrap } from 'vueuc';\nimport { dialogPropKeys } from '../../dialog/src/dialogProps';\nimport { NDialog } from '../../dialog/src/Dialog';\nimport { cardBasePropKeys } from '../../card/src/Card';\nimport { drawerBodyInjectionKey } from '../../drawer/src/interface';\nimport { popoverBodyInjectionKey } from '../../popover/src/interface';\nimport { NScrollbar } from '../../_internal';\nimport { NCard } from '../../card';\nimport { getFirstSlotVNode, keep, warn } from '../../_utils';\nimport { modalBodyInjectionKey, modalInjectionKey } from './interface';\nimport { presetProps } from './presetProps';\nexport default defineComponent({\n    name: 'ModalBody',\n    inheritAttrs: false,\n    props: Object.assign(Object.assign({ show: {\n            type: Boolean,\n            required: true\n        }, preset: String, displayDirective: {\n            type: String,\n            required: true\n        }, trapFocus: {\n            type: Boolean,\n            default: true\n        }, autoFocus: {\n            type: Boolean,\n            default: true\n        } }, presetProps), { \n        // events\n        onClickoutside: {\n            type: Function,\n            required: true\n        }, onBeforeLeave: {\n            type: Function,\n            required: true\n        }, onAfterLeave: {\n            type: Function,\n            required: true\n        }, onPositiveClick: {\n            type: Function,\n            required: true\n        }, onNegativeClick: {\n            type: Function,\n            required: true\n        }, onClose: {\n            type: Function,\n            required: true\n        }, onAfterEnter: Function, onEsc: Function }),\n    setup(props) {\n        const bodyRef = ref(null);\n        const scrollbarRef = ref(null);\n        const displayedRef = ref(props.show);\n        const transformOriginXRef = ref(null);\n        const transformOriginYRef = ref(null);\n        watch(toRef(props, 'show'), (value) => {\n            if (value)\n                displayedRef.value = true;\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NModal = inject(modalInjectionKey);\n        function styleTransformOrigin() {\n            if (NModal.transformOriginRef.value === 'center') {\n                return '';\n            }\n            const { value: transformOriginX } = transformOriginXRef;\n            const { value: transformOriginY } = transformOriginYRef;\n            if (transformOriginX === null || transformOriginY === null) {\n                return '';\n            }\n            else if (scrollbarRef.value) {\n                const scrollTop = scrollbarRef.value.containerScrollTop;\n                return `${transformOriginX}px ${transformOriginY + scrollTop}px`;\n            }\n            return '';\n        }\n        function syncTransformOrigin(el) {\n            if (NModal.transformOriginRef.value === 'center') {\n                return;\n            }\n            const mousePosition = NModal.getMousePosition();\n            if (!mousePosition) {\n                return;\n            }\n            if (!scrollbarRef.value)\n                return;\n            const scrollTop = scrollbarRef.value.containerScrollTop;\n            const { offsetLeft, offsetTop } = el;\n            if (mousePosition) {\n                const top = mousePosition.y;\n                const left = mousePosition.x;\n                transformOriginXRef.value = -(offsetLeft - left);\n                transformOriginYRef.value = -(offsetTop - top - scrollTop);\n            }\n            el.style.transformOrigin = styleTransformOrigin();\n        }\n        function handleEnter(el) {\n            void nextTick(() => {\n                syncTransformOrigin(el);\n            });\n        }\n        function handleBeforeLeave(el) {\n            el.style.transformOrigin = styleTransformOrigin();\n            props.onBeforeLeave();\n        }\n        function handleAfterLeave() {\n            displayedRef.value = false;\n            transformOriginXRef.value = null;\n            transformOriginYRef.value = null;\n            props.onAfterLeave();\n        }\n        function handleCloseClick() {\n            const { onClose } = props;\n            if (onClose) {\n                onClose();\n            }\n        }\n        function handleNegativeClick() {\n            props.onNegativeClick();\n        }\n        function handlePositiveClick() {\n            props.onPositiveClick();\n        }\n        function handleClickOutside(e) {\n            props.onClickoutside(e);\n        }\n        const childNodeRef = ref(null);\n        watch(childNodeRef, (node) => {\n            if (node) {\n                void nextTick(() => {\n                    const el = node.el;\n                    if (el && bodyRef.value !== el) {\n                        bodyRef.value = el;\n                    }\n                });\n            }\n        });\n        provide(modalBodyInjectionKey, bodyRef);\n        provide(drawerBodyInjectionKey, null);\n        provide(popoverBodyInjectionKey, null);\n        return {\n            mergedTheme: NModal.mergedThemeRef,\n            appear: NModal.appearRef,\n            isMounted: NModal.isMountedRef,\n            mergedClsPrefix: NModal.mergedClsPrefixRef,\n            bodyRef,\n            scrollbarRef,\n            displayed: displayedRef,\n            childNodeRef,\n            handleClickOutside,\n            handlePositiveClick,\n            handleNegativeClick,\n            handleCloseClick,\n            handleAfterLeave,\n            handleBeforeLeave,\n            handleEnter\n        };\n    },\n    render() {\n        const { $slots, $attrs, handleEnter, handleAfterLeave, handleBeforeLeave, handleClickOutside, preset, mergedClsPrefix } = this;\n        let childNode = null;\n        if (!preset) {\n            childNode = getFirstSlotVNode($slots);\n            if (!childNode) {\n                warn('modal', 'default slot is empty');\n                return;\n            }\n            childNode = cloneVNode(childNode);\n            childNode.props = mergeProps({\n                class: `${mergedClsPrefix}-modal`\n            }, $attrs, childNode.props || {});\n        }\n        return this.displayDirective === 'show' || this.displayed || this.show\n            ? withDirectives(h(\"div\", { role: \"none\", class: `${mergedClsPrefix}-modal-body-wrapper` },\n                h(NScrollbar, { ref: \"scrollbarRef\", theme: this.mergedTheme.peers.Scrollbar, themeOverrides: this.mergedTheme.peerOverrides.Scrollbar, contentClass: `${mergedClsPrefix}-modal-scroll-content` }, {\n                    default: () => (h(VFocusTrap, { disabled: !this.trapFocus, active: this.show, onEsc: this.onEsc, autoFocus: this.autoFocus }, {\n                        default: () => {\n                            var _a;\n                            return (h(Transition, { name: \"fade-in-scale-up-transition\", appear: (_a = this.appear) !== null && _a !== void 0 ? _a : this.isMounted, onEnter: handleEnter, onAfterEnter: this.onAfterEnter, onAfterLeave: handleAfterLeave, onBeforeLeave: handleBeforeLeave }, {\n                                default: () => withDirectives((this.preset === 'confirm' ||\n                                    this.preset === 'dialog' ? (h(NDialog, Object.assign({}, this.$attrs, { class: [\n                                        `${mergedClsPrefix}-modal`,\n                                        this.$attrs.class\n                                    ], ref: \"bodyRef\", theme: this.mergedTheme.peers.Dialog, themeOverrides: this.mergedTheme.peerOverrides.Dialog }, keep(this.$props, dialogPropKeys), { \"aria-modal\": \"true\" }), $slots)) : this.preset === 'card' ? (h(NCard, Object.assign({}, this.$attrs, { ref: \"bodyRef\", class: [\n                                        `${mergedClsPrefix}-modal`,\n                                        this.$attrs.class\n                                    ], theme: this.mergedTheme.peers.Card, themeOverrides: this.mergedTheme.peerOverrides.Card }, keep(this.$props, cardBasePropKeys), { \"aria-modal\": \"true\", role: \"dialog\" }), $slots)) : ((this.childNodeRef = childNode))), [\n                                    [vShow, this.show],\n                                    [\n                                        clickoutside,\n                                        handleClickOutside,\n                                        undefined,\n                                        { capture: true }\n                                    ]\n                                ])\n                            }));\n                        }\n                    }))\n                })), [\n                [\n                    vShow,\n                    this.displayDirective === 'if' || this.displayed || this.show\n                ]\n            ])\n            : null;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}