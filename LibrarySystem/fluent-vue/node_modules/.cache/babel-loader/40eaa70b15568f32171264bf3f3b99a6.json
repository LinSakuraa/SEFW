{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable, Observable } from \"@microsoft/fast-element\";\nimport { isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { ARIAGlobalStatesAndProperties } from \"../patterns\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\n/**\n * Determines if the element is a {@link (ListboxOption:class)}\n *\n * @param element - the element to test.\n * @public\n */\n\nexport function isListboxOption(el) {\n  return isHTMLElement(el) && (el.getAttribute(\"role\") === \"option\" || el instanceof HTMLOptionElement);\n}\n/**\n * An Option Custom HTML Element.\n * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option }.\n *\n * @public\n */\n\nexport class ListboxOption extends FoundationElement {\n  constructor(text, value, defaultSelected, selected) {\n    super();\n    /**\n     * The defaultSelected state of the option.\n     * @public\n     */\n\n    this.defaultSelected = false;\n    /**\n     * Tracks whether the \"selected\" property has been changed.\n     * @internal\n     */\n\n    this.dirtySelected = false;\n    /**\n     * The checked state of the control.\n     *\n     * @public\n     */\n\n    this.selected = this.defaultSelected;\n    /**\n     * Track whether the value has been changed from the initial value\n     */\n\n    this.dirtyValue = false;\n\n    if (text) {\n      this.textContent = text;\n    }\n\n    if (value) {\n      this.initialValue = value;\n    }\n\n    if (defaultSelected) {\n      this.defaultSelected = defaultSelected;\n    }\n\n    if (selected) {\n      this.selected = selected;\n    }\n\n    this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);\n    this.proxy.disabled = this.disabled;\n  }\n  /**\n   * Updates the ariaChecked property when the checked property changes.\n   *\n   * @param prev - the previous checked value\n   * @param next - the current checked value\n   *\n   * @public\n   */\n\n\n  checkedChanged(prev, next) {\n    if (typeof next === \"boolean\") {\n      this.ariaChecked = next ? \"true\" : \"false\";\n      return;\n    }\n\n    this.ariaChecked = undefined;\n  }\n\n  defaultSelectedChanged() {\n    if (!this.dirtySelected) {\n      this.selected = this.defaultSelected;\n\n      if (this.proxy instanceof HTMLOptionElement) {\n        this.proxy.selected = this.defaultSelected;\n      }\n    }\n  }\n\n  disabledChanged(prev, next) {\n    this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n\n    if (this.proxy instanceof HTMLOptionElement) {\n      this.proxy.disabled = this.disabled;\n    }\n  }\n\n  selectedAttributeChanged() {\n    this.defaultSelected = this.selectedAttribute;\n\n    if (this.proxy instanceof HTMLOptionElement) {\n      this.proxy.defaultSelected = this.defaultSelected;\n    }\n  }\n\n  selectedChanged() {\n    this.ariaSelected = this.selected ? \"true\" : \"false\";\n\n    if (!this.dirtySelected) {\n      this.dirtySelected = true;\n    }\n\n    if (this.proxy instanceof HTMLOptionElement) {\n      this.proxy.selected = this.selected;\n    }\n  }\n\n  initialValueChanged(previous, next) {\n    // If the value is clean and the component is connected to the DOM\n    // then set value equal to the attribute value.\n    if (!this.dirtyValue) {\n      this.value = this.initialValue;\n      this.dirtyValue = false;\n    }\n  }\n\n  get label() {\n    var _a, _b;\n\n    return (_b = (_a = this.value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : \"\";\n  }\n\n  get text() {\n    return this.textContent;\n  }\n\n  set value(next) {\n    this._value = next;\n    this.dirtyValue = true;\n\n    if (this.proxy instanceof HTMLElement) {\n      this.proxy.value = next;\n    }\n\n    Observable.notify(this, \"value\");\n  }\n\n  get value() {\n    var _a, _b;\n\n    Observable.track(this, \"value\");\n    return (_b = (_a = this._value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : \"\";\n  }\n\n  get form() {\n    return this.proxy ? this.proxy.form : null;\n  }\n\n}\n\n__decorate([observable], ListboxOption.prototype, \"checked\", void 0);\n\n__decorate([observable], ListboxOption.prototype, \"defaultSelected\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], ListboxOption.prototype, \"disabled\", void 0);\n\n__decorate([attr({\n  attribute: \"selected\",\n  mode: \"boolean\"\n})], ListboxOption.prototype, \"selectedAttribute\", void 0);\n\n__decorate([observable], ListboxOption.prototype, \"selected\", void 0);\n\n__decorate([attr({\n  attribute: \"value\",\n  mode: \"fromView\"\n})], ListboxOption.prototype, \"initialValue\", void 0);\n/**\n * States and properties relating to the ARIA `option` role.\n *\n * @public\n */\n\n\nexport class DelegatesARIAListboxOption {}\n\n__decorate([observable], DelegatesARIAListboxOption.prototype, \"ariaChecked\", void 0);\n\n__decorate([observable], DelegatesARIAListboxOption.prototype, \"ariaPosInSet\", void 0);\n\n__decorate([observable], DelegatesARIAListboxOption.prototype, \"ariaSelected\", void 0);\n\n__decorate([observable], DelegatesARIAListboxOption.prototype, \"ariaSetSize\", void 0);\n\napplyMixins(DelegatesARIAListboxOption, ARIAGlobalStatesAndProperties);\napplyMixins(ListboxOption, StartEnd, DelegatesARIAListboxOption);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/listbox-option/listbox-option.js"],"names":["__decorate","attr","observable","Observable","isHTMLElement","FoundationElement","ARIAGlobalStatesAndProperties","StartEnd","applyMixins","isListboxOption","el","getAttribute","HTMLOptionElement","ListboxOption","constructor","text","value","defaultSelected","selected","dirtySelected","dirtyValue","textContent","initialValue","proxy","Option","disabled","checkedChanged","prev","next","ariaChecked","undefined","defaultSelectedChanged","disabledChanged","ariaDisabled","selectedAttributeChanged","selectedAttribute","selectedChanged","ariaSelected","initialValueChanged","previous","label","_a","_b","_value","HTMLElement","notify","track","form","prototype","mode","attribute","DelegatesARIAListboxOption"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable, Observable } from \"@microsoft/fast-element\";\nimport { isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { ARIAGlobalStatesAndProperties } from \"../patterns\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\n/**\n * Determines if the element is a {@link (ListboxOption:class)}\n *\n * @param element - the element to test.\n * @public\n */\nexport function isListboxOption(el) {\n    return (isHTMLElement(el) &&\n        (el.getAttribute(\"role\") === \"option\" ||\n            el instanceof HTMLOptionElement));\n}\n/**\n * An Option Custom HTML Element.\n * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option }.\n *\n * @public\n */\nexport class ListboxOption extends FoundationElement {\n    constructor(text, value, defaultSelected, selected) {\n        super();\n        /**\n         * The defaultSelected state of the option.\n         * @public\n         */\n        this.defaultSelected = false;\n        /**\n         * Tracks whether the \"selected\" property has been changed.\n         * @internal\n         */\n        this.dirtySelected = false;\n        /**\n         * The checked state of the control.\n         *\n         * @public\n         */\n        this.selected = this.defaultSelected;\n        /**\n         * Track whether the value has been changed from the initial value\n         */\n        this.dirtyValue = false;\n        if (text) {\n            this.textContent = text;\n        }\n        if (value) {\n            this.initialValue = value;\n        }\n        if (defaultSelected) {\n            this.defaultSelected = defaultSelected;\n        }\n        if (selected) {\n            this.selected = selected;\n        }\n        this.proxy = new Option(`${this.textContent}`, this.initialValue, this.defaultSelected, this.selected);\n        this.proxy.disabled = this.disabled;\n    }\n    /**\n     * Updates the ariaChecked property when the checked property changes.\n     *\n     * @param prev - the previous checked value\n     * @param next - the current checked value\n     *\n     * @public\n     */\n    checkedChanged(prev, next) {\n        if (typeof next === \"boolean\") {\n            this.ariaChecked = next ? \"true\" : \"false\";\n            return;\n        }\n        this.ariaChecked = undefined;\n    }\n    defaultSelectedChanged() {\n        if (!this.dirtySelected) {\n            this.selected = this.defaultSelected;\n            if (this.proxy instanceof HTMLOptionElement) {\n                this.proxy.selected = this.defaultSelected;\n            }\n        }\n    }\n    disabledChanged(prev, next) {\n        this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.disabled = this.disabled;\n        }\n    }\n    selectedAttributeChanged() {\n        this.defaultSelected = this.selectedAttribute;\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.defaultSelected = this.defaultSelected;\n        }\n    }\n    selectedChanged() {\n        this.ariaSelected = this.selected ? \"true\" : \"false\";\n        if (!this.dirtySelected) {\n            this.dirtySelected = true;\n        }\n        if (this.proxy instanceof HTMLOptionElement) {\n            this.proxy.selected = this.selected;\n        }\n    }\n    initialValueChanged(previous, next) {\n        // If the value is clean and the component is connected to the DOM\n        // then set value equal to the attribute value.\n        if (!this.dirtyValue) {\n            this.value = this.initialValue;\n            this.dirtyValue = false;\n        }\n    }\n    get label() {\n        var _a, _b;\n        return (_b = (_a = this.value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : \"\";\n    }\n    get text() {\n        return this.textContent;\n    }\n    set value(next) {\n        this._value = next;\n        this.dirtyValue = true;\n        if (this.proxy instanceof HTMLElement) {\n            this.proxy.value = next;\n        }\n        Observable.notify(this, \"value\");\n    }\n    get value() {\n        var _a, _b;\n        Observable.track(this, \"value\");\n        return (_b = (_a = this._value) !== null && _a !== void 0 ? _a : this.textContent) !== null && _b !== void 0 ? _b : \"\";\n    }\n    get form() {\n        return this.proxy ? this.proxy.form : null;\n    }\n}\n__decorate([\n    observable\n], ListboxOption.prototype, \"checked\", void 0);\n__decorate([\n    observable\n], ListboxOption.prototype, \"defaultSelected\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], ListboxOption.prototype, \"disabled\", void 0);\n__decorate([\n    attr({ attribute: \"selected\", mode: \"boolean\" })\n], ListboxOption.prototype, \"selectedAttribute\", void 0);\n__decorate([\n    observable\n], ListboxOption.prototype, \"selected\", void 0);\n__decorate([\n    attr({ attribute: \"value\", mode: \"fromView\" })\n], ListboxOption.prototype, \"initialValue\", void 0);\n/**\n * States and properties relating to the ARIA `option` role.\n *\n * @public\n */\nexport class DelegatesARIAListboxOption {\n}\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, \"ariaChecked\", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, \"ariaPosInSet\", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, \"ariaSelected\", void 0);\n__decorate([\n    observable\n], DelegatesARIAListboxOption.prototype, \"ariaSetSize\", void 0);\napplyMixins(DelegatesARIAListboxOption, ARIAGlobalStatesAndProperties);\napplyMixins(ListboxOption, StartEnd, DelegatesARIAListboxOption);\n"]},"metadata":{},"sourceType":"module"}