{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * check if the item is a tree item\n * @public\n * @remarks\n * determines if element is an HTMLElement and if it has the role treeitem\n */\n\nexport function isTreeItemElement(el) {\n  return isHTMLElement(el) && el.getAttribute(\"role\") === \"treeitem\";\n}\n/**\n * A Tree item Custom HTML Element.\n *\n * @public\n */\n\nexport class TreeItem extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * When true, the control will be appear expanded by user interaction.\n     * @public\n     * @remarks\n     * HTML Attribute: expanded\n     */\n\n    this.expanded = false;\n    /**\n     * Whether the item is focusable\n     *\n     * @internal\n     */\n\n    this.focusable = false;\n    /**\n     * Whether the tree is nested\n     *\n     * @public\n     */\n\n    this.isNestedItem = () => {\n      return isTreeItemElement(this.parentElement);\n    };\n    /**\n     * Handle expand button click\n     *\n     * @internal\n     */\n\n\n    this.handleExpandCollapseButtonClick = e => {\n      if (!this.disabled && !e.defaultPrevented) {\n        this.expanded = !this.expanded;\n      }\n    };\n    /**\n     * Handle focus events\n     *\n     * @internal\n     */\n\n\n    this.handleFocus = e => {\n      this.setAttribute(\"tabindex\", \"0\");\n    };\n    /**\n     * Handle blur events\n     *\n     * @internal\n     */\n\n\n    this.handleBlur = e => {\n      this.setAttribute(\"tabindex\", \"-1\");\n    };\n  }\n\n  expandedChanged() {\n    if (this.$fastController.isConnected) {\n      this.$emit(\"expanded-change\", this);\n    }\n  }\n\n  selectedChanged() {\n    if (this.$fastController.isConnected) {\n      this.$emit(\"selected-change\", this);\n    }\n  }\n\n  itemsChanged(oldValue, newValue) {\n    if (this.$fastController.isConnected) {\n      this.items.forEach(node => {\n        if (isTreeItemElement(node)) {\n          // TODO: maybe not require it to be a TreeItem?\n          node.nested = true;\n        }\n      });\n    }\n  }\n  /**\n   * Places document focus on a tree item\n   *\n   * @public\n   * @param el - the element to focus\n   */\n\n\n  static focusItem(el) {\n    el.focusable = true;\n    el.focus();\n  }\n  /**\n   * Gets number of children\n   *\n   * @internal\n   */\n\n\n  childItemLength() {\n    const treeChildren = this.childItems.filter(item => {\n      return isTreeItemElement(item);\n    });\n    return treeChildren ? treeChildren.length : 0;\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TreeItem.prototype, \"expanded\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TreeItem.prototype, \"selected\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TreeItem.prototype, \"disabled\", void 0);\n\n__decorate([observable], TreeItem.prototype, \"focusable\", void 0);\n\n__decorate([observable], TreeItem.prototype, \"childItems\", void 0);\n\n__decorate([observable], TreeItem.prototype, \"items\", void 0);\n\n__decorate([observable], TreeItem.prototype, \"nested\", void 0);\n\n__decorate([observable], TreeItem.prototype, \"renderCollapsedChildren\", void 0);\n\napplyMixins(TreeItem, StartEnd);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/tree-item/tree-item.js"],"names":["__decorate","attr","observable","isHTMLElement","StartEnd","applyMixins","FoundationElement","isTreeItemElement","el","getAttribute","TreeItem","constructor","arguments","expanded","focusable","isNestedItem","parentElement","handleExpandCollapseButtonClick","e","disabled","defaultPrevented","handleFocus","setAttribute","handleBlur","expandedChanged","$fastController","isConnected","$emit","selectedChanged","itemsChanged","oldValue","newValue","items","forEach","node","nested","focusItem","focus","childItemLength","treeChildren","childItems","filter","item","length","mode","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * check if the item is a tree item\n * @public\n * @remarks\n * determines if element is an HTMLElement and if it has the role treeitem\n */\nexport function isTreeItemElement(el) {\n    return isHTMLElement(el) && el.getAttribute(\"role\") === \"treeitem\";\n}\n/**\n * A Tree item Custom HTML Element.\n *\n * @public\n */\nexport class TreeItem extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * When true, the control will be appear expanded by user interaction.\n         * @public\n         * @remarks\n         * HTML Attribute: expanded\n         */\n        this.expanded = false;\n        /**\n         * Whether the item is focusable\n         *\n         * @internal\n         */\n        this.focusable = false;\n        /**\n         * Whether the tree is nested\n         *\n         * @public\n         */\n        this.isNestedItem = () => {\n            return isTreeItemElement(this.parentElement);\n        };\n        /**\n         * Handle expand button click\n         *\n         * @internal\n         */\n        this.handleExpandCollapseButtonClick = (e) => {\n            if (!this.disabled && !e.defaultPrevented) {\n                this.expanded = !this.expanded;\n            }\n        };\n        /**\n         * Handle focus events\n         *\n         * @internal\n         */\n        this.handleFocus = (e) => {\n            this.setAttribute(\"tabindex\", \"0\");\n        };\n        /**\n         * Handle blur events\n         *\n         * @internal\n         */\n        this.handleBlur = (e) => {\n            this.setAttribute(\"tabindex\", \"-1\");\n        };\n    }\n    expandedChanged() {\n        if (this.$fastController.isConnected) {\n            this.$emit(\"expanded-change\", this);\n        }\n    }\n    selectedChanged() {\n        if (this.$fastController.isConnected) {\n            this.$emit(\"selected-change\", this);\n        }\n    }\n    itemsChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected) {\n            this.items.forEach((node) => {\n                if (isTreeItemElement(node)) {\n                    // TODO: maybe not require it to be a TreeItem?\n                    node.nested = true;\n                }\n            });\n        }\n    }\n    /**\n     * Places document focus on a tree item\n     *\n     * @public\n     * @param el - the element to focus\n     */\n    static focusItem(el) {\n        el.focusable = true;\n        el.focus();\n    }\n    /**\n     * Gets number of children\n     *\n     * @internal\n     */\n    childItemLength() {\n        const treeChildren = this.childItems.filter((item) => {\n            return isTreeItemElement(item);\n        });\n        return treeChildren ? treeChildren.length : 0;\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], TreeItem.prototype, \"expanded\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TreeItem.prototype, \"selected\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TreeItem.prototype, \"disabled\", void 0);\n__decorate([\n    observable\n], TreeItem.prototype, \"focusable\", void 0);\n__decorate([\n    observable\n], TreeItem.prototype, \"childItems\", void 0);\n__decorate([\n    observable\n], TreeItem.prototype, \"items\", void 0);\n__decorate([\n    observable\n], TreeItem.prototype, \"nested\", void 0);\n__decorate([\n    observable\n], TreeItem.prototype, \"renderCollapsedChildren\", void 0);\napplyMixins(TreeItem, StartEnd);\n"]},"metadata":{},"sourceType":"module"}