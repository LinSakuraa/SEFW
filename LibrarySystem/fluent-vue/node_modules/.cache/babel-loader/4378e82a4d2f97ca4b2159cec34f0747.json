{"ast":null,"code":"import { ColorRGBA64, rgbToRelativeLuminance } from '@microsoft/fast-colors';\nimport { contrast } from './utilities/relative-luminance';\n/** @public */\n\nexport const SwatchRGB = Object.freeze({\n  create(r, g, b) {\n    return new SwatchRGBImpl(r, g, b);\n  },\n\n  from(obj) {\n    return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n  }\n\n});\n/**\n * Runtime test for an objects conformance with the SwatchRGB interface.\n * @internal\n */\n\nexport function isSwatchRGB(value) {\n  const test = {\n    r: 0,\n    g: 0,\n    b: 0,\n    toColorString: () => '',\n    contrast: () => 0,\n    relativeLuminance: 0\n  };\n\n  for (const key in test) {\n    if (typeof test[key] !== typeof value[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * An RGB implementation of {@link Swatch}\n * @internal\n */\n\nclass SwatchRGBImpl extends ColorRGBA64 {\n  /**\n   *\n   * @param red - Red channel expressed as a number between 0 and 1\n   * @param green - Green channel expressed as a number between 0 and 1\n   * @param blue - Blue channel expressed as a number between 0 and 1\n   */\n  constructor(red, green, blue) {\n    super(red, green, blue, 1);\n    this.toColorString = this.toStringHexRGB;\n    this.contrast = contrast.bind(null, this);\n    this.createCSS = this.toColorString;\n    this.relativeLuminance = rgbToRelativeLuminance(this);\n  }\n\n  static fromObject(obj) {\n    return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n  }\n\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/color/swatch.js"],"names":["ColorRGBA64","rgbToRelativeLuminance","contrast","SwatchRGB","Object","freeze","create","r","g","b","SwatchRGBImpl","from","obj","isSwatchRGB","value","test","toColorString","relativeLuminance","key","constructor","red","green","blue","toStringHexRGB","bind","createCSS","fromObject"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,sBAAtB,QAAoD,wBAApD;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc;AACnCC,EAAAA,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACZ,WAAO,IAAIC,aAAJ,CAAkBH,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,CAAP;AACH,GAHkC;;AAInCE,EAAAA,IAAI,CAACC,GAAD,EAAM;AACN,WAAO,IAAIF,aAAJ,CAAkBE,GAAG,CAACL,CAAtB,EAAyBK,GAAG,CAACJ,CAA7B,EAAgCI,GAAG,CAACH,CAApC,CAAP;AACH;;AANkC,CAAd,CAAlB;AAQP;AACA;AACA;AACA;;AACA,OAAO,SAASI,WAAT,CAAqBC,KAArB,EAA4B;AAC/B,QAAMC,IAAI,GAAG;AACTR,IAAAA,CAAC,EAAE,CADM;AAETC,IAAAA,CAAC,EAAE,CAFM;AAGTC,IAAAA,CAAC,EAAE,CAHM;AAITO,IAAAA,aAAa,EAAE,MAAM,EAJZ;AAKTd,IAAAA,QAAQ,EAAE,MAAM,CALP;AAMTe,IAAAA,iBAAiB,EAAE;AANV,GAAb;;AAQA,OAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACpB,QAAI,OAAOA,IAAI,CAACG,GAAD,CAAX,KAAqB,OAAOJ,KAAK,CAACI,GAAD,CAArC,EAA4C;AACxC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;;AACA,MAAMR,aAAN,SAA4BV,WAA5B,CAAwC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACImB,EAAAA,WAAW,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmB;AAC1B,UAAMF,GAAN,EAAWC,KAAX,EAAkBC,IAAlB,EAAwB,CAAxB;AACA,SAAKN,aAAL,GAAqB,KAAKO,cAA1B;AACA,SAAKrB,QAAL,GAAgBA,QAAQ,CAACsB,IAAT,CAAc,IAAd,EAAoB,IAApB,CAAhB;AACA,SAAKC,SAAL,GAAiB,KAAKT,aAAtB;AACA,SAAKC,iBAAL,GAAyBhB,sBAAsB,CAAC,IAAD,CAA/C;AACH;;AACgB,SAAVyB,UAAU,CAACd,GAAD,EAAM;AACnB,WAAO,IAAIF,aAAJ,CAAkBE,GAAG,CAACL,CAAtB,EAAyBK,GAAG,CAACJ,CAA7B,EAAgCI,GAAG,CAACH,CAApC,CAAP;AACH;;AAhBmC","sourcesContent":["import { ColorRGBA64, rgbToRelativeLuminance } from '@microsoft/fast-colors';\nimport { contrast } from './utilities/relative-luminance';\n/** @public */\nexport const SwatchRGB = Object.freeze({\n    create(r, g, b) {\n        return new SwatchRGBImpl(r, g, b);\n    },\n    from(obj) {\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n    },\n});\n/**\n * Runtime test for an objects conformance with the SwatchRGB interface.\n * @internal\n */\nexport function isSwatchRGB(value) {\n    const test = {\n        r: 0,\n        g: 0,\n        b: 0,\n        toColorString: () => '',\n        contrast: () => 0,\n        relativeLuminance: 0,\n    };\n    for (const key in test) {\n        if (typeof test[key] !== typeof value[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * An RGB implementation of {@link Swatch}\n * @internal\n */\nclass SwatchRGBImpl extends ColorRGBA64 {\n    /**\n     *\n     * @param red - Red channel expressed as a number between 0 and 1\n     * @param green - Green channel expressed as a number between 0 and 1\n     * @param blue - Blue channel expressed as a number between 0 and 1\n     */\n    constructor(red, green, blue) {\n        super(red, green, blue, 1);\n        this.toColorString = this.toStringHexRGB;\n        this.contrast = contrast.bind(null, this);\n        this.createCSS = this.toColorString;\n        this.relativeLuminance = rgbToRelativeLuminance(this);\n    }\n    static fromObject(obj) {\n        return new SwatchRGBImpl(obj.r, obj.g, obj.b);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}