{"ast":null,"code":"import { h, defineComponent, inject, ref, onBeforeUpdate } from 'vue';\nimport { indexMap } from 'seemly';\nimport { useConfig } from '../../_mixins';\nimport { carouselMethodsInjectionKey } from './interface';\nconst carouselDotsProps = {\n  total: {\n    type: Number,\n    default: 0\n  },\n  currentIndex: {\n    type: Number,\n    default: 0\n  },\n  dotType: {\n    type: String,\n    default: 'dot'\n  },\n  trigger: {\n    type: String,\n    default: 'click'\n  },\n  keyboard: Boolean\n};\nexport default defineComponent({\n  name: 'CarouselDots',\n  props: carouselDotsProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const dotElsRef = ref([]); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const NCarousel = inject(carouselMethodsInjectionKey, null);\n\n    function handleKeydown(e, current) {\n      switch (e.code) {\n        case 'Enter':\n        case 'NumpadEnter':\n        case 'Space':\n          NCarousel.to(current);\n          return;\n      }\n\n      if (props.keyboard) {\n        handleKeyboard(e);\n      }\n    }\n\n    function handleMouseenter(current) {\n      if (props.trigger === 'hover') {\n        NCarousel.to(current);\n      }\n    }\n\n    function handleClick(current) {\n      if (props.trigger === 'click') {\n        NCarousel.to(current);\n      }\n    }\n\n    function handleKeyboard(e) {\n      var _a;\n\n      const {\n        code: keycode\n      } = e;\n      const vertical = NCarousel.isVertical();\n      const isVerticalNext = keycode === 'PageUp' || keycode === 'ArrowUp';\n      const isVerticalPrev = keycode === 'PageDown' || keycode === 'ArrowDown';\n      const isHorizontalNext = keycode === 'PageUp' || keycode === 'ArrowRight';\n      const isHorizontalPrev = keycode === 'PageDown' || keycode === 'ArrowLeft';\n\n      if (vertical && (isVerticalNext && NCarousel.isNextDisabled() || isVerticalPrev && NCarousel.isPrevDisabled())) {\n        return;\n      }\n\n      if (!vertical && (isHorizontalNext && NCarousel.isNextDisabled() || isHorizontalPrev && NCarousel.isPrevDisabled())) {\n        return;\n      }\n\n      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      const nodeName = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.nodeName.toLowerCase();\n\n      if (nodeName === 'input' || nodeName === 'textarea') {\n        return;\n      }\n\n      if (vertical ? isVerticalNext : isHorizontalNext) {\n        e.preventDefault();\n        NCarousel.next();\n        focusDot(NCarousel.getCurrentIndex());\n      } else if (vertical ? isVerticalPrev : isHorizontalPrev) {\n        e.preventDefault();\n        NCarousel.prev();\n        focusDot(NCarousel.getCurrentIndex());\n      }\n    }\n\n    function focusDot(index = props.currentIndex) {\n      const {\n        value: dotEls\n      } = dotElsRef;\n\n      if (index >= 0 && index < dotEls.length) {\n        dotEls[index].focus();\n      }\n    }\n\n    onBeforeUpdate(() => dotElsRef.value.length = 0);\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      dotEls: dotElsRef,\n      handleKeydown,\n      handleMouseenter,\n      handleClick\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix,\n      dotEls\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-carousel__dots`, `${mergedClsPrefix}-carousel__dots--${this.dotType}`],\n      role: \"tablist\"\n    }, indexMap(this.total, i => {\n      const selected = i === this.currentIndex;\n      return h(\"div\", {\n        \"aria-selected\": selected,\n        ref: el => dotEls.push(el),\n        role: \"button\",\n        tabindex: \"0\",\n        class: [`${mergedClsPrefix}-carousel__dot`, selected && `${mergedClsPrefix}-carousel__dot--active`],\n        key: i,\n        onClick: () => this.handleClick(i),\n        onMouseenter: () => this.handleMouseenter(i),\n        onKeydown: e => this.handleKeydown(e, i)\n      });\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/carousel/src/CarouselDots.js"],"names":["h","defineComponent","inject","ref","onBeforeUpdate","indexMap","useConfig","carouselMethodsInjectionKey","carouselDotsProps","total","type","Number","default","currentIndex","dotType","String","trigger","keyboard","Boolean","name","props","setup","mergedClsPrefixRef","dotElsRef","NCarousel","handleKeydown","e","current","code","to","handleKeyboard","handleMouseenter","handleClick","_a","keycode","vertical","isVertical","isVerticalNext","isVerticalPrev","isHorizontalNext","isHorizontalPrev","isNextDisabled","isPrevDisabled","shiftKey","altKey","ctrlKey","metaKey","nodeName","document","activeElement","toLowerCase","preventDefault","next","focusDot","getCurrentIndex","prev","index","value","dotEls","length","focus","mergedClsPrefix","render","class","role","i","selected","el","push","tabindex","key","onClick","onMouseenter","onKeydown"],"mappings":"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","sourcesContent":["import { h, defineComponent, inject, ref, onBeforeUpdate } from 'vue';\nimport { indexMap } from 'seemly';\nimport { useConfig } from '../../_mixins';\nimport { carouselMethodsInjectionKey } from './interface';\nconst carouselDotsProps = {\n    total: {\n        type: Number,\n        default: 0\n    },\n    currentIndex: {\n        type: Number,\n        default: 0\n    },\n    dotType: {\n        type: String,\n        default: 'dot'\n    },\n    trigger: {\n        type: String,\n        default: 'click'\n    },\n    keyboard: Boolean\n};\nexport default defineComponent({\n    name: 'CarouselDots',\n    props: carouselDotsProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const dotElsRef = ref([]);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NCarousel = inject(carouselMethodsInjectionKey, null);\n        function handleKeydown(e, current) {\n            switch (e.code) {\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    NCarousel.to(current);\n                    return;\n            }\n            if (props.keyboard) {\n                handleKeyboard(e);\n            }\n        }\n        function handleMouseenter(current) {\n            if (props.trigger === 'hover') {\n                NCarousel.to(current);\n            }\n        }\n        function handleClick(current) {\n            if (props.trigger === 'click') {\n                NCarousel.to(current);\n            }\n        }\n        function handleKeyboard(e) {\n            var _a;\n            const { code: keycode } = e;\n            const vertical = NCarousel.isVertical();\n            const isVerticalNext = keycode === 'PageUp' || keycode === 'ArrowUp';\n            const isVerticalPrev = keycode === 'PageDown' || keycode === 'ArrowDown';\n            const isHorizontalNext = keycode === 'PageUp' || keycode === 'ArrowRight';\n            const isHorizontalPrev = keycode === 'PageDown' || keycode === 'ArrowLeft';\n            if (vertical &&\n                ((isVerticalNext && NCarousel.isNextDisabled()) ||\n                    (isVerticalPrev && NCarousel.isPrevDisabled()))) {\n                return;\n            }\n            if (!vertical &&\n                ((isHorizontalNext && NCarousel.isNextDisabled()) ||\n                    (isHorizontalPrev && NCarousel.isPrevDisabled()))) {\n                return;\n            }\n            if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n                return;\n            }\n            const nodeName = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.nodeName.toLowerCase();\n            if (nodeName === 'input' || nodeName === 'textarea') {\n                return;\n            }\n            if (vertical ? isVerticalNext : isHorizontalNext) {\n                e.preventDefault();\n                NCarousel.next();\n                focusDot(NCarousel.getCurrentIndex());\n            }\n            else if (vertical ? isVerticalPrev : isHorizontalPrev) {\n                e.preventDefault();\n                NCarousel.prev();\n                focusDot(NCarousel.getCurrentIndex());\n            }\n        }\n        function focusDot(index = props.currentIndex) {\n            const { value: dotEls } = dotElsRef;\n            if (index >= 0 && index < dotEls.length) {\n                dotEls[index].focus();\n            }\n        }\n        onBeforeUpdate(() => (dotElsRef.value.length = 0));\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            dotEls: dotElsRef,\n            handleKeydown,\n            handleMouseenter,\n            handleClick\n        };\n    },\n    render() {\n        const { mergedClsPrefix, dotEls } = this;\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-carousel__dots`,\n                `${mergedClsPrefix}-carousel__dots--${this.dotType}`\n            ], role: \"tablist\" }, indexMap(this.total, (i) => {\n            const selected = i === this.currentIndex;\n            return (h(\"div\", { \"aria-selected\": selected, ref: (el) => dotEls.push(el), role: \"button\", tabindex: \"0\", class: [\n                    `${mergedClsPrefix}-carousel__dot`,\n                    selected && `${mergedClsPrefix}-carousel__dot--active`\n                ], key: i, onClick: () => this.handleClick(i), onMouseenter: () => this.handleMouseenter(i), onKeydown: (e) => this.handleKeydown(e, i) }));\n        })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}