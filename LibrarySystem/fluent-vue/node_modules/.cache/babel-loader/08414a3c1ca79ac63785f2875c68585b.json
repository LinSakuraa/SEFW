{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef\n    } = NTree;\n    const disabledRef = computed(() => NTree.disabledRef.value || props.tmNode.disabled);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    }); // used for drag and drop\n\n    const contentInstRef = ref(null); // must be non-reactive\n\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      contentElRef.value = contentInstRef.value.$el;\n    });\n\n    function handleSwitcherClick() {\n      const {\n        tmNode\n      } = props;\n\n      if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n        if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n          NTree.loadingKeysRef.value.add(tmNode.key);\n        }\n\n        const {\n          onLoadRef: {\n            value: onLoad\n          }\n        } = NTree;\n\n        if (onLoad) {\n          void onLoad(tmNode.rawNode).then(() => {\n            NTree.handleSwitcherClick(tmNode);\n          }).finally(() => {\n            NTree.loadingKeysRef.value.delete(tmNode.key);\n          });\n        }\n      } else {\n        NTree.handleSwitcherClick(tmNode);\n      }\n    }\n\n    function _handleClick(e) {\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      NTree.handleSelect(props.tmNode);\n    }\n\n    function handleContentClick(e) {\n      var _a, _b;\n\n      if (blockLineRef.value) return;\n      if (!disabledRef.value) _handleClick(e);\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n\n    function handleLineClick(e) {\n      var _a, _b;\n\n      if (!blockLineRef.value) return;\n\n      if (!disabledRef.value) {\n        _handleClick(e);\n      }\n\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    } // Dnd\n\n\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n\n        if (!droppingMouseNode) {\n          return;\n        }\n\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => NTree.highlightKeySetRef.value.has(props.tmNode.key)),\n      checked: useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key)),\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: computed(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf)),\n      checkboxDisabled: computed(() => !!props.tmNode.rawNode.checkboxDisabled),\n      selectable: computed(() => NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.multipleRef.value ? true : NTree.mergedCheckStrategyRef.value === 'child' ? props.tmNode.isLeaf : true : true)),\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      contentInstRef,\n      contentElRef,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps\n    } = this; // drag start not inside\n    // it need to be append to node itself, not wrapper\n\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined; // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), repeat(tmNode.level, h(\"div\", {\n      class: `${clsPrefix}-tree-node-indent`,\n      style: {\n        flex: `0 0 ${indent}px`\n      }\n    })), h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      onClick: this.handleSwitcherClick\n    }), checkable ? h(NTreeNodeCheckbox, {\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      el: this.contentElRef.value,\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null));\n  }\n\n});\nexport default TreeNode;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/tree/src/TreeNode.js"],"names":["h","inject","computed","defineComponent","ref","onMounted","useMemo","happensIn","repeat","createDataKey","NTreeNodeSwitcher","NTreeNodeCheckbox","NTreeNodeContent","treeInjectionKey","renderDropMark","TreeNode","name","props","clsPrefix","type","String","required","tmNode","Object","setup","NTree","droppingNodeParentRef","droppingMouseNodeRef","draggingNodeRef","droppingPositionRef","droppingOffsetLevelRef","nodePropsRef","indentRef","blockLineRef","disabledRef","value","disabled","resolvedNodePropsRef","nodeProps","undefined","option","rawNode","contentInstRef","contentElRef","$el","handleSwitcherClick","isLeaf","shallowLoaded","loadingKeysRef","has","key","add","onLoadRef","onLoad","then","finally","delete","_handleClick","e","handleSelect","handleContentClick","_a","_b","onClick","call","handleLineClick","handleCheck","checked","handleDragStart","event","node","handleDragEnter","currentTarget","target","handleDragOver","preventDefault","handleDragEnd","handleDragLeave","handleDrop","dropPosition","showDropMark","draggingNode","droppingPosition","droppingMouseNode","showDropMarkAsParent","droppingNodeParent","pending","pendingNodeKeyRef","loading","highlight","highlightKeySetRef","displayedCheckedKeysRef","includes","indeterminate","displayedIndeterminateKeysRef","selected","mergedSelectedKeysRef","expanded","mergedExpandedKeysRef","checkable","checkableRef","cascadeRef","mergedCheckStrategyRef","checkboxDisabled","selectable","selectableRef","internalTreeSelect","multipleRef","internalScrollable","internalScrollableRef","draggable","draggableRef","blockLine","checkboxFocusable","internalCheckboxFocusableRef","droppingOffsetLevel","indent","render","dragEventHandlers","onDragenter","onDragleave","onDragend","onDrop","onDragover","dataKey","assign","class","onDragstart","level","style","flex","hide","focusable","onCheck","el","position","offsetLevel"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nconst TreeNode = defineComponent({\n    name: 'TreeNode',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NTree = inject(treeInjectionKey);\n        const { droppingNodeParentRef, droppingMouseNodeRef, draggingNodeRef, droppingPositionRef, droppingOffsetLevelRef, nodePropsRef, indentRef, blockLineRef } = NTree;\n        const disabledRef = computed(() => NTree.disabledRef.value || props.tmNode.disabled);\n        const resolvedNodePropsRef = computed(() => {\n            const { value: nodeProps } = nodePropsRef;\n            if (!nodeProps)\n                return undefined;\n            return nodeProps({ option: props.tmNode.rawNode });\n        });\n        // used for drag and drop\n        const contentInstRef = ref(null);\n        // must be non-reactive\n        const contentElRef = { value: null };\n        onMounted(() => {\n            contentElRef.value = contentInstRef.value.$el;\n        });\n        function handleSwitcherClick() {\n            const { tmNode } = props;\n            if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n                if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n                    NTree.loadingKeysRef.value.add(tmNode.key);\n                }\n                const { onLoadRef: { value: onLoad } } = NTree;\n                if (onLoad) {\n                    void onLoad(tmNode.rawNode)\n                        .then(() => {\n                        NTree.handleSwitcherClick(tmNode);\n                    })\n                        .finally(() => {\n                        NTree.loadingKeysRef.value.delete(tmNode.key);\n                    });\n                }\n            }\n            else {\n                NTree.handleSwitcherClick(tmNode);\n            }\n        }\n        function _handleClick(e) {\n            if (happensIn(e, 'checkbox') || happensIn(e, 'switcher'))\n                return;\n            NTree.handleSelect(props.tmNode);\n        }\n        function handleContentClick(e) {\n            var _a, _b;\n            if (blockLineRef.value)\n                return;\n            if (!disabledRef.value)\n                _handleClick(e);\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleLineClick(e) {\n            var _a, _b;\n            if (!blockLineRef.value)\n                return;\n            if (!disabledRef.value) {\n                _handleClick(e);\n            }\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleCheck(checked) {\n            NTree.handleCheck(props.tmNode, checked);\n        }\n        // Dnd\n        function handleDragStart(e) {\n            NTree.handleDragStart({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnter(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragEnter({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragOver(e) {\n            e.preventDefault(); // if not prevent, drop event won't be fired...\n            NTree.handleDragOver({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnd(e) {\n            NTree.handleDragEnd({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragLeave(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragLeave({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDrop(e) {\n            e.preventDefault();\n            if (droppingPositionRef.value !== null) {\n                NTree.handleDrop({\n                    event: e,\n                    node: props.tmNode,\n                    dropPosition: droppingPositionRef.value\n                });\n            }\n        }\n        return {\n            showDropMark: useMemo(() => {\n                const { value: draggingNode } = draggingNodeRef;\n                if (!draggingNode)\n                    return;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (!droppingPosition)\n                    return;\n                const { value: droppingMouseNode } = droppingMouseNodeRef;\n                if (!droppingMouseNode) {\n                    return;\n                }\n                const { tmNode } = props;\n                if (tmNode.key === droppingMouseNode.key)\n                    return true;\n                return false;\n            }),\n            showDropMarkAsParent: useMemo(() => {\n                const { value: droppingNodeParent } = droppingNodeParentRef;\n                if (!droppingNodeParent)\n                    return false;\n                const { tmNode } = props;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (droppingPosition === 'before' || droppingPosition === 'after') {\n                    return droppingNodeParent.key === tmNode.key;\n                }\n                return false;\n            }),\n            pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n            loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n            highlight: useMemo(() => NTree.highlightKeySetRef.value.has(props.tmNode.key)),\n            checked: useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key)),\n            indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n            selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n            expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n            disabled: disabledRef,\n            checkable: computed(() => NTree.checkableRef.value &&\n                (NTree.cascadeRef.value ||\n                    NTree.mergedCheckStrategyRef.value !== 'child' ||\n                    props.tmNode.isLeaf)),\n            checkboxDisabled: computed(() => !!props.tmNode.rawNode.checkboxDisabled),\n            selectable: computed(() => NTree.selectableRef.value &&\n                (NTree.internalTreeSelect\n                    ? NTree.multipleRef.value\n                        ? true\n                        : NTree.mergedCheckStrategyRef.value === 'child'\n                            ? props.tmNode.isLeaf\n                            : true\n                    : true)),\n            internalScrollable: NTree.internalScrollableRef,\n            draggable: NTree.draggableRef,\n            blockLine: blockLineRef,\n            nodeProps: resolvedNodePropsRef,\n            checkboxFocusable: NTree.internalCheckboxFocusableRef,\n            droppingPosition: droppingPositionRef,\n            droppingOffsetLevel: droppingOffsetLevelRef,\n            indent: indentRef,\n            contentInstRef,\n            contentElRef,\n            handleCheck,\n            handleDrop,\n            handleDragStart,\n            handleDragEnter,\n            handleDragOver,\n            handleDragEnd,\n            handleDragLeave,\n            handleLineClick,\n            handleContentClick,\n            handleSwitcherClick\n        };\n    },\n    render() {\n        const { tmNode, clsPrefix, checkable, selectable, selected, checked, highlight, draggable, blockLine, indent, disabled, pending, internalScrollable, nodeProps } = this;\n        // drag start not inside\n        // it need to be append to node itself, not wrapper\n        const dragEventHandlers = draggable && !disabled\n            ? {\n                onDragenter: this.handleDragEnter,\n                onDragleave: this.handleDragLeave,\n                onDragend: this.handleDragEnd,\n                onDrop: this.handleDrop,\n                onDragover: this.handleDragOver\n            }\n            : undefined;\n        // In non virtual mode, there's no evidence that which element should be\n        // scrolled to, so we need data-key to query the target element.\n        const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n        return (h(\"div\", Object.assign({ class: `${clsPrefix}-tree-node-wrapper` }, dragEventHandlers),\n            h(\"div\", Object.assign({}, (blockLine ? nodeProps : undefined), { class: [\n                    `${clsPrefix}-tree-node`,\n                    {\n                        [`${clsPrefix}-tree-node--selected`]: selected,\n                        [`${clsPrefix}-tree-node--checkable`]: checkable,\n                        [`${clsPrefix}-tree-node--highlight`]: highlight,\n                        [`${clsPrefix}-tree-node--pending`]: pending,\n                        [`${clsPrefix}-tree-node--disabled`]: disabled,\n                        [`${clsPrefix}-tree-node--selectable`]: selectable\n                    },\n                    nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class\n                ], \"data-key\": dataKey, draggable: draggable && blockLine, onClick: this.handleLineClick, onDragstart: draggable && blockLine && !disabled\n                    ? this.handleDragStart\n                    : undefined }),\n                repeat(tmNode.level, h(\"div\", { class: `${clsPrefix}-tree-node-indent`, style: { flex: `0 0 ${indent}px` } })),\n                h(NTreeNodeSwitcher, { clsPrefix: clsPrefix, expanded: this.expanded, loading: this.loading, hide: tmNode.isLeaf, onClick: this.handleSwitcherClick }),\n                checkable ? (h(NTreeNodeCheckbox, { focusable: this.checkboxFocusable, disabled: disabled || this.checkboxDisabled, clsPrefix: clsPrefix, checked: this.checked, indeterminate: this.indeterminate, onCheck: this.handleCheck })) : null,\n                h(NTreeNodeContent, { ref: \"contentInstRef\", clsPrefix: clsPrefix, checked: checked, selected: selected, onClick: this.handleContentClick, nodeProps: blockLine ? undefined : nodeProps, onDragstart: draggable && !blockLine && !disabled\n                        ? this.handleDragStart\n                        : undefined, tmNode: tmNode }),\n                draggable\n                    ? this.showDropMark\n                        ? renderDropMark({\n                            el: this.contentElRef.value,\n                            position: this.droppingPosition,\n                            offsetLevel: this.droppingOffsetLevel,\n                            indent\n                        })\n                        : this.showDropMarkAsParent\n                            ? renderDropMark({\n                                el: this.contentElRef.value,\n                                position: 'inside',\n                                offsetLevel: this.droppingOffsetLevel,\n                                indent\n                            })\n                            : null\n                    : null)));\n    }\n});\nexport default TreeNode;\n"]},"metadata":{},"sourceType":"module"}