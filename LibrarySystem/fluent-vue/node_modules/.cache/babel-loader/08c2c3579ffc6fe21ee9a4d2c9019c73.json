{"ast":null,"code":"import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n * {@link https://en.wikipedia.org/wiki/CIE_1931_color_space | XYZ color space}\n *\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\n\nexport class ColorXYZ {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Construct a {@link ColorXYZ} from a config object.\n   */\n\n\n  static fromObject(data) {\n    if (data && !isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {\n      return new ColorXYZ(data.x, data.y, data.z);\n    }\n\n    return null;\n  }\n  /**\n   * Determines if a color is equal to another\n   * @param rhs - the value to compare\n   */\n\n\n  equalValue(rhs) {\n    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;\n  }\n  /**\n   * Returns a new {@link ColorXYZ} rounded to the provided precision\n   * @param precision - the precision to round to\n   */\n\n\n  roundToPrecision(precision) {\n    return new ColorXYZ(roundToPrecisionSmall(this.x, precision), roundToPrecisionSmall(this.y, precision), roundToPrecisionSmall(this.z, precision));\n  }\n  /**\n   * Returns the {@link ColorXYZ} formatted as an object.\n   */\n\n\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    };\n  }\n\n}\n/**\n * D65 2 degree white point\n */\n\nColorXYZ.whitePoint = new ColorXYZ(0.95047, 1.0, 1.08883);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-colors/dist/color-xyz.js"],"names":["roundToPrecisionSmall","ColorXYZ","constructor","x","y","z","fromObject","data","isNaN","equalValue","rhs","roundToPrecision","precision","toObject","whitePoint"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,kBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACjB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACH;AACD;AACJ;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,QAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACJ,CAAN,CAAd,IAA0B,CAACK,KAAK,CAACD,IAAI,CAACH,CAAN,CAAhC,IAA4C,CAACI,KAAK,CAACD,IAAI,CAACF,CAAN,CAAtD,EAAgE;AAC5D,aAAO,IAAIJ,QAAJ,CAAaM,IAAI,CAACJ,CAAlB,EAAqBI,IAAI,CAACH,CAA1B,EAA6BG,IAAI,CAACF,CAAlC,CAAP;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,WAAO,KAAKP,CAAL,KAAWO,GAAG,CAACP,CAAf,IAAoB,KAAKC,CAAL,KAAWM,GAAG,CAACN,CAAnC,IAAwC,KAAKC,CAAL,KAAWK,GAAG,CAACL,CAA9D;AACH;AACD;AACJ;AACA;AACA;;;AACIM,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,WAAO,IAAIX,QAAJ,CAAaD,qBAAqB,CAAC,KAAKG,CAAN,EAASS,SAAT,CAAlC,EAAuDZ,qBAAqB,CAAC,KAAKI,CAAN,EAASQ,SAAT,CAA5E,EAAiGZ,qBAAqB,CAAC,KAAKK,CAAN,EAASO,SAAT,CAAtH,CAAP;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,WAAO;AAAEV,MAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,MAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,MAAAA,CAAC,EAAE,KAAKA;AAAhC,KAAP;AACH;;AAlCiB;AAoCtB;AACA;AACA;;AACAJ,QAAQ,CAACa,UAAT,GAAsB,IAAIb,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,OAA3B,CAAtB","sourcesContent":["import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n * {@link https://en.wikipedia.org/wiki/CIE_1931_color_space | XYZ color space}\n *\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nexport class ColorXYZ {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n     * Construct a {@link ColorXYZ} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.x) && !isNaN(data.y) && !isNaN(data.z)) {\n            return new ColorXYZ(data.x, data.y, data.z);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z;\n    }\n    /**\n     * Returns a new {@link ColorXYZ} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorXYZ(roundToPrecisionSmall(this.x, precision), roundToPrecisionSmall(this.y, precision), roundToPrecisionSmall(this.z, precision));\n    }\n    /**\n     * Returns the {@link ColorXYZ} formatted as an object.\n     */\n    toObject() {\n        return { x: this.x, y: this.y, z: this.z };\n    }\n}\n/**\n * D65 2 degree white point\n */\nColorXYZ.whitePoint = new ColorXYZ(0.95047, 1.0, 1.08883);\n"]},"metadata":{},"sourceType":"module"}