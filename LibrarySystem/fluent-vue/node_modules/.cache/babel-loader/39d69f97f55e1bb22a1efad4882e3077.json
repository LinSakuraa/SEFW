{"ast":null,"code":"import { defineComponent, onMounted, onBeforeUnmount, watchEffect, reactive } from 'vue';\nconst countdownProps = {\n  duration: {\n    type: Number,\n    default: 0\n  },\n  active: {\n    type: Boolean,\n    default: true\n  },\n  precision: {\n    type: Number,\n    default: 0\n  },\n  render: Function,\n  onFinish: Function\n};\nexport default defineComponent({\n  name: 'Countdown',\n  props: countdownProps,\n\n  setup(props) {\n    let timerId = null;\n    let rafId = null;\n    let elapsed = 0;\n    let finished = false;\n    const timeInfo = reactive({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0\n    });\n    deriveDisplayValue(props.duration);\n    let pnow = -1;\n\n    function getDistance(time) {\n      return props.duration - elapsed + pnow - time;\n    }\n\n    function deriveDisplayValue(distance) {\n      const hours = Math.floor(distance / 3600000);\n      const minutes = Math.floor(distance % 3600000 / 60000);\n      const seconds = Math.floor(distance % 60000 / 1000);\n      const milliseconds = Math.floor(distance % 1000);\n      timeInfo.hours = hours;\n      timeInfo.minutes = minutes;\n      timeInfo.seconds = seconds;\n      timeInfo.milliseconds = milliseconds;\n    }\n\n    function getDisplayValue(info) {\n      const {\n        hours,\n        minutes,\n        seconds,\n        milliseconds\n      } = info;\n      const {\n        precision\n      } = props;\n\n      switch (precision) {\n        case 0:\n          return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n\n        default:\n          return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}.${String(Math.floor(milliseconds / (precision === 1 ? 100 : precision === 2 ? 10 : 1))).padStart(precision, '0')}`;\n      }\n    }\n\n    const frame = () => {\n      var _a;\n\n      const {\n        precision\n      } = props;\n      const distance = getDistance(performance.now());\n\n      if (distance <= 0) {\n        deriveDisplayValue(0);\n        stopTimer();\n\n        if (!finished) {\n          (_a = props.onFinish) === null || _a === void 0 ? void 0 : _a.call(props);\n          finished = true;\n        }\n\n        return;\n      }\n\n      let leftTime;\n\n      switch (precision) {\n        case 3:\n        case 2:\n          leftTime = distance % 34; // about 30 fps\n\n          break;\n\n        case 1:\n          leftTime = distance % 100;\n          break;\n\n        default:\n          leftTime = distance % 1000;\n      }\n\n      deriveDisplayValue(distance);\n      timerId = window.setTimeout(() => {\n        frame();\n      }, leftTime);\n    };\n\n    const stopTimer = () => {\n      if (timerId !== null) {\n        window.clearTimeout(timerId);\n        timerId = null;\n      }\n\n      if (rafId !== null) {\n        window.cancelAnimationFrame(rafId);\n        rafId = null;\n      }\n    };\n\n    onMounted(() => {\n      watchEffect(() => {\n        if (props.active) {\n          pnow = performance.now();\n          frame();\n        } else {\n          const now = performance.now();\n\n          if (pnow !== -1) {\n            elapsed += now - pnow;\n          }\n\n          stopTimer();\n        }\n      });\n    });\n    onBeforeUnmount(() => {\n      stopTimer();\n    });\n    return () => {\n      const {\n        render\n      } = props;\n\n      if (render) {\n        return render(timeInfo);\n      } else {\n        return getDisplayValue(timeInfo);\n      }\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/countdown/src/Countdown.js"],"names":["defineComponent","onMounted","onBeforeUnmount","watchEffect","reactive","countdownProps","duration","type","Number","default","active","Boolean","precision","render","Function","onFinish","name","props","setup","timerId","rafId","elapsed","finished","timeInfo","hours","minutes","seconds","milliseconds","deriveDisplayValue","pnow","getDistance","time","distance","Math","floor","getDisplayValue","info","String","padStart","frame","_a","performance","now","stopTimer","call","leftTime","window","setTimeout","clearTimeout","cancelAnimationFrame"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,SAA1B,EAAqCC,eAArC,EAAsDC,WAAtD,EAAmEC,QAAnE,QAAmF,KAAnF;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,OAAO,EAAE;AAFH,GADS;AAKnBC,EAAAA,MAAM,EAAE;AACJH,IAAAA,IAAI,EAAEI,OADF;AAEJF,IAAAA,OAAO,EAAE;AAFL,GALW;AASnBG,EAAAA,SAAS,EAAE;AACPL,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,OAAO,EAAE;AAFF,GATQ;AAanBI,EAAAA,MAAM,EAAEC,QAbW;AAcnBC,EAAAA,QAAQ,EAAED;AAdS,CAAvB;AAgBA,eAAed,eAAe,CAAC;AAC3BgB,EAAAA,IAAI,EAAE,WADqB;AAE3BC,EAAAA,KAAK,EAAEZ,cAFoB;;AAG3Ba,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACT,QAAIE,OAAO,GAAG,IAAd;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,QAAQ,GAAG,KAAf;AACA,UAAMC,QAAQ,GAAGnB,QAAQ,CAAC;AACtBoB,MAAAA,KAAK,EAAE,CADe;AAEtBC,MAAAA,OAAO,EAAE,CAFa;AAGtBC,MAAAA,OAAO,EAAE,CAHa;AAItBC,MAAAA,YAAY,EAAE;AAJQ,KAAD,CAAzB;AAMAC,IAAAA,kBAAkB,CAACX,KAAK,CAACX,QAAP,CAAlB;AACA,QAAIuB,IAAI,GAAG,CAAC,CAAZ;;AACA,aAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvB,aAAOd,KAAK,CAACX,QAAN,GAAiBe,OAAjB,GAA2BQ,IAA3B,GAAkCE,IAAzC;AACH;;AACD,aAASH,kBAAT,CAA4BI,QAA5B,EAAsC;AAClC,YAAMR,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWF,QAAQ,GAAG,OAAtB,CAAd;AACA,YAAMP,OAAO,GAAGQ,IAAI,CAACC,KAAL,CAAYF,QAAQ,GAAG,OAAZ,GAAuB,KAAlC,CAAhB;AACA,YAAMN,OAAO,GAAGO,IAAI,CAACC,KAAL,CAAYF,QAAQ,GAAG,KAAZ,GAAqB,IAAhC,CAAhB;AACA,YAAML,YAAY,GAAGM,IAAI,CAACC,KAAL,CAAWF,QAAQ,GAAG,IAAtB,CAArB;AACAT,MAAAA,QAAQ,CAACC,KAAT,GAAiBA,KAAjB;AACAD,MAAAA,QAAQ,CAACE,OAAT,GAAmBA,OAAnB;AACAF,MAAAA,QAAQ,CAACG,OAAT,GAAmBA,OAAnB;AACAH,MAAAA,QAAQ,CAACI,YAAT,GAAwBA,YAAxB;AACH;;AACD,aAASQ,eAAT,CAAyBC,IAAzB,EAA+B;AAC3B,YAAM;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,OAAT;AAAkBC,QAAAA,OAAlB;AAA2BC,QAAAA;AAA3B,UAA4CS,IAAlD;AACA,YAAM;AAAExB,QAAAA;AAAF,UAAgBK,KAAtB;;AACA,cAAQL,SAAR;AACI,aAAK,CAAL;AACI,iBAAQ,GAAEyB,MAAM,CAACb,KAAD,CAAN,CAAcc,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAA+B,IAAGD,MAAM,CAACZ,OAAD,CAAN,CAAgBa,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAiC,IAAGD,MAAM,CAACX,OAAD,CAAN,CAAgBY,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAiC,EAAjH;;AACJ;AACI,iBAAQ,GAAED,MAAM,CAACb,KAAD,CAAN,CAAcc,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAA+B,IAAGD,MAAM,CAACZ,OAAD,CAAN,CAAgBa,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAiC,IAAGD,MAAM,CAACX,OAAD,CAAN,CAAgBY,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAiC,IAAGD,MAAM,CAACJ,IAAI,CAACC,KAAL,CAAWP,YAAY,IAAIf,SAAS,KAAK,CAAd,GAAkB,GAAlB,GAAwBA,SAAS,KAAK,CAAd,GAAkB,EAAlB,GAAuB,CAAnD,CAAvB,CAAD,CAAN,CAAsF0B,QAAtF,CAA+F1B,SAA/F,EAA0G,GAA1G,CAA+G,EAAnO;AAJR;AAMH;;AACD,UAAM2B,KAAK,GAAG,MAAM;AAChB,UAAIC,EAAJ;;AACA,YAAM;AAAE5B,QAAAA;AAAF,UAAgBK,KAAtB;AACA,YAAMe,QAAQ,GAAGF,WAAW,CAACW,WAAW,CAACC,GAAZ,EAAD,CAA5B;;AACA,UAAIV,QAAQ,IAAI,CAAhB,EAAmB;AACfJ,QAAAA,kBAAkB,CAAC,CAAD,CAAlB;AACAe,QAAAA,SAAS;;AACT,YAAI,CAACrB,QAAL,EAAe;AACX,WAACkB,EAAE,GAAGvB,KAAK,CAACF,QAAZ,MAA0B,IAA1B,IAAkCyB,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACI,IAAH,CAAQ3B,KAAR,CAA3D;AACAK,UAAAA,QAAQ,GAAG,IAAX;AACH;;AACD;AACH;;AACD,UAAIuB,QAAJ;;AACA,cAAQjC,SAAR;AACI,aAAK,CAAL;AACA,aAAK,CAAL;AACIiC,UAAAA,QAAQ,GAAGb,QAAQ,GAAG,EAAtB,CADJ,CAC8B;;AAC1B;;AACJ,aAAK,CAAL;AACIa,UAAAA,QAAQ,GAAGb,QAAQ,GAAG,GAAtB;AACA;;AACJ;AACIa,UAAAA,QAAQ,GAAGb,QAAQ,GAAG,IAAtB;AATR;;AAWAJ,MAAAA,kBAAkB,CAACI,QAAD,CAAlB;AACAb,MAAAA,OAAO,GAAG2B,MAAM,CAACC,UAAP,CAAkB,MAAM;AAC9BR,QAAAA,KAAK;AACR,OAFS,EAEPM,QAFO,CAAV;AAGH,KA7BD;;AA8BA,UAAMF,SAAS,GAAG,MAAM;AACpB,UAAIxB,OAAO,KAAK,IAAhB,EAAsB;AAClB2B,QAAAA,MAAM,CAACE,YAAP,CAAoB7B,OAApB;AACAA,QAAAA,OAAO,GAAG,IAAV;AACH;;AACD,UAAIC,KAAK,KAAK,IAAd,EAAoB;AAChB0B,QAAAA,MAAM,CAACG,oBAAP,CAA4B7B,KAA5B;AACAA,QAAAA,KAAK,GAAG,IAAR;AACH;AACJ,KATD;;AAUAnB,IAAAA,SAAS,CAAC,MAAM;AACZE,MAAAA,WAAW,CAAC,MAAM;AACd,YAAIc,KAAK,CAACP,MAAV,EAAkB;AACdmB,UAAAA,IAAI,GAAGY,WAAW,CAACC,GAAZ,EAAP;AACAH,UAAAA,KAAK;AACR,SAHD,MAIK;AACD,gBAAMG,GAAG,GAAGD,WAAW,CAACC,GAAZ,EAAZ;;AACA,cAAIb,IAAI,KAAK,CAAC,CAAd,EAAiB;AACbR,YAAAA,OAAO,IAAIqB,GAAG,GAAGb,IAAjB;AACH;;AACDc,UAAAA,SAAS;AACZ;AACJ,OAZU,CAAX;AAaH,KAdQ,CAAT;AAeAzC,IAAAA,eAAe,CAAC,MAAM;AAClByC,MAAAA,SAAS;AACZ,KAFc,CAAf;AAGA,WAAO,MAAM;AACT,YAAM;AAAE9B,QAAAA;AAAF,UAAaI,KAAnB;;AACA,UAAIJ,MAAJ,EAAY;AACR,eAAOA,MAAM,CAACU,QAAD,CAAb;AACH,OAFD,MAGK;AACD,eAAOY,eAAe,CAACZ,QAAD,CAAtB;AACH;AACJ,KARD;AASH;;AA1G0B,CAAD,CAA9B","sourcesContent":["import { defineComponent, onMounted, onBeforeUnmount, watchEffect, reactive } from 'vue';\nconst countdownProps = {\n    duration: {\n        type: Number,\n        default: 0\n    },\n    active: {\n        type: Boolean,\n        default: true\n    },\n    precision: {\n        type: Number,\n        default: 0\n    },\n    render: Function,\n    onFinish: Function\n};\nexport default defineComponent({\n    name: 'Countdown',\n    props: countdownProps,\n    setup(props) {\n        let timerId = null;\n        let rafId = null;\n        let elapsed = 0;\n        let finished = false;\n        const timeInfo = reactive({\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n            milliseconds: 0\n        });\n        deriveDisplayValue(props.duration);\n        let pnow = -1;\n        function getDistance(time) {\n            return props.duration - elapsed + pnow - time;\n        }\n        function deriveDisplayValue(distance) {\n            const hours = Math.floor(distance / 3600000);\n            const minutes = Math.floor((distance % 3600000) / 60000);\n            const seconds = Math.floor((distance % 60000) / 1000);\n            const milliseconds = Math.floor(distance % 1000);\n            timeInfo.hours = hours;\n            timeInfo.minutes = minutes;\n            timeInfo.seconds = seconds;\n            timeInfo.milliseconds = milliseconds;\n        }\n        function getDisplayValue(info) {\n            const { hours, minutes, seconds, milliseconds } = info;\n            const { precision } = props;\n            switch (precision) {\n                case 0:\n                    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n                default:\n                    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}.${String(Math.floor(milliseconds / (precision === 1 ? 100 : precision === 2 ? 10 : 1))).padStart(precision, '0')}`;\n            }\n        }\n        const frame = () => {\n            var _a;\n            const { precision } = props;\n            const distance = getDistance(performance.now());\n            if (distance <= 0) {\n                deriveDisplayValue(0);\n                stopTimer();\n                if (!finished) {\n                    (_a = props.onFinish) === null || _a === void 0 ? void 0 : _a.call(props);\n                    finished = true;\n                }\n                return;\n            }\n            let leftTime;\n            switch (precision) {\n                case 3:\n                case 2:\n                    leftTime = distance % 34; // about 30 fps\n                    break;\n                case 1:\n                    leftTime = distance % 100;\n                    break;\n                default:\n                    leftTime = distance % 1000;\n            }\n            deriveDisplayValue(distance);\n            timerId = window.setTimeout(() => {\n                frame();\n            }, leftTime);\n        };\n        const stopTimer = () => {\n            if (timerId !== null) {\n                window.clearTimeout(timerId);\n                timerId = null;\n            }\n            if (rafId !== null) {\n                window.cancelAnimationFrame(rafId);\n                rafId = null;\n            }\n        };\n        onMounted(() => {\n            watchEffect(() => {\n                if (props.active) {\n                    pnow = performance.now();\n                    frame();\n                }\n                else {\n                    const now = performance.now();\n                    if (pnow !== -1) {\n                        elapsed += now - pnow;\n                    }\n                    stopTimer();\n                }\n            });\n        });\n        onBeforeUnmount(() => {\n            stopTimer();\n        });\n        return () => {\n            const { render } = props;\n            if (render) {\n                return render(timeInfo);\n            }\n            else {\n                return getDisplayValue(timeInfo);\n            }\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}