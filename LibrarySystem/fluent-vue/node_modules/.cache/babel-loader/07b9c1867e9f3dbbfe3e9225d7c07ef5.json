{"ast":null,"code":"import { h, ref, defineComponent, computed, onMounted, onBeforeUnmount, mergeProps, Transition, watchEffect } from 'vue';\nimport { on, off } from 'evtd';\nimport { VResizeObserver } from 'vueuc';\nimport { useIsIos } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../../_mixins';\nimport { scrollbarLight } from '../styles';\nimport style from './styles/index.cssr';\nconst scrollbarProps = Object.assign(Object.assign({}, useTheme.props), {\n  size: {\n    type: Number,\n    default: 5\n  },\n  duration: {\n    type: Number,\n    default: 0\n  },\n  scrollable: {\n    type: Boolean,\n    default: true\n  },\n  xScrollable: Boolean,\n  useUnifiedContainer: Boolean,\n  triggerDisplayManually: Boolean,\n  // If container is set, resize observer won't not attached\n  container: Function,\n  content: Function,\n  containerClass: String,\n  containerStyle: [String, Object],\n  contentClass: String,\n  contentStyle: [String, Object],\n  horizontalRailStyle: [String, Object],\n  verticalRailStyle: [String, Object],\n  onScroll: Function,\n  onWheel: Function,\n  onResize: Function,\n  internalOnUpdateScrollLeft: Function\n});\nconst Scrollbar = defineComponent({\n  name: 'Scrollbar',\n  props: scrollbarProps,\n  inheritAttrs: false,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props); // dom ref\n\n    const wrapperRef = ref(null);\n    const containerRef = ref(null);\n    const contentRef = ref(null);\n    const yRailRef = ref(null);\n    const xRailRef = ref(null); // data ref\n\n    const contentHeightRef = ref(null);\n    const contentWidthRef = ref(null);\n    const containerHeightRef = ref(null);\n    const containerWidthRef = ref(null);\n    const yRailSizeRef = ref(null);\n    const xRailSizeRef = ref(null);\n    const containerScrollTopRef = ref(0);\n    const containerScrollLeftRef = ref(0);\n    const isShowXBarRef = ref(false);\n    const isShowYBarRef = ref(false);\n    let yBarPressed = false;\n    let xBarPressed = false;\n    let xBarVanishTimerId;\n    let yBarVanishTimerId;\n    let memoYTop = 0;\n    let memoXLeft = 0;\n    let memoMouseX = 0;\n    let memoMouseY = 0;\n    const isIos = useIsIos();\n    const yBarSizeRef = computed(() => {\n      const {\n        value: containerHeight\n      } = containerHeightRef;\n      const {\n        value: contentHeight\n      } = contentHeightRef;\n      const {\n        value: yRailSize\n      } = yRailSizeRef;\n\n      if (containerHeight === null || contentHeight === null || yRailSize === null) {\n        return 0;\n      } else {\n        return Math.min(containerHeight, yRailSize * containerHeight / contentHeight + props.size * 1.5);\n      }\n    });\n    const yBarSizePxRef = computed(() => {\n      return `${yBarSizeRef.value}px`;\n    });\n    const xBarSizeRef = computed(() => {\n      const {\n        value: containerWidth\n      } = containerWidthRef;\n      const {\n        value: contentWidth\n      } = contentWidthRef;\n      const {\n        value: xRailSize\n      } = xRailSizeRef;\n\n      if (containerWidth === null || contentWidth === null || xRailSize === null) {\n        return 0;\n      } else {\n        return xRailSize * containerWidth / contentWidth + props.size * 1.5;\n      }\n    });\n    const xBarSizePxRef = computed(() => {\n      return `${xBarSizeRef.value}px`;\n    });\n    const yBarTopRef = computed(() => {\n      const {\n        value: containerHeight\n      } = containerHeightRef;\n      const {\n        value: containerScrollTop\n      } = containerScrollTopRef;\n      const {\n        value: contentHeight\n      } = contentHeightRef;\n      const {\n        value: yRailSize\n      } = yRailSizeRef;\n\n      if (containerHeight === null || contentHeight === null || yRailSize === null) {\n        return 0;\n      } else {\n        const heightDiff = contentHeight - containerHeight;\n        if (!heightDiff) return 0;\n        return containerScrollTop / heightDiff * (yRailSize - yBarSizeRef.value);\n      }\n    });\n    const yBarTopPxRef = computed(() => {\n      return `${yBarTopRef.value}px`;\n    });\n    const xBarLeftRef = computed(() => {\n      const {\n        value: containerWidth\n      } = containerWidthRef;\n      const {\n        value: containerScrollLeft\n      } = containerScrollLeftRef;\n      const {\n        value: contentWidth\n      } = contentWidthRef;\n      const {\n        value: xRailSize\n      } = xRailSizeRef;\n\n      if (containerWidth === null || contentWidth === null || xRailSize === null) {\n        return 0;\n      } else {\n        const widthDiff = contentWidth - containerWidth;\n        if (!widthDiff) return 0;\n        return containerScrollLeft / widthDiff * (xRailSize - xBarSizeRef.value);\n      }\n    });\n    const xBarLeftPxRef = computed(() => {\n      return `${xBarLeftRef.value}px`;\n    });\n    const needYBarRef = computed(() => {\n      const {\n        value: containerHeight\n      } = containerHeightRef;\n      const {\n        value: contentHeight\n      } = contentHeightRef;\n      return containerHeight !== null && contentHeight !== null && contentHeight > containerHeight;\n    });\n    const needXBarRef = computed(() => {\n      const {\n        value: containerWidth\n      } = containerWidthRef;\n      const {\n        value: contentWidth\n      } = contentWidthRef;\n      return containerWidth !== null && contentWidth !== null && contentWidth > containerWidth;\n    });\n    const mergedContainerRef = computed(() => {\n      const {\n        container\n      } = props;\n      if (container) return container();\n      return containerRef.value;\n    });\n    const mergedContentRef = computed(() => {\n      const {\n        content\n      } = props;\n      if (content) return content();\n      return contentRef.value;\n    }); // methods\n\n    const handleContentResize = sync;\n\n    const handleContainerResize = e => {\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      sync();\n    };\n\n    const scrollTo = (options, y) => {\n      if (!props.scrollable) return;\n\n      if (typeof options === 'number') {\n        scrollToPosition(options, y !== null && y !== void 0 ? y : 0, 0, false, 'auto');\n        return;\n      }\n\n      const {\n        left,\n        top,\n        index,\n        elSize,\n        position,\n        behavior,\n        el,\n        debounce = true\n      } = options;\n\n      if (left !== undefined || top !== undefined) {\n        scrollToPosition(left !== null && left !== void 0 ? left : 0, top !== null && top !== void 0 ? top : 0, 0, false, behavior);\n      }\n\n      if (el !== undefined) {\n        scrollToPosition(0, el.offsetTop, el.offsetHeight, debounce, behavior);\n      } else if (index !== undefined && elSize !== undefined) {\n        scrollToPosition(0, index * elSize, elSize, debounce, behavior);\n      } else if (position === 'bottom') {\n        scrollToPosition(0, Number.MAX_SAFE_INTEGER, 0, false, behavior);\n      } else if (position === 'top') {\n        scrollToPosition(0, 0, 0, false, behavior);\n      }\n    };\n\n    const scrollBy = (options, y) => {\n      if (!props.scrollable) return;\n      const {\n        value: container\n      } = mergedContainerRef;\n      if (!container) return;\n\n      if (typeof options === 'object') {\n        container.scrollBy(options);\n      } else {\n        container.scrollBy(options, y || 0);\n      }\n    };\n\n    function scrollToPosition(left, top, elSize, debounce, behavior) {\n      const {\n        value: container\n      } = mergedContainerRef;\n      if (!container) return;\n\n      if (debounce) {\n        const {\n          scrollTop,\n          offsetHeight\n        } = container;\n\n        if (top > scrollTop) {\n          if (top + elSize <= scrollTop + offsetHeight) {// do nothing\n          } else {\n            container.scrollTo({\n              left,\n              top: top + elSize - offsetHeight,\n              behavior\n            });\n          }\n\n          return;\n        }\n      }\n\n      container.scrollTo({\n        left,\n        top,\n        behavior\n      });\n    }\n\n    function handleMouseEnterWrapper() {\n      showXBar();\n      showYBar();\n      sync();\n    }\n\n    function handleMouseLeaveWrapper() {\n      hideBar();\n    }\n\n    function hideBar() {\n      hideYBar();\n      hideXBar();\n    }\n\n    function hideYBar() {\n      if (yBarVanishTimerId !== undefined) {\n        window.clearTimeout(yBarVanishTimerId);\n      }\n\n      yBarVanishTimerId = window.setTimeout(() => {\n        isShowYBarRef.value = false;\n      }, props.duration);\n    }\n\n    function hideXBar() {\n      if (xBarVanishTimerId !== undefined) {\n        window.clearTimeout(xBarVanishTimerId);\n      }\n\n      xBarVanishTimerId = window.setTimeout(() => {\n        isShowXBarRef.value = false;\n      }, props.duration);\n    }\n\n    function showXBar() {\n      if (xBarVanishTimerId !== undefined) {\n        window.clearTimeout(xBarVanishTimerId);\n      }\n\n      isShowXBarRef.value = true;\n    }\n\n    function showYBar() {\n      if (yBarVanishTimerId !== undefined) {\n        window.clearTimeout(yBarVanishTimerId);\n      }\n\n      isShowYBarRef.value = true;\n    }\n\n    function handleScroll(e) {\n      const {\n        onScroll\n      } = props;\n      if (onScroll) onScroll(e);\n      syncScrollState();\n    }\n\n    function syncScrollState() {\n      // only collect scroll state, do not trigger any dom event\n      const {\n        value: container\n      } = mergedContainerRef;\n\n      if (container) {\n        containerScrollTopRef.value = container.scrollTop;\n        containerScrollLeftRef.value = container.scrollLeft;\n      }\n    }\n\n    function syncPositionState() {\n      // only collect position state, do not trigger any dom event\n      // Don't use getClientBoundingRect because element may be scale transformed\n      const {\n        value: content\n      } = mergedContentRef;\n\n      if (content) {\n        contentHeightRef.value = content.offsetHeight;\n        contentWidthRef.value = content.offsetWidth;\n      }\n\n      const {\n        value: container\n      } = mergedContainerRef;\n\n      if (container) {\n        containerHeightRef.value = container.offsetHeight;\n        containerWidthRef.value = container.offsetWidth;\n      }\n\n      const {\n        value: xRailEl\n      } = xRailRef;\n      const {\n        value: yRailEl\n      } = yRailRef;\n\n      if (xRailEl) {\n        xRailSizeRef.value = xRailEl.offsetWidth;\n      }\n\n      if (yRailEl) {\n        yRailSizeRef.value = yRailEl.offsetHeight;\n      }\n    }\n    /**\n     * Sometimes there's only one element that we can scroll,\n     * For example for textarea, there won't be a content element.\n     */\n\n\n    function syncUnifiedContainer() {\n      const {\n        value: container\n      } = mergedContainerRef;\n\n      if (container) {\n        containerScrollTopRef.value = container.scrollTop;\n        containerScrollLeftRef.value = container.scrollLeft;\n        containerHeightRef.value = container.offsetHeight;\n        containerWidthRef.value = container.offsetWidth;\n        contentHeightRef.value = container.scrollHeight;\n        contentWidthRef.value = container.scrollWidth;\n      }\n\n      const {\n        value: xRailEl\n      } = xRailRef;\n      const {\n        value: yRailEl\n      } = yRailRef;\n\n      if (xRailEl) {\n        xRailSizeRef.value = xRailEl.offsetWidth;\n      }\n\n      if (yRailEl) {\n        yRailSizeRef.value = yRailEl.offsetHeight;\n      }\n    }\n\n    function sync() {\n      if (!props.scrollable) return;\n\n      if (props.useUnifiedContainer) {\n        syncUnifiedContainer();\n      } else {\n        syncPositionState();\n        syncScrollState();\n      }\n    }\n\n    function isMouseUpAway(e) {\n      var _a;\n\n      return !((_a = wrapperRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.target));\n    }\n\n    function handleXScrollMouseDown(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      xBarPressed = true;\n      on('mousemove', window, handleXScrollMouseMove, true);\n      on('mouseup', window, handleXScrollMouseUp, true);\n      memoXLeft = containerScrollLeftRef.value;\n      memoMouseX = e.clientX;\n    }\n\n    function handleXScrollMouseMove(e) {\n      if (!xBarPressed) return;\n\n      if (xBarVanishTimerId !== undefined) {\n        window.clearTimeout(xBarVanishTimerId);\n      }\n\n      if (yBarVanishTimerId !== undefined) {\n        window.clearTimeout(yBarVanishTimerId);\n      }\n\n      const {\n        value: containerWidth\n      } = containerWidthRef;\n      const {\n        value: contentWidth\n      } = contentWidthRef;\n      const {\n        value: xBarSize\n      } = xBarSizeRef;\n      if (containerWidth === null || contentWidth === null) return;\n      const dX = e.clientX - memoMouseX;\n      const dScrollLeft = dX * (contentWidth - containerWidth) / (containerWidth - xBarSize);\n      const toScrollLeftUpperBound = contentWidth - containerWidth;\n      let toScrollLeft = memoXLeft + dScrollLeft;\n      toScrollLeft = Math.min(toScrollLeftUpperBound, toScrollLeft);\n      toScrollLeft = Math.max(toScrollLeft, 0);\n      const {\n        value: container\n      } = mergedContainerRef;\n\n      if (container) {\n        container.scrollLeft = toScrollLeft;\n        const {\n          internalOnUpdateScrollLeft\n        } = props;\n        if (internalOnUpdateScrollLeft) internalOnUpdateScrollLeft(toScrollLeft);\n      }\n    }\n\n    function handleXScrollMouseUp(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      off('mousemove', window, handleXScrollMouseMove, true);\n      off('mouseup', window, handleXScrollMouseUp, true);\n      xBarPressed = false;\n      sync();\n\n      if (isMouseUpAway(e)) {\n        hideBar();\n      }\n    }\n\n    function handleYScrollMouseDown(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      yBarPressed = true;\n      on('mousemove', window, handleYScrollMouseMove, true);\n      on('mouseup', window, handleYScrollMouseUp, true);\n      memoYTop = containerScrollTopRef.value;\n      memoMouseY = e.clientY;\n    }\n\n    function handleYScrollMouseMove(e) {\n      if (!yBarPressed) return;\n\n      if (xBarVanishTimerId !== undefined) {\n        window.clearTimeout(xBarVanishTimerId);\n      }\n\n      if (yBarVanishTimerId !== undefined) {\n        window.clearTimeout(yBarVanishTimerId);\n      }\n\n      const {\n        value: containerHeight\n      } = containerHeightRef;\n      const {\n        value: contentHeight\n      } = contentHeightRef;\n      const {\n        value: yBarSize\n      } = yBarSizeRef;\n      if (containerHeight === null || contentHeight === null) return;\n      const dY = e.clientY - memoMouseY;\n      const dScrollTop = dY * (contentHeight - containerHeight) / (containerHeight - yBarSize);\n      const toScrollTopUpperBound = contentHeight - containerHeight;\n      let toScrollTop = memoYTop + dScrollTop;\n      toScrollTop = Math.min(toScrollTopUpperBound, toScrollTop);\n      toScrollTop = Math.max(toScrollTop, 0);\n      const {\n        value: container\n      } = mergedContainerRef;\n\n      if (container) {\n        container.scrollTop = toScrollTop;\n      }\n    }\n\n    function handleYScrollMouseUp(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      off('mousemove', window, handleYScrollMouseMove, true);\n      off('mouseup', window, handleYScrollMouseUp, true);\n      yBarPressed = false;\n      sync();\n\n      if (isMouseUpAway(e)) {\n        hideBar();\n      }\n    }\n\n    watchEffect(() => {\n      const {\n        value: needXBar\n      } = needXBarRef;\n      const {\n        value: needYBar\n      } = needYBarRef;\n      const {\n        value: mergedClsPrefix\n      } = mergedClsPrefixRef;\n      const {\n        value: xRailEl\n      } = xRailRef;\n      const {\n        value: yRailEl\n      } = yRailRef;\n\n      if (xRailEl) {\n        if (!needXBar) {\n          xRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n        } else {\n          xRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n        }\n      }\n\n      if (yRailEl) {\n        if (!needYBar) {\n          yRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n        } else {\n          yRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n        }\n      }\n    });\n    onMounted(() => {\n      // if container exist, it always can't be resolved when scrollbar is mounted\n      // for example:\n      // - component\n      //   - scrollbar\n      //     - inner\n      // if you pass inner to scrollbar, you may use a ref inside component\n      // however, when scrollbar is mounted, ref is not ready at component\n      // you need to init by yourself\n      if (props.container) return;\n      sync();\n    });\n    onBeforeUnmount(() => {\n      if (xBarVanishTimerId !== undefined) {\n        window.clearTimeout(xBarVanishTimerId);\n      }\n\n      if (yBarVanishTimerId !== undefined) {\n        window.clearTimeout(yBarVanishTimerId);\n      }\n\n      off('mousemove', window, handleYScrollMouseMove, true);\n      off('mouseup', window, handleYScrollMouseUp, true);\n    });\n    const themeRef = useTheme('Scrollbar', '-scrollbar', style, scrollbarLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          scrollbarBorderRadius,\n          scrollbarHeight,\n          scrollbarWidth\n        },\n        self: {\n          color,\n          colorHover\n        }\n      } = themeRef.value;\n      return {\n        '--n-scrollbar-bezier': cubicBezierEaseInOut,\n        '--n-scrollbar-color': color,\n        '--n-scrollbar-color-hover': colorHover,\n        '--n-scrollbar-border-radius': scrollbarBorderRadius,\n        '--n-scrollbar-width': scrollbarWidth,\n        '--n-scrollbar-height': scrollbarHeight\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('scrollbar', undefined, cssVarsRef, props) : undefined;\n    const exposedMethods = {\n      scrollTo,\n      scrollBy,\n      sync,\n      syncUnifiedContainer,\n      handleMouseEnterWrapper,\n      handleMouseLeaveWrapper\n    };\n    return Object.assign(Object.assign({}, exposedMethods), {\n      mergedClsPrefix: mergedClsPrefixRef,\n      containerScrollTop: containerScrollTopRef,\n      wrapperRef,\n      containerRef,\n      contentRef,\n      yRailRef,\n      xRailRef,\n      needYBar: needYBarRef,\n      needXBar: needXBarRef,\n      yBarSizePx: yBarSizePxRef,\n      xBarSizePx: xBarSizePxRef,\n      yBarTopPx: yBarTopPxRef,\n      xBarLeftPx: xBarLeftPxRef,\n      isShowXBar: isShowXBarRef,\n      isShowYBar: isShowYBarRef,\n      isIos,\n      handleScroll,\n      handleContentResize,\n      handleContainerResize,\n      handleYScrollMouseDown,\n      handleXScrollMouseDown,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    });\n  },\n\n  render() {\n    var _a;\n\n    const {\n      $slots,\n      mergedClsPrefix,\n      triggerDisplayManually\n    } = this;\n    if (!this.scrollable) return (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);\n\n    const createChildren = () => {\n      var _a, _b;\n\n      (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n      return h('div', mergeProps(this.$attrs, {\n        role: 'none',\n        ref: 'wrapperRef',\n        class: [`${mergedClsPrefix}-scrollbar`, this.themeClass],\n        style: this.cssVars,\n        onMouseenter: triggerDisplayManually ? undefined : this.handleMouseEnterWrapper,\n        onMouseleave: triggerDisplayManually ? undefined : this.handleMouseLeaveWrapper\n      }), [this.container ? (_b = $slots.default) === null || _b === void 0 ? void 0 : _b.call($slots) : h(\"div\", {\n        role: \"none\",\n        ref: \"containerRef\",\n        class: [`${mergedClsPrefix}-scrollbar-container`, this.containerClass],\n        style: this.containerStyle,\n        onScroll: this.handleScroll,\n        onWheel: this.onWheel\n      }, h(VResizeObserver, {\n        onResize: this.handleContentResize\n      }, {\n        default: () => h(\"div\", {\n          ref: \"contentRef\",\n          role: \"none\",\n          style: [{\n            width: this.xScrollable ? 'fit-content' : null\n          }, this.contentStyle],\n          class: [`${mergedClsPrefix}-scrollbar-content`, this.contentClass]\n        }, $slots)\n      })), h(\"div\", {\n        ref: \"yRailRef\",\n        class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--vertical`,\n        style: this.horizontalRailStyle,\n        \"aria-hidden\": true\n      }, h(Transition, {\n        name: \"fade-in-transition\"\n      }, {\n        default: () => this.needYBar && this.isShowYBar && !this.isIos ? h(\"div\", {\n          class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`,\n          style: {\n            height: this.yBarSizePx,\n            top: this.yBarTopPx\n          },\n          onMousedown: this.handleYScrollMouseDown\n        }) : null\n      })), h(\"div\", {\n        ref: \"xRailRef\",\n        class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--horizontal`,\n        style: this.verticalRailStyle,\n        \"aria-hidden\": true\n      }, h(Transition, {\n        name: \"fade-in-transition\"\n      }, {\n        default: () => this.needXBar && this.isShowXBar && !this.isIos ? h(\"div\", {\n          class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`,\n          style: {\n            width: this.xBarSizePx,\n            left: this.xBarLeftPx\n          },\n          onMousedown: this.handleXScrollMouseDown\n        }) : null\n      }))]);\n    };\n\n    return this.container ? createChildren() : h(VResizeObserver, {\n      onResize: this.handleContainerResize\n    }, {\n      default: createChildren\n    });\n  }\n\n});\nexport default Scrollbar;\nexport const XScrollbar = Scrollbar;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_internal/scrollbar/src/ScrollBar.js"],"names":["h","ref","defineComponent","computed","onMounted","onBeforeUnmount","mergeProps","Transition","watchEffect","on","off","VResizeObserver","useIsIos","useConfig","useTheme","useThemeClass","scrollbarLight","style","scrollbarProps","Object","assign","props","size","type","Number","default","duration","scrollable","Boolean","xScrollable","useUnifiedContainer","triggerDisplayManually","container","Function","content","containerClass","String","containerStyle","contentClass","contentStyle","horizontalRailStyle","verticalRailStyle","onScroll","onWheel","onResize","internalOnUpdateScrollLeft","Scrollbar","name","inheritAttrs","setup","mergedClsPrefixRef","inlineThemeDisabled","wrapperRef","containerRef","contentRef","yRailRef","xRailRef","contentHeightRef","contentWidthRef","containerHeightRef","containerWidthRef","yRailSizeRef","xRailSizeRef","containerScrollTopRef","containerScrollLeftRef","isShowXBarRef","isShowYBarRef","yBarPressed","xBarPressed","xBarVanishTimerId","yBarVanishTimerId","memoYTop","memoXLeft","memoMouseX","memoMouseY","isIos","yBarSizeRef","value","containerHeight","contentHeight","yRailSize","Math","min","yBarSizePxRef","xBarSizeRef","containerWidth","contentWidth","xRailSize","xBarSizePxRef","yBarTopRef","containerScrollTop","heightDiff","yBarTopPxRef","xBarLeftRef","containerScrollLeft","widthDiff","xBarLeftPxRef","needYBarRef","needXBarRef","mergedContainerRef","mergedContentRef","handleContentResize","sync","handleContainerResize","e","scrollTo","options","y","scrollToPosition","left","top","index","elSize","position","behavior","el","debounce","undefined","offsetTop","offsetHeight","MAX_SAFE_INTEGER","scrollBy","scrollTop","handleMouseEnterWrapper","showXBar","showYBar","handleMouseLeaveWrapper","hideBar","hideYBar","hideXBar","window","clearTimeout","setTimeout","handleScroll","syncScrollState","scrollLeft","syncPositionState","offsetWidth","xRailEl","yRailEl","syncUnifiedContainer","scrollHeight","scrollWidth","isMouseUpAway","_a","contains","target","handleXScrollMouseDown","preventDefault","stopPropagation","handleXScrollMouseMove","handleXScrollMouseUp","clientX","xBarSize","dX","dScrollLeft","toScrollLeftUpperBound","toScrollLeft","max","handleYScrollMouseDown","handleYScrollMouseMove","handleYScrollMouseUp","clientY","yBarSize","dY","dScrollTop","toScrollTopUpperBound","toScrollTop","needXBar","needYBar","mergedClsPrefix","classList","add","remove","themeRef","cssVarsRef","common","cubicBezierEaseInOut","scrollbarBorderRadius","scrollbarHeight","scrollbarWidth","self","color","colorHover","themeClassHandle","exposedMethods","yBarSizePx","xBarSizePx","yBarTopPx","xBarLeftPx","isShowXBar","isShowYBar","cssVars","themeClass","onRender","render","$slots","call","createChildren","_b","$attrs","role","class","onMouseenter","onMouseleave","width","height","onMousedown","XScrollbar"],"mappings":"AAAA,SAASA,CAAT,EAAYC,GAAZ,EAAiBC,eAAjB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,eAAvD,EAAwEC,UAAxE,EAAoFC,UAApF,EAAgGC,WAAhG,QAAmH,KAAnH;AACA,SAASC,EAAT,EAAaC,GAAb,QAAwB,MAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,kBAAnD;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAQ,CAACO,KAA3B,CAAd,EAAiD;AAAEC,EAAAA,IAAI,EAAE;AACxEC,IAAAA,IAAI,EAAEC,MADkE;AAExEC,IAAAA,OAAO,EAAE;AAF+D,GAAR;AAGjEC,EAAAA,QAAQ,EAAE;AACTH,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,OAAO,EAAE;AAFA,GAHuD;AAMjEE,EAAAA,UAAU,EAAE;AACXJ,IAAAA,IAAI,EAAEK,OADK;AAEXH,IAAAA,OAAO,EAAE;AAFE,GANqD;AASjEI,EAAAA,WAAW,EAAED,OAToD;AAS3CE,EAAAA,mBAAmB,EAAEF,OATsB;AASbG,EAAAA,sBAAsB,EAAEH,OATX;AAUpE;AACAI,EAAAA,SAAS,EAAEC,QAXyD;AAW/CC,EAAAA,OAAO,EAAED,QAXsC;AAW5BE,EAAAA,cAAc,EAAEC,MAXY;AAWJC,EAAAA,cAAc,EAAE,CAACD,MAAD,EAASjB,MAAT,CAXZ;AAW8BmB,EAAAA,YAAY,EAAEF,MAX5C;AAWoDG,EAAAA,YAAY,EAAE,CAACH,MAAD,EAASjB,MAAT,CAXlE;AAWoFqB,EAAAA,mBAAmB,EAAE,CAACJ,MAAD,EAASjB,MAAT,CAXzG;AAW2HsB,EAAAA,iBAAiB,EAAE,CAACL,MAAD,EAASjB,MAAT,CAX9I;AAWgKuB,EAAAA,QAAQ,EAAET,QAX1K;AAWoLU,EAAAA,OAAO,EAAEV,QAX7L;AAWuMW,EAAAA,QAAQ,EAAEX,QAXjN;AAW2NY,EAAAA,0BAA0B,EAAEZ;AAXvP,CAAjD,CAAvB;AAYA,MAAMa,SAAS,GAAG5C,eAAe,CAAC;AAC9B6C,EAAAA,IAAI,EAAE,WADwB;AAE9B1B,EAAAA,KAAK,EAAEH,cAFuB;AAG9B8B,EAAAA,YAAY,EAAE,KAHgB;;AAI9BC,EAAAA,KAAK,CAAC5B,KAAD,EAAQ;AACT,UAAM;AAAE6B,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA8CtC,SAAS,CAACQ,KAAD,CAA7D,CADS,CAET;;AACA,UAAM+B,UAAU,GAAGnD,GAAG,CAAC,IAAD,CAAtB;AACA,UAAMoD,YAAY,GAAGpD,GAAG,CAAC,IAAD,CAAxB;AACA,UAAMqD,UAAU,GAAGrD,GAAG,CAAC,IAAD,CAAtB;AACA,UAAMsD,QAAQ,GAAGtD,GAAG,CAAC,IAAD,CAApB;AACA,UAAMuD,QAAQ,GAAGvD,GAAG,CAAC,IAAD,CAApB,CAPS,CAQT;;AACA,UAAMwD,gBAAgB,GAAGxD,GAAG,CAAC,IAAD,CAA5B;AACA,UAAMyD,eAAe,GAAGzD,GAAG,CAAC,IAAD,CAA3B;AACA,UAAM0D,kBAAkB,GAAG1D,GAAG,CAAC,IAAD,CAA9B;AACA,UAAM2D,iBAAiB,GAAG3D,GAAG,CAAC,IAAD,CAA7B;AACA,UAAM4D,YAAY,GAAG5D,GAAG,CAAC,IAAD,CAAxB;AACA,UAAM6D,YAAY,GAAG7D,GAAG,CAAC,IAAD,CAAxB;AACA,UAAM8D,qBAAqB,GAAG9D,GAAG,CAAC,CAAD,CAAjC;AACA,UAAM+D,sBAAsB,GAAG/D,GAAG,CAAC,CAAD,CAAlC;AACA,UAAMgE,aAAa,GAAGhE,GAAG,CAAC,KAAD,CAAzB;AACA,UAAMiE,aAAa,GAAGjE,GAAG,CAAC,KAAD,CAAzB;AACA,QAAIkE,WAAW,GAAG,KAAlB;AACA,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,iBAAJ;AACA,QAAIC,iBAAJ;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,UAAMC,KAAK,GAAG/D,QAAQ,EAAtB;AACA,UAAMgE,WAAW,GAAGzE,QAAQ,CAAC,MAAM;AAC/B,YAAM;AAAE0E,QAAAA,KAAK,EAAEC;AAAT,UAA6BnB,kBAAnC;AACA,YAAM;AAAEkB,QAAAA,KAAK,EAAEE;AAAT,UAA2BtB,gBAAjC;AACA,YAAM;AAAEoB,QAAAA,KAAK,EAAEG;AAAT,UAAuBnB,YAA7B;;AACA,UAAIiB,eAAe,KAAK,IAApB,IACAC,aAAa,KAAK,IADlB,IAEAC,SAAS,KAAK,IAFlB,EAEwB;AACpB,eAAO,CAAP;AACH,OAJD,MAKK;AACD,eAAOC,IAAI,CAACC,GAAL,CAASJ,eAAT,EAA2BE,SAAS,GAAGF,eAAb,GAAgCC,aAAhC,GAAgD1D,KAAK,CAACC,IAAN,GAAa,GAAvF,CAAP;AACH;AACJ,KAZ2B,CAA5B;AAaA,UAAM6D,aAAa,GAAGhF,QAAQ,CAAC,MAAM;AACjC,aAAQ,GAAEyE,WAAW,CAACC,KAAM,IAA5B;AACH,KAF6B,CAA9B;AAGA,UAAMO,WAAW,GAAGjF,QAAQ,CAAC,MAAM;AAC/B,YAAM;AAAE0E,QAAAA,KAAK,EAAEQ;AAAT,UAA4BzB,iBAAlC;AACA,YAAM;AAAEiB,QAAAA,KAAK,EAAES;AAAT,UAA0B5B,eAAhC;AACA,YAAM;AAAEmB,QAAAA,KAAK,EAAEU;AAAT,UAAuBzB,YAA7B;;AACA,UAAIuB,cAAc,KAAK,IAAnB,IACAC,YAAY,KAAK,IADjB,IAEAC,SAAS,KAAK,IAFlB,EAEwB;AACpB,eAAO,CAAP;AACH,OAJD,MAKK;AACD,eAAQA,SAAS,GAAGF,cAAb,GAA+BC,YAA/B,GAA8CjE,KAAK,CAACC,IAAN,GAAa,GAAlE;AACH;AACJ,KAZ2B,CAA5B;AAaA,UAAMkE,aAAa,GAAGrF,QAAQ,CAAC,MAAM;AACjC,aAAQ,GAAEiF,WAAW,CAACP,KAAM,IAA5B;AACH,KAF6B,CAA9B;AAGA,UAAMY,UAAU,GAAGtF,QAAQ,CAAC,MAAM;AAC9B,YAAM;AAAE0E,QAAAA,KAAK,EAAEC;AAAT,UAA6BnB,kBAAnC;AACA,YAAM;AAAEkB,QAAAA,KAAK,EAAEa;AAAT,UAAgC3B,qBAAtC;AACA,YAAM;AAAEc,QAAAA,KAAK,EAAEE;AAAT,UAA2BtB,gBAAjC;AACA,YAAM;AAAEoB,QAAAA,KAAK,EAAEG;AAAT,UAAuBnB,YAA7B;;AACA,UAAIiB,eAAe,KAAK,IAApB,IACAC,aAAa,KAAK,IADlB,IAEAC,SAAS,KAAK,IAFlB,EAEwB;AACpB,eAAO,CAAP;AACH,OAJD,MAKK;AACD,cAAMW,UAAU,GAAGZ,aAAa,GAAGD,eAAnC;AACA,YAAI,CAACa,UAAL,EACI,OAAO,CAAP;AACJ,eAASD,kBAAkB,GAAGC,UAAtB,IAAqCX,SAAS,GAAGJ,WAAW,CAACC,KAA7D,CAAR;AACH;AACJ,KAhB0B,CAA3B;AAiBA,UAAMe,YAAY,GAAGzF,QAAQ,CAAC,MAAM;AAChC,aAAQ,GAAEsF,UAAU,CAACZ,KAAM,IAA3B;AACH,KAF4B,CAA7B;AAGA,UAAMgB,WAAW,GAAG1F,QAAQ,CAAC,MAAM;AAC/B,YAAM;AAAE0E,QAAAA,KAAK,EAAEQ;AAAT,UAA4BzB,iBAAlC;AACA,YAAM;AAAEiB,QAAAA,KAAK,EAAEiB;AAAT,UAAiC9B,sBAAvC;AACA,YAAM;AAAEa,QAAAA,KAAK,EAAES;AAAT,UAA0B5B,eAAhC;AACA,YAAM;AAAEmB,QAAAA,KAAK,EAAEU;AAAT,UAAuBzB,YAA7B;;AACA,UAAIuB,cAAc,KAAK,IAAnB,IACAC,YAAY,KAAK,IADjB,IAEAC,SAAS,KAAK,IAFlB,EAEwB;AACpB,eAAO,CAAP;AACH,OAJD,MAKK;AACD,cAAMQ,SAAS,GAAGT,YAAY,GAAGD,cAAjC;AACA,YAAI,CAACU,SAAL,EACI,OAAO,CAAP;AACJ,eAASD,mBAAmB,GAAGC,SAAvB,IAAqCR,SAAS,GAAGH,WAAW,CAACP,KAA7D,CAAR;AACH;AACJ,KAhB2B,CAA5B;AAiBA,UAAMmB,aAAa,GAAG7F,QAAQ,CAAC,MAAM;AACjC,aAAQ,GAAE0F,WAAW,CAAChB,KAAM,IAA5B;AACH,KAF6B,CAA9B;AAGA,UAAMoB,WAAW,GAAG9F,QAAQ,CAAC,MAAM;AAC/B,YAAM;AAAE0E,QAAAA,KAAK,EAAEC;AAAT,UAA6BnB,kBAAnC;AACA,YAAM;AAAEkB,QAAAA,KAAK,EAAEE;AAAT,UAA2BtB,gBAAjC;AACA,aAAQqB,eAAe,KAAK,IAApB,IACJC,aAAa,KAAK,IADd,IAEJA,aAAa,GAAGD,eAFpB;AAGH,KAN2B,CAA5B;AAOA,UAAMoB,WAAW,GAAG/F,QAAQ,CAAC,MAAM;AAC/B,YAAM;AAAE0E,QAAAA,KAAK,EAAEQ;AAAT,UAA4BzB,iBAAlC;AACA,YAAM;AAAEiB,QAAAA,KAAK,EAAES;AAAT,UAA0B5B,eAAhC;AACA,aAAQ2B,cAAc,KAAK,IAAnB,IACJC,YAAY,KAAK,IADb,IAEJA,YAAY,GAAGD,cAFnB;AAGH,KAN2B,CAA5B;AAOA,UAAMc,kBAAkB,GAAGhG,QAAQ,CAAC,MAAM;AACtC,YAAM;AAAE6B,QAAAA;AAAF,UAAgBX,KAAtB;AACA,UAAIW,SAAJ,EACI,OAAOA,SAAS,EAAhB;AACJ,aAAOqB,YAAY,CAACwB,KAApB;AACH,KALkC,CAAnC;AAMA,UAAMuB,gBAAgB,GAAGjG,QAAQ,CAAC,MAAM;AACpC,YAAM;AAAE+B,QAAAA;AAAF,UAAcb,KAApB;AACA,UAAIa,OAAJ,EACI,OAAOA,OAAO,EAAd;AACJ,aAAOoB,UAAU,CAACuB,KAAlB;AACH,KALgC,CAAjC,CAxHS,CA8HT;;AACA,UAAMwB,mBAAmB,GAAGC,IAA5B;;AACA,UAAMC,qBAAqB,GAAIC,CAAD,IAAO;AACjC,YAAM;AAAE5D,QAAAA;AAAF,UAAevB,KAArB;AACA,UAAIuB,QAAJ,EACIA,QAAQ,CAAC4D,CAAD,CAAR;AACJF,MAAAA,IAAI;AACP,KALD;;AAMA,UAAMG,QAAQ,GAAG,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC7B,UAAI,CAACtF,KAAK,CAACM,UAAX,EACI;;AACJ,UAAI,OAAO+E,OAAP,KAAmB,QAAvB,EAAiC;AAC7BE,QAAAA,gBAAgB,CAACF,OAAD,EAAUC,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAAK,CAAzB,GAA6BA,CAA7B,GAAiC,CAA3C,EAA8C,CAA9C,EAAiD,KAAjD,EAAwD,MAAxD,CAAhB;AACA;AACH;;AACD,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA,GAAR;AAAaC,QAAAA,KAAb;AAAoBC,QAAAA,MAApB;AAA4BC,QAAAA,QAA5B;AAAsCC,QAAAA,QAAtC;AAAgDC,QAAAA,EAAhD;AAAoDC,QAAAA,QAAQ,GAAG;AAA/D,UAAwEV,OAA9E;;AACA,UAAIG,IAAI,KAAKQ,SAAT,IAAsBP,GAAG,KAAKO,SAAlC,EAA6C;AACzCT,QAAAA,gBAAgB,CAACC,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0C,CAA3C,EAA8CC,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiCA,GAAjC,GAAuC,CAArF,EAAwF,CAAxF,EAA2F,KAA3F,EAAkGI,QAAlG,CAAhB;AACH;;AACD,UAAIC,EAAE,KAAKE,SAAX,EAAsB;AAClBT,QAAAA,gBAAgB,CAAC,CAAD,EAAIO,EAAE,CAACG,SAAP,EAAkBH,EAAE,CAACI,YAArB,EAAmCH,QAAnC,EAA6CF,QAA7C,CAAhB;AACH,OAFD,MAGK,IAAIH,KAAK,KAAKM,SAAV,IAAuBL,MAAM,KAAKK,SAAtC,EAAiD;AAClDT,QAAAA,gBAAgB,CAAC,CAAD,EAAIG,KAAK,GAAGC,MAAZ,EAAoBA,MAApB,EAA4BI,QAA5B,EAAsCF,QAAtC,CAAhB;AACH,OAFI,MAGA,IAAID,QAAQ,KAAK,QAAjB,EAA2B;AAC5BL,QAAAA,gBAAgB,CAAC,CAAD,EAAIpF,MAAM,CAACgG,gBAAX,EAA6B,CAA7B,EAAgC,KAAhC,EAAuCN,QAAvC,CAAhB;AACH,OAFI,MAGA,IAAID,QAAQ,KAAK,KAAjB,EAAwB;AACzBL,QAAAA,gBAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,EAAiBM,QAAjB,CAAhB;AACH;AACJ,KAvBD;;AAwBA,UAAMO,QAAQ,GAAG,CAACf,OAAD,EAAUC,CAAV,KAAgB;AAC7B,UAAI,CAACtF,KAAK,CAACM,UAAX,EACI;AACJ,YAAM;AAAEkD,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;AACA,UAAI,CAACnE,SAAL,EACI;;AACJ,UAAI,OAAO0E,OAAP,KAAmB,QAAvB,EAAiC;AAC7B1E,QAAAA,SAAS,CAACyF,QAAV,CAAmBf,OAAnB;AACH,OAFD,MAGK;AACD1E,QAAAA,SAAS,CAACyF,QAAV,CAAmBf,OAAnB,EAA4BC,CAAC,IAAI,CAAjC;AACH;AACJ,KAZD;;AAaA,aAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCE,MAArC,EAA6CI,QAA7C,EAAuDF,QAAvD,EAAiE;AAC7D,YAAM;AAAErC,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;AACA,UAAI,CAACnE,SAAL,EACI;;AACJ,UAAIoF,QAAJ,EAAc;AACV,cAAM;AAAEM,UAAAA,SAAF;AAAaH,UAAAA;AAAb,YAA8BvF,SAApC;;AACA,YAAI8E,GAAG,GAAGY,SAAV,EAAqB;AACjB,cAAIZ,GAAG,GAAGE,MAAN,IAAgBU,SAAS,GAAGH,YAAhC,EAA8C,CAC1C;AACH,WAFD,MAGK;AACDvF,YAAAA,SAAS,CAACyE,QAAV,CAAmB;AACfI,cAAAA,IADe;AAEfC,cAAAA,GAAG,EAAEA,GAAG,GAAGE,MAAN,GAAeO,YAFL;AAGfL,cAAAA;AAHe,aAAnB;AAKH;;AACD;AACH;AACJ;;AACDlF,MAAAA,SAAS,CAACyE,QAAV,CAAmB;AACfI,QAAAA,IADe;AAEfC,QAAAA,GAFe;AAGfI,QAAAA;AAHe,OAAnB;AAKH;;AACD,aAASS,uBAAT,GAAmC;AAC/BC,MAAAA,QAAQ;AACRC,MAAAA,QAAQ;AACRvB,MAAAA,IAAI;AACP;;AACD,aAASwB,uBAAT,GAAmC;AAC/BC,MAAAA,OAAO;AACV;;AACD,aAASA,OAAT,GAAmB;AACfC,MAAAA,QAAQ;AACRC,MAAAA,QAAQ;AACX;;AACD,aAASD,QAAT,GAAoB;AAChB,UAAI1D,iBAAiB,KAAK+C,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB7D,iBAApB;AACH;;AACDA,MAAAA,iBAAiB,GAAG4D,MAAM,CAACE,UAAP,CAAkB,MAAM;AACxClE,QAAAA,aAAa,CAACW,KAAd,GAAsB,KAAtB;AACH,OAFmB,EAEjBxD,KAAK,CAACK,QAFW,CAApB;AAGH;;AACD,aAASuG,QAAT,GAAoB;AAChB,UAAI5D,iBAAiB,KAAKgD,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB9D,iBAApB;AACH;;AACDA,MAAAA,iBAAiB,GAAG6D,MAAM,CAACE,UAAP,CAAkB,MAAM;AACxCnE,QAAAA,aAAa,CAACY,KAAd,GAAsB,KAAtB;AACH,OAFmB,EAEjBxD,KAAK,CAACK,QAFW,CAApB;AAGH;;AACD,aAASkG,QAAT,GAAoB;AAChB,UAAIvD,iBAAiB,KAAKgD,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB9D,iBAApB;AACH;;AACDJ,MAAAA,aAAa,CAACY,KAAd,GAAsB,IAAtB;AACH;;AACD,aAASgD,QAAT,GAAoB;AAChB,UAAIvD,iBAAiB,KAAK+C,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB7D,iBAApB;AACH;;AACDJ,MAAAA,aAAa,CAACW,KAAd,GAAsB,IAAtB;AACH;;AACD,aAASwD,YAAT,CAAsB7B,CAAtB,EAAyB;AACrB,YAAM;AAAE9D,QAAAA;AAAF,UAAerB,KAArB;AACA,UAAIqB,QAAJ,EACIA,QAAQ,CAAC8D,CAAD,CAAR;AACJ8B,MAAAA,eAAe;AAClB;;AACD,aAASA,eAAT,GAA2B;AACvB;AACA,YAAM;AAAEzD,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;;AACA,UAAInE,SAAJ,EAAe;AACX+B,QAAAA,qBAAqB,CAACc,KAAtB,GAA8B7C,SAAS,CAAC0F,SAAxC;AACA1D,QAAAA,sBAAsB,CAACa,KAAvB,GAA+B7C,SAAS,CAACuG,UAAzC;AACH;AACJ;;AACD,aAASC,iBAAT,GAA6B;AACzB;AACA;AACA,YAAM;AAAE3D,QAAAA,KAAK,EAAE3C;AAAT,UAAqBkE,gBAA3B;;AACA,UAAIlE,OAAJ,EAAa;AACTuB,QAAAA,gBAAgB,CAACoB,KAAjB,GAAyB3C,OAAO,CAACqF,YAAjC;AACA7D,QAAAA,eAAe,CAACmB,KAAhB,GAAwB3C,OAAO,CAACuG,WAAhC;AACH;;AACD,YAAM;AAAE5D,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;;AACA,UAAInE,SAAJ,EAAe;AACX2B,QAAAA,kBAAkB,CAACkB,KAAnB,GAA2B7C,SAAS,CAACuF,YAArC;AACA3D,QAAAA,iBAAiB,CAACiB,KAAlB,GAA0B7C,SAAS,CAACyG,WAApC;AACH;;AACD,YAAM;AAAE5D,QAAAA,KAAK,EAAE6D;AAAT,UAAqBlF,QAA3B;AACA,YAAM;AAAEqB,QAAAA,KAAK,EAAE8D;AAAT,UAAqBpF,QAA3B;;AACA,UAAImF,OAAJ,EAAa;AACT5E,QAAAA,YAAY,CAACe,KAAb,GAAqB6D,OAAO,CAACD,WAA7B;AACH;;AACD,UAAIE,OAAJ,EAAa;AACT9E,QAAAA,YAAY,CAACgB,KAAb,GAAqB8D,OAAO,CAACpB,YAA7B;AACH;AACJ;AACD;AACR;AACA;AACA;;;AACQ,aAASqB,oBAAT,GAAgC;AAC5B,YAAM;AAAE/D,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;;AACA,UAAInE,SAAJ,EAAe;AACX+B,QAAAA,qBAAqB,CAACc,KAAtB,GAA8B7C,SAAS,CAAC0F,SAAxC;AACA1D,QAAAA,sBAAsB,CAACa,KAAvB,GAA+B7C,SAAS,CAACuG,UAAzC;AACA5E,QAAAA,kBAAkB,CAACkB,KAAnB,GAA2B7C,SAAS,CAACuF,YAArC;AACA3D,QAAAA,iBAAiB,CAACiB,KAAlB,GAA0B7C,SAAS,CAACyG,WAApC;AACAhF,QAAAA,gBAAgB,CAACoB,KAAjB,GAAyB7C,SAAS,CAAC6G,YAAnC;AACAnF,QAAAA,eAAe,CAACmB,KAAhB,GAAwB7C,SAAS,CAAC8G,WAAlC;AACH;;AACD,YAAM;AAAEjE,QAAAA,KAAK,EAAE6D;AAAT,UAAqBlF,QAA3B;AACA,YAAM;AAAEqB,QAAAA,KAAK,EAAE8D;AAAT,UAAqBpF,QAA3B;;AACA,UAAImF,OAAJ,EAAa;AACT5E,QAAAA,YAAY,CAACe,KAAb,GAAqB6D,OAAO,CAACD,WAA7B;AACH;;AACD,UAAIE,OAAJ,EAAa;AACT9E,QAAAA,YAAY,CAACgB,KAAb,GAAqB8D,OAAO,CAACpB,YAA7B;AACH;AACJ;;AACD,aAASjB,IAAT,GAAgB;AACZ,UAAI,CAACjF,KAAK,CAACM,UAAX,EACI;;AACJ,UAAIN,KAAK,CAACS,mBAAV,EAA+B;AAC3B8G,QAAAA,oBAAoB;AACvB,OAFD,MAGK;AACDJ,QAAAA,iBAAiB;AACjBF,QAAAA,eAAe;AAClB;AACJ;;AACD,aAASS,aAAT,CAAuBvC,CAAvB,EAA0B;AACtB,UAAIwC,EAAJ;;AACA,aAAO,EAAE,CAACA,EAAE,GAAG5F,UAAU,CAACyB,KAAjB,MAA4B,IAA5B,IAAoCmE,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACC,QAAH,CAAYzC,CAAC,CAAC0C,MAAd,CAA/D,CAAP;AACH;;AACD,aAASC,sBAAT,CAAgC3C,CAAhC,EAAmC;AAC/BA,MAAAA,CAAC,CAAC4C,cAAF;AACA5C,MAAAA,CAAC,CAAC6C,eAAF;AACAjF,MAAAA,WAAW,GAAG,IAAd;AACA3D,MAAAA,EAAE,CAAC,WAAD,EAAcyH,MAAd,EAAsBoB,sBAAtB,EAA8C,IAA9C,CAAF;AACA7I,MAAAA,EAAE,CAAC,SAAD,EAAYyH,MAAZ,EAAoBqB,oBAApB,EAA0C,IAA1C,CAAF;AACA/E,MAAAA,SAAS,GAAGR,sBAAsB,CAACa,KAAnC;AACAJ,MAAAA,UAAU,GAAG+B,CAAC,CAACgD,OAAf;AACH;;AACD,aAASF,sBAAT,CAAgC9C,CAAhC,EAAmC;AAC/B,UAAI,CAACpC,WAAL,EACI;;AACJ,UAAIC,iBAAiB,KAAKgD,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB9D,iBAApB;AACH;;AACD,UAAIC,iBAAiB,KAAK+C,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB7D,iBAApB;AACH;;AACD,YAAM;AAAEO,QAAAA,KAAK,EAAEQ;AAAT,UAA4BzB,iBAAlC;AACA,YAAM;AAAEiB,QAAAA,KAAK,EAAES;AAAT,UAA0B5B,eAAhC;AACA,YAAM;AAAEmB,QAAAA,KAAK,EAAE4E;AAAT,UAAsBrE,WAA5B;AACA,UAAIC,cAAc,KAAK,IAAnB,IAA2BC,YAAY,KAAK,IAAhD,EACI;AACJ,YAAMoE,EAAE,GAAGlD,CAAC,CAACgD,OAAF,GAAY/E,UAAvB;AACA,YAAMkF,WAAW,GAAID,EAAE,IAAIpE,YAAY,GAAGD,cAAnB,CAAH,IAA0CA,cAAc,GAAGoE,QAA3D,CAApB;AACA,YAAMG,sBAAsB,GAAGtE,YAAY,GAAGD,cAA9C;AACA,UAAIwE,YAAY,GAAGrF,SAAS,GAAGmF,WAA/B;AACAE,MAAAA,YAAY,GAAG5E,IAAI,CAACC,GAAL,CAAS0E,sBAAT,EAAiCC,YAAjC,CAAf;AACAA,MAAAA,YAAY,GAAG5E,IAAI,CAAC6E,GAAL,CAASD,YAAT,EAAuB,CAAvB,CAAf;AACA,YAAM;AAAEhF,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;;AACA,UAAInE,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACuG,UAAV,GAAuBsB,YAAvB;AACA,cAAM;AAAEhH,UAAAA;AAAF,YAAiCxB,KAAvC;AACA,YAAIwB,0BAAJ,EACIA,0BAA0B,CAACgH,YAAD,CAA1B;AACP;AACJ;;AACD,aAASN,oBAAT,CAA8B/C,CAA9B,EAAiC;AAC7BA,MAAAA,CAAC,CAAC4C,cAAF;AACA5C,MAAAA,CAAC,CAAC6C,eAAF;AACA3I,MAAAA,GAAG,CAAC,WAAD,EAAcwH,MAAd,EAAsBoB,sBAAtB,EAA8C,IAA9C,CAAH;AACA5I,MAAAA,GAAG,CAAC,SAAD,EAAYwH,MAAZ,EAAoBqB,oBAApB,EAA0C,IAA1C,CAAH;AACAnF,MAAAA,WAAW,GAAG,KAAd;AACAkC,MAAAA,IAAI;;AACJ,UAAIyC,aAAa,CAACvC,CAAD,CAAjB,EAAsB;AAClBuB,QAAAA,OAAO;AACV;AACJ;;AACD,aAASgC,sBAAT,CAAgCvD,CAAhC,EAAmC;AAC/BA,MAAAA,CAAC,CAAC4C,cAAF;AACA5C,MAAAA,CAAC,CAAC6C,eAAF;AACAlF,MAAAA,WAAW,GAAG,IAAd;AACA1D,MAAAA,EAAE,CAAC,WAAD,EAAcyH,MAAd,EAAsB8B,sBAAtB,EAA8C,IAA9C,CAAF;AACAvJ,MAAAA,EAAE,CAAC,SAAD,EAAYyH,MAAZ,EAAoB+B,oBAApB,EAA0C,IAA1C,CAAF;AACA1F,MAAAA,QAAQ,GAAGR,qBAAqB,CAACc,KAAjC;AACAH,MAAAA,UAAU,GAAG8B,CAAC,CAAC0D,OAAf;AACH;;AACD,aAASF,sBAAT,CAAgCxD,CAAhC,EAAmC;AAC/B,UAAI,CAACrC,WAAL,EACI;;AACJ,UAAIE,iBAAiB,KAAKgD,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB9D,iBAApB;AACH;;AACD,UAAIC,iBAAiB,KAAK+C,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB7D,iBAApB;AACH;;AACD,YAAM;AAAEO,QAAAA,KAAK,EAAEC;AAAT,UAA6BnB,kBAAnC;AACA,YAAM;AAAEkB,QAAAA,KAAK,EAAEE;AAAT,UAA2BtB,gBAAjC;AACA,YAAM;AAAEoB,QAAAA,KAAK,EAAEsF;AAAT,UAAsBvF,WAA5B;AACA,UAAIE,eAAe,KAAK,IAApB,IAA4BC,aAAa,KAAK,IAAlD,EACI;AACJ,YAAMqF,EAAE,GAAG5D,CAAC,CAAC0D,OAAF,GAAYxF,UAAvB;AACA,YAAM2F,UAAU,GAAID,EAAE,IAAIrF,aAAa,GAAGD,eAApB,CAAH,IAA4CA,eAAe,GAAGqF,QAA9D,CAAnB;AACA,YAAMG,qBAAqB,GAAGvF,aAAa,GAAGD,eAA9C;AACA,UAAIyF,WAAW,GAAGhG,QAAQ,GAAG8F,UAA7B;AACAE,MAAAA,WAAW,GAAGtF,IAAI,CAACC,GAAL,CAASoF,qBAAT,EAAgCC,WAAhC,CAAd;AACAA,MAAAA,WAAW,GAAGtF,IAAI,CAAC6E,GAAL,CAASS,WAAT,EAAsB,CAAtB,CAAd;AACA,YAAM;AAAE1F,QAAAA,KAAK,EAAE7C;AAAT,UAAuBmE,kBAA7B;;AACA,UAAInE,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAAC0F,SAAV,GAAsB6C,WAAtB;AACH;AACJ;;AACD,aAASN,oBAAT,CAA8BzD,CAA9B,EAAiC;AAC7BA,MAAAA,CAAC,CAAC4C,cAAF;AACA5C,MAAAA,CAAC,CAAC6C,eAAF;AACA3I,MAAAA,GAAG,CAAC,WAAD,EAAcwH,MAAd,EAAsB8B,sBAAtB,EAA8C,IAA9C,CAAH;AACAtJ,MAAAA,GAAG,CAAC,SAAD,EAAYwH,MAAZ,EAAoB+B,oBAApB,EAA0C,IAA1C,CAAH;AACA9F,MAAAA,WAAW,GAAG,KAAd;AACAmC,MAAAA,IAAI;;AACJ,UAAIyC,aAAa,CAACvC,CAAD,CAAjB,EAAsB;AAClBuB,QAAAA,OAAO;AACV;AACJ;;AACDvH,IAAAA,WAAW,CAAC,MAAM;AACd,YAAM;AAAEqE,QAAAA,KAAK,EAAE2F;AAAT,UAAsBtE,WAA5B;AACA,YAAM;AAAErB,QAAAA,KAAK,EAAE4F;AAAT,UAAsBxE,WAA5B;AACA,YAAM;AAAEpB,QAAAA,KAAK,EAAE6F;AAAT,UAA6BxH,kBAAnC;AACA,YAAM;AAAE2B,QAAAA,KAAK,EAAE6D;AAAT,UAAqBlF,QAA3B;AACA,YAAM;AAAEqB,QAAAA,KAAK,EAAE8D;AAAT,UAAqBpF,QAA3B;;AACA,UAAImF,OAAJ,EAAa;AACT,YAAI,CAAC8B,QAAL,EAAe;AACX9B,UAAAA,OAAO,CAACiC,SAAR,CAAkBC,GAAlB,CAAuB,GAAEF,eAAgB,2BAAzC;AACH,SAFD,MAGK;AACDhC,UAAAA,OAAO,CAACiC,SAAR,CAAkBE,MAAlB,CAA0B,GAAEH,eAAgB,2BAA5C;AACH;AACJ;;AACD,UAAI/B,OAAJ,EAAa;AACT,YAAI,CAAC8B,QAAL,EAAe;AACX9B,UAAAA,OAAO,CAACgC,SAAR,CAAkBC,GAAlB,CAAuB,GAAEF,eAAgB,2BAAzC;AACH,SAFD,MAGK;AACD/B,UAAAA,OAAO,CAACgC,SAAR,CAAkBE,MAAlB,CAA0B,GAAEH,eAAgB,2BAA5C;AACH;AACJ;AACJ,KAtBU,CAAX;AAuBAtK,IAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIiB,KAAK,CAACW,SAAV,EACI;AACJsE,MAAAA,IAAI;AACP,KAZQ,CAAT;AAaAjG,IAAAA,eAAe,CAAC,MAAM;AAClB,UAAIgE,iBAAiB,KAAKgD,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB9D,iBAApB;AACH;;AACD,UAAIC,iBAAiB,KAAK+C,SAA1B,EAAqC;AACjCa,QAAAA,MAAM,CAACC,YAAP,CAAoB7D,iBAApB;AACH;;AACD5D,MAAAA,GAAG,CAAC,WAAD,EAAcwH,MAAd,EAAsB8B,sBAAtB,EAA8C,IAA9C,CAAH;AACAtJ,MAAAA,GAAG,CAAC,SAAD,EAAYwH,MAAZ,EAAoB+B,oBAApB,EAA0C,IAA1C,CAAH;AACH,KATc,CAAf;AAUA,UAAMa,QAAQ,GAAGhK,QAAQ,CAAC,WAAD,EAAc,YAAd,EAA4BG,KAA5B,EAAmCD,cAAnC,EAAmDK,KAAnD,EAA0D6B,kBAA1D,CAAzB;AACA,UAAM6H,UAAU,GAAG5K,QAAQ,CAAC,MAAM;AAC9B,YAAM;AAAE6K,QAAAA,MAAM,EAAE;AAAEC,UAAAA,oBAAF;AAAwBC,UAAAA,qBAAxB;AAA+CC,UAAAA,eAA/C;AAAgEC,UAAAA;AAAhE,SAAV;AAA4FC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAAlG,UAA4HT,QAAQ,CAACjG,KAA3I;AACA,aAAO;AACH,gCAAwBoG,oBADrB;AAEH,+BAAuBK,KAFpB;AAGH,qCAA6BC,UAH1B;AAIH,uCAA+BL,qBAJ5B;AAKH,+BAAuBE,cALpB;AAMH,gCAAwBD;AANrB,OAAP;AAQH,KAV0B,CAA3B;AAWA,UAAMK,gBAAgB,GAAGrI,mBAAmB,GACtCpC,aAAa,CAAC,WAAD,EAAcsG,SAAd,EAAyB0D,UAAzB,EAAqC1J,KAArC,CADyB,GAEtCgG,SAFN;AAGA,UAAMoE,cAAc,GAAG;AACnBhF,MAAAA,QADmB;AAEnBgB,MAAAA,QAFmB;AAGnBnB,MAAAA,IAHmB;AAInBsC,MAAAA,oBAJmB;AAKnBjB,MAAAA,uBALmB;AAMnBG,MAAAA;AANmB,KAAvB;AAQA,WAAO3G,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqK,cAAlB,CAAd,EAAiD;AAAEf,MAAAA,eAAe,EAAExH,kBAAnB;AAAuCwC,MAAAA,kBAAkB,EAAE3B,qBAA3D;AAAkFX,MAAAA,UAAlF;AACpDC,MAAAA,YADoD;AAEpDC,MAAAA,UAFoD;AAGpDC,MAAAA,QAHoD;AAIpDC,MAAAA,QAJoD;AAI1CiH,MAAAA,QAAQ,EAAExE,WAJgC;AAInBuE,MAAAA,QAAQ,EAAEtE,WAJS;AAIIwF,MAAAA,UAAU,EAAEvG,aAJhB;AAI+BwG,MAAAA,UAAU,EAAEnG,aAJ3C;AAI0DoG,MAAAA,SAAS,EAAEhG,YAJrE;AAImFiG,MAAAA,UAAU,EAAE7F,aAJ/F;AAI8G8F,MAAAA,UAAU,EAAE7H,aAJ1H;AAIyI8H,MAAAA,UAAU,EAAE7H,aAJrJ;AAIoKS,MAAAA,KAJpK;AAKpD0D,MAAAA,YALoD;AAMpDhC,MAAAA,mBANoD;AAOpDE,MAAAA,qBAPoD;AAQpDwD,MAAAA,sBARoD;AASpDZ,MAAAA,sBAToD;AAS5B6C,MAAAA,OAAO,EAAE7I,mBAAmB,GAAGkE,SAAH,GAAe0D,UATf;AAS2BkB,MAAAA,UAAU,EAAET,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACS,UAT5H;AASwIC,MAAAA,QAAQ,EAAEV,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACU;AATvO,KAAjD,CAAP;AAUH,GAve6B;;AAwe9BC,EAAAA,MAAM,GAAG;AACL,QAAInD,EAAJ;;AACA,UAAM;AAAEoD,MAAAA,MAAF;AAAU1B,MAAAA,eAAV;AAA2B3I,MAAAA;AAA3B,QAAsD,IAA5D;AACA,QAAI,CAAC,KAAKJ,UAAV,EACI,OAAO,CAACqH,EAAE,GAAGoD,MAAM,CAAC3K,OAAb,MAA0B,IAA1B,IAAkCuH,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACqD,IAAH,CAAQD,MAAR,CAAlE;;AACJ,UAAME,cAAc,GAAG,MAAM;AACzB,UAAItD,EAAJ,EAAQuD,EAAR;;AACA,OAACvD,EAAE,GAAG,KAAKkD,QAAX,MAAyB,IAAzB,IAAiClD,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACqD,IAAH,CAAQ,IAAR,CAA1D;AACA,aAAOrM,CAAC,CAAC,KAAD,EAAQM,UAAU,CAAC,KAAKkM,MAAN,EAAc;AACpCC,QAAAA,IAAI,EAAE,MAD8B;AAEpCxM,QAAAA,GAAG,EAAE,YAF+B;AAGpCyM,QAAAA,KAAK,EAAE,CAAE,GAAEhC,eAAgB,YAApB,EAAiC,KAAKuB,UAAtC,CAH6B;AAIpChL,QAAAA,KAAK,EAAE,KAAK+K,OAJwB;AAKpCW,QAAAA,YAAY,EAAE5K,sBAAsB,GAC9BsF,SAD8B,GAE9B,KAAKM,uBAPyB;AAQpCiF,QAAAA,YAAY,EAAE7K,sBAAsB,GAC9BsF,SAD8B,GAE9B,KAAKS;AAVyB,OAAd,CAAlB,EAWJ,CACA,KAAK9F,SAAL,GAAkB,CAACuK,EAAE,GAAGH,MAAM,CAAC3K,OAAb,MAA0B,IAA1B,IAAkC8K,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACF,IAAH,CAAQD,MAAR,CAA7E,GAAiGpM,CAAC,CAAC,KAAD,EAAQ;AAAEyM,QAAAA,IAAI,EAAE,MAAR;AAAgBxM,QAAAA,GAAG,EAAE,cAArB;AAAqCyM,QAAAA,KAAK,EAAE,CAC7I,GAAEhC,eAAgB,sBAD2H,EAE9I,KAAKvI,cAFyI,CAA5C;AAGnGlB,QAAAA,KAAK,EAAE,KAAKoB,cAHuF;AAGvEK,QAAAA,QAAQ,EAAE,KAAK2F,YAHwD;AAG1C1F,QAAAA,OAAO,EAAE,KAAKA;AAH4B,OAAR,EAI9F3C,CAAC,CAACW,eAAD,EAAkB;AAAEiC,QAAAA,QAAQ,EAAE,KAAKyD;AAAjB,OAAlB,EAA0D;AACvD5E,QAAAA,OAAO,EAAE,MAAOzB,CAAC,CAAC,KAAD,EAAQ;AAAEC,UAAAA,GAAG,EAAE,YAAP;AAAqBwM,UAAAA,IAAI,EAAE,MAA3B;AAAmCxL,UAAAA,KAAK,EAAE,CAC3D;AACI4L,YAAAA,KAAK,EAAE,KAAKhL,WAAL,GAAmB,aAAnB,GAAmC;AAD9C,WAD2D,EAI3D,KAAKU,YAJsD,CAA1C;AAKlBmK,UAAAA,KAAK,EAAE,CACL,GAAEhC,eAAgB,oBADb,EAEN,KAAKpI,YAFC;AALW,SAAR,EAQR8J,MARQ;AADsC,OAA1D,CAJ6F,CADlG,EAgBApM,CAAC,CAAC,KAAD,EAAQ;AAAEC,QAAAA,GAAG,EAAE,UAAP;AAAmByM,QAAAA,KAAK,EAAG,GAAEhC,eAAgB,mBAAkBA,eAAgB,2BAA/E;AAA2GzJ,QAAAA,KAAK,EAAE,KAAKuB,mBAAvH;AAA4I,uBAAe;AAA3J,OAAR,EACGxC,CAAC,CAACO,UAAD,EAAa;AAAEwC,QAAAA,IAAI,EAAE;AAAR,OAAb,EAA6C;AAC1CtB,QAAAA,OAAO,EAAE,MAAM,KAAKgJ,QAAL,IAAiB,KAAKsB,UAAtB,IAAoC,CAAC,KAAKpH,KAA1C,GAAmD3E,CAAC,CAAC,KAAD,EAAQ;AAAE0M,UAAAA,KAAK,EAAG,GAAEhC,eAAgB,4BAA5B;AAAyDzJ,UAAAA,KAAK,EAAE;AACnI6L,YAAAA,MAAM,EAAE,KAAKpB,UADsH;AAEnI5E,YAAAA,GAAG,EAAE,KAAK8E;AAFyH,WAAhE;AAGpEmB,UAAAA,WAAW,EAAE,KAAKhD;AAHkD,SAAR,CAApD,GAGuC;AAJZ,OAA7C,CADJ,CAhBD,EAuBA/J,CAAC,CAAC,KAAD,EAAQ;AAAEC,QAAAA,GAAG,EAAE,UAAP;AAAmByM,QAAAA,KAAK,EAAG,GAAEhC,eAAgB,mBAAkBA,eAAgB,6BAA/E;AAA6GzJ,QAAAA,KAAK,EAAE,KAAKwB,iBAAzH;AAA4I,uBAAe;AAA3J,OAAR,EACGzC,CAAC,CAACO,UAAD,EAAa;AAAEwC,QAAAA,IAAI,EAAE;AAAR,OAAb,EAA6C;AAC1CtB,QAAAA,OAAO,EAAE,MAAM,KAAK+I,QAAL,IAAiB,KAAKsB,UAAtB,IAAoC,CAAC,KAAKnH,KAA1C,GAAmD3E,CAAC,CAAC,KAAD,EAAQ;AAAE0M,UAAAA,KAAK,EAAG,GAAEhC,eAAgB,4BAA5B;AAAyDzJ,UAAAA,KAAK,EAAE;AACnI4L,YAAAA,KAAK,EAAE,KAAKlB,UADuH;AAEnI9E,YAAAA,IAAI,EAAE,KAAKgF;AAFwH,WAAhE;AAGpEkB,UAAAA,WAAW,EAAE,KAAK5D;AAHkD,SAAR,CAApD,GAGuC;AAJZ,OAA7C,CADJ,CAvBD,CAXI,CAAR;AA0CH,KA7CD;;AA8CA,WAAO,KAAKnH,SAAL,GAAkBsK,cAAc,EAAhC,GAAuCtM,CAAC,CAACW,eAAD,EAAkB;AAAEiC,MAAAA,QAAQ,EAAE,KAAK2D;AAAjB,KAAlB,EAA4D;AACvG9E,MAAAA,OAAO,EAAE6K;AAD8F,KAA5D,CAA/C;AAGH;;AA9hB6B,CAAD,CAAjC;AAgiBA,eAAexJ,SAAf;AACA,OAAO,MAAMkK,UAAU,GAAGlK,SAAnB","sourcesContent":["import { h, ref, defineComponent, computed, onMounted, onBeforeUnmount, mergeProps, Transition, watchEffect } from 'vue';\nimport { on, off } from 'evtd';\nimport { VResizeObserver } from 'vueuc';\nimport { useIsIos } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../../_mixins';\nimport { scrollbarLight } from '../styles';\nimport style from './styles/index.cssr';\nconst scrollbarProps = Object.assign(Object.assign({}, useTheme.props), { size: {\n        type: Number,\n        default: 5\n    }, duration: {\n        type: Number,\n        default: 0\n    }, scrollable: {\n        type: Boolean,\n        default: true\n    }, xScrollable: Boolean, useUnifiedContainer: Boolean, triggerDisplayManually: Boolean, \n    // If container is set, resize observer won't not attached\n    container: Function, content: Function, containerClass: String, containerStyle: [String, Object], contentClass: String, contentStyle: [String, Object], horizontalRailStyle: [String, Object], verticalRailStyle: [String, Object], onScroll: Function, onWheel: Function, onResize: Function, internalOnUpdateScrollLeft: Function });\nconst Scrollbar = defineComponent({\n    name: 'Scrollbar',\n    props: scrollbarProps,\n    inheritAttrs: false,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        // dom ref\n        const wrapperRef = ref(null);\n        const containerRef = ref(null);\n        const contentRef = ref(null);\n        const yRailRef = ref(null);\n        const xRailRef = ref(null);\n        // data ref\n        const contentHeightRef = ref(null);\n        const contentWidthRef = ref(null);\n        const containerHeightRef = ref(null);\n        const containerWidthRef = ref(null);\n        const yRailSizeRef = ref(null);\n        const xRailSizeRef = ref(null);\n        const containerScrollTopRef = ref(0);\n        const containerScrollLeftRef = ref(0);\n        const isShowXBarRef = ref(false);\n        const isShowYBarRef = ref(false);\n        let yBarPressed = false;\n        let xBarPressed = false;\n        let xBarVanishTimerId;\n        let yBarVanishTimerId;\n        let memoYTop = 0;\n        let memoXLeft = 0;\n        let memoMouseX = 0;\n        let memoMouseY = 0;\n        const isIos = useIsIos();\n        const yBarSizeRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yRailSize } = yRailSizeRef;\n            if (containerHeight === null ||\n                contentHeight === null ||\n                yRailSize === null) {\n                return 0;\n            }\n            else {\n                return Math.min(containerHeight, (yRailSize * containerHeight) / contentHeight + props.size * 1.5);\n            }\n        });\n        const yBarSizePxRef = computed(() => {\n            return `${yBarSizeRef.value}px`;\n        });\n        const xBarSizeRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xRailSize } = xRailSizeRef;\n            if (containerWidth === null ||\n                contentWidth === null ||\n                xRailSize === null) {\n                return 0;\n            }\n            else {\n                return (xRailSize * containerWidth) / contentWidth + props.size * 1.5;\n            }\n        });\n        const xBarSizePxRef = computed(() => {\n            return `${xBarSizeRef.value}px`;\n        });\n        const yBarTopRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: containerScrollTop } = containerScrollTopRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yRailSize } = yRailSizeRef;\n            if (containerHeight === null ||\n                contentHeight === null ||\n                yRailSize === null) {\n                return 0;\n            }\n            else {\n                const heightDiff = contentHeight - containerHeight;\n                if (!heightDiff)\n                    return 0;\n                return ((containerScrollTop / heightDiff) * (yRailSize - yBarSizeRef.value));\n            }\n        });\n        const yBarTopPxRef = computed(() => {\n            return `${yBarTopRef.value}px`;\n        });\n        const xBarLeftRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: containerScrollLeft } = containerScrollLeftRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xRailSize } = xRailSizeRef;\n            if (containerWidth === null ||\n                contentWidth === null ||\n                xRailSize === null) {\n                return 0;\n            }\n            else {\n                const widthDiff = contentWidth - containerWidth;\n                if (!widthDiff)\n                    return 0;\n                return ((containerScrollLeft / widthDiff) * (xRailSize - xBarSizeRef.value));\n            }\n        });\n        const xBarLeftPxRef = computed(() => {\n            return `${xBarLeftRef.value}px`;\n        });\n        const needYBarRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            return (containerHeight !== null &&\n                contentHeight !== null &&\n                contentHeight > containerHeight);\n        });\n        const needXBarRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            return (containerWidth !== null &&\n                contentWidth !== null &&\n                contentWidth > containerWidth);\n        });\n        const mergedContainerRef = computed(() => {\n            const { container } = props;\n            if (container)\n                return container();\n            return containerRef.value;\n        });\n        const mergedContentRef = computed(() => {\n            const { content } = props;\n            if (content)\n                return content();\n            return contentRef.value;\n        });\n        // methods\n        const handleContentResize = sync;\n        const handleContainerResize = (e) => {\n            const { onResize } = props;\n            if (onResize)\n                onResize(e);\n            sync();\n        };\n        const scrollTo = (options, y) => {\n            if (!props.scrollable)\n                return;\n            if (typeof options === 'number') {\n                scrollToPosition(options, y !== null && y !== void 0 ? y : 0, 0, false, 'auto');\n                return;\n            }\n            const { left, top, index, elSize, position, behavior, el, debounce = true } = options;\n            if (left !== undefined || top !== undefined) {\n                scrollToPosition(left !== null && left !== void 0 ? left : 0, top !== null && top !== void 0 ? top : 0, 0, false, behavior);\n            }\n            if (el !== undefined) {\n                scrollToPosition(0, el.offsetTop, el.offsetHeight, debounce, behavior);\n            }\n            else if (index !== undefined && elSize !== undefined) {\n                scrollToPosition(0, index * elSize, elSize, debounce, behavior);\n            }\n            else if (position === 'bottom') {\n                scrollToPosition(0, Number.MAX_SAFE_INTEGER, 0, false, behavior);\n            }\n            else if (position === 'top') {\n                scrollToPosition(0, 0, 0, false, behavior);\n            }\n        };\n        const scrollBy = (options, y) => {\n            if (!props.scrollable)\n                return;\n            const { value: container } = mergedContainerRef;\n            if (!container)\n                return;\n            if (typeof options === 'object') {\n                container.scrollBy(options);\n            }\n            else {\n                container.scrollBy(options, y || 0);\n            }\n        };\n        function scrollToPosition(left, top, elSize, debounce, behavior) {\n            const { value: container } = mergedContainerRef;\n            if (!container)\n                return;\n            if (debounce) {\n                const { scrollTop, offsetHeight } = container;\n                if (top > scrollTop) {\n                    if (top + elSize <= scrollTop + offsetHeight) {\n                        // do nothing\n                    }\n                    else {\n                        container.scrollTo({\n                            left,\n                            top: top + elSize - offsetHeight,\n                            behavior\n                        });\n                    }\n                    return;\n                }\n            }\n            container.scrollTo({\n                left,\n                top,\n                behavior\n            });\n        }\n        function handleMouseEnterWrapper() {\n            showXBar();\n            showYBar();\n            sync();\n        }\n        function handleMouseLeaveWrapper() {\n            hideBar();\n        }\n        function hideBar() {\n            hideYBar();\n            hideXBar();\n        }\n        function hideYBar() {\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            yBarVanishTimerId = window.setTimeout(() => {\n                isShowYBarRef.value = false;\n            }, props.duration);\n        }\n        function hideXBar() {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            xBarVanishTimerId = window.setTimeout(() => {\n                isShowXBarRef.value = false;\n            }, props.duration);\n        }\n        function showXBar() {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            isShowXBarRef.value = true;\n        }\n        function showYBar() {\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            isShowYBarRef.value = true;\n        }\n        function handleScroll(e) {\n            const { onScroll } = props;\n            if (onScroll)\n                onScroll(e);\n            syncScrollState();\n        }\n        function syncScrollState() {\n            // only collect scroll state, do not trigger any dom event\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                containerScrollTopRef.value = container.scrollTop;\n                containerScrollLeftRef.value = container.scrollLeft;\n            }\n        }\n        function syncPositionState() {\n            // only collect position state, do not trigger any dom event\n            // Don't use getClientBoundingRect because element may be scale transformed\n            const { value: content } = mergedContentRef;\n            if (content) {\n                contentHeightRef.value = content.offsetHeight;\n                contentWidthRef.value = content.offsetWidth;\n            }\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                containerHeightRef.value = container.offsetHeight;\n                containerWidthRef.value = container.offsetWidth;\n            }\n            const { value: xRailEl } = xRailRef;\n            const { value: yRailEl } = yRailRef;\n            if (xRailEl) {\n                xRailSizeRef.value = xRailEl.offsetWidth;\n            }\n            if (yRailEl) {\n                yRailSizeRef.value = yRailEl.offsetHeight;\n            }\n        }\n        /**\n         * Sometimes there's only one element that we can scroll,\n         * For example for textarea, there won't be a content element.\n         */\n        function syncUnifiedContainer() {\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                containerScrollTopRef.value = container.scrollTop;\n                containerScrollLeftRef.value = container.scrollLeft;\n                containerHeightRef.value = container.offsetHeight;\n                containerWidthRef.value = container.offsetWidth;\n                contentHeightRef.value = container.scrollHeight;\n                contentWidthRef.value = container.scrollWidth;\n            }\n            const { value: xRailEl } = xRailRef;\n            const { value: yRailEl } = yRailRef;\n            if (xRailEl) {\n                xRailSizeRef.value = xRailEl.offsetWidth;\n            }\n            if (yRailEl) {\n                yRailSizeRef.value = yRailEl.offsetHeight;\n            }\n        }\n        function sync() {\n            if (!props.scrollable)\n                return;\n            if (props.useUnifiedContainer) {\n                syncUnifiedContainer();\n            }\n            else {\n                syncPositionState();\n                syncScrollState();\n            }\n        }\n        function isMouseUpAway(e) {\n            var _a;\n            return !((_a = wrapperRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.target));\n        }\n        function handleXScrollMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            xBarPressed = true;\n            on('mousemove', window, handleXScrollMouseMove, true);\n            on('mouseup', window, handleXScrollMouseUp, true);\n            memoXLeft = containerScrollLeftRef.value;\n            memoMouseX = e.clientX;\n        }\n        function handleXScrollMouseMove(e) {\n            if (!xBarPressed)\n                return;\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xBarSize } = xBarSizeRef;\n            if (containerWidth === null || contentWidth === null)\n                return;\n            const dX = e.clientX - memoMouseX;\n            const dScrollLeft = (dX * (contentWidth - containerWidth)) / (containerWidth - xBarSize);\n            const toScrollLeftUpperBound = contentWidth - containerWidth;\n            let toScrollLeft = memoXLeft + dScrollLeft;\n            toScrollLeft = Math.min(toScrollLeftUpperBound, toScrollLeft);\n            toScrollLeft = Math.max(toScrollLeft, 0);\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                container.scrollLeft = toScrollLeft;\n                const { internalOnUpdateScrollLeft } = props;\n                if (internalOnUpdateScrollLeft)\n                    internalOnUpdateScrollLeft(toScrollLeft);\n            }\n        }\n        function handleXScrollMouseUp(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            off('mousemove', window, handleXScrollMouseMove, true);\n            off('mouseup', window, handleXScrollMouseUp, true);\n            xBarPressed = false;\n            sync();\n            if (isMouseUpAway(e)) {\n                hideBar();\n            }\n        }\n        function handleYScrollMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            yBarPressed = true;\n            on('mousemove', window, handleYScrollMouseMove, true);\n            on('mouseup', window, handleYScrollMouseUp, true);\n            memoYTop = containerScrollTopRef.value;\n            memoMouseY = e.clientY;\n        }\n        function handleYScrollMouseMove(e) {\n            if (!yBarPressed)\n                return;\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yBarSize } = yBarSizeRef;\n            if (containerHeight === null || contentHeight === null)\n                return;\n            const dY = e.clientY - memoMouseY;\n            const dScrollTop = (dY * (contentHeight - containerHeight)) / (containerHeight - yBarSize);\n            const toScrollTopUpperBound = contentHeight - containerHeight;\n            let toScrollTop = memoYTop + dScrollTop;\n            toScrollTop = Math.min(toScrollTopUpperBound, toScrollTop);\n            toScrollTop = Math.max(toScrollTop, 0);\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                container.scrollTop = toScrollTop;\n            }\n        }\n        function handleYScrollMouseUp(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            off('mousemove', window, handleYScrollMouseMove, true);\n            off('mouseup', window, handleYScrollMouseUp, true);\n            yBarPressed = false;\n            sync();\n            if (isMouseUpAway(e)) {\n                hideBar();\n            }\n        }\n        watchEffect(() => {\n            const { value: needXBar } = needXBarRef;\n            const { value: needYBar } = needYBarRef;\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            const { value: xRailEl } = xRailRef;\n            const { value: yRailEl } = yRailRef;\n            if (xRailEl) {\n                if (!needXBar) {\n                    xRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n                else {\n                    xRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n            }\n            if (yRailEl) {\n                if (!needYBar) {\n                    yRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n                else {\n                    yRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n            }\n        });\n        onMounted(() => {\n            // if container exist, it always can't be resolved when scrollbar is mounted\n            // for example:\n            // - component\n            //   - scrollbar\n            //     - inner\n            // if you pass inner to scrollbar, you may use a ref inside component\n            // however, when scrollbar is mounted, ref is not ready at component\n            // you need to init by yourself\n            if (props.container)\n                return;\n            sync();\n        });\n        onBeforeUnmount(() => {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            off('mousemove', window, handleYScrollMouseMove, true);\n            off('mouseup', window, handleYScrollMouseUp, true);\n        });\n        const themeRef = useTheme('Scrollbar', '-scrollbar', style, scrollbarLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut, scrollbarBorderRadius, scrollbarHeight, scrollbarWidth }, self: { color, colorHover } } = themeRef.value;\n            return {\n                '--n-scrollbar-bezier': cubicBezierEaseInOut,\n                '--n-scrollbar-color': color,\n                '--n-scrollbar-color-hover': colorHover,\n                '--n-scrollbar-border-radius': scrollbarBorderRadius,\n                '--n-scrollbar-width': scrollbarWidth,\n                '--n-scrollbar-height': scrollbarHeight\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('scrollbar', undefined, cssVarsRef, props)\n            : undefined;\n        const exposedMethods = {\n            scrollTo,\n            scrollBy,\n            sync,\n            syncUnifiedContainer,\n            handleMouseEnterWrapper,\n            handleMouseLeaveWrapper\n        };\n        return Object.assign(Object.assign({}, exposedMethods), { mergedClsPrefix: mergedClsPrefixRef, containerScrollTop: containerScrollTopRef, wrapperRef,\n            containerRef,\n            contentRef,\n            yRailRef,\n            xRailRef, needYBar: needYBarRef, needXBar: needXBarRef, yBarSizePx: yBarSizePxRef, xBarSizePx: xBarSizePxRef, yBarTopPx: yBarTopPxRef, xBarLeftPx: xBarLeftPxRef, isShowXBar: isShowXBarRef, isShowYBar: isShowYBarRef, isIos,\n            handleScroll,\n            handleContentResize,\n            handleContainerResize,\n            handleYScrollMouseDown,\n            handleXScrollMouseDown, cssVars: inlineThemeDisabled ? undefined : cssVarsRef, themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass, onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender });\n    },\n    render() {\n        var _a;\n        const { $slots, mergedClsPrefix, triggerDisplayManually } = this;\n        if (!this.scrollable)\n            return (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);\n        const createChildren = () => {\n            var _a, _b;\n            (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n            return h('div', mergeProps(this.$attrs, {\n                role: 'none',\n                ref: 'wrapperRef',\n                class: [`${mergedClsPrefix}-scrollbar`, this.themeClass],\n                style: this.cssVars,\n                onMouseenter: triggerDisplayManually\n                    ? undefined\n                    : this.handleMouseEnterWrapper,\n                onMouseleave: triggerDisplayManually\n                    ? undefined\n                    : this.handleMouseLeaveWrapper\n            }), [\n                this.container ? ((_b = $slots.default) === null || _b === void 0 ? void 0 : _b.call($slots)) : (h(\"div\", { role: \"none\", ref: \"containerRef\", class: [\n                        `${mergedClsPrefix}-scrollbar-container`,\n                        this.containerClass\n                    ], style: this.containerStyle, onScroll: this.handleScroll, onWheel: this.onWheel },\n                    h(VResizeObserver, { onResize: this.handleContentResize }, {\n                        default: () => (h(\"div\", { ref: \"contentRef\", role: \"none\", style: [\n                                {\n                                    width: this.xScrollable ? 'fit-content' : null\n                                },\n                                this.contentStyle\n                            ], class: [\n                                `${mergedClsPrefix}-scrollbar-content`,\n                                this.contentClass\n                            ] }, $slots))\n                    }))),\n                h(\"div\", { ref: \"yRailRef\", class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--vertical`, style: this.horizontalRailStyle, \"aria-hidden\": true },\n                    h(Transition, { name: \"fade-in-transition\" }, {\n                        default: () => this.needYBar && this.isShowYBar && !this.isIos ? (h(\"div\", { class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`, style: {\n                                height: this.yBarSizePx,\n                                top: this.yBarTopPx\n                            }, onMousedown: this.handleYScrollMouseDown })) : null\n                    })),\n                h(\"div\", { ref: \"xRailRef\", class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--horizontal`, style: this.verticalRailStyle, \"aria-hidden\": true },\n                    h(Transition, { name: \"fade-in-transition\" }, {\n                        default: () => this.needXBar && this.isShowXBar && !this.isIos ? (h(\"div\", { class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`, style: {\n                                width: this.xBarSizePx,\n                                left: this.xBarLeftPx\n                            }, onMousedown: this.handleXScrollMouseDown })) : null\n                    }))\n            ]);\n        };\n        return this.container ? (createChildren()) : (h(VResizeObserver, { onResize: this.handleContainerResize }, {\n            default: createChildren\n        }));\n    }\n});\nexport default Scrollbar;\nexport const XScrollbar = Scrollbar;\n"]},"metadata":{},"sourceType":"module"}