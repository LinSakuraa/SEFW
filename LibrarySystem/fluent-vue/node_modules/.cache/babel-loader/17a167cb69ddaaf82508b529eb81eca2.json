{"ast":null,"code":"import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n  success: h(SuccessIcon, null),\n  error: h(ErrorIcon, null),\n  warning: h(WarningIcon, null),\n  info: h(InfoIcon, null)\n};\nexport default defineComponent({\n  name: 'ProgressCircle',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    status: {\n      type: String,\n      required: true\n    },\n    strokeWidth: {\n      type: Number,\n      required: true\n    },\n    fillColor: String,\n    railColor: String,\n    railStyle: [String, Object],\n    percentage: {\n      type: Number,\n      default: 0\n    },\n    offsetDegree: {\n      type: Number,\n      default: 0\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    indicatorTextColor: String,\n    unit: String,\n    viewBoxWidth: {\n      type: Number,\n      required: true\n    },\n    gapDegree: {\n      type: Number,\n      required: true\n    },\n    gapOffsetDegree: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  setup(props, {\n    slots\n  }) {\n    function getPathStyles(percent, offsetDegree, strokeColor) {\n      const {\n        gapDegree,\n        viewBoxWidth\n      } = props;\n      const radius = 50;\n      const beginPositionX = 0;\n      const beginPositionY = radius;\n      const endPositionX = 0;\n      const endPositionY = 2 * radius;\n      const pathString = `M 55,55 m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n      const len = Math.PI * 2 * radius;\n      const pathStyle = {\n        stroke: strokeColor,\n        strokeDasharray: `${percent / 100 * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n        strokeDashoffset: `-${gapDegree / 2 + Math.PI / 3.6 * offsetDegree}px`\n      };\n      return {\n        pathString,\n        pathStyle\n      };\n    }\n\n    return () => {\n      const {\n        fillColor,\n        railColor,\n        strokeWidth,\n        offsetDegree,\n        status,\n        percentage,\n        showIndicator,\n        indicatorTextColor,\n        unit,\n        gapOffsetDegree,\n        clsPrefix\n      } = props;\n      const {\n        pathString: railPathString,\n        pathStyle: railPathStyle\n      } = getPathStyles(100, 0, railColor);\n      const {\n        pathString: fillPathString,\n        pathStyle: fillPathStyle\n      } = getPathStyles(percentage, offsetDegree, fillColor);\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-circle`,\n        style: {\n          transform: gapOffsetDegree ? `rotate(${gapOffsetDegree}deg)` : undefined\n        }\n      }, h(\"svg\", {\n        viewBox: \"0 0 110 110\"\n      }, h(\"g\", null, h(\"path\", {\n        class: `${clsPrefix}-progress-graph-circle-rail`,\n        d: railPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: railPathStyle\n      })), h(\"g\", null, h(\"path\", {\n        class: [`${clsPrefix}-progress-graph-circle-fill`, percentage === 0 && `${clsPrefix}-progress-graph-circle-fill--empty`],\n        d: fillPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: fillPathStyle\n      }))))), showIndicator ? h(\"div\", null, slots.default ? h(\"div\", {\n        class: `${clsPrefix}-progress-custom-content`,\n        role: \"none\"\n      }, slots.default()) : status !== 'default' ? h(\"div\", {\n        class: `${clsPrefix}-progress-icon`,\n        \"aria-hidden\": true\n      }, h(NBaseIcon, {\n        clsPrefix: clsPrefix\n      }, {\n        default: () => iconMap[status]\n      })) : h(\"div\", {\n        class: `${clsPrefix}-progress-text`,\n        style: {\n          color: indicatorTextColor\n        },\n        role: \"none\"\n      }, h(\"span\", {\n        class: `${clsPrefix}-progress-text__percentage`\n      }, percentage), h(\"span\", {\n        class: `${clsPrefix}-progress-text__unit`\n      }, unit))) : null);\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/progress/src/Circle.js"],"names":["h","defineComponent","NBaseIcon","SuccessIcon","ErrorIcon","WarningIcon","InfoIcon","iconMap","success","error","warning","info","name","props","clsPrefix","type","String","required","status","strokeWidth","Number","fillColor","railColor","railStyle","Object","percentage","default","offsetDegree","showIndicator","Boolean","indicatorTextColor","unit","viewBoxWidth","gapDegree","gapOffsetDegree","setup","slots","getPathStyles","percent","strokeColor","radius","beginPositionX","beginPositionY","endPositionX","endPositionY","pathString","len","Math","PI","pathStyle","stroke","strokeDasharray","strokeDashoffset","railPathString","railPathStyle","fillPathString","fillPathStyle","class","role","style","transform","undefined","viewBox","d","fill","color"],"mappings":"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","sourcesContent":["import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n    success: h(SuccessIcon, null),\n    error: h(ErrorIcon, null),\n    warning: h(WarningIcon, null),\n    info: h(InfoIcon, null)\n};\nexport default defineComponent({\n    name: 'ProgressCircle',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        status: {\n            type: String,\n            required: true\n        },\n        strokeWidth: {\n            type: Number,\n            required: true\n        },\n        fillColor: String,\n        railColor: String,\n        railStyle: [String, Object],\n        percentage: {\n            type: Number,\n            default: 0\n        },\n        offsetDegree: {\n            type: Number,\n            default: 0\n        },\n        showIndicator: {\n            type: Boolean,\n            required: true\n        },\n        indicatorTextColor: String,\n        unit: String,\n        viewBoxWidth: {\n            type: Number,\n            required: true\n        },\n        gapDegree: {\n            type: Number,\n            required: true\n        },\n        gapOffsetDegree: {\n            type: Number,\n            default: 0\n        }\n    },\n    setup(props, { slots }) {\n        function getPathStyles(percent, offsetDegree, strokeColor) {\n            const { gapDegree, viewBoxWidth } = props;\n            const radius = 50;\n            const beginPositionX = 0;\n            const beginPositionY = radius;\n            const endPositionX = 0;\n            const endPositionY = 2 * radius;\n            const pathString = `M 55,55 m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n            const len = Math.PI * 2 * radius;\n            const pathStyle = {\n                stroke: strokeColor,\n                strokeDasharray: `${(percent / 100) * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n                strokeDashoffset: `-${gapDegree / 2 + (Math.PI / 3.6) * offsetDegree}px`\n            };\n            return {\n                pathString,\n                pathStyle\n            };\n        }\n        return () => {\n            const { fillColor, railColor, strokeWidth, offsetDegree, status, percentage, showIndicator, indicatorTextColor, unit, gapOffsetDegree, clsPrefix } = props;\n            const { pathString: railPathString, pathStyle: railPathStyle } = getPathStyles(100, 0, railColor);\n            const { pathString: fillPathString, pathStyle: fillPathStyle } = getPathStyles(percentage, offsetDegree, fillColor);\n            return (h(\"div\", { class: `${clsPrefix}-progress-content`, role: \"none\" },\n                h(\"div\", { class: `${clsPrefix}-progress-graph`, \"aria-hidden\": true },\n                    h(\"div\", { class: `${clsPrefix}-progress-graph-circle`, style: {\n                            transform: gapOffsetDegree\n                                ? `rotate(${gapOffsetDegree}deg)`\n                                : undefined\n                        } },\n                        h(\"svg\", { viewBox: \"0 0 110 110\" },\n                            h(\"g\", null,\n                                h(\"path\", { class: `${clsPrefix}-progress-graph-circle-rail`, d: railPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: railPathStyle })),\n                            h(\"g\", null,\n                                h(\"path\", { class: [\n                                        `${clsPrefix}-progress-graph-circle-fill`,\n                                        percentage === 0 &&\n                                            `${clsPrefix}-progress-graph-circle-fill--empty`\n                                    ], d: fillPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: fillPathStyle }))))),\n                showIndicator ? (h(\"div\", null, slots.default ? (h(\"div\", { class: `${clsPrefix}-progress-custom-content`, role: \"none\" }, slots.default())) : status !== 'default' ? (h(\"div\", { class: `${clsPrefix}-progress-icon`, \"aria-hidden\": true },\n                    h(NBaseIcon, { clsPrefix: clsPrefix }, {\n                        default: () => iconMap[status]\n                    }))) : (h(\"div\", { class: `${clsPrefix}-progress-text`, style: {\n                        color: indicatorTextColor\n                    }, role: \"none\" },\n                    h(\"span\", { class: `${clsPrefix}-progress-text__percentage` }, percentage),\n                    h(\"span\", { class: `${clsPrefix}-progress-text__unit` }, unit))))) : null));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}