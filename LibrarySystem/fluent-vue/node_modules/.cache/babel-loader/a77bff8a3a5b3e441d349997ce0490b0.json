{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { inRange, keyArrowDown, keyArrowUp, keyEnd, keyEscape, keyHome, keySpace, keyTab } from \"@microsoft/fast-web-utilities\";\nimport { Listbox } from \"./listbox\";\n/**\n * A Listbox Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria/#listbox | ARIA listbox }.\n *\n * @public\n */\n\nexport class ListboxElement extends Listbox {\n  constructor() {\n    super(...arguments);\n    /**\n     * The index of the most recently checked option.\n     *\n     * @internal\n     * @remarks\n     * Multiple-selection mode only.\n     */\n\n    this.activeIndex = -1;\n    /**\n     * The start index when checking a range of options.\n     *\n     * @internal\n     */\n\n    this.rangeStartIndex = -1;\n  }\n  /**\n   * Returns the last checked option.\n   *\n   * @internal\n   */\n\n\n  get activeOption() {\n    return this.options[this.activeIndex];\n  }\n  /**\n   * Returns the list of checked options.\n   *\n   * @internal\n   */\n\n\n  get checkedOptions() {\n    var _a;\n\n    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter(o => o.checked);\n  }\n  /**\n   * Returns the index of the first selected option.\n   *\n   * @internal\n   */\n\n\n  get firstSelectedOptionIndex() {\n    return this.options.indexOf(this.firstSelectedOption);\n  }\n  /**\n   * Updates the `ariaActiveDescendant` property when the active index changes.\n   *\n   * @param prev - the previous active index\n   * @param next - the next active index\n   *\n   * @internal\n   */\n\n\n  activeIndexChanged(prev, next) {\n    var _a, _b;\n\n    this.ariaActiveDescendant = (_b = (_a = this.options[next]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : \"\";\n    this.focusAndScrollOptionIntoView();\n  }\n  /**\n   * Toggles the checked state for the currently active option.\n   *\n   * @remarks\n   * Multiple-selection mode only.\n   *\n   * @internal\n   */\n\n\n  checkActiveIndex() {\n    if (!this.multiple) {\n      return;\n    }\n\n    const activeItem = this.activeOption;\n\n    if (activeItem) {\n      activeItem.checked = true;\n    }\n  }\n  /**\n   * Sets the active index to the first option and marks it as checked.\n   *\n   * @remarks\n   * Multi-selection mode only.\n   *\n   * @param preserveChecked - mark all options unchecked before changing the active index\n   *\n   * @internal\n   */\n\n\n  checkFirstOption(preserveChecked = false) {\n    if (preserveChecked) {\n      if (this.rangeStartIndex === -1) {\n        this.rangeStartIndex = this.activeIndex + 1;\n      }\n\n      this.options.forEach((o, i) => {\n        o.checked = inRange(i, this.rangeStartIndex);\n      });\n    } else {\n      this.uncheckAllOptions();\n    }\n\n    this.activeIndex = 0;\n    this.checkActiveIndex();\n  }\n  /**\n   * Decrements the active index and sets the matching option as checked.\n   *\n   * @remarks\n   * Multi-selection mode only.\n   *\n   * @param preserveChecked - mark all options unchecked before changing the active index\n   *\n   * @internal\n   */\n\n\n  checkLastOption(preserveChecked = false) {\n    if (preserveChecked) {\n      if (this.rangeStartIndex === -1) {\n        this.rangeStartIndex = this.activeIndex;\n      }\n\n      this.options.forEach((o, i) => {\n        o.checked = inRange(i, this.rangeStartIndex, this.options.length);\n      });\n    } else {\n      this.uncheckAllOptions();\n    }\n\n    this.activeIndex = this.options.length - 1;\n    this.checkActiveIndex();\n  }\n  /**\n   * @override\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"focusout\", this.focusoutHandler);\n  }\n  /**\n   * @override\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    this.removeEventListener(\"focusout\", this.focusoutHandler);\n    super.disconnectedCallback();\n  }\n  /**\n   * Increments the active index and marks the matching option as checked.\n   *\n   * @remarks\n   * Multiple-selection mode only.\n   *\n   * @param preserveChecked - mark all options unchecked before changing the active index\n   *\n   * @internal\n   */\n\n\n  checkNextOption(preserveChecked = false) {\n    if (preserveChecked) {\n      if (this.rangeStartIndex === -1) {\n        this.rangeStartIndex = this.activeIndex;\n      }\n\n      this.options.forEach((o, i) => {\n        o.checked = inRange(i, this.rangeStartIndex, this.activeIndex + 1);\n      });\n    } else {\n      this.uncheckAllOptions();\n    }\n\n    this.activeIndex += this.activeIndex < this.options.length - 1 ? 1 : 0;\n    this.checkActiveIndex();\n  }\n  /**\n   * Decrements the active index and marks the matching option as checked.\n   *\n   * @remarks\n   * Multiple-selection mode only.\n   *\n   * @param preserveChecked - mark all options unchecked before changing the active index\n   *\n   * @internal\n   */\n\n\n  checkPreviousOption(preserveChecked = false) {\n    if (preserveChecked) {\n      if (this.rangeStartIndex === -1) {\n        this.rangeStartIndex = this.activeIndex;\n      }\n\n      if (this.checkedOptions.length === 1) {\n        this.rangeStartIndex += 1;\n      }\n\n      this.options.forEach((o, i) => {\n        o.checked = inRange(i, this.activeIndex, this.rangeStartIndex);\n      });\n    } else {\n      this.uncheckAllOptions();\n    }\n\n    this.activeIndex -= this.activeIndex > 0 ? 1 : 0;\n    this.checkActiveIndex();\n  }\n  /**\n   * Handles click events for listbox options.\n   *\n   * @param e - the event object\n   *\n   * @override\n   * @internal\n   */\n\n\n  clickHandler(e) {\n    var _a;\n\n    if (!this.multiple) {\n      return super.clickHandler(e);\n    }\n\n    const captured = (_a = e.target) === null || _a === void 0 ? void 0 : _a.closest(`[role=option]`);\n\n    if (!captured || captured.disabled) {\n      return;\n    }\n\n    this.uncheckAllOptions();\n    this.activeIndex = this.options.indexOf(captured);\n    this.checkActiveIndex();\n    this.toggleSelectedForAllCheckedOptions();\n    return true;\n  }\n  /**\n   * @override\n   * @internal\n   */\n\n\n  focusAndScrollOptionIntoView() {\n    super.focusAndScrollOptionIntoView(this.activeOption);\n  }\n  /**\n   * In multiple-selection mode:\n   * If any options are selected, the first selected option is checked when\n   * the listbox receives focus. If no options are selected, the first\n   * selectable option is checked.\n   *\n   * @override\n   * @internal\n   */\n\n\n  focusinHandler(e) {\n    if (!this.multiple) {\n      return super.focusinHandler(e);\n    }\n\n    if (!this.shouldSkipFocus && e.target === e.currentTarget) {\n      this.uncheckAllOptions();\n\n      if (this.activeIndex === -1) {\n        this.activeIndex = this.firstSelectedOptionIndex !== -1 ? this.firstSelectedOptionIndex : 0;\n      }\n\n      this.checkActiveIndex();\n      this.setSelectedOptions();\n      this.focusAndScrollOptionIntoView();\n    }\n\n    this.shouldSkipFocus = false;\n  }\n  /**\n   * Unchecks all options when the listbox loses focus.\n   *\n   * @internal\n   */\n\n\n  focusoutHandler(e) {\n    if (this.multiple) {\n      this.uncheckAllOptions();\n    }\n  }\n  /**\n   * Handles keydown actions for listbox navigation and typeahead\n   *\n   * @override\n   * @internal\n   */\n\n\n  keydownHandler(e) {\n    if (!this.multiple) {\n      return super.keydownHandler(e);\n    }\n\n    if (this.disabled) {\n      return true;\n    }\n\n    const {\n      key,\n      shiftKey\n    } = e;\n    this.shouldSkipFocus = false;\n\n    switch (key) {\n      // Select the first available option\n      case keyHome:\n        {\n          this.checkFirstOption(shiftKey);\n          return;\n        }\n      // Select the next selectable option\n\n      case keyArrowDown:\n        {\n          this.checkNextOption(shiftKey);\n          return;\n        }\n      // Select the previous selectable option\n\n      case keyArrowUp:\n        {\n          this.checkPreviousOption(shiftKey);\n          return;\n        }\n      // Select the last available option\n\n      case keyEnd:\n        {\n          this.checkLastOption(shiftKey);\n          return;\n        }\n\n      case keyTab:\n        {\n          this.focusAndScrollOptionIntoView();\n          return true;\n        }\n\n      case keyEscape:\n        {\n          if (this.multiple) {\n            this.uncheckAllOptions();\n            this.checkActiveIndex();\n          }\n\n          return true;\n        }\n\n      case keySpace:\n        {\n          e.preventDefault();\n\n          if (this.typeAheadExpired) {\n            this.toggleSelectedForAllCheckedOptions();\n          }\n\n          return;\n        }\n      // Send key to Typeahead handler\n\n      default:\n        {\n          if (key.length === 1) {\n            this.handleTypeAhead(`${key}`);\n          }\n\n          return true;\n        }\n    }\n  }\n  /**\n   * Prevents `focusin` events from firing before `click` events when the\n   * element is unfocused.\n   *\n   * @override\n   * @internal\n   */\n\n\n  mousedownHandler(e) {\n    if (e.offsetX >= 0 && e.offsetX <= this.scrollWidth) {\n      return super.mousedownHandler(e);\n    }\n  }\n  /**\n   * Switches between single-selection and multi-selection mode.\n   *\n   * @override\n   * @internal\n   */\n\n\n  multipleChanged(prev, next) {\n    var _a;\n\n    super.multipleChanged(prev, next);\n    (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach(o => {\n      o.checked = next ? false : undefined;\n    });\n    this.setSelectedOptions();\n\n    if (next && !this.size) {\n      this.size = 0;\n    }\n  }\n  /**\n   * Sets an option as selected and gives it focus.\n   *\n   * @override\n   * @public\n   */\n\n\n  setSelectedOptions() {\n    if (!this.multiple) {\n      super.setSelectedOptions();\n      return;\n    }\n\n    if (this.$fastController.isConnected && this.options) {\n      this.selectedOptions = this.options.filter(o => o.selected);\n      this.focusAndScrollOptionIntoView();\n    }\n  }\n  /**\n   * Ensures the size is a positive integer when the property is updated.\n   *\n   * @param prev - the previous size value\n   * @param next - the current size value\n   *\n   * @internal\n   */\n\n\n  sizeChanged(prev, next) {\n    const size = Math.max(0, parseInt(next.toFixed(), 10));\n\n    if (size !== next) {\n      DOM.queueUpdate(() => {\n        this.size = size;\n      });\n    }\n  }\n  /**\n   * Toggles the selected state of the provided options. If any provided items\n   * are in an unselected state, all items are set to selected. If every\n   * provided item is selected, they are all unselected.\n   *\n   * @internal\n   */\n\n\n  toggleSelectedForAllCheckedOptions() {\n    const enabledCheckedOptions = this.checkedOptions.filter(o => !o.disabled);\n    const force = !enabledCheckedOptions.every(o => o.selected);\n    enabledCheckedOptions.forEach(o => o.selected = force);\n    this.selectedIndex = this.options.indexOf(enabledCheckedOptions[enabledCheckedOptions.length - 1]);\n    this.setSelectedOptions();\n  }\n  /**\n   * @override\n   * @internal\n   */\n\n\n  typeaheadBufferChanged(prev, next) {\n    if (!this.multiple) {\n      super.typeaheadBufferChanged(prev, next);\n      return;\n    }\n\n    if (this.$fastController.isConnected) {\n      const typeaheadMatches = this.getTypeaheadMatches();\n\n      if (typeaheadMatches) {\n        const activeIndex = this.options.indexOf(this.getTypeaheadMatches[0]);\n\n        if (activeIndex > -1) {\n          this.activeIndex = activeIndex;\n          this.uncheckAllOptions();\n          this.checkActiveIndex();\n        }\n      }\n\n      this.typeAheadExpired = false;\n    }\n  }\n  /**\n   * Unchecks all options.\n   *\n   * @remarks\n   * Multiple-selection mode only.\n   *\n   * @param preserveChecked - reset the rangeStartIndex\n   *\n   * @internal\n   */\n\n\n  uncheckAllOptions(preserveChecked = false) {\n    this.options.forEach(o => o.checked = this.multiple ? false : undefined);\n\n    if (!preserveChecked) {\n      this.rangeStartIndex = -1;\n    }\n  }\n\n}\n\n__decorate([observable], ListboxElement.prototype, \"activeIndex\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], ListboxElement.prototype, \"size\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/listbox/listbox.element.js"],"names":["__decorate","attr","DOM","nullableNumberConverter","observable","inRange","keyArrowDown","keyArrowUp","keyEnd","keyEscape","keyHome","keySpace","keyTab","Listbox","ListboxElement","constructor","arguments","activeIndex","rangeStartIndex","activeOption","options","checkedOptions","_a","filter","o","checked","firstSelectedOptionIndex","indexOf","firstSelectedOption","activeIndexChanged","prev","next","_b","ariaActiveDescendant","id","focusAndScrollOptionIntoView","checkActiveIndex","multiple","activeItem","checkFirstOption","preserveChecked","forEach","i","uncheckAllOptions","checkLastOption","length","connectedCallback","addEventListener","focusoutHandler","disconnectedCallback","removeEventListener","checkNextOption","checkPreviousOption","clickHandler","e","captured","target","closest","disabled","toggleSelectedForAllCheckedOptions","focusinHandler","shouldSkipFocus","currentTarget","setSelectedOptions","keydownHandler","key","shiftKey","preventDefault","typeAheadExpired","handleTypeAhead","mousedownHandler","offsetX","scrollWidth","multipleChanged","undefined","size","$fastController","isConnected","selectedOptions","selected","sizeChanged","Math","max","parseInt","toFixed","queueUpdate","enabledCheckedOptions","force","every","selectedIndex","typeaheadBufferChanged","typeaheadMatches","getTypeaheadMatches","prototype","converter"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { inRange, keyArrowDown, keyArrowUp, keyEnd, keyEscape, keyHome, keySpace, keyTab, } from \"@microsoft/fast-web-utilities\";\nimport { Listbox } from \"./listbox\";\n/**\n * A Listbox Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria/#listbox | ARIA listbox }.\n *\n * @public\n */\nexport class ListboxElement extends Listbox {\n    constructor() {\n        super(...arguments);\n        /**\n         * The index of the most recently checked option.\n         *\n         * @internal\n         * @remarks\n         * Multiple-selection mode only.\n         */\n        this.activeIndex = -1;\n        /**\n         * The start index when checking a range of options.\n         *\n         * @internal\n         */\n        this.rangeStartIndex = -1;\n    }\n    /**\n     * Returns the last checked option.\n     *\n     * @internal\n     */\n    get activeOption() {\n        return this.options[this.activeIndex];\n    }\n    /**\n     * Returns the list of checked options.\n     *\n     * @internal\n     */\n    get checkedOptions() {\n        var _a;\n        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.filter(o => o.checked);\n    }\n    /**\n     * Returns the index of the first selected option.\n     *\n     * @internal\n     */\n    get firstSelectedOptionIndex() {\n        return this.options.indexOf(this.firstSelectedOption);\n    }\n    /**\n     * Updates the `ariaActiveDescendant` property when the active index changes.\n     *\n     * @param prev - the previous active index\n     * @param next - the next active index\n     *\n     * @internal\n     */\n    activeIndexChanged(prev, next) {\n        var _a, _b;\n        this.ariaActiveDescendant = (_b = (_a = this.options[next]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : \"\";\n        this.focusAndScrollOptionIntoView();\n    }\n    /**\n     * Toggles the checked state for the currently active option.\n     *\n     * @remarks\n     * Multiple-selection mode only.\n     *\n     * @internal\n     */\n    checkActiveIndex() {\n        if (!this.multiple) {\n            return;\n        }\n        const activeItem = this.activeOption;\n        if (activeItem) {\n            activeItem.checked = true;\n        }\n    }\n    /**\n     * Sets the active index to the first option and marks it as checked.\n     *\n     * @remarks\n     * Multi-selection mode only.\n     *\n     * @param preserveChecked - mark all options unchecked before changing the active index\n     *\n     * @internal\n     */\n    checkFirstOption(preserveChecked = false) {\n        if (preserveChecked) {\n            if (this.rangeStartIndex === -1) {\n                this.rangeStartIndex = this.activeIndex + 1;\n            }\n            this.options.forEach((o, i) => {\n                o.checked = inRange(i, this.rangeStartIndex);\n            });\n        }\n        else {\n            this.uncheckAllOptions();\n        }\n        this.activeIndex = 0;\n        this.checkActiveIndex();\n    }\n    /**\n     * Decrements the active index and sets the matching option as checked.\n     *\n     * @remarks\n     * Multi-selection mode only.\n     *\n     * @param preserveChecked - mark all options unchecked before changing the active index\n     *\n     * @internal\n     */\n    checkLastOption(preserveChecked = false) {\n        if (preserveChecked) {\n            if (this.rangeStartIndex === -1) {\n                this.rangeStartIndex = this.activeIndex;\n            }\n            this.options.forEach((o, i) => {\n                o.checked = inRange(i, this.rangeStartIndex, this.options.length);\n            });\n        }\n        else {\n            this.uncheckAllOptions();\n        }\n        this.activeIndex = this.options.length - 1;\n        this.checkActiveIndex();\n    }\n    /**\n     * @override\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.addEventListener(\"focusout\", this.focusoutHandler);\n    }\n    /**\n     * @override\n     * @internal\n     */\n    disconnectedCallback() {\n        this.removeEventListener(\"focusout\", this.focusoutHandler);\n        super.disconnectedCallback();\n    }\n    /**\n     * Increments the active index and marks the matching option as checked.\n     *\n     * @remarks\n     * Multiple-selection mode only.\n     *\n     * @param preserveChecked - mark all options unchecked before changing the active index\n     *\n     * @internal\n     */\n    checkNextOption(preserveChecked = false) {\n        if (preserveChecked) {\n            if (this.rangeStartIndex === -1) {\n                this.rangeStartIndex = this.activeIndex;\n            }\n            this.options.forEach((o, i) => {\n                o.checked = inRange(i, this.rangeStartIndex, this.activeIndex + 1);\n            });\n        }\n        else {\n            this.uncheckAllOptions();\n        }\n        this.activeIndex += this.activeIndex < this.options.length - 1 ? 1 : 0;\n        this.checkActiveIndex();\n    }\n    /**\n     * Decrements the active index and marks the matching option as checked.\n     *\n     * @remarks\n     * Multiple-selection mode only.\n     *\n     * @param preserveChecked - mark all options unchecked before changing the active index\n     *\n     * @internal\n     */\n    checkPreviousOption(preserveChecked = false) {\n        if (preserveChecked) {\n            if (this.rangeStartIndex === -1) {\n                this.rangeStartIndex = this.activeIndex;\n            }\n            if (this.checkedOptions.length === 1) {\n                this.rangeStartIndex += 1;\n            }\n            this.options.forEach((o, i) => {\n                o.checked = inRange(i, this.activeIndex, this.rangeStartIndex);\n            });\n        }\n        else {\n            this.uncheckAllOptions();\n        }\n        this.activeIndex -= this.activeIndex > 0 ? 1 : 0;\n        this.checkActiveIndex();\n    }\n    /**\n     * Handles click events for listbox options.\n     *\n     * @param e - the event object\n     *\n     * @override\n     * @internal\n     */\n    clickHandler(e) {\n        var _a;\n        if (!this.multiple) {\n            return super.clickHandler(e);\n        }\n        const captured = (_a = e.target) === null || _a === void 0 ? void 0 : _a.closest(`[role=option]`);\n        if (!captured || captured.disabled) {\n            return;\n        }\n        this.uncheckAllOptions();\n        this.activeIndex = this.options.indexOf(captured);\n        this.checkActiveIndex();\n        this.toggleSelectedForAllCheckedOptions();\n        return true;\n    }\n    /**\n     * @override\n     * @internal\n     */\n    focusAndScrollOptionIntoView() {\n        super.focusAndScrollOptionIntoView(this.activeOption);\n    }\n    /**\n     * In multiple-selection mode:\n     * If any options are selected, the first selected option is checked when\n     * the listbox receives focus. If no options are selected, the first\n     * selectable option is checked.\n     *\n     * @override\n     * @internal\n     */\n    focusinHandler(e) {\n        if (!this.multiple) {\n            return super.focusinHandler(e);\n        }\n        if (!this.shouldSkipFocus && e.target === e.currentTarget) {\n            this.uncheckAllOptions();\n            if (this.activeIndex === -1) {\n                this.activeIndex =\n                    this.firstSelectedOptionIndex !== -1\n                        ? this.firstSelectedOptionIndex\n                        : 0;\n            }\n            this.checkActiveIndex();\n            this.setSelectedOptions();\n            this.focusAndScrollOptionIntoView();\n        }\n        this.shouldSkipFocus = false;\n    }\n    /**\n     * Unchecks all options when the listbox loses focus.\n     *\n     * @internal\n     */\n    focusoutHandler(e) {\n        if (this.multiple) {\n            this.uncheckAllOptions();\n        }\n    }\n    /**\n     * Handles keydown actions for listbox navigation and typeahead\n     *\n     * @override\n     * @internal\n     */\n    keydownHandler(e) {\n        if (!this.multiple) {\n            return super.keydownHandler(e);\n        }\n        if (this.disabled) {\n            return true;\n        }\n        const { key, shiftKey } = e;\n        this.shouldSkipFocus = false;\n        switch (key) {\n            // Select the first available option\n            case keyHome: {\n                this.checkFirstOption(shiftKey);\n                return;\n            }\n            // Select the next selectable option\n            case keyArrowDown: {\n                this.checkNextOption(shiftKey);\n                return;\n            }\n            // Select the previous selectable option\n            case keyArrowUp: {\n                this.checkPreviousOption(shiftKey);\n                return;\n            }\n            // Select the last available option\n            case keyEnd: {\n                this.checkLastOption(shiftKey);\n                return;\n            }\n            case keyTab: {\n                this.focusAndScrollOptionIntoView();\n                return true;\n            }\n            case keyEscape: {\n                if (this.multiple) {\n                    this.uncheckAllOptions();\n                    this.checkActiveIndex();\n                }\n                return true;\n            }\n            case keySpace: {\n                e.preventDefault();\n                if (this.typeAheadExpired) {\n                    this.toggleSelectedForAllCheckedOptions();\n                }\n                return;\n            }\n            // Send key to Typeahead handler\n            default: {\n                if (key.length === 1) {\n                    this.handleTypeAhead(`${key}`);\n                }\n                return true;\n            }\n        }\n    }\n    /**\n     * Prevents `focusin` events from firing before `click` events when the\n     * element is unfocused.\n     *\n     * @override\n     * @internal\n     */\n    mousedownHandler(e) {\n        if (e.offsetX >= 0 && e.offsetX <= this.scrollWidth) {\n            return super.mousedownHandler(e);\n        }\n    }\n    /**\n     * Switches between single-selection and multi-selection mode.\n     *\n     * @override\n     * @internal\n     */\n    multipleChanged(prev, next) {\n        var _a;\n        super.multipleChanged(prev, next);\n        (_a = this.options) === null || _a === void 0 ? void 0 : _a.forEach(o => {\n            o.checked = next ? false : undefined;\n        });\n        this.setSelectedOptions();\n        if (next && !this.size) {\n            this.size = 0;\n        }\n    }\n    /**\n     * Sets an option as selected and gives it focus.\n     *\n     * @override\n     * @public\n     */\n    setSelectedOptions() {\n        if (!this.multiple) {\n            super.setSelectedOptions();\n            return;\n        }\n        if (this.$fastController.isConnected && this.options) {\n            this.selectedOptions = this.options.filter(o => o.selected);\n            this.focusAndScrollOptionIntoView();\n        }\n    }\n    /**\n     * Ensures the size is a positive integer when the property is updated.\n     *\n     * @param prev - the previous size value\n     * @param next - the current size value\n     *\n     * @internal\n     */\n    sizeChanged(prev, next) {\n        const size = Math.max(0, parseInt(next.toFixed(), 10));\n        if (size !== next) {\n            DOM.queueUpdate(() => {\n                this.size = size;\n            });\n        }\n    }\n    /**\n     * Toggles the selected state of the provided options. If any provided items\n     * are in an unselected state, all items are set to selected. If every\n     * provided item is selected, they are all unselected.\n     *\n     * @internal\n     */\n    toggleSelectedForAllCheckedOptions() {\n        const enabledCheckedOptions = this.checkedOptions.filter(o => !o.disabled);\n        const force = !enabledCheckedOptions.every(o => o.selected);\n        enabledCheckedOptions.forEach(o => (o.selected = force));\n        this.selectedIndex = this.options.indexOf(enabledCheckedOptions[enabledCheckedOptions.length - 1]);\n        this.setSelectedOptions();\n    }\n    /**\n     * @override\n     * @internal\n     */\n    typeaheadBufferChanged(prev, next) {\n        if (!this.multiple) {\n            super.typeaheadBufferChanged(prev, next);\n            return;\n        }\n        if (this.$fastController.isConnected) {\n            const typeaheadMatches = this.getTypeaheadMatches();\n            if (typeaheadMatches) {\n                const activeIndex = this.options.indexOf(this.getTypeaheadMatches[0]);\n                if (activeIndex > -1) {\n                    this.activeIndex = activeIndex;\n                    this.uncheckAllOptions();\n                    this.checkActiveIndex();\n                }\n            }\n            this.typeAheadExpired = false;\n        }\n    }\n    /**\n     * Unchecks all options.\n     *\n     * @remarks\n     * Multiple-selection mode only.\n     *\n     * @param preserveChecked - reset the rangeStartIndex\n     *\n     * @internal\n     */\n    uncheckAllOptions(preserveChecked = false) {\n        this.options.forEach(o => (o.checked = this.multiple ? false : undefined));\n        if (!preserveChecked) {\n            this.rangeStartIndex = -1;\n        }\n    }\n}\n__decorate([\n    observable\n], ListboxElement.prototype, \"activeIndex\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], ListboxElement.prototype, \"size\", void 0);\n"]},"metadata":{},"sourceType":"module"}