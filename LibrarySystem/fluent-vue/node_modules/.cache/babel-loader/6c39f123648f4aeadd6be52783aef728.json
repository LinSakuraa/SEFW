{"ast":null,"code":"import { Observable } from \"@microsoft/fast-element\";\n/**\n * A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that\n * styles are applied while the property matches and that styles are not applied if the property does\n * not match.\n *\n * @public\n */\n\nexport class PropertyStyleSheetBehavior {\n  /**\n   * Constructs a {@link PropertyStyleSheetBehavior} instance.\n   * @param propertyName - The property name to operate from.\n   * @param value - The property value to operate from.\n   * @param styles - The styles to coordinate with the property.\n   */\n  constructor(propertyName, value, styles) {\n    this.propertyName = propertyName;\n    this.value = value;\n    this.styles = styles;\n  }\n  /**\n   * Binds the behavior to the element.\n   * @param elementInstance - The element for which the property is applied.\n   */\n\n\n  bind(elementInstance) {\n    Observable.getNotifier(elementInstance).subscribe(this, this.propertyName);\n    this.handleChange(elementInstance, this.propertyName);\n  }\n  /**\n   * Unbinds the behavior from the element.\n   * @param source - The element for which the behavior is unbinding.\n   * @internal\n   */\n\n\n  unbind(source) {\n    Observable.getNotifier(source).unsubscribe(this, this.propertyName);\n    source.$fastController.removeStyles(this.styles);\n  }\n  /**\n   * Change event for the provided element.\n   * @param source - the element for which to attach or detach styles.\n   * @param key - the key to lookup to know if the element already has the styles\n   * @internal\n   */\n\n\n  handleChange(source, key) {\n    if (source[key] === this.value) {\n      source.$fastController.addStyles(this.styles);\n    } else {\n      source.$fastController.removeStyles(this.styles);\n    }\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/utilities/property-stylesheet-behavior.js"],"names":["Observable","PropertyStyleSheetBehavior","constructor","propertyName","value","styles","bind","elementInstance","getNotifier","subscribe","handleChange","unbind","source","unsubscribe","$fastController","removeStyles","key","addStyles"],"mappings":"AAAA,SAASA,UAAT,QAA4B,yBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAAN,CAAiC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,YAAD,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AACrC,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,eAAD,EAAkB;AAClBP,IAAAA,UAAU,CAACQ,WAAX,CAAuBD,eAAvB,EAAwCE,SAAxC,CAAkD,IAAlD,EAAwD,KAAKN,YAA7D;AACA,SAAKO,YAAL,CAAkBH,eAAlB,EAAmC,KAAKJ,YAAxC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,MAAM,CAACC,MAAD,EAAS;AACXZ,IAAAA,UAAU,CAACQ,WAAX,CAAuBI,MAAvB,EAA+BC,WAA/B,CAA2C,IAA3C,EAAiD,KAAKV,YAAtD;AACAS,IAAAA,MAAM,CAACE,eAAP,CAAuBC,YAAvB,CAAoC,KAAKV,MAAzC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,YAAY,CAACE,MAAD,EAASI,GAAT,EAAc;AACtB,QAAIJ,MAAM,CAACI,GAAD,CAAN,KAAgB,KAAKZ,KAAzB,EAAgC;AAC5BQ,MAAAA,MAAM,CAACE,eAAP,CAAuBG,SAAvB,CAAiC,KAAKZ,MAAtC;AACH,KAFD,MAGK;AACDO,MAAAA,MAAM,CAACE,eAAP,CAAuBC,YAAvB,CAAoC,KAAKV,MAAzC;AACH;AACJ;;AA1CmC","sourcesContent":["import { Observable, } from \"@microsoft/fast-element\";\n/**\n * A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that\n * styles are applied while the property matches and that styles are not applied if the property does\n * not match.\n *\n * @public\n */\nexport class PropertyStyleSheetBehavior {\n    /**\n     * Constructs a {@link PropertyStyleSheetBehavior} instance.\n     * @param propertyName - The property name to operate from.\n     * @param value - The property value to operate from.\n     * @param styles - The styles to coordinate with the property.\n     */\n    constructor(propertyName, value, styles) {\n        this.propertyName = propertyName;\n        this.value = value;\n        this.styles = styles;\n    }\n    /**\n     * Binds the behavior to the element.\n     * @param elementInstance - The element for which the property is applied.\n     */\n    bind(elementInstance) {\n        Observable.getNotifier(elementInstance).subscribe(this, this.propertyName);\n        this.handleChange(elementInstance, this.propertyName);\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     * @internal\n     */\n    unbind(source) {\n        Observable.getNotifier(source).unsubscribe(this, this.propertyName);\n        source.$fastController.removeStyles(this.styles);\n    }\n    /**\n     * Change event for the provided element.\n     * @param source - the element for which to attach or detach styles.\n     * @param key - the key to lookup to know if the element already has the styles\n     * @internal\n     */\n    handleChange(source, key) {\n        if (source[key] === this.value) {\n            source.$fastController.addStyles(this.styles);\n        }\n        else {\n            source.$fastController.removeStyles(this.styles);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}