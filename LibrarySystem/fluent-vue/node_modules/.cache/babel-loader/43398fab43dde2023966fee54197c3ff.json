{"ast":null,"code":"import { h, createTextVNode, defineComponent, computed } from 'vue';\nimport { format, formatDistanceStrict, fromUnixTime, getTime } from 'date-fns';\nimport { getTimezoneOffset } from 'date-fns-tz';\nimport { useLocale } from '../../_mixins';\nconst timeProps = {\n  time: {\n    type: [Number, Date],\n    default: undefined // For unix or non unix mode, it should be different default value\n\n  },\n  type: {\n    type: String,\n    default: 'datetime'\n  },\n  to: {\n    type: [Number, Date],\n    default: undefined // the same as `time` prop\n\n  },\n  unix: Boolean,\n  format: String,\n  text: Boolean,\n  timezone: String\n};\nexport default defineComponent({\n  name: 'Time',\n  props: timeProps,\n\n  setup(props) {\n    const now = Date.now();\n    const {\n      localeRef,\n      dateLocaleRef\n    } = useLocale('Time');\n    const mergedFormatRef = computed(() => {\n      const {\n        timezone\n      } = props;\n\n      if (timezone) {\n        return (time, _format) => {\n          return format(getTime(time) + -getTimezoneOffset(Intl.DateTimeFormat().resolvedOptions().timeZone, time) + getTimezoneOffset(timezone, time), _format);\n        };\n      }\n\n      return format;\n    });\n    const dateFnsOptionsRef = computed(() => {\n      return {\n        locale: dateLocaleRef.value.locale\n      };\n    });\n    const mergedTimeRef = computed(() => {\n      const {\n        time\n      } = props;\n\n      if (props.unix) {\n        if (time === undefined) return now;\n        return fromUnixTime(typeof time === 'number' ? time : time.valueOf());\n      }\n\n      return time !== null && time !== void 0 ? time : now;\n    });\n    const mergedToRef = computed(() => {\n      const {\n        to\n      } = props;\n\n      if (props.unix) {\n        if (to === undefined) return now;\n        return fromUnixTime(typeof to === 'number' ? to : to.valueOf());\n      }\n\n      return to !== null && to !== void 0 ? to : now;\n    });\n    const renderedTimeRef = computed(() => {\n      if (props.format) {\n        return mergedFormatRef.value(mergedTimeRef.value, props.format, dateFnsOptionsRef.value);\n      } else if (props.type === 'date') {\n        return mergedFormatRef.value(mergedTimeRef.value, localeRef.value.dateFormat, dateFnsOptionsRef.value);\n      } else if (props.type === 'datetime') {\n        return mergedFormatRef.value(mergedTimeRef.value, localeRef.value.dateTimeFormat, dateFnsOptionsRef.value);\n      } else {\n        return formatDistanceStrict(mergedTimeRef.value, mergedToRef.value, {\n          addSuffix: true,\n          locale: dateLocaleRef.value.locale\n        });\n      }\n    });\n    return {\n      renderedTime: renderedTimeRef\n    };\n  },\n\n  render() {\n    return this.text ? createTextVNode(this.renderedTime) : h('time', [this.renderedTime]);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/time/src/Time.js"],"names":["h","createTextVNode","defineComponent","computed","format","formatDistanceStrict","fromUnixTime","getTime","getTimezoneOffset","useLocale","timeProps","time","type","Number","Date","default","undefined","String","to","unix","Boolean","text","timezone","name","props","setup","now","localeRef","dateLocaleRef","mergedFormatRef","_format","Intl","DateTimeFormat","resolvedOptions","timeZone","dateFnsOptionsRef","locale","value","mergedTimeRef","valueOf","mergedToRef","renderedTimeRef","dateFormat","dateTimeFormat","addSuffix","renderedTime","render"],"mappings":"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","sourcesContent":["import { h, createTextVNode, defineComponent, computed } from 'vue';\nimport { format, formatDistanceStrict, fromUnixTime, getTime } from 'date-fns';\nimport { getTimezoneOffset } from 'date-fns-tz';\nimport { useLocale } from '../../_mixins';\nconst timeProps = {\n    time: {\n        type: [Number, Date],\n        default: undefined // For unix or non unix mode, it should be different default value\n    },\n    type: {\n        type: String,\n        default: 'datetime'\n    },\n    to: {\n        type: [Number, Date],\n        default: undefined // the same as `time` prop\n    },\n    unix: Boolean,\n    format: String,\n    text: Boolean,\n    timezone: String\n};\nexport default defineComponent({\n    name: 'Time',\n    props: timeProps,\n    setup(props) {\n        const now = Date.now();\n        const { localeRef, dateLocaleRef } = useLocale('Time');\n        const mergedFormatRef = computed(() => {\n            const { timezone } = props;\n            if (timezone) {\n                return (time, _format) => {\n                    return format(getTime(time) +\n                        -getTimezoneOffset(Intl.DateTimeFormat().resolvedOptions().timeZone, time) +\n                        getTimezoneOffset(timezone, time), _format);\n                };\n            }\n            return format;\n        });\n        const dateFnsOptionsRef = computed(() => {\n            return {\n                locale: dateLocaleRef.value.locale\n            };\n        });\n        const mergedTimeRef = computed(() => {\n            const { time } = props;\n            if (props.unix) {\n                if (time === undefined)\n                    return now;\n                return fromUnixTime(typeof time === 'number' ? time : time.valueOf());\n            }\n            return time !== null && time !== void 0 ? time : now;\n        });\n        const mergedToRef = computed(() => {\n            const { to } = props;\n            if (props.unix) {\n                if (to === undefined)\n                    return now;\n                return fromUnixTime(typeof to === 'number' ? to : to.valueOf());\n            }\n            return to !== null && to !== void 0 ? to : now;\n        });\n        const renderedTimeRef = computed(() => {\n            if (props.format) {\n                return mergedFormatRef.value(mergedTimeRef.value, props.format, dateFnsOptionsRef.value);\n            }\n            else if (props.type === 'date') {\n                return mergedFormatRef.value(mergedTimeRef.value, localeRef.value.dateFormat, dateFnsOptionsRef.value);\n            }\n            else if (props.type === 'datetime') {\n                return mergedFormatRef.value(mergedTimeRef.value, localeRef.value.dateTimeFormat, dateFnsOptionsRef.value);\n            }\n            else {\n                return formatDistanceStrict(mergedTimeRef.value, mergedToRef.value, {\n                    addSuffix: true,\n                    locale: dateLocaleRef.value.locale\n                });\n            }\n        });\n        return {\n            renderedTime: renderedTimeRef\n        };\n    },\n    render() {\n        return this.text\n            ? createTextVNode(this.renderedTime)\n            : h('time', [this.renderedTime]);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}