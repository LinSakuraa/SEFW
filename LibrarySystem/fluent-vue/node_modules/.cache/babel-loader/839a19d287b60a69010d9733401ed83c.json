{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable, RepeatDirective } from \"@microsoft/fast-element\";\nimport { eventFocusOut, eventKeyDown, keyArrowLeft, keyArrowRight, keyEnd, keyHome } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DataGridRowTypes } from \"./data-grid.options\";\n/**\n * A Data Grid Row Custom HTML Element.\n *\n * @public\n */\n\nexport class DataGridRow extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * The type of row\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: row-type\n     */\n\n    this.rowType = DataGridRowTypes.default;\n    /**\n     * The base data for this row\n     *\n     * @public\n     */\n\n    this.rowData = null;\n    /**\n     * The column definitions of the row\n     *\n     * @public\n     */\n\n    this.columnDefinitions = null;\n    /**\n     * Whether focus is on/in a cell within this row.\n     *\n     * @internal\n     */\n\n    this.isActiveRow = false;\n    this.cellsRepeatBehavior = null;\n    this.cellsPlaceholder = null;\n    /**\n     * @internal\n     */\n\n    this.focusColumnIndex = 0;\n    this.refocusOnLoad = false;\n\n    this.updateRowStyle = () => {\n      this.style.gridTemplateColumns = this.gridTemplateColumns;\n    };\n  }\n\n  gridTemplateColumnsChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateRowStyle();\n    }\n  }\n\n  rowTypeChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateItemTemplate();\n    }\n  }\n\n  rowDataChanged() {\n    if (this.rowData !== null && this.isActiveRow) {\n      this.refocusOnLoad = true;\n      return;\n    }\n  }\n\n  cellItemTemplateChanged() {\n    this.updateItemTemplate();\n  }\n\n  headerCellItemTemplateChanged() {\n    this.updateItemTemplate();\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback(); // note that row elements can be reused with a different data object\n    // as the parent grid's repeat behavior reacts to changes in the data set.\n\n    if (this.cellsRepeatBehavior === null) {\n      this.cellsPlaceholder = document.createComment(\"\");\n      this.appendChild(this.cellsPlaceholder);\n      this.updateItemTemplate();\n      this.cellsRepeatBehavior = new RepeatDirective(x => x.columnDefinitions, x => x.activeCellItemTemplate, {\n        positioning: true\n      }).createBehavior(this.cellsPlaceholder);\n      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n\n      this.$fastController.addBehaviors([this.cellsRepeatBehavior]);\n    }\n\n    this.addEventListener(\"cell-focused\", this.handleCellFocus);\n    this.addEventListener(eventFocusOut, this.handleFocusout);\n    this.addEventListener(eventKeyDown, this.handleKeydown);\n    this.updateRowStyle();\n\n    if (this.refocusOnLoad) {\n      // if focus was on the row when data changed try to refocus on same cell\n      this.refocusOnLoad = false;\n\n      if (this.cellElements.length > this.focusColumnIndex) {\n        this.cellElements[this.focusColumnIndex].focus();\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"cell-focused\", this.handleCellFocus);\n    this.removeEventListener(eventFocusOut, this.handleFocusout);\n    this.removeEventListener(eventKeyDown, this.handleKeydown);\n  }\n\n  handleFocusout(e) {\n    if (!this.contains(e.target)) {\n      this.isActiveRow = false;\n      this.focusColumnIndex = 0;\n    }\n  }\n\n  handleCellFocus(e) {\n    this.isActiveRow = true;\n    this.focusColumnIndex = this.cellElements.indexOf(e.target);\n    this.$emit(\"row-focused\", this);\n  }\n\n  handleKeydown(e) {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    let newFocusColumnIndex = 0;\n\n    switch (e.key) {\n      case keyArrowLeft:\n        // focus left one cell\n        newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);\n        this.cellElements[newFocusColumnIndex].focus();\n        e.preventDefault();\n        break;\n\n      case keyArrowRight:\n        // focus right one cell\n        newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);\n        this.cellElements[newFocusColumnIndex].focus();\n        e.preventDefault();\n        break;\n\n      case keyHome:\n        if (!e.ctrlKey) {\n          this.cellElements[0].focus();\n          e.preventDefault();\n        }\n\n        break;\n\n      case keyEnd:\n        if (!e.ctrlKey) {\n          // focus last cell of the row\n          this.cellElements[this.cellElements.length - 1].focus();\n          e.preventDefault();\n        }\n\n        break;\n    }\n  }\n\n  updateItemTemplate() {\n    this.activeCellItemTemplate = this.rowType === DataGridRowTypes.default && this.cellItemTemplate !== undefined ? this.cellItemTemplate : this.rowType === DataGridRowTypes.default && this.cellItemTemplate === undefined ? this.defaultCellItemTemplate : this.headerCellItemTemplate !== undefined ? this.headerCellItemTemplate : this.defaultHeaderCellItemTemplate;\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"grid-template-columns\"\n})], DataGridRow.prototype, \"gridTemplateColumns\", void 0);\n\n__decorate([attr({\n  attribute: \"row-type\"\n})], DataGridRow.prototype, \"rowType\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"rowData\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"columnDefinitions\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"cellItemTemplate\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"headerCellItemTemplate\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"rowIndex\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"isActiveRow\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"activeCellItemTemplate\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"defaultCellItemTemplate\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"defaultHeaderCellItemTemplate\", void 0);\n\n__decorate([observable], DataGridRow.prototype, \"cellElements\", void 0);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-row.js"],"names":["__decorate","attr","observable","RepeatDirective","eventFocusOut","eventKeyDown","keyArrowLeft","keyArrowRight","keyEnd","keyHome","FoundationElement","DataGridRowTypes","DataGridRow","constructor","arguments","rowType","default","rowData","columnDefinitions","isActiveRow","cellsRepeatBehavior","cellsPlaceholder","focusColumnIndex","refocusOnLoad","updateRowStyle","style","gridTemplateColumns","gridTemplateColumnsChanged","$fastController","isConnected","rowTypeChanged","updateItemTemplate","rowDataChanged","cellItemTemplateChanged","headerCellItemTemplateChanged","connectedCallback","document","createComment","appendChild","x","activeCellItemTemplate","positioning","createBehavior","addBehaviors","addEventListener","handleCellFocus","handleFocusout","handleKeydown","cellElements","length","focus","disconnectedCallback","removeEventListener","e","contains","target","indexOf","$emit","defaultPrevented","newFocusColumnIndex","key","Math","max","preventDefault","min","ctrlKey","cellItemTemplate","undefined","defaultCellItemTemplate","headerCellItemTemplate","defaultHeaderCellItemTemplate","attribute","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable, RepeatDirective, } from \"@microsoft/fast-element\";\nimport { eventFocusOut, eventKeyDown, keyArrowLeft, keyArrowRight, keyEnd, keyHome, } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DataGridRowTypes } from \"./data-grid.options\";\n/**\n * A Data Grid Row Custom HTML Element.\n *\n * @public\n */\nexport class DataGridRow extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The type of row\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: row-type\n         */\n        this.rowType = DataGridRowTypes.default;\n        /**\n         * The base data for this row\n         *\n         * @public\n         */\n        this.rowData = null;\n        /**\n         * The column definitions of the row\n         *\n         * @public\n         */\n        this.columnDefinitions = null;\n        /**\n         * Whether focus is on/in a cell within this row.\n         *\n         * @internal\n         */\n        this.isActiveRow = false;\n        this.cellsRepeatBehavior = null;\n        this.cellsPlaceholder = null;\n        /**\n         * @internal\n         */\n        this.focusColumnIndex = 0;\n        this.refocusOnLoad = false;\n        this.updateRowStyle = () => {\n            this.style.gridTemplateColumns = this.gridTemplateColumns;\n        };\n    }\n    gridTemplateColumnsChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateRowStyle();\n        }\n    }\n    rowTypeChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateItemTemplate();\n        }\n    }\n    rowDataChanged() {\n        if (this.rowData !== null && this.isActiveRow) {\n            this.refocusOnLoad = true;\n            return;\n        }\n    }\n    cellItemTemplateChanged() {\n        this.updateItemTemplate();\n    }\n    headerCellItemTemplateChanged() {\n        this.updateItemTemplate();\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        // note that row elements can be reused with a different data object\n        // as the parent grid's repeat behavior reacts to changes in the data set.\n        if (this.cellsRepeatBehavior === null) {\n            this.cellsPlaceholder = document.createComment(\"\");\n            this.appendChild(this.cellsPlaceholder);\n            this.updateItemTemplate();\n            this.cellsRepeatBehavior = new RepeatDirective(x => x.columnDefinitions, x => x.activeCellItemTemplate, { positioning: true }).createBehavior(this.cellsPlaceholder);\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            this.$fastController.addBehaviors([this.cellsRepeatBehavior]);\n        }\n        this.addEventListener(\"cell-focused\", this.handleCellFocus);\n        this.addEventListener(eventFocusOut, this.handleFocusout);\n        this.addEventListener(eventKeyDown, this.handleKeydown);\n        this.updateRowStyle();\n        if (this.refocusOnLoad) {\n            // if focus was on the row when data changed try to refocus on same cell\n            this.refocusOnLoad = false;\n            if (this.cellElements.length > this.focusColumnIndex) {\n                this.cellElements[this.focusColumnIndex].focus();\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener(\"cell-focused\", this.handleCellFocus);\n        this.removeEventListener(eventFocusOut, this.handleFocusout);\n        this.removeEventListener(eventKeyDown, this.handleKeydown);\n    }\n    handleFocusout(e) {\n        if (!this.contains(e.target)) {\n            this.isActiveRow = false;\n            this.focusColumnIndex = 0;\n        }\n    }\n    handleCellFocus(e) {\n        this.isActiveRow = true;\n        this.focusColumnIndex = this.cellElements.indexOf(e.target);\n        this.$emit(\"row-focused\", this);\n    }\n    handleKeydown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        let newFocusColumnIndex = 0;\n        switch (e.key) {\n            case keyArrowLeft:\n                // focus left one cell\n                newFocusColumnIndex = Math.max(0, this.focusColumnIndex - 1);\n                this.cellElements[newFocusColumnIndex].focus();\n                e.preventDefault();\n                break;\n            case keyArrowRight:\n                // focus right one cell\n                newFocusColumnIndex = Math.min(this.cellElements.length - 1, this.focusColumnIndex + 1);\n                this.cellElements[newFocusColumnIndex].focus();\n                e.preventDefault();\n                break;\n            case keyHome:\n                if (!e.ctrlKey) {\n                    this.cellElements[0].focus();\n                    e.preventDefault();\n                }\n                break;\n            case keyEnd:\n                if (!e.ctrlKey) {\n                    // focus last cell of the row\n                    this.cellElements[this.cellElements.length - 1].focus();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateItemTemplate() {\n        this.activeCellItemTemplate =\n            this.rowType === DataGridRowTypes.default &&\n                this.cellItemTemplate !== undefined\n                ? this.cellItemTemplate\n                : this.rowType === DataGridRowTypes.default &&\n                    this.cellItemTemplate === undefined\n                    ? this.defaultCellItemTemplate\n                    : this.headerCellItemTemplate !== undefined\n                        ? this.headerCellItemTemplate\n                        : this.defaultHeaderCellItemTemplate;\n    }\n}\n__decorate([\n    attr({ attribute: \"grid-template-columns\" })\n], DataGridRow.prototype, \"gridTemplateColumns\", void 0);\n__decorate([\n    attr({ attribute: \"row-type\" })\n], DataGridRow.prototype, \"rowType\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"rowData\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"columnDefinitions\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"cellItemTemplate\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"headerCellItemTemplate\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"rowIndex\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"isActiveRow\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"activeCellItemTemplate\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"defaultCellItemTemplate\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"defaultHeaderCellItemTemplate\", void 0);\n__decorate([\n    observable\n], DataGridRow.prototype, \"cellElements\", void 0);\n"]},"metadata":{},"sourceType":"module"}