{"ast":null,"code":"import { h, ref, computed, defineComponent, inject, watch } from 'vue';\nimport { VResizeObserver } from 'vueuc';\nimport { avatarGroupInjectionKey } from './context';\nimport { tagInjectionKey } from '../../tag/src/Tag';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { avatarLight } from '../styles';\nimport { createKey, color2Class, resolveWrappedSlot } from '../../_utils';\nimport style from './styles/index.cssr';\nexport const avatarProps = Object.assign(Object.assign({}, useTheme.props), {\n  size: [String, Number],\n  src: String,\n  circle: {\n    type: Boolean,\n    default: undefined\n  },\n  objectFit: String,\n  round: {\n    type: Boolean,\n    default: undefined\n  },\n  bordered: {\n    type: Boolean,\n    default: undefined\n  },\n  onError: Function,\n  fallbackSrc: String,\n\n  /** @deprecated */\n  color: String\n});\nexport default defineComponent({\n  name: 'Avatar',\n  props: avatarProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const hasLoadErrorRef = ref(false);\n    let memoedTextHtml = null;\n    const textRef = ref(null);\n    const selfRef = ref(null);\n\n    const fitTextTransform = () => {\n      const {\n        value: textEl\n      } = textRef;\n\n      if (textEl) {\n        if (memoedTextHtml === null || memoedTextHtml !== textEl.innerHTML) {\n          memoedTextHtml = textEl.innerHTML;\n          const {\n            value: selfEl\n          } = selfRef;\n\n          if (selfEl) {\n            const {\n              offsetWidth: elWidth,\n              offsetHeight: elHeight\n            } = selfEl;\n            const {\n              offsetWidth: textWidth,\n              offsetHeight: textHeight\n            } = textEl;\n            const radix = 0.9;\n            const ratio = Math.min(elWidth / textWidth * radix, elHeight / textHeight * radix, 1);\n            textEl.style.transform = `translateX(-50%) translateY(-50%) scale(${ratio})`;\n          }\n        }\n      }\n    };\n\n    const NAvatarGroup = inject(avatarGroupInjectionKey, null);\n    const mergedSizeRef = computed(() => {\n      const {\n        size\n      } = props;\n      if (size) return size;\n      const {\n        size: avatarGroupSize\n      } = NAvatarGroup || {};\n      if (avatarGroupSize) return avatarGroupSize;\n      return 'medium';\n    });\n    const themeRef = useTheme('Avatar', '-avatar', style, avatarLight, props, mergedClsPrefixRef);\n    const TagInjection = inject(tagInjectionKey, null);\n    const mergedRoundRef = computed(() => {\n      if (NAvatarGroup) return true;\n      const {\n        round,\n        circle\n      } = props;\n      if (round !== undefined || circle !== undefined) return round || circle;\n\n      if (TagInjection) {\n        return TagInjection.roundRef.value;\n      }\n\n      return false;\n    });\n    const mergedBorderedRef = computed(() => {\n      if (NAvatarGroup) return true;\n      return props.bordered || false;\n    });\n\n    const handleError = e => {\n      hasLoadErrorRef.value = true;\n      const {\n        onError\n      } = props;\n\n      if (onError) {\n        onError(e);\n      }\n    };\n\n    watch(() => props.src, () => hasLoadErrorRef.value = false);\n    const cssVarsRef = computed(() => {\n      const size = mergedSizeRef.value;\n      const round = mergedRoundRef.value;\n      const bordered = mergedBorderedRef.value;\n      const {\n        color: propColor\n      } = props;\n      const {\n        self: {\n          borderRadius,\n          fontSize,\n          color,\n          border,\n          colorModal,\n          colorPopover\n        },\n        common: {\n          cubicBezierEaseInOut\n        }\n      } = themeRef.value;\n      let height;\n\n      if (typeof size === 'number') {\n        height = `${size}px`;\n      } else {\n        height = themeRef.value.self[createKey('height', size)];\n      }\n\n      return {\n        '--n-font-size': fontSize,\n        '--n-border': bordered ? border : 'none',\n        '--n-border-radius': round ? '50%' : borderRadius,\n        '--n-color': propColor || color,\n        '--n-color-modal': propColor || colorModal,\n        '--n-color-popover': propColor || colorPopover,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-merged-size': `var(--n-avatar-size-override, ${height})`\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('avatar', computed(() => {\n      const size = mergedSizeRef.value;\n      const round = mergedRoundRef.value;\n      const bordered = mergedBorderedRef.value;\n      const {\n        color\n      } = props;\n      let hash = '';\n\n      if (size) {\n        if (typeof size === 'number') {\n          hash += `a${size}`;\n        } else {\n          hash += size[0];\n        }\n      }\n\n      if (round) {\n        hash += 'b';\n      }\n\n      if (bordered) {\n        hash += 'c';\n      }\n\n      if (color) {\n        hash += color2Class(color);\n      }\n\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      textRef,\n      selfRef,\n      mergedRoundRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      fitTextTransform,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender,\n      hasLoadError: hasLoadErrorRef,\n      handleError\n    };\n  },\n\n  render() {\n    const {\n      $slots,\n      src,\n      mergedClsPrefix,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    let img;\n\n    if (this.hasLoadError) {\n      img = h(\"img\", {\n        src: this.fallbackSrc,\n        style: {\n          objectFit: this.objectFit\n        }\n      });\n    } else {\n      img = resolveWrappedSlot($slots.default, children => {\n        if (children) {\n          return h(VResizeObserver, {\n            onResize: this.fitTextTransform\n          }, {\n            default: () => h(\"span\", {\n              ref: \"textRef\",\n              class: `${mergedClsPrefix}-avatar__text`\n            }, children)\n          });\n        } else if (src) {\n          return h(\"img\", {\n            src: src,\n            onError: this.handleError,\n            style: {\n              objectFit: this.objectFit\n            }\n          });\n        }\n      });\n    }\n\n    return h(\"span\", {\n      ref: \"selfRef\",\n      class: [`${mergedClsPrefix}-avatar`, this.themeClass],\n      style: this.cssVars\n    }, img);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/avatar/src/Avatar.js"],"names":["h","ref","computed","defineComponent","inject","watch","VResizeObserver","avatarGroupInjectionKey","tagInjectionKey","useConfig","useTheme","useThemeClass","avatarLight","createKey","color2Class","resolveWrappedSlot","style","avatarProps","Object","assign","props","size","String","Number","src","circle","type","Boolean","default","undefined","objectFit","round","bordered","onError","Function","fallbackSrc","color","name","setup","mergedClsPrefixRef","inlineThemeDisabled","hasLoadErrorRef","memoedTextHtml","textRef","selfRef","fitTextTransform","value","textEl","innerHTML","selfEl","offsetWidth","elWidth","offsetHeight","elHeight","textWidth","textHeight","radix","ratio","Math","min","transform","NAvatarGroup","mergedSizeRef","avatarGroupSize","themeRef","TagInjection","mergedRoundRef","roundRef","mergedBorderedRef","handleError","e","cssVarsRef","propColor","self","borderRadius","fontSize","border","colorModal","colorPopover","common","cubicBezierEaseInOut","height","themeClassHandle","hash","mergedClsPrefix","cssVars","themeClass","onRender","hasLoadError","render","$slots","img","children","onResize","class"],"mappings":"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","sourcesContent":["import { h, ref, computed, defineComponent, inject, watch } from 'vue';\nimport { VResizeObserver } from 'vueuc';\nimport { avatarGroupInjectionKey } from './context';\nimport { tagInjectionKey } from '../../tag/src/Tag';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { avatarLight } from '../styles';\nimport { createKey, color2Class, resolveWrappedSlot } from '../../_utils';\nimport style from './styles/index.cssr';\nexport const avatarProps = Object.assign(Object.assign({}, useTheme.props), { size: [String, Number], src: String, circle: {\n        type: Boolean,\n        default: undefined\n    }, objectFit: String, round: {\n        type: Boolean,\n        default: undefined\n    }, bordered: {\n        type: Boolean,\n        default: undefined\n    }, onError: Function, fallbackSrc: String, \n    /** @deprecated */\n    color: String });\nexport default defineComponent({\n    name: 'Avatar',\n    props: avatarProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const hasLoadErrorRef = ref(false);\n        let memoedTextHtml = null;\n        const textRef = ref(null);\n        const selfRef = ref(null);\n        const fitTextTransform = () => {\n            const { value: textEl } = textRef;\n            if (textEl) {\n                if (memoedTextHtml === null || memoedTextHtml !== textEl.innerHTML) {\n                    memoedTextHtml = textEl.innerHTML;\n                    const { value: selfEl } = selfRef;\n                    if (selfEl) {\n                        const { offsetWidth: elWidth, offsetHeight: elHeight } = selfEl;\n                        const { offsetWidth: textWidth, offsetHeight: textHeight } = textEl;\n                        const radix = 0.9;\n                        const ratio = Math.min((elWidth / textWidth) * radix, (elHeight / textHeight) * radix, 1);\n                        textEl.style.transform = `translateX(-50%) translateY(-50%) scale(${ratio})`;\n                    }\n                }\n            }\n        };\n        const NAvatarGroup = inject(avatarGroupInjectionKey, null);\n        const mergedSizeRef = computed(() => {\n            const { size } = props;\n            if (size)\n                return size;\n            const { size: avatarGroupSize } = NAvatarGroup || {};\n            if (avatarGroupSize)\n                return avatarGroupSize;\n            return 'medium';\n        });\n        const themeRef = useTheme('Avatar', '-avatar', style, avatarLight, props, mergedClsPrefixRef);\n        const TagInjection = inject(tagInjectionKey, null);\n        const mergedRoundRef = computed(() => {\n            if (NAvatarGroup)\n                return true;\n            const { round, circle } = props;\n            if (round !== undefined || circle !== undefined)\n                return round || circle;\n            if (TagInjection) {\n                return TagInjection.roundRef.value;\n            }\n            return false;\n        });\n        const mergedBorderedRef = computed(() => {\n            if (NAvatarGroup)\n                return true;\n            return props.bordered || false;\n        });\n        const handleError = (e) => {\n            hasLoadErrorRef.value = true;\n            const { onError } = props;\n            if (onError) {\n                onError(e);\n            }\n        };\n        watch(() => props.src, () => (hasLoadErrorRef.value = false));\n        const cssVarsRef = computed(() => {\n            const size = mergedSizeRef.value;\n            const round = mergedRoundRef.value;\n            const bordered = mergedBorderedRef.value;\n            const { color: propColor } = props;\n            const { self: { borderRadius, fontSize, color, border, colorModal, colorPopover }, common: { cubicBezierEaseInOut } } = themeRef.value;\n            let height;\n            if (typeof size === 'number') {\n                height = `${size}px`;\n            }\n            else {\n                height = themeRef.value.self[createKey('height', size)];\n            }\n            return {\n                '--n-font-size': fontSize,\n                '--n-border': bordered ? border : 'none',\n                '--n-border-radius': round ? '50%' : borderRadius,\n                '--n-color': propColor || color,\n                '--n-color-modal': propColor || colorModal,\n                '--n-color-popover': propColor || colorPopover,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-merged-size': `var(--n-avatar-size-override, ${height})`\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('avatar', computed(() => {\n                const size = mergedSizeRef.value;\n                const round = mergedRoundRef.value;\n                const bordered = mergedBorderedRef.value;\n                const { color } = props;\n                let hash = '';\n                if (size) {\n                    if (typeof size === 'number') {\n                        hash += `a${size}`;\n                    }\n                    else {\n                        hash += size[0];\n                    }\n                }\n                if (round) {\n                    hash += 'b';\n                }\n                if (bordered) {\n                    hash += 'c';\n                }\n                if (color) {\n                    hash += color2Class(color);\n                }\n                return hash;\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            textRef,\n            selfRef,\n            mergedRoundRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            fitTextTransform,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender,\n            hasLoadError: hasLoadErrorRef,\n            handleError\n        };\n    },\n    render() {\n        const { $slots, src, mergedClsPrefix, onRender } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        let img;\n        if (this.hasLoadError) {\n            img = h(\"img\", { src: this.fallbackSrc, style: { objectFit: this.objectFit } });\n        }\n        else {\n            img = resolveWrappedSlot($slots.default, (children) => {\n                if (children) {\n                    return (h(VResizeObserver, { onResize: this.fitTextTransform }, {\n                        default: () => (h(\"span\", { ref: \"textRef\", class: `${mergedClsPrefix}-avatar__text` }, children))\n                    }));\n                }\n                else if (src) {\n                    return (h(\"img\", { src: src, onError: this.handleError, style: { objectFit: this.objectFit } }));\n                }\n            });\n        }\n        return (h(\"span\", { ref: \"selfRef\", class: [`${mergedClsPrefix}-avatar`, this.themeClass], style: this.cssVars }, img));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}