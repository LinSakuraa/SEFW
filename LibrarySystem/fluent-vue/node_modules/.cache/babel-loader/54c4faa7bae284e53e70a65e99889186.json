{"ast":null,"code":"import { h, inject, defineComponent } from 'vue';\nimport { useMemo } from 'vooks';\nimport { NCheckbox } from '../../checkbox';\nimport { transferInjectionKey } from './interface';\nimport { getTitleAttribute } from '../../_utils';\nexport default defineComponent({\n  name: 'NTransferListItem',\n  props: {\n    source: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [String, Number],\n      required: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props) {\n    const {\n      source\n    } = props;\n    const {\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      srcCheckedValuesRef,\n      tgtCheckedValuesRef,\n      handleSrcCheckboxClick,\n      handleTgtCheckboxClick // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(transferInjectionKey);\n    const checkedRef = source ? useMemo(() => srcCheckedValuesRef.value.includes(props.value)) : useMemo(() => tgtCheckedValuesRef.value.includes(props.value));\n    const handleClick = source ? () => {\n      if (!props.disabled) {\n        handleSrcCheckboxClick(!checkedRef.value, props.value);\n      }\n    } : () => {\n      if (!props.disabled) {\n        handleTgtCheckboxClick(!checkedRef.value, props.value);\n      }\n    };\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      checked: checkedRef,\n      handleClick\n    };\n  },\n\n  render() {\n    const {\n      disabled,\n      mergedTheme,\n      mergedClsPrefix,\n      label,\n      checked,\n      source\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-transfer-list-item`, disabled && `${mergedClsPrefix}-transfer-list-item--disabled`, source ? `${mergedClsPrefix}-transfer-list-item--source` : `${mergedClsPrefix}-transfer-list-item--target`],\n      onClick: this.handleClick\n    }, h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-item__checkbox`\n    }, h(NCheckbox, {\n      theme: mergedTheme.peers.Checkbox,\n      themeOverrides: mergedTheme.peerOverrides.Checkbox,\n      disabled: disabled,\n      checked: checked\n    })), h(\"div\", {\n      class: `${mergedClsPrefix}-transfer-list-item__label`,\n      title: getTitleAttribute(label)\n    }, label));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/transfer/src/TransferListItem.js"],"names":["h","inject","defineComponent","useMemo","NCheckbox","transferInjectionKey","getTitleAttribute","name","props","source","type","Boolean","default","label","String","required","value","Number","disabled","setup","mergedClsPrefixRef","mergedThemeRef","srcCheckedValuesRef","tgtCheckedValuesRef","handleSrcCheckboxClick","handleTgtCheckboxClick","checkedRef","includes","handleClick","mergedClsPrefix","mergedTheme","checked","render","class","onClick","theme","peers","Checkbox","themeOverrides","peerOverrides","title"],"mappings":"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","sourcesContent":["import { h, inject, defineComponent } from 'vue';\nimport { useMemo } from 'vooks';\nimport { NCheckbox } from '../../checkbox';\nimport { transferInjectionKey } from './interface';\nimport { getTitleAttribute } from '../../_utils';\nexport default defineComponent({\n    name: 'NTransferListItem',\n    props: {\n        source: {\n            type: Boolean,\n            default: false\n        },\n        label: {\n            type: String,\n            required: true\n        },\n        value: {\n            type: [String, Number],\n            required: true\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        }\n    },\n    setup(props) {\n        const { source } = props;\n        const { mergedClsPrefixRef, mergedThemeRef, srcCheckedValuesRef, tgtCheckedValuesRef, handleSrcCheckboxClick, handleTgtCheckboxClick\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(transferInjectionKey);\n        const checkedRef = source\n            ? useMemo(() => srcCheckedValuesRef.value.includes(props.value))\n            : useMemo(() => tgtCheckedValuesRef.value.includes(props.value));\n        const handleClick = source\n            ? () => {\n                if (!props.disabled) {\n                    handleSrcCheckboxClick(!checkedRef.value, props.value);\n                }\n            }\n            : () => {\n                if (!props.disabled) {\n                    handleTgtCheckboxClick(!checkedRef.value, props.value);\n                }\n            };\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedTheme: mergedThemeRef,\n            checked: checkedRef,\n            handleClick\n        };\n    },\n    render() {\n        const { disabled, mergedTheme, mergedClsPrefix, label, checked, source } = this;\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-transfer-list-item`,\n                disabled && `${mergedClsPrefix}-transfer-list-item--disabled`,\n                source\n                    ? `${mergedClsPrefix}-transfer-list-item--source`\n                    : `${mergedClsPrefix}-transfer-list-item--target`\n            ], onClick: this.handleClick },\n            h(\"div\", { class: `${mergedClsPrefix}-transfer-list-item__checkbox` },\n                h(NCheckbox, { theme: mergedTheme.peers.Checkbox, themeOverrides: mergedTheme.peerOverrides.Checkbox, disabled: disabled, checked: checked })),\n            h(\"div\", { class: `${mergedClsPrefix}-transfer-list-item__label`, title: getTitleAttribute(label) }, label)));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}