{"ast":null,"code":"import { clamp, denormalize, getHexStringForByte, roundToPrecisionSmall } from \"./math-utilities\";\n/**\n * A RGBA color with 64 bit channels.\n *\n * @example\n * ```ts\n * new ColorRGBA64(1, 0, 0, 1) // red\n * ```\n * @public\n */\n\nexport class ColorRGBA64 {\n  /**\n   *\n   * @param red - the red value\n   * @param green - the green value\n   * @param blue - the blue value\n   * @param alpha - the alpha value\n   */\n  constructor(red, green, blue, alpha) {\n    this.r = red;\n    this.g = green;\n    this.b = blue;\n    this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n  }\n  /**\n   * Construct a {@link ColorRGBA64} from a {@link ColorRGBA64Config}\n   * @param data - the config object\n   */\n\n\n  static fromObject(data) {\n    return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b) ? new ColorRGBA64(data.r, data.g, data.b, data.a) : null;\n  }\n  /**\n   * Determines if one color is equal to another.\n   * @param rhs - the color to compare\n   */\n\n\n  equalValue(rhs) {\n    return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;\n  }\n  /**\n   * Returns the color formatted as a string; #RRGGBB\n   */\n\n\n  toStringHexRGB() {\n    return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n  }\n  /**\n   * Returns the color formatted as a string; #RRGGBBAA\n   */\n\n\n  toStringHexRGBA() {\n    return this.toStringHexRGB() + this.formatHexValue(this.a);\n  }\n  /**\n   * Returns the color formatted as a string; #AARRGGBB\n   */\n\n\n  toStringHexARGB() {\n    return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n  }\n  /**\n   * Returns the color formatted as a string; \"rgb(0xRR, 0xGG, 0xBB)\"\n   */\n\n\n  toStringWebRGB() {\n    return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n  }\n  /**\n   * Returns the color formatted as a string; \"rgba(0xRR, 0xGG, 0xBB, a)\"\n   * @remarks\n   * Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n   */\n\n\n  toStringWebRGBA() {\n    return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n  }\n  /**\n   * Returns a new {@link ColorRGBA64} rounded to the provided precision\n   * @param precision - the precision to round to\n   */\n\n\n  roundToPrecision(precision) {\n    return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n  }\n  /**\n   * Returns a new {@link ColorRGBA64} with channel values clamped between 0 and 1.\n   */\n\n\n  clamp() {\n    return new ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n  }\n  /**\n   * Converts the {@link ColorRGBA64} to a {@link ColorRGBA64Config}.\n   */\n\n\n  toObject() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b,\n      a: this.a\n    };\n  }\n\n  formatHexValue(value) {\n    return getHexStringForByte(denormalize(value, 0.0, 255.0));\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-colors/dist/color-rgba-64.js"],"names":["clamp","denormalize","getHexStringForByte","roundToPrecisionSmall","ColorRGBA64","constructor","red","green","blue","alpha","r","g","b","a","isNaN","fromObject","data","equalValue","rhs","toStringHexRGB","map","formatHexValue","join","toStringHexRGBA","toStringHexARGB","toStringWebRGB","Math","round","toStringWebRGBA","roundToPrecision","precision","toObject","value"],"mappings":"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","sourcesContent":["import { clamp, denormalize, getHexStringForByte, roundToPrecisionSmall, } from \"./math-utilities\";\n/**\n * A RGBA color with 64 bit channels.\n *\n * @example\n * ```ts\n * new ColorRGBA64(1, 0, 0, 1) // red\n * ```\n * @public\n */\nexport class ColorRGBA64 {\n    /**\n     *\n     * @param red - the red value\n     * @param green - the green value\n     * @param blue - the blue value\n     * @param alpha - the alpha value\n     */\n    constructor(red, green, blue, alpha) {\n        this.r = red;\n        this.g = green;\n        this.b = blue;\n        this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n    }\n    /**\n     * Construct a {@link ColorRGBA64} from a {@link ColorRGBA64Config}\n     * @param data - the config object\n     */\n    static fromObject(data) {\n        return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b)\n            ? new ColorRGBA64(data.r, data.g, data.b, data.a)\n            : null;\n    }\n    /**\n     * Determines if one color is equal to another.\n     * @param rhs - the color to compare\n     */\n    equalValue(rhs) {\n        return (this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a);\n    }\n    /**\n     * Returns the color formatted as a string; #RRGGBB\n     */\n    toStringHexRGB() {\n        return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    /**\n     * Returns the color formatted as a string; #RRGGBBAA\n     */\n    toStringHexRGBA() {\n        return this.toStringHexRGB() + this.formatHexValue(this.a);\n    }\n    /**\n     * Returns the color formatted as a string; #AARRGGBB\n     */\n    toStringHexARGB() {\n        return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    /**\n     * Returns the color formatted as a string; \"rgb(0xRR, 0xGG, 0xBB)\"\n     */\n    toStringWebRGB() {\n        return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n    }\n    /**\n     * Returns the color formatted as a string; \"rgba(0xRR, 0xGG, 0xBB, a)\"\n     * @remarks\n     * Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n     */\n    toStringWebRGBA() {\n        return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n    }\n    /**\n     * Returns a new {@link ColorRGBA64} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n    }\n    /**\n     * Returns a new {@link ColorRGBA64} with channel values clamped between 0 and 1.\n     */\n    clamp() {\n        return new ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n    }\n    /**\n     * Converts the {@link ColorRGBA64} to a {@link ColorRGBA64Config}.\n     */\n    toObject() {\n        return { r: this.r, g: this.g, b: this.b, a: this.a };\n    }\n    formatHexValue(value) {\n        return getHexStringForByte(denormalize(value, 0.0, 255.0));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}