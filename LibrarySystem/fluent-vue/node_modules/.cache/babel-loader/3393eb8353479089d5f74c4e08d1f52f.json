{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, Observable, observable } from \"@microsoft/fast-element\";\nimport { limit, uniqueId } from \"@microsoft/fast-web-utilities\";\nimport { DelegatesARIAListbox } from \"../listbox\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { SelectPosition } from \"../select/select.options\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FormAssociatedCombobox } from \"./combobox.form-associated\";\nimport { ComboboxAutocomplete } from \"./combobox.options\";\n/**\n * A Combobox Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria-practices/#combobox | ARIA combobox }.\n *\n * @public\n */\n\nexport class Combobox extends FormAssociatedCombobox {\n  constructor() {\n    super(...arguments);\n    /**\n     * The internal value property.\n     *\n     * @internal\n     */\n\n    this._value = \"\";\n    /**\n     * The collection of currently filtered options.\n     *\n     * @public\n     */\n\n    this.filteredOptions = [];\n    /**\n     * The current filter value.\n     *\n     * @internal\n     */\n\n    this.filter = \"\";\n    /**\n     * The initial state of the position attribute.\n     *\n     * @internal\n     */\n\n    this.forcedPosition = false;\n    /**\n     * The unique id for the internal listbox element.\n     *\n     * @internal\n     */\n\n    this.listboxId = uniqueId(\"listbox-\");\n    /**\n     * The max height for the listbox when opened.\n     *\n     * @internal\n     */\n\n    this.maxHeight = 0;\n    /**\n     * The open attribute.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: open\n     */\n\n    this.open = false;\n    /**\n     * The current state of the calculated position of the listbox.\n     *\n     * @public\n     */\n\n    this.position = SelectPosition.below;\n  }\n  /**\n   * Reset the element to its first selectable option when its parent form is reset.\n   *\n   * @internal\n   */\n\n\n  formResetCallback() {\n    super.formResetCallback();\n    this.setDefaultSelectedOption();\n    this.updateValue();\n  }\n\n  get isAutocompleteInline() {\n    return this.autocomplete === ComboboxAutocomplete.inline || this.isAutocompleteBoth;\n  }\n\n  get isAutocompleteList() {\n    return this.autocomplete === ComboboxAutocomplete.list || this.isAutocompleteBoth;\n  }\n\n  get isAutocompleteBoth() {\n    return this.autocomplete === ComboboxAutocomplete.both;\n  }\n\n  maxHeightChanged() {\n    if (this.listbox) {\n      this.listbox.style.setProperty(\"--max-height\", `${this.maxHeight}px`);\n    }\n  }\n\n  openChanged() {\n    if (this.open) {\n      this.ariaControls = this.listboxId;\n      this.ariaExpanded = \"true\";\n      this.setPositioning();\n      this.focusAndScrollOptionIntoView(); // focus is directed to the element when `open` is changed programmatically\n\n      DOM.queueUpdate(() => this.focus());\n      return;\n    }\n\n    this.ariaControls = \"\";\n    this.ariaExpanded = \"false\";\n  }\n  /**\n   * The list of options.\n   *\n   * @public\n   * @remarks\n   * Overrides `Listbox.options`.\n   */\n\n\n  get options() {\n    Observable.track(this, \"options\");\n    return this.filteredOptions.length ? this.filteredOptions : this._options;\n  }\n\n  set options(value) {\n    this._options = value;\n    Observable.notify(this, \"options\");\n  }\n  /**\n   * Updates the placeholder on the proxy element.\n   * @internal\n   */\n\n\n  placeholderChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.placeholder = this.placeholder;\n    }\n  }\n\n  positionChanged() {\n    this.positionAttribute = this.position;\n    this.setPositioning();\n  }\n  /**\n   * The value property.\n   *\n   * @public\n   */\n\n\n  get value() {\n    Observable.track(this, \"value\");\n    return this._value;\n  }\n\n  set value(next) {\n    var _a, _b, _c;\n\n    const prev = `${this._value}`;\n\n    if (this.$fastController.isConnected && this.options) {\n      const selectedIndex = this.options.findIndex(el => el.text.toLowerCase() === next.toLowerCase());\n      const prevSelectedValue = (_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.text;\n      const nextSelectedValue = (_b = this.options[selectedIndex]) === null || _b === void 0 ? void 0 : _b.text;\n      this.selectedIndex = prevSelectedValue !== nextSelectedValue ? selectedIndex : this.selectedIndex;\n      next = ((_c = this.firstSelectedOption) === null || _c === void 0 ? void 0 : _c.text) || next;\n    }\n\n    if (prev !== next) {\n      this._value = next;\n      super.valueChanged(prev, next);\n      Observable.notify(this, \"value\");\n    }\n  }\n  /**\n   * Handle opening and closing the listbox when the combobox is clicked.\n   *\n   * @param e - the mouse event\n   * @internal\n   */\n\n\n  clickHandler(e) {\n    if (this.disabled) {\n      return;\n    }\n\n    if (this.open) {\n      const captured = e.target.closest(`option,[role=option]`);\n\n      if (!captured || captured.disabled) {\n        return;\n      }\n\n      this.selectedOptions = [captured];\n      this.control.value = captured.text;\n      this.updateValue(true);\n    }\n\n    this.open = !this.open;\n\n    if (this.open) {\n      this.control.focus();\n    }\n\n    return true;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.forcedPosition = !!this.positionAttribute;\n\n    if (this.value) {\n      this.initialValue = this.value;\n    }\n  }\n  /**\n   * Synchronize the `aria-disabled` property when the `disabled` property changes.\n   *\n   * @param prev - The previous disabled value\n   * @param next - The next disabled value\n   *\n   * @internal\n   */\n\n\n  disabledChanged(prev, next) {\n    if (super.disabledChanged) {\n      super.disabledChanged(prev, next);\n    }\n\n    this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n  }\n  /**\n   * Filter available options by text value.\n   *\n   * @public\n   */\n\n\n  filterOptions() {\n    if (!this.autocomplete || this.autocomplete === ComboboxAutocomplete.none) {\n      this.filter = \"\";\n    }\n\n    const filter = this.filter.toLowerCase();\n    this.filteredOptions = this._options.filter(o => o.text.toLowerCase().startsWith(this.filter.toLowerCase()));\n\n    if (this.isAutocompleteList) {\n      if (!this.filteredOptions.length && !filter) {\n        this.filteredOptions = this._options;\n      }\n\n      this._options.forEach(o => {\n        o.hidden = !this.filteredOptions.includes(o);\n      });\n    }\n  }\n  /**\n   * Focus the control and scroll the first selected option into view.\n   *\n   * @internal\n   * @remarks\n   * Overrides: `Listbox.focusAndScrollOptionIntoView`\n   */\n\n\n  focusAndScrollOptionIntoView() {\n    if (this.contains(document.activeElement)) {\n      this.control.focus();\n\n      if (this.firstSelectedOption) {\n        requestAnimationFrame(() => {\n          var _a;\n\n          (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n            block: \"nearest\"\n          });\n        });\n      }\n    }\n  }\n  /**\n   * Handle focus state when the element or its children lose focus.\n   *\n   * @param e - The focus event\n   * @internal\n   */\n\n\n  focusoutHandler(e) {\n    this.updateValue();\n\n    if (!this.open) {\n      return true;\n    }\n\n    const focusTarget = e.relatedTarget;\n\n    if (this.isSameNode(focusTarget)) {\n      this.focus();\n      return;\n    }\n\n    if (!this.options || !this.options.includes(focusTarget)) {\n      this.open = false;\n    }\n  }\n  /**\n   * Handle content changes on the control input.\n   *\n   * @param e - the input event\n   * @internal\n   */\n\n\n  inputHandler(e) {\n    this.filter = this.control.value;\n    this.filterOptions();\n\n    if (e.inputType === \"deleteContentBackward\" || !this.filter.length) {\n      return true;\n    }\n\n    if (this.isAutocompleteList && !this.open) {\n      this.open = true;\n    }\n\n    if (this.isAutocompleteInline && this.filteredOptions.length) {\n      this.selectedOptions = [this.filteredOptions[0]];\n      this.selectedIndex = this.options.indexOf(this.firstSelectedOption);\n      this.setInlineSelection();\n    }\n\n    return;\n  }\n  /**\n   * Handle keydown actions for listbox navigation.\n   *\n   * @param e - the keyboard event\n   * @internal\n   */\n\n\n  keydownHandler(e) {\n    const key = e.key;\n\n    if (e.ctrlKey || e.shiftKey) {\n      return true;\n    }\n\n    switch (key) {\n      case \"Enter\":\n        {\n          this.updateValue(true);\n\n          if (this.isAutocompleteInline) {\n            this.filter = this.value;\n          }\n\n          this.open = false;\n          const controlValueLength = this.control.value.length;\n          this.control.setSelectionRange(controlValueLength, controlValueLength);\n          break;\n        }\n\n      case \"Escape\":\n        {\n          if (!this.isAutocompleteInline) {\n            this.selectedIndex = -1;\n          }\n\n          if (this.open) {\n            this.open = false;\n            break;\n          }\n\n          this.value = \"\";\n          this.control.value = \"\";\n          this.filter = \"\";\n          this.filterOptions();\n          break;\n        }\n\n      case \"Tab\":\n        {\n          this.updateValue();\n\n          if (!this.open) {\n            return true;\n          }\n\n          e.preventDefault();\n          this.open = false;\n          break;\n        }\n\n      case \"ArrowUp\":\n      case \"ArrowDown\":\n        {\n          this.filterOptions();\n\n          if (!this.open) {\n            this.open = true;\n            break;\n          }\n\n          if (this.filteredOptions.length > 0) {\n            super.keydownHandler(e);\n          }\n\n          if (this.isAutocompleteInline) {\n            this.updateValue();\n            this.setInlineSelection();\n          }\n\n          break;\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n  }\n  /**\n   * Handle keyup actions for value input and text field manipulations.\n   *\n   * @param e - the keyboard event\n   * @internal\n   */\n\n\n  keyupHandler(e) {\n    const key = e.key;\n\n    switch (key) {\n      case \"ArrowLeft\":\n      case \"ArrowRight\":\n      case \"Backspace\":\n      case \"Delete\":\n      case \"Home\":\n      case \"End\":\n        {\n          this.filter = this.control.value;\n          this.selectedIndex = -1;\n          this.filterOptions();\n          break;\n        }\n    }\n  }\n  /**\n   * Ensure that the selectedIndex is within the current allowable filtered range.\n   *\n   * @internal\n   * @remarks\n   * Overrides: `Listbox.selectedIndexChanged`\n   */\n\n\n  selectedIndexChanged(prev, next) {\n    if (this.$fastController.isConnected) {\n      next = limit(-1, this.options.length - 1, next); // we only want to call the super method when the selectedIndex is in range\n\n      if (next !== this.selectedIndex) {\n        this.selectedIndex = next;\n        return;\n      }\n\n      super.selectedIndexChanged(prev, next);\n    }\n  }\n  /**\n   * Move focus to the previous selectable option.\n   *\n   * @internal\n   * @remarks\n   * Overrides `Listbox.selectPreviousOption`\n   */\n\n\n  selectPreviousOption() {\n    if (!this.disabled && this.selectedIndex >= 0) {\n      this.selectedIndex = this.selectedIndex - 1;\n    }\n  }\n  /**\n   * Set the default selected options at initialization or reset.\n   *\n   * @internal\n   * @remarks\n   * Overrides `Listbox.setDefaultSelectedOption`\n   */\n\n\n  setDefaultSelectedOption() {\n    if (this.$fastController.isConnected && this.options) {\n      const selectedIndex = this.options.findIndex(el => el.getAttribute(\"selected\") !== null || el.selected);\n      this.selectedIndex = selectedIndex;\n\n      if (!this.dirtyValue && this.firstSelectedOption) {\n        this.value = this.firstSelectedOption.text;\n      }\n\n      this.setSelectedOptions();\n    }\n  }\n  /**\n   * Focus and select the content of the control based on the first selected option.\n   *\n   * @param start - The index for the starting range\n   * @internal\n   */\n\n\n  setInlineSelection() {\n    if (this.firstSelectedOption) {\n      this.control.value = this.firstSelectedOption.text;\n      this.control.focus();\n      this.control.setSelectionRange(this.filter.length, this.control.value.length, \"backward\");\n    }\n  }\n  /**\n   * Calculate and apply listbox positioning based on available viewport space.\n   *\n   * @param force - direction to force the listbox to display\n   * @public\n   */\n\n\n  setPositioning() {\n    const currentBox = this.getBoundingClientRect();\n    const viewportHeight = window.innerHeight;\n    const availableBottom = viewportHeight - currentBox.bottom;\n    this.position = this.forcedPosition ? this.positionAttribute : currentBox.top > availableBottom ? SelectPosition.above : SelectPosition.below;\n    this.positionAttribute = this.forcedPosition ? this.positionAttribute : this.position;\n    this.maxHeight = this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;\n  }\n  /**\n   * Ensure that the entire list of options is used when setting the selected property.\n   *\n   * @internal\n   * @remarks\n   * Overrides: `Listbox.selectedOptionsChanged`\n   */\n\n\n  selectedOptionsChanged(prev, next) {\n    if (this.$fastController.isConnected) {\n      this._options.forEach(o => {\n        o.selected = next.includes(o);\n      });\n    }\n  }\n  /**\n   * Synchronize the form-associated proxy and update the value property of the element.\n   *\n   * @param prev - the previous collection of slotted option elements\n   * @param next - the next collection of slotted option elements\n   *\n   * @internal\n   */\n\n\n  slottedOptionsChanged(prev, next) {\n    super.slottedOptionsChanged(prev, next);\n    this.updateValue();\n  }\n  /**\n   * @internal\n   */\n\n\n  updateValue(shouldEmit) {\n    var _a;\n\n    if (this.$fastController.isConnected) {\n      this.value = ((_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) || this.control.value;\n    }\n\n    if (shouldEmit) {\n      this.$emit(\"change\");\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"autocomplete\",\n  mode: \"fromView\"\n})], Combobox.prototype, \"autocomplete\", void 0);\n\n__decorate([observable], Combobox.prototype, \"maxHeight\", void 0);\n\n__decorate([attr({\n  attribute: \"open\",\n  mode: \"boolean\"\n})], Combobox.prototype, \"open\", void 0);\n\n__decorate([attr], Combobox.prototype, \"placeholder\", void 0);\n\n__decorate([attr({\n  attribute: \"position\"\n})], Combobox.prototype, \"positionAttribute\", void 0);\n\n__decorate([observable], Combobox.prototype, \"position\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA combobox role.\n *\n * @public\n */\n\n\nexport class DelegatesARIACombobox {}\n\n__decorate([observable], DelegatesARIACombobox.prototype, \"ariaAutoComplete\", void 0);\n\n__decorate([observable], DelegatesARIACombobox.prototype, \"ariaControls\", void 0);\n\napplyMixins(DelegatesARIACombobox, DelegatesARIAListbox);\napplyMixins(Combobox, StartEnd, DelegatesARIACombobox);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/combobox/combobox.js"],"names":["__decorate","attr","DOM","Observable","observable","limit","uniqueId","DelegatesARIAListbox","StartEnd","SelectPosition","applyMixins","FormAssociatedCombobox","ComboboxAutocomplete","Combobox","constructor","arguments","_value","filteredOptions","filter","forcedPosition","listboxId","maxHeight","open","position","below","formResetCallback","setDefaultSelectedOption","updateValue","isAutocompleteInline","autocomplete","inline","isAutocompleteBoth","isAutocompleteList","list","both","maxHeightChanged","listbox","style","setProperty","openChanged","ariaControls","ariaExpanded","setPositioning","focusAndScrollOptionIntoView","queueUpdate","focus","options","track","length","_options","value","notify","placeholderChanged","proxy","HTMLInputElement","placeholder","positionChanged","positionAttribute","next","_a","_b","_c","prev","$fastController","isConnected","selectedIndex","findIndex","el","text","toLowerCase","prevSelectedValue","nextSelectedValue","firstSelectedOption","valueChanged","clickHandler","e","disabled","captured","target","closest","selectedOptions","control","connectedCallback","initialValue","disabledChanged","ariaDisabled","filterOptions","none","o","startsWith","forEach","hidden","includes","contains","document","activeElement","requestAnimationFrame","scrollIntoView","block","focusoutHandler","focusTarget","relatedTarget","isSameNode","inputHandler","inputType","indexOf","setInlineSelection","keydownHandler","key","ctrlKey","shiftKey","controlValueLength","setSelectionRange","preventDefault","keyupHandler","selectedIndexChanged","selectPreviousOption","getAttribute","selected","dirtyValue","setSelectedOptions","currentBox","getBoundingClientRect","viewportHeight","window","innerHeight","availableBottom","bottom","top","above","selectedOptionsChanged","slottedOptionsChanged","shouldEmit","$emit","attribute","mode","prototype","DelegatesARIACombobox"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, Observable, observable } from \"@microsoft/fast-element\";\nimport { limit, uniqueId } from \"@microsoft/fast-web-utilities\";\nimport { DelegatesARIAListbox } from \"../listbox\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { SelectPosition } from \"../select/select.options\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { FormAssociatedCombobox } from \"./combobox.form-associated\";\nimport { ComboboxAutocomplete } from \"./combobox.options\";\n/**\n * A Combobox Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria-practices/#combobox | ARIA combobox }.\n *\n * @public\n */\nexport class Combobox extends FormAssociatedCombobox {\n    constructor() {\n        super(...arguments);\n        /**\n         * The internal value property.\n         *\n         * @internal\n         */\n        this._value = \"\";\n        /**\n         * The collection of currently filtered options.\n         *\n         * @public\n         */\n        this.filteredOptions = [];\n        /**\n         * The current filter value.\n         *\n         * @internal\n         */\n        this.filter = \"\";\n        /**\n         * The initial state of the position attribute.\n         *\n         * @internal\n         */\n        this.forcedPosition = false;\n        /**\n         * The unique id for the internal listbox element.\n         *\n         * @internal\n         */\n        this.listboxId = uniqueId(\"listbox-\");\n        /**\n         * The max height for the listbox when opened.\n         *\n         * @internal\n         */\n        this.maxHeight = 0;\n        /**\n         * The open attribute.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: open\n         */\n        this.open = false;\n        /**\n         * The current state of the calculated position of the listbox.\n         *\n         * @public\n         */\n        this.position = SelectPosition.below;\n    }\n    /**\n     * Reset the element to its first selectable option when its parent form is reset.\n     *\n     * @internal\n     */\n    formResetCallback() {\n        super.formResetCallback();\n        this.setDefaultSelectedOption();\n        this.updateValue();\n    }\n    get isAutocompleteInline() {\n        return (this.autocomplete === ComboboxAutocomplete.inline || this.isAutocompleteBoth);\n    }\n    get isAutocompleteList() {\n        return this.autocomplete === ComboboxAutocomplete.list || this.isAutocompleteBoth;\n    }\n    get isAutocompleteBoth() {\n        return this.autocomplete === ComboboxAutocomplete.both;\n    }\n    maxHeightChanged() {\n        if (this.listbox) {\n            this.listbox.style.setProperty(\"--max-height\", `${this.maxHeight}px`);\n        }\n    }\n    openChanged() {\n        if (this.open) {\n            this.ariaControls = this.listboxId;\n            this.ariaExpanded = \"true\";\n            this.setPositioning();\n            this.focusAndScrollOptionIntoView();\n            // focus is directed to the element when `open` is changed programmatically\n            DOM.queueUpdate(() => this.focus());\n            return;\n        }\n        this.ariaControls = \"\";\n        this.ariaExpanded = \"false\";\n    }\n    /**\n     * The list of options.\n     *\n     * @public\n     * @remarks\n     * Overrides `Listbox.options`.\n     */\n    get options() {\n        Observable.track(this, \"options\");\n        return this.filteredOptions.length ? this.filteredOptions : this._options;\n    }\n    set options(value) {\n        this._options = value;\n        Observable.notify(this, \"options\");\n    }\n    /**\n     * Updates the placeholder on the proxy element.\n     * @internal\n     */\n    placeholderChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.placeholder = this.placeholder;\n        }\n    }\n    positionChanged() {\n        this.positionAttribute = this.position;\n        this.setPositioning();\n    }\n    /**\n     * The value property.\n     *\n     * @public\n     */\n    get value() {\n        Observable.track(this, \"value\");\n        return this._value;\n    }\n    set value(next) {\n        var _a, _b, _c;\n        const prev = `${this._value}`;\n        if (this.$fastController.isConnected && this.options) {\n            const selectedIndex = this.options.findIndex(el => el.text.toLowerCase() === next.toLowerCase());\n            const prevSelectedValue = (_a = this.options[this.selectedIndex]) === null || _a === void 0 ? void 0 : _a.text;\n            const nextSelectedValue = (_b = this.options[selectedIndex]) === null || _b === void 0 ? void 0 : _b.text;\n            this.selectedIndex =\n                prevSelectedValue !== nextSelectedValue\n                    ? selectedIndex\n                    : this.selectedIndex;\n            next = ((_c = this.firstSelectedOption) === null || _c === void 0 ? void 0 : _c.text) || next;\n        }\n        if (prev !== next) {\n            this._value = next;\n            super.valueChanged(prev, next);\n            Observable.notify(this, \"value\");\n        }\n    }\n    /**\n     * Handle opening and closing the listbox when the combobox is clicked.\n     *\n     * @param e - the mouse event\n     * @internal\n     */\n    clickHandler(e) {\n        if (this.disabled) {\n            return;\n        }\n        if (this.open) {\n            const captured = e.target.closest(`option,[role=option]`);\n            if (!captured || captured.disabled) {\n                return;\n            }\n            this.selectedOptions = [captured];\n            this.control.value = captured.text;\n            this.updateValue(true);\n        }\n        this.open = !this.open;\n        if (this.open) {\n            this.control.focus();\n        }\n        return true;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.forcedPosition = !!this.positionAttribute;\n        if (this.value) {\n            this.initialValue = this.value;\n        }\n    }\n    /**\n     * Synchronize the `aria-disabled` property when the `disabled` property changes.\n     *\n     * @param prev - The previous disabled value\n     * @param next - The next disabled value\n     *\n     * @internal\n     */\n    disabledChanged(prev, next) {\n        if (super.disabledChanged) {\n            super.disabledChanged(prev, next);\n        }\n        this.ariaDisabled = this.disabled ? \"true\" : \"false\";\n    }\n    /**\n     * Filter available options by text value.\n     *\n     * @public\n     */\n    filterOptions() {\n        if (!this.autocomplete || this.autocomplete === ComboboxAutocomplete.none) {\n            this.filter = \"\";\n        }\n        const filter = this.filter.toLowerCase();\n        this.filteredOptions = this._options.filter(o => o.text.toLowerCase().startsWith(this.filter.toLowerCase()));\n        if (this.isAutocompleteList) {\n            if (!this.filteredOptions.length && !filter) {\n                this.filteredOptions = this._options;\n            }\n            this._options.forEach(o => {\n                o.hidden = !this.filteredOptions.includes(o);\n            });\n        }\n    }\n    /**\n     * Focus the control and scroll the first selected option into view.\n     *\n     * @internal\n     * @remarks\n     * Overrides: `Listbox.focusAndScrollOptionIntoView`\n     */\n    focusAndScrollOptionIntoView() {\n        if (this.contains(document.activeElement)) {\n            this.control.focus();\n            if (this.firstSelectedOption) {\n                requestAnimationFrame(() => {\n                    var _a;\n                    (_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ block: \"nearest\" });\n                });\n            }\n        }\n    }\n    /**\n     * Handle focus state when the element or its children lose focus.\n     *\n     * @param e - The focus event\n     * @internal\n     */\n    focusoutHandler(e) {\n        this.updateValue();\n        if (!this.open) {\n            return true;\n        }\n        const focusTarget = e.relatedTarget;\n        if (this.isSameNode(focusTarget)) {\n            this.focus();\n            return;\n        }\n        if (!this.options || !this.options.includes(focusTarget)) {\n            this.open = false;\n        }\n    }\n    /**\n     * Handle content changes on the control input.\n     *\n     * @param e - the input event\n     * @internal\n     */\n    inputHandler(e) {\n        this.filter = this.control.value;\n        this.filterOptions();\n        if (e.inputType === \"deleteContentBackward\" || !this.filter.length) {\n            return true;\n        }\n        if (this.isAutocompleteList && !this.open) {\n            this.open = true;\n        }\n        if (this.isAutocompleteInline && this.filteredOptions.length) {\n            this.selectedOptions = [this.filteredOptions[0]];\n            this.selectedIndex = this.options.indexOf(this.firstSelectedOption);\n            this.setInlineSelection();\n        }\n        return;\n    }\n    /**\n     * Handle keydown actions for listbox navigation.\n     *\n     * @param e - the keyboard event\n     * @internal\n     */\n    keydownHandler(e) {\n        const key = e.key;\n        if (e.ctrlKey || e.shiftKey) {\n            return true;\n        }\n        switch (key) {\n            case \"Enter\": {\n                this.updateValue(true);\n                if (this.isAutocompleteInline) {\n                    this.filter = this.value;\n                }\n                this.open = false;\n                const controlValueLength = this.control.value.length;\n                this.control.setSelectionRange(controlValueLength, controlValueLength);\n                break;\n            }\n            case \"Escape\": {\n                if (!this.isAutocompleteInline) {\n                    this.selectedIndex = -1;\n                }\n                if (this.open) {\n                    this.open = false;\n                    break;\n                }\n                this.value = \"\";\n                this.control.value = \"\";\n                this.filter = \"\";\n                this.filterOptions();\n                break;\n            }\n            case \"Tab\": {\n                this.updateValue();\n                if (!this.open) {\n                    return true;\n                }\n                e.preventDefault();\n                this.open = false;\n                break;\n            }\n            case \"ArrowUp\":\n            case \"ArrowDown\": {\n                this.filterOptions();\n                if (!this.open) {\n                    this.open = true;\n                    break;\n                }\n                if (this.filteredOptions.length > 0) {\n                    super.keydownHandler(e);\n                }\n                if (this.isAutocompleteInline) {\n                    this.updateValue();\n                    this.setInlineSelection();\n                }\n                break;\n            }\n            default: {\n                return true;\n            }\n        }\n    }\n    /**\n     * Handle keyup actions for value input and text field manipulations.\n     *\n     * @param e - the keyboard event\n     * @internal\n     */\n    keyupHandler(e) {\n        const key = e.key;\n        switch (key) {\n            case \"ArrowLeft\":\n            case \"ArrowRight\":\n            case \"Backspace\":\n            case \"Delete\":\n            case \"Home\":\n            case \"End\": {\n                this.filter = this.control.value;\n                this.selectedIndex = -1;\n                this.filterOptions();\n                break;\n            }\n        }\n    }\n    /**\n     * Ensure that the selectedIndex is within the current allowable filtered range.\n     *\n     * @internal\n     * @remarks\n     * Overrides: `Listbox.selectedIndexChanged`\n     */\n    selectedIndexChanged(prev, next) {\n        if (this.$fastController.isConnected) {\n            next = limit(-1, this.options.length - 1, next);\n            // we only want to call the super method when the selectedIndex is in range\n            if (next !== this.selectedIndex) {\n                this.selectedIndex = next;\n                return;\n            }\n            super.selectedIndexChanged(prev, next);\n        }\n    }\n    /**\n     * Move focus to the previous selectable option.\n     *\n     * @internal\n     * @remarks\n     * Overrides `Listbox.selectPreviousOption`\n     */\n    selectPreviousOption() {\n        if (!this.disabled && this.selectedIndex >= 0) {\n            this.selectedIndex = this.selectedIndex - 1;\n        }\n    }\n    /**\n     * Set the default selected options at initialization or reset.\n     *\n     * @internal\n     * @remarks\n     * Overrides `Listbox.setDefaultSelectedOption`\n     */\n    setDefaultSelectedOption() {\n        if (this.$fastController.isConnected && this.options) {\n            const selectedIndex = this.options.findIndex(el => el.getAttribute(\"selected\") !== null || el.selected);\n            this.selectedIndex = selectedIndex;\n            if (!this.dirtyValue && this.firstSelectedOption) {\n                this.value = this.firstSelectedOption.text;\n            }\n            this.setSelectedOptions();\n        }\n    }\n    /**\n     * Focus and select the content of the control based on the first selected option.\n     *\n     * @param start - The index for the starting range\n     * @internal\n     */\n    setInlineSelection() {\n        if (this.firstSelectedOption) {\n            this.control.value = this.firstSelectedOption.text;\n            this.control.focus();\n            this.control.setSelectionRange(this.filter.length, this.control.value.length, \"backward\");\n        }\n    }\n    /**\n     * Calculate and apply listbox positioning based on available viewport space.\n     *\n     * @param force - direction to force the listbox to display\n     * @public\n     */\n    setPositioning() {\n        const currentBox = this.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const availableBottom = viewportHeight - currentBox.bottom;\n        this.position = this.forcedPosition\n            ? this.positionAttribute\n            : currentBox.top > availableBottom\n                ? SelectPosition.above\n                : SelectPosition.below;\n        this.positionAttribute = this.forcedPosition\n            ? this.positionAttribute\n            : this.position;\n        this.maxHeight =\n            this.position === SelectPosition.above ? ~~currentBox.top : ~~availableBottom;\n    }\n    /**\n     * Ensure that the entire list of options is used when setting the selected property.\n     *\n     * @internal\n     * @remarks\n     * Overrides: `Listbox.selectedOptionsChanged`\n     */\n    selectedOptionsChanged(prev, next) {\n        if (this.$fastController.isConnected) {\n            this._options.forEach(o => {\n                o.selected = next.includes(o);\n            });\n        }\n    }\n    /**\n     * Synchronize the form-associated proxy and update the value property of the element.\n     *\n     * @param prev - the previous collection of slotted option elements\n     * @param next - the next collection of slotted option elements\n     *\n     * @internal\n     */\n    slottedOptionsChanged(prev, next) {\n        super.slottedOptionsChanged(prev, next);\n        this.updateValue();\n    }\n    /**\n     * @internal\n     */\n    updateValue(shouldEmit) {\n        var _a;\n        if (this.$fastController.isConnected) {\n            this.value = ((_a = this.firstSelectedOption) === null || _a === void 0 ? void 0 : _a.text) || this.control.value;\n        }\n        if (shouldEmit) {\n            this.$emit(\"change\");\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"autocomplete\", mode: \"fromView\" })\n], Combobox.prototype, \"autocomplete\", void 0);\n__decorate([\n    observable\n], Combobox.prototype, \"maxHeight\", void 0);\n__decorate([\n    attr({ attribute: \"open\", mode: \"boolean\" })\n], Combobox.prototype, \"open\", void 0);\n__decorate([\n    attr\n], Combobox.prototype, \"placeholder\", void 0);\n__decorate([\n    attr({ attribute: \"position\" })\n], Combobox.prototype, \"positionAttribute\", void 0);\n__decorate([\n    observable\n], Combobox.prototype, \"position\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA combobox role.\n *\n * @public\n */\nexport class DelegatesARIACombobox {\n}\n__decorate([\n    observable\n], DelegatesARIACombobox.prototype, \"ariaAutoComplete\", void 0);\n__decorate([\n    observable\n], DelegatesARIACombobox.prototype, \"ariaControls\", void 0);\napplyMixins(DelegatesARIACombobox, DelegatesARIAListbox);\napplyMixins(Combobox, StartEnd, DelegatesARIACombobox);\n"]},"metadata":{},"sourceType":"module"}