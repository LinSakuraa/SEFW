{"ast":null,"code":"import { defineComponent, h, inject, ref, watchEffect } from 'vue';\nimport { NInput } from '../../input';\nimport { colorPickerInjectionKey } from './context'; // 0 - 255\n\nfunction normalizeRgbUnit(value) {\n  if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n    return Math.max(0, Math.min(parseInt(value), 255));\n  }\n\n  return false;\n} // 0 - 360\n\n\nfunction normalizeHueUnit(value) {\n  if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n    return Math.max(0, Math.min(parseInt(value), 360));\n  }\n\n  return false;\n} // 0 - 100\n\n\nfunction normalizeSlvUnit(value) {\n  if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n    return Math.max(0, Math.min(parseInt(value), 100));\n  }\n\n  return false;\n}\n\nfunction normalizeHexaUnit(value) {\n  const trimmedValue = value.trim();\n\n  if (/^#[0-9a-fA-F]+$/.test(trimmedValue)) {\n    return [4, 5, 7, 9].includes(trimmedValue.length);\n  }\n\n  return false;\n} // 0 - 100%\n\n\nfunction normalizeAlphaUnit(value) {\n  if (/^\\d{1,3}\\.?\\d*%$/.test(value.trim())) {\n    return Math.max(0, Math.min(parseInt(value), 100));\n  }\n\n  return false;\n}\n\nconst inputThemeOverrides = {\n  paddingSmall: '0 4px'\n};\nexport default defineComponent({\n  name: 'ColorInputUnit',\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [Number, String],\n      default: null\n    },\n    showAlpha: Boolean,\n    onUpdateValue: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const inputValueRef = ref(''); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const {\n      themeRef\n    } = inject(colorPickerInjectionKey, null);\n    watchEffect(() => {\n      inputValueRef.value = getInputString();\n    });\n\n    function getInputString() {\n      const {\n        value\n      } = props;\n      if (value === null) return '';\n      const {\n        label\n      } = props;\n\n      if (label === 'HEX') {\n        return value;\n      }\n\n      if (label === 'A') {\n        return `${Math.floor(value * 100)}%`;\n      }\n\n      return String(Math.floor(value));\n    }\n\n    function handleInputUpdateValue(value) {\n      inputValueRef.value = value;\n    }\n\n    function handleInputChange(value) {\n      let unit;\n      let valid;\n\n      switch (props.label) {\n        case 'HEX':\n          valid = normalizeHexaUnit(value);\n\n          if (valid) {\n            props.onUpdateValue(value);\n          }\n\n          inputValueRef.value = getInputString(); // to normalized new value\n\n          break;\n\n        case 'H':\n          unit = normalizeHueUnit(value);\n\n          if (unit === false) {\n            inputValueRef.value = getInputString();\n          } else {\n            props.onUpdateValue(unit);\n          }\n\n          break;\n\n        case 'S':\n        case 'L':\n        case 'V':\n          unit = normalizeSlvUnit(value);\n\n          if (unit === false) {\n            inputValueRef.value = getInputString();\n          } else {\n            props.onUpdateValue(unit);\n          }\n\n          break;\n\n        case 'A':\n          unit = normalizeAlphaUnit(value);\n\n          if (unit === false) {\n            inputValueRef.value = getInputString();\n          } else {\n            props.onUpdateValue(unit);\n          }\n\n          break;\n\n        case 'R':\n        case 'G':\n        case 'B':\n          unit = normalizeRgbUnit(value);\n\n          if (unit === false) {\n            inputValueRef.value = getInputString();\n          } else {\n            props.onUpdateValue(unit);\n          }\n\n          break;\n      }\n    }\n\n    return {\n      mergedTheme: themeRef,\n      inputValue: inputValueRef,\n      handleInputChange,\n      handleInputUpdateValue\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme\n    } = this;\n    return h(NInput, {\n      size: \"small\",\n      placeholder: this.label,\n      theme: mergedTheme.peers.Input,\n      themeOverrides: mergedTheme.peerOverrides.Input,\n      builtinThemeOverrides: inputThemeOverrides,\n      value: this.inputValue,\n      onUpdateValue: this.handleInputUpdateValue,\n      onChange: this.handleInputChange,\n      // add more space for xxx% input\n      style: this.label === 'A' ? 'flex-grow: 1.25;' : ''\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/color-picker/src/ColorInputUnit.js"],"names":["defineComponent","h","inject","ref","watchEffect","NInput","colorPickerInjectionKey","normalizeRgbUnit","value","test","trim","Math","max","min","parseInt","normalizeHueUnit","normalizeSlvUnit","normalizeHexaUnit","trimmedValue","includes","length","normalizeAlphaUnit","inputThemeOverrides","paddingSmall","name","props","label","type","String","required","Number","default","showAlpha","Boolean","onUpdateValue","Function","setup","inputValueRef","themeRef","getInputString","floor","handleInputUpdateValue","handleInputChange","unit","valid","mergedTheme","inputValue","render","size","placeholder","theme","peers","Input","themeOverrides","peerOverrides","builtinThemeOverrides","onChange","style"],"mappings":"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","sourcesContent":["import { defineComponent, h, inject, ref, watchEffect } from 'vue';\nimport { NInput } from '../../input';\nimport { colorPickerInjectionKey } from './context';\n// 0 - 255\nfunction normalizeRgbUnit(value) {\n    if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n        return Math.max(0, Math.min(parseInt(value), 255));\n    }\n    return false;\n}\n// 0 - 360\nfunction normalizeHueUnit(value) {\n    if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n        return Math.max(0, Math.min(parseInt(value), 360));\n    }\n    return false;\n}\n// 0 - 100\nfunction normalizeSlvUnit(value) {\n    if (/^\\d{1,3}\\.?\\d*$/.test(value.trim())) {\n        return Math.max(0, Math.min(parseInt(value), 100));\n    }\n    return false;\n}\nfunction normalizeHexaUnit(value) {\n    const trimmedValue = value.trim();\n    if (/^#[0-9a-fA-F]+$/.test(trimmedValue)) {\n        return [4, 5, 7, 9].includes(trimmedValue.length);\n    }\n    return false;\n}\n// 0 - 100%\nfunction normalizeAlphaUnit(value) {\n    if (/^\\d{1,3}\\.?\\d*%$/.test(value.trim())) {\n        return Math.max(0, Math.min(parseInt(value), 100));\n    }\n    return false;\n}\nconst inputThemeOverrides = {\n    paddingSmall: '0 4px'\n};\nexport default defineComponent({\n    name: 'ColorInputUnit',\n    props: {\n        label: {\n            type: String,\n            required: true\n        },\n        value: {\n            type: [Number, String],\n            default: null\n        },\n        showAlpha: Boolean,\n        onUpdateValue: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        const inputValueRef = ref('');\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { themeRef } = inject(colorPickerInjectionKey, null);\n        watchEffect(() => {\n            inputValueRef.value = getInputString();\n        });\n        function getInputString() {\n            const { value } = props;\n            if (value === null)\n                return '';\n            const { label } = props;\n            if (label === 'HEX') {\n                return value;\n            }\n            if (label === 'A') {\n                return `${Math.floor(value * 100)}%`;\n            }\n            return String(Math.floor(value));\n        }\n        function handleInputUpdateValue(value) {\n            inputValueRef.value = value;\n        }\n        function handleInputChange(value) {\n            let unit;\n            let valid;\n            switch (props.label) {\n                case 'HEX':\n                    valid = normalizeHexaUnit(value);\n                    if (valid) {\n                        props.onUpdateValue(value);\n                    }\n                    inputValueRef.value = getInputString(); // to normalized new value\n                    break;\n                case 'H':\n                    unit = normalizeHueUnit(value);\n                    if (unit === false) {\n                        inputValueRef.value = getInputString();\n                    }\n                    else {\n                        props.onUpdateValue(unit);\n                    }\n                    break;\n                case 'S':\n                case 'L':\n                case 'V':\n                    unit = normalizeSlvUnit(value);\n                    if (unit === false) {\n                        inputValueRef.value = getInputString();\n                    }\n                    else {\n                        props.onUpdateValue(unit);\n                    }\n                    break;\n                case 'A':\n                    unit = normalizeAlphaUnit(value);\n                    if (unit === false) {\n                        inputValueRef.value = getInputString();\n                    }\n                    else {\n                        props.onUpdateValue(unit);\n                    }\n                    break;\n                case 'R':\n                case 'G':\n                case 'B':\n                    unit = normalizeRgbUnit(value);\n                    if (unit === false) {\n                        inputValueRef.value = getInputString();\n                    }\n                    else {\n                        props.onUpdateValue(unit);\n                    }\n                    break;\n            }\n        }\n        return {\n            mergedTheme: themeRef,\n            inputValue: inputValueRef,\n            handleInputChange,\n            handleInputUpdateValue\n        };\n    },\n    render() {\n        const { mergedTheme } = this;\n        return (h(NInput, { size: \"small\", placeholder: this.label, theme: mergedTheme.peers.Input, themeOverrides: mergedTheme.peerOverrides.Input, builtinThemeOverrides: inputThemeOverrides, value: this.inputValue, onUpdateValue: this.handleInputUpdateValue, onChange: this.handleInputChange, \n            // add more space for xxx% input\n            style: this.label === 'A' ? 'flex-grow: 1.25;' : '' }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}