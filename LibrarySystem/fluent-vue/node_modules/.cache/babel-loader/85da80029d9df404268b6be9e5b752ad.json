{"ast":null,"code":"import { computed, defineComponent, h, nextTick, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue';\nimport { throttle } from 'lodash-es';\nimport { unwrapElement } from 'seemly';\nimport { onFontsReady } from 'vooks';\nimport { NScrollbar } from '../../_internal';\nimport { keysOf } from '../../_utils';\nimport { anchorInjectionKey } from './Link';\nimport { getOffset } from './utils';\nexport const baseAnchorProps = {\n  type: {\n    type: String,\n    default: 'rail'\n  },\n  showRail: {\n    type: Boolean,\n    default: true\n  },\n  showBackground: {\n    type: Boolean,\n    default: true\n  },\n  bound: {\n    type: Number,\n    default: 12\n  },\n  internalScrollable: Boolean,\n  ignoreGap: Boolean,\n  offsetTarget: [String, Object, Function]\n};\nexport const baseAnchorPropKeys = keysOf(baseAnchorProps);\nexport default defineComponent({\n  name: 'BaseAnchor',\n  props: Object.assign(Object.assign({}, baseAnchorProps), {\n    mergedClsPrefix: {\n      type: String,\n      required: true\n    }\n  }),\n\n  setup(props) {\n    const collectedLinkHrefs = [];\n    const titleEls = [];\n    const activeHrefRef = ref(null);\n    const slotRef = ref(null);\n    const barRef = ref(null);\n    const selfRef = ref(null);\n    const isBlockTypeRef = computed(() => {\n      return props.type === 'block';\n    });\n    const mergedShowRailRef = computed(() => {\n      return !isBlockTypeRef.value && props.showRail;\n    });\n\n    function disableTransitionOneTick() {\n      const {\n        value: barEl\n      } = barRef;\n      const {\n        value: slotEl\n      } = slotRef;\n\n      if (barEl) {\n        barEl.style.transition = 'none';\n      }\n\n      if (slotEl) {\n        slotEl.style.transition = 'none';\n      }\n\n      if (titleEls) {\n        titleEls.forEach(titleEl => {\n          titleEl.style.transition = 'none';\n        });\n      }\n\n      void nextTick(() => {\n        const {\n          value: nextBarEl\n        } = barRef;\n        const {\n          value: nextSlotEl\n        } = slotRef;\n\n        if (nextBarEl) {\n          void nextBarEl.offsetWidth;\n          nextBarEl.style.transition = '';\n        }\n\n        if (nextSlotEl) {\n          void nextSlotEl.offsetWidth;\n          nextSlotEl.style.transition = '';\n        }\n\n        if (titleEls) {\n          titleEls.forEach(titleEl => {\n            void titleEl.offsetWidth;\n            titleEl.style.transition = '';\n          });\n        }\n      });\n    }\n\n    function updateBarPosition(linkTitleEl, transition = true) {\n      const {\n        value: barEl\n      } = barRef;\n      const {\n        value: slotEl\n      } = slotRef;\n      const {\n        value: selfEl\n      } = selfRef;\n      if (!selfEl || !barEl) return;\n\n      if (!transition) {\n        barEl.style.transition = 'none';\n        if (slotEl) slotEl.style.transition = 'none';\n      }\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = linkTitleEl;\n      const {\n        top: linkTitleClientTop,\n        left: linkTitleClientLeft\n      } = linkTitleEl.getBoundingClientRect();\n      const {\n        top: anchorClientTop,\n        left: anchorClientLeft\n      } = selfEl.getBoundingClientRect();\n      const offsetTop = linkTitleClientTop - anchorClientTop;\n      const offsetLeft = linkTitleClientLeft - anchorClientLeft;\n      barEl.style.top = `${offsetTop}px`;\n      barEl.style.height = `${offsetHeight}px`;\n\n      if (slotEl) {\n        slotEl.style.top = `${offsetTop}px`;\n        slotEl.style.height = `${offsetHeight}px`;\n        slotEl.style.maxWidth = `${offsetWidth + offsetLeft}px`;\n      }\n\n      void barEl.offsetHeight;\n      if (slotEl) void slotEl.offsetHeight;\n\n      if (!transition) {\n        barEl.style.transition = '';\n        if (slotEl) slotEl.style.transition = '';\n      }\n    }\n\n    function setActiveHref(href, transition = true) {\n      const idMatchResult = /^#([^#]+)$/.exec(href);\n      if (!idMatchResult) return;\n      const linkEl = document.getElementById(idMatchResult[1]);\n      if (!linkEl) return;\n      activeHrefRef.value = href;\n      linkEl.scrollIntoView();\n\n      if (!transition) {\n        disableTransitionOneTick();\n      }\n\n      handleScroll();\n    }\n\n    const handleScroll = throttle(() => _handleScroll(true), 128);\n\n    function _handleScroll(transition = true) {\n      var _a;\n\n      const links = [];\n      const offsetTarget = unwrapElement((_a = props.offsetTarget) !== null && _a !== void 0 ? _a : document);\n      collectedLinkHrefs.forEach(href => {\n        const idMatchResult = /#([^#]+)$/.exec(href);\n        if (!idMatchResult) return;\n        const linkEl = document.getElementById(idMatchResult[1]);\n\n        if (linkEl && offsetTarget) {\n          const {\n            top,\n            height\n          } = getOffset(linkEl, offsetTarget);\n          links.push({\n            top,\n            height,\n            href\n          });\n        }\n      });\n      links.sort((a, b) => {\n        // ascend top\n        if (a.top > b.top) {\n          return 1; // descend height\n        } else if (a.top === b.top && a.height < b.height) {\n          return -1;\n        }\n\n        return -1;\n      });\n      const currentActiveHref = activeHrefRef.value;\n      const {\n        bound,\n        ignoreGap\n      } = props;\n      const activeLink = links.reduce((prevLink, link) => {\n        if (link.top + link.height < 0) {\n          if (ignoreGap) {\n            return link;\n          } else {\n            return prevLink;\n          }\n        }\n\n        if (link.top <= bound) {\n          if (prevLink === null) {\n            return link;\n          } else if (link.top === prevLink.top) {\n            if (link.href === currentActiveHref) {\n              return link;\n            } else return prevLink;\n          } else if (link.top > prevLink.top) {\n            return link;\n          } else {\n            return prevLink;\n          }\n        }\n\n        return prevLink;\n      }, null);\n      if (!transition) disableTransitionOneTick();\n\n      if (activeLink) {\n        activeHrefRef.value = activeLink.href;\n      } else {\n        activeHrefRef.value = null;\n      }\n    }\n\n    provide(anchorInjectionKey, {\n      activeHref: activeHrefRef,\n      mergedClsPrefix: toRef(props, 'mergedClsPrefix'),\n      updateBarPosition,\n      setActiveHref,\n      collectedLinkHrefs,\n      titleEls\n    });\n    onMounted(() => {\n      document.addEventListener('scroll', handleScroll, true);\n      setActiveHref(window.location.hash);\n\n      _handleScroll(false);\n    });\n    onFontsReady(() => {\n      setActiveHref(window.location.hash);\n\n      _handleScroll(false);\n    });\n    onBeforeUnmount(() => {\n      document.removeEventListener('scroll', handleScroll, true);\n    });\n    watch(activeHrefRef, value => {\n      if (value === null) {\n        const {\n          value: slotEl\n        } = slotRef;\n\n        if (slotEl && !isBlockTypeRef.value) {\n          slotEl.style.maxWidth = '0';\n        }\n      }\n    });\n    return {\n      selfRef,\n      barRef,\n      slotRef,\n      setActiveHref,\n      activeHref: activeHrefRef,\n      isBlockType: isBlockTypeRef,\n      mergedShowRail: mergedShowRailRef\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix,\n      mergedShowRail,\n      isBlockType,\n      $slots\n    } = this;\n    const Anchor = h(\"div\", {\n      class: [`${mergedClsPrefix}-anchor`, isBlockType && `${mergedClsPrefix}-anchor--block`, mergedShowRail && `${mergedClsPrefix}-anchor--show-rail`],\n      ref: \"selfRef\"\n    }, mergedShowRail && this.showBackground ? h(\"div\", {\n      ref: \"slotRef\",\n      class: `${mergedClsPrefix}-anchor-link-background`\n    }) : null, mergedShowRail ? h(\"div\", {\n      class: `${mergedClsPrefix}-anchor-rail`\n    }, h(\"div\", {\n      ref: \"barRef\",\n      class: [`${mergedClsPrefix}-anchor-rail__bar`, this.activeHref !== null && `${mergedClsPrefix}-anchor-rail__bar--active`]\n    })) : null, (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots));\n    return this.internalScrollable ? h(NScrollbar, null, {\n      default: () => Anchor\n    }) : Anchor;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/anchor/src/BaseAnchor.js"],"names":["computed","defineComponent","h","nextTick","onBeforeUnmount","onMounted","provide","ref","toRef","watch","throttle","unwrapElement","onFontsReady","NScrollbar","keysOf","anchorInjectionKey","getOffset","baseAnchorProps","type","String","default","showRail","Boolean","showBackground","bound","Number","internalScrollable","ignoreGap","offsetTarget","Object","Function","baseAnchorPropKeys","name","props","assign","mergedClsPrefix","required","setup","collectedLinkHrefs","titleEls","activeHrefRef","slotRef","barRef","selfRef","isBlockTypeRef","mergedShowRailRef","value","disableTransitionOneTick","barEl","slotEl","style","transition","forEach","titleEl","nextBarEl","nextSlotEl","offsetWidth","updateBarPosition","linkTitleEl","selfEl","offsetHeight","top","linkTitleClientTop","left","linkTitleClientLeft","getBoundingClientRect","anchorClientTop","anchorClientLeft","offsetTop","offsetLeft","height","maxWidth","setActiveHref","href","idMatchResult","exec","linkEl","document","getElementById","scrollIntoView","handleScroll","_handleScroll","_a","links","push","sort","a","b","currentActiveHref","activeLink","reduce","prevLink","link","activeHref","addEventListener","window","location","hash","removeEventListener","isBlockType","mergedShowRail","render","$slots","Anchor","class","call"],"mappings":"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","sourcesContent":["import { computed, defineComponent, h, nextTick, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue';\nimport { throttle } from 'lodash-es';\nimport { unwrapElement } from 'seemly';\nimport { onFontsReady } from 'vooks';\nimport { NScrollbar } from '../../_internal';\nimport { keysOf } from '../../_utils';\nimport { anchorInjectionKey } from './Link';\nimport { getOffset } from './utils';\nexport const baseAnchorProps = {\n    type: {\n        type: String,\n        default: 'rail'\n    },\n    showRail: {\n        type: Boolean,\n        default: true\n    },\n    showBackground: {\n        type: Boolean,\n        default: true\n    },\n    bound: {\n        type: Number,\n        default: 12\n    },\n    internalScrollable: Boolean,\n    ignoreGap: Boolean,\n    offsetTarget: [String, Object, Function]\n};\nexport const baseAnchorPropKeys = keysOf(baseAnchorProps);\nexport default defineComponent({\n    name: 'BaseAnchor',\n    props: Object.assign(Object.assign({}, baseAnchorProps), { mergedClsPrefix: {\n            type: String,\n            required: true\n        } }),\n    setup(props) {\n        const collectedLinkHrefs = [];\n        const titleEls = [];\n        const activeHrefRef = ref(null);\n        const slotRef = ref(null);\n        const barRef = ref(null);\n        const selfRef = ref(null);\n        const isBlockTypeRef = computed(() => {\n            return props.type === 'block';\n        });\n        const mergedShowRailRef = computed(() => {\n            return !isBlockTypeRef.value && props.showRail;\n        });\n        function disableTransitionOneTick() {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            if (barEl) {\n                barEl.style.transition = 'none';\n            }\n            if (slotEl) {\n                slotEl.style.transition = 'none';\n            }\n            if (titleEls) {\n                titleEls.forEach((titleEl) => {\n                    titleEl.style.transition = 'none';\n                });\n            }\n            void nextTick(() => {\n                const { value: nextBarEl } = barRef;\n                const { value: nextSlotEl } = slotRef;\n                if (nextBarEl) {\n                    void nextBarEl.offsetWidth;\n                    nextBarEl.style.transition = '';\n                }\n                if (nextSlotEl) {\n                    void nextSlotEl.offsetWidth;\n                    nextSlotEl.style.transition = '';\n                }\n                if (titleEls) {\n                    titleEls.forEach((titleEl) => {\n                        void titleEl.offsetWidth;\n                        titleEl.style.transition = '';\n                    });\n                }\n            });\n        }\n        function updateBarPosition(linkTitleEl, transition = true) {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            const { value: selfEl } = selfRef;\n            if (!selfEl || !barEl)\n                return;\n            if (!transition) {\n                barEl.style.transition = 'none';\n                if (slotEl)\n                    slotEl.style.transition = 'none';\n            }\n            const { offsetHeight, offsetWidth } = linkTitleEl;\n            const { top: linkTitleClientTop, left: linkTitleClientLeft } = linkTitleEl.getBoundingClientRect();\n            const { top: anchorClientTop, left: anchorClientLeft } = selfEl.getBoundingClientRect();\n            const offsetTop = linkTitleClientTop - anchorClientTop;\n            const offsetLeft = linkTitleClientLeft - anchorClientLeft;\n            barEl.style.top = `${offsetTop}px`;\n            barEl.style.height = `${offsetHeight}px`;\n            if (slotEl) {\n                slotEl.style.top = `${offsetTop}px`;\n                slotEl.style.height = `${offsetHeight}px`;\n                slotEl.style.maxWidth = `${offsetWidth + offsetLeft}px`;\n            }\n            void barEl.offsetHeight;\n            if (slotEl)\n                void slotEl.offsetHeight;\n            if (!transition) {\n                barEl.style.transition = '';\n                if (slotEl)\n                    slotEl.style.transition = '';\n            }\n        }\n        function setActiveHref(href, transition = true) {\n            const idMatchResult = /^#([^#]+)$/.exec(href);\n            if (!idMatchResult)\n                return;\n            const linkEl = document.getElementById(idMatchResult[1]);\n            if (!linkEl)\n                return;\n            activeHrefRef.value = href;\n            linkEl.scrollIntoView();\n            if (!transition) {\n                disableTransitionOneTick();\n            }\n            handleScroll();\n        }\n        const handleScroll = throttle(() => _handleScroll(true), 128);\n        function _handleScroll(transition = true) {\n            var _a;\n            const links = [];\n            const offsetTarget = unwrapElement((_a = props.offsetTarget) !== null && _a !== void 0 ? _a : document);\n            collectedLinkHrefs.forEach((href) => {\n                const idMatchResult = /#([^#]+)$/.exec(href);\n                if (!idMatchResult)\n                    return;\n                const linkEl = document.getElementById(idMatchResult[1]);\n                if (linkEl && offsetTarget) {\n                    const { top, height } = getOffset(linkEl, offsetTarget);\n                    links.push({\n                        top,\n                        height,\n                        href\n                    });\n                }\n            });\n            links.sort((a, b) => {\n                // ascend top\n                if (a.top > b.top) {\n                    return 1;\n                    // descend height\n                }\n                else if (a.top === b.top && a.height < b.height) {\n                    return -1;\n                }\n                return -1;\n            });\n            const currentActiveHref = activeHrefRef.value;\n            const { bound, ignoreGap } = props;\n            const activeLink = links.reduce((prevLink, link) => {\n                if (link.top + link.height < 0) {\n                    if (ignoreGap) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                if (link.top <= bound) {\n                    if (prevLink === null) {\n                        return link;\n                    }\n                    else if (link.top === prevLink.top) {\n                        if (link.href === currentActiveHref) {\n                            return link;\n                        }\n                        else\n                            return prevLink;\n                    }\n                    else if (link.top > prevLink.top) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                return prevLink;\n            }, null);\n            if (!transition)\n                disableTransitionOneTick();\n            if (activeLink) {\n                activeHrefRef.value = activeLink.href;\n            }\n            else {\n                activeHrefRef.value = null;\n            }\n        }\n        provide(anchorInjectionKey, {\n            activeHref: activeHrefRef,\n            mergedClsPrefix: toRef(props, 'mergedClsPrefix'),\n            updateBarPosition,\n            setActiveHref,\n            collectedLinkHrefs,\n            titleEls\n        });\n        onMounted(() => {\n            document.addEventListener('scroll', handleScroll, true);\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onFontsReady(() => {\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onBeforeUnmount(() => {\n            document.removeEventListener('scroll', handleScroll, true);\n        });\n        watch(activeHrefRef, (value) => {\n            if (value === null) {\n                const { value: slotEl } = slotRef;\n                if (slotEl && !isBlockTypeRef.value) {\n                    slotEl.style.maxWidth = '0';\n                }\n            }\n        });\n        return {\n            selfRef,\n            barRef,\n            slotRef,\n            setActiveHref,\n            activeHref: activeHrefRef,\n            isBlockType: isBlockTypeRef,\n            mergedShowRail: mergedShowRailRef\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedShowRail, isBlockType, $slots } = this;\n        const Anchor = (h(\"div\", { class: [\n                `${mergedClsPrefix}-anchor`,\n                isBlockType && `${mergedClsPrefix}-anchor--block`,\n                mergedShowRail && `${mergedClsPrefix}-anchor--show-rail`\n            ], ref: \"selfRef\" },\n            mergedShowRail && this.showBackground ? (h(\"div\", { ref: \"slotRef\", class: `${mergedClsPrefix}-anchor-link-background` })) : null,\n            mergedShowRail ? (h(\"div\", { class: `${mergedClsPrefix}-anchor-rail` },\n                h(\"div\", { ref: \"barRef\", class: [\n                        `${mergedClsPrefix}-anchor-rail__bar`,\n                        this.activeHref !== null &&\n                            `${mergedClsPrefix}-anchor-rail__bar--active`\n                    ] }))) : null, (_a = $slots.default) === null || _a === void 0 ? void 0 :\n            _a.call($slots)));\n        return this.internalScrollable ? (h(NScrollbar, null, {\n            default: () => Anchor\n        })) : (Anchor);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}