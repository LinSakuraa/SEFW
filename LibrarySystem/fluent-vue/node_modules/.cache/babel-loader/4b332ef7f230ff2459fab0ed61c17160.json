{"ast":null,"code":"import { css, cssPartial } from '@microsoft/fast-element';\nimport { DesignToken, disabledCursor, display, focusVisible, forcedColorsStylesheetBehavior } from '@microsoft/fast-foundation';\nimport { SystemColors } from '@microsoft/fast-web-utilities';\nimport { DirectionalStyleSheetBehavior, heightNumber } from '../styles/index';\nimport { accentFillRest, baseHeightMultiplier, bodyFont, controlCornerRadius, density, designUnit, disabledOpacity, focusStrokeOuter, focusStrokeWidth, neutralFillSecondaryRecipe, neutralFillSecondaryRest, neutralFillStealthActive, neutralFillStealthHover, neutralFillStealthRecipe, neutralFillStealthRest, neutralForegroundRest, strokeWidth, typeRampBaseFontSize, typeRampBaseLineHeight } from '../design-tokens';\nconst ltr = css`\n  .expand-collapse-button svg {\n    transform: rotate(0deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    left: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    left: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\nconst rtl = css`\n  .expand-collapse-button svg {\n    transform: rotate(180deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    right: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    right: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\nexport const expandCollapseButtonSize = cssPartial`((${baseHeightMultiplier} / 2) * ${designUnit}) + ((${designUnit} * ${density}) / 2)`;\nconst expandCollapseHover = DesignToken.create('tree-item-expand-collapse-hover').withDefault(target => {\n  const recipe = neutralFillStealthRecipe.getValueFor(target);\n  return recipe.evaluate(target, recipe.evaluate(target).hover).hover;\n});\nconst selectedExpandCollapseHover = DesignToken.create('tree-item-expand-collapse-selected-hover').withDefault(target => {\n  const baseRecipe = neutralFillSecondaryRecipe.getValueFor(target);\n  const buttonRecipe = neutralFillStealthRecipe.getValueFor(target);\n  return buttonRecipe.evaluate(target, baseRecipe.evaluate(target).rest).hover;\n});\nexport const treeItemStyles = (context, definition) => css`\n    ${display('block')} :host {\n      contain: content;\n      position: relative;\n      outline: none;\n      color: ${neutralForegroundRest};\n      fill: currentcolor;\n      cursor: pointer;\n      font-family: ${bodyFont};\n      --expand-collapse-button-size: calc(${heightNumber} * 1px);\n      --tree-item-nested-width: 0;\n    }\n\n    :host(:focus) > .positioning-region {\n      outline: none;\n    }\n\n    :host(:focus) .content-region {\n      outline: none;\n    }\n\n    .positioning-region {\n      display: flex;\n      position: relative;\n      box-sizing: border-box;\n      background: ${neutralFillStealthRest};\n      border: calc(${strokeWidth} * 1px) solid transparent;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      height: calc((${heightNumber} + 1) * 1px);\n    }\n\n    :host(:${focusVisible}) .positioning-region {\n      border-color: ${focusStrokeOuter};\n      box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${focusStrokeOuter} inset;\n    }\n\n    .positioning-region::before {\n      content: '';\n      display: block;\n      width: var(--tree-item-nested-width);\n      flex-shrink: 0;\n    }\n\n    :host(:not([disabled])) .positioning-region:hover {\n      background: ${neutralFillStealthHover};\n    }\n\n    :host(:not([disabled])) .positioning-region:active {\n      background: ${neutralFillStealthActive};\n    }\n\n    .content-region {\n      display: inline-flex;\n      align-items: center;\n      white-space: nowrap;\n      width: 100%;\n      height: calc(${heightNumber} * 1px);\n      margin-inline-start: calc(${designUnit} * 2px + 8px);\n      font-size: ${typeRampBaseFontSize};\n      line-height: ${typeRampBaseLineHeight};\n      font-weight: 400;\n    }\n\n    .items {\n      display: none;\n      ${\n/* Font size should be based off calc(1em + (design-unit + glyph-size-number) * 1px) -\n    update when density story is figured out */\n''} font-size: calc(1em + (${designUnit} + 16) * 1px);\n    }\n\n    .expand-collapse-button {\n      background: none;\n      border: none;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      outline: none;\n      ${\n/* Width and Height should be based off calc(glyph-size-number + (design-unit * 4) * 1px) -\n    update when density story is figured out */\n''} width: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      height: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      margin: 0 6px;\n    }\n\n    .expand-collapse-button svg {\n      transition: transform 0.1s linear;\n      pointer-events: none;\n    }\n\n    .start,\n    .end {\n      display: flex;\n    }\n\n    .start {\n      ${\n/* need to swap out once we understand how horizontalSpacing will work */\n''} margin-inline-end: calc(${designUnit} * 2px + 2px);\n    }\n\n    .end {\n      ${\n/* need to swap out once we understand how horizontalSpacing will work */\n''} margin-inline-start: calc(${designUnit} * 2px + 2px);\n    }\n\n    :host(.expanded) > .items {\n      display: block;\n    }\n\n    :host([disabled]) {\n      opacity: ${disabledOpacity};\n      cursor: ${disabledCursor};\n    }\n\n    :host(.nested) .content-region {\n      position: relative;\n      margin-inline-start: var(--expand-collapse-button-size);\n    }\n\n    :host(.nested) .expand-collapse-button {\n      position: absolute;\n    }\n\n    :host(.nested) .expand-collapse-button:hover {\n      background: ${expandCollapseHover};\n    }\n\n    :host(:not([disabled])[selected]) .positioning-region {\n      background: ${neutralFillSecondaryRest};\n    }\n\n    :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n      background: ${selectedExpandCollapseHover};\n    }\n\n    :host([selected])::after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: calc((${heightNumber} / 4) * 1px);\n      width: 3px;\n      height: calc((${heightNumber} / 2) * 1px);\n      ${\n/* The french fry background needs to be calculated based on the selected background state for this control.\n    We currently have no way of changing that, so setting to accent-foreground-rest for the time being */\n''} background: ${accentFillRest};\n      border-radius: calc(${controlCornerRadius} * 1px);\n    }\n\n    ::slotted(fluent-tree-item) {\n      --tree-item-nested-width: 1em;\n      --expand-collapse-button-nested-width: calc(${heightNumber} * -1px);\n    }\n  `.withBehaviors(new DirectionalStyleSheetBehavior(ltr, rtl), forcedColorsStylesheetBehavior(css`\n        :host {\n          color: ${SystemColors.ButtonText};\n        }\n        .positioning-region {\n          border-color: ${SystemColors.ButtonFace};\n          background: ${SystemColors.ButtonFace};\n        }\n        :host(:not([disabled])) .positioning-region:hover,\n        :host(:not([disabled])) .positioning-region:active,\n        :host(:not([disabled])[selected]) .positioning-region {\n          background: ${SystemColors.Highlight};\n        }\n        :host .positioning-region:hover .content-region,\n        :host([selected]) .positioning-region .content-region {\n          forced-color-adjust: none;\n          color: ${SystemColors.HighlightText};\n        }\n        :host([disabled][selected]) .positioning-region .content-region {\n          color: ${SystemColors.GrayText};\n        }\n        :host([selected])::after {\n          background: ${SystemColors.HighlightText};\n        }\n        :host(:${focusVisible}) .positioning-region {\n          forced-color-adjust: none;\n          border-color: ${SystemColors.ButtonText};\n          box-shadow: 0 0 0 2px inset ${SystemColors.ButtonFace};\n        }\n        :host([disabled]),\n        :host([disabled]) .content-region,\n        :host([disabled]) .positioning-region:hover .content-region {\n          opacity: 1;\n          color: ${SystemColors.GrayText};\n        }\n        :host(.nested) .expand-collapse-button:hover,\n        :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n          background: ${SystemColors.ButtonFace};\n          fill: ${SystemColors.ButtonText};\n        }\n      `));","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/tree-item/tree-item.styles.js"],"names":["css","cssPartial","DesignToken","disabledCursor","display","focusVisible","forcedColorsStylesheetBehavior","SystemColors","DirectionalStyleSheetBehavior","heightNumber","accentFillRest","baseHeightMultiplier","bodyFont","controlCornerRadius","density","designUnit","disabledOpacity","focusStrokeOuter","focusStrokeWidth","neutralFillSecondaryRecipe","neutralFillSecondaryRest","neutralFillStealthActive","neutralFillStealthHover","neutralFillStealthRecipe","neutralFillStealthRest","neutralForegroundRest","strokeWidth","typeRampBaseFontSize","typeRampBaseLineHeight","ltr","rtl","expandCollapseButtonSize","expandCollapseHover","create","withDefault","target","recipe","getValueFor","evaluate","hover","selectedExpandCollapseHover","baseRecipe","buttonRecipe","rest","treeItemStyles","context","definition","withBehaviors","ButtonText","ButtonFace","Highlight","HighlightText","GrayText"],"mappings":"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","sourcesContent":["import { css, cssPartial } from '@microsoft/fast-element';\nimport { DesignToken, disabledCursor, display, focusVisible, forcedColorsStylesheetBehavior, } from '@microsoft/fast-foundation';\nimport { SystemColors } from '@microsoft/fast-web-utilities';\nimport { DirectionalStyleSheetBehavior, heightNumber } from '../styles/index';\nimport { accentFillRest, baseHeightMultiplier, bodyFont, controlCornerRadius, density, designUnit, disabledOpacity, focusStrokeOuter, focusStrokeWidth, neutralFillSecondaryRecipe, neutralFillSecondaryRest, neutralFillStealthActive, neutralFillStealthHover, neutralFillStealthRecipe, neutralFillStealthRest, neutralForegroundRest, strokeWidth, typeRampBaseFontSize, typeRampBaseLineHeight, } from '../design-tokens';\nconst ltr = css `\n  .expand-collapse-button svg {\n    transform: rotate(0deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    left: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    left: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\nconst rtl = css `\n  .expand-collapse-button svg {\n    transform: rotate(180deg);\n  }\n  :host(.nested) .expand-collapse-button {\n    right: var(--expand-collapse-button-nested-width, calc(${heightNumber} * -1px));\n  }\n  :host([selected])::after {\n    right: calc(${focusStrokeWidth} * 1px);\n  }\n  :host([expanded]) > .positioning-region .expand-collapse-button svg {\n    transform: rotate(90deg);\n  }\n`;\nexport const expandCollapseButtonSize = cssPartial `((${baseHeightMultiplier} / 2) * ${designUnit}) + ((${designUnit} * ${density}) / 2)`;\nconst expandCollapseHover = DesignToken.create('tree-item-expand-collapse-hover').withDefault((target) => {\n    const recipe = neutralFillStealthRecipe.getValueFor(target);\n    return recipe.evaluate(target, recipe.evaluate(target).hover).hover;\n});\nconst selectedExpandCollapseHover = DesignToken.create('tree-item-expand-collapse-selected-hover').withDefault((target) => {\n    const baseRecipe = neutralFillSecondaryRecipe.getValueFor(target);\n    const buttonRecipe = neutralFillStealthRecipe.getValueFor(target);\n    return buttonRecipe.evaluate(target, baseRecipe.evaluate(target).rest).hover;\n});\nexport const treeItemStyles = (context, definition) => css `\n    ${display('block')} :host {\n      contain: content;\n      position: relative;\n      outline: none;\n      color: ${neutralForegroundRest};\n      fill: currentcolor;\n      cursor: pointer;\n      font-family: ${bodyFont};\n      --expand-collapse-button-size: calc(${heightNumber} * 1px);\n      --tree-item-nested-width: 0;\n    }\n\n    :host(:focus) > .positioning-region {\n      outline: none;\n    }\n\n    :host(:focus) .content-region {\n      outline: none;\n    }\n\n    .positioning-region {\n      display: flex;\n      position: relative;\n      box-sizing: border-box;\n      background: ${neutralFillStealthRest};\n      border: calc(${strokeWidth} * 1px) solid transparent;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      height: calc((${heightNumber} + 1) * 1px);\n    }\n\n    :host(:${focusVisible}) .positioning-region {\n      border-color: ${focusStrokeOuter};\n      box-shadow: 0 0 0 calc((${focusStrokeWidth} - ${strokeWidth}) * 1px) ${focusStrokeOuter} inset;\n    }\n\n    .positioning-region::before {\n      content: '';\n      display: block;\n      width: var(--tree-item-nested-width);\n      flex-shrink: 0;\n    }\n\n    :host(:not([disabled])) .positioning-region:hover {\n      background: ${neutralFillStealthHover};\n    }\n\n    :host(:not([disabled])) .positioning-region:active {\n      background: ${neutralFillStealthActive};\n    }\n\n    .content-region {\n      display: inline-flex;\n      align-items: center;\n      white-space: nowrap;\n      width: 100%;\n      height: calc(${heightNumber} * 1px);\n      margin-inline-start: calc(${designUnit} * 2px + 8px);\n      font-size: ${typeRampBaseFontSize};\n      line-height: ${typeRampBaseLineHeight};\n      font-weight: 400;\n    }\n\n    .items {\n      display: none;\n      ${\n/* Font size should be based off calc(1em + (design-unit + glyph-size-number) * 1px) -\n    update when density story is figured out */ ''} font-size: calc(1em + (${designUnit} + 16) * 1px);\n    }\n\n    .expand-collapse-button {\n      background: none;\n      border: none;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      outline: none;\n      ${\n/* Width and Height should be based off calc(glyph-size-number + (design-unit * 4) * 1px) -\n    update when density story is figured out */ ''} width: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      height: calc((${expandCollapseButtonSize} + (${designUnit} * 2)) * 1px);\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      margin: 0 6px;\n    }\n\n    .expand-collapse-button svg {\n      transition: transform 0.1s linear;\n      pointer-events: none;\n    }\n\n    .start,\n    .end {\n      display: flex;\n    }\n\n    .start {\n      ${\n/* need to swap out once we understand how horizontalSpacing will work */ ''} margin-inline-end: calc(${designUnit} * 2px + 2px);\n    }\n\n    .end {\n      ${\n/* need to swap out once we understand how horizontalSpacing will work */ ''} margin-inline-start: calc(${designUnit} * 2px + 2px);\n    }\n\n    :host(.expanded) > .items {\n      display: block;\n    }\n\n    :host([disabled]) {\n      opacity: ${disabledOpacity};\n      cursor: ${disabledCursor};\n    }\n\n    :host(.nested) .content-region {\n      position: relative;\n      margin-inline-start: var(--expand-collapse-button-size);\n    }\n\n    :host(.nested) .expand-collapse-button {\n      position: absolute;\n    }\n\n    :host(.nested) .expand-collapse-button:hover {\n      background: ${expandCollapseHover};\n    }\n\n    :host(:not([disabled])[selected]) .positioning-region {\n      background: ${neutralFillSecondaryRest};\n    }\n\n    :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n      background: ${selectedExpandCollapseHover};\n    }\n\n    :host([selected])::after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: calc((${heightNumber} / 4) * 1px);\n      width: 3px;\n      height: calc((${heightNumber} / 2) * 1px);\n      ${\n/* The french fry background needs to be calculated based on the selected background state for this control.\n    We currently have no way of changing that, so setting to accent-foreground-rest for the time being */ ''} background: ${accentFillRest};\n      border-radius: calc(${controlCornerRadius} * 1px);\n    }\n\n    ::slotted(fluent-tree-item) {\n      --tree-item-nested-width: 1em;\n      --expand-collapse-button-nested-width: calc(${heightNumber} * -1px);\n    }\n  `.withBehaviors(new DirectionalStyleSheetBehavior(ltr, rtl), forcedColorsStylesheetBehavior(css `\n        :host {\n          color: ${SystemColors.ButtonText};\n        }\n        .positioning-region {\n          border-color: ${SystemColors.ButtonFace};\n          background: ${SystemColors.ButtonFace};\n        }\n        :host(:not([disabled])) .positioning-region:hover,\n        :host(:not([disabled])) .positioning-region:active,\n        :host(:not([disabled])[selected]) .positioning-region {\n          background: ${SystemColors.Highlight};\n        }\n        :host .positioning-region:hover .content-region,\n        :host([selected]) .positioning-region .content-region {\n          forced-color-adjust: none;\n          color: ${SystemColors.HighlightText};\n        }\n        :host([disabled][selected]) .positioning-region .content-region {\n          color: ${SystemColors.GrayText};\n        }\n        :host([selected])::after {\n          background: ${SystemColors.HighlightText};\n        }\n        :host(:${focusVisible}) .positioning-region {\n          forced-color-adjust: none;\n          border-color: ${SystemColors.ButtonText};\n          box-shadow: 0 0 0 2px inset ${SystemColors.ButtonFace};\n        }\n        :host([disabled]),\n        :host([disabled]) .content-region,\n        :host([disabled]) .positioning-region:hover .content-region {\n          opacity: 1;\n          color: ${SystemColors.GrayText};\n        }\n        :host(.nested) .expand-collapse-button:hover,\n        :host(:not([disabled])[selected]) .expand-collapse-button:hover {\n          background: ${SystemColors.ButtonFace};\n          fill: ${SystemColors.ButtonText};\n        }\n      `));\n"]},"metadata":{},"sourceType":"module"}