{"ast":null,"code":"import { defineComponent, h, computed, ref, toRef, watch, provide, mergeProps } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { useMergedState, useKeyboard, useMemo } from 'vooks';\nimport { popoverBaseProps } from '../../popover/src/Popover';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { NPopover } from '../../popover';\nimport { keep, call, createKey, createRefSetter } from '../../_utils';\nimport { dropdownLight } from '../styles';\nimport NDropdownMenu from './DropdownMenu';\nimport style from './styles/index.cssr';\nimport { dropdownInjectionKey } from './context';\nconst dropdownBaseProps = {\n  animated: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  size: {\n    type: String,\n    default: 'medium'\n  },\n  inverted: Boolean,\n  placement: {\n    type: String,\n    default: 'bottom'\n  },\n  onSelect: [Function, Array],\n  options: {\n    type: Array,\n    default: () => []\n  },\n  showArrow: Boolean,\n  renderLabel: Function,\n  renderIcon: Function,\n  labelField: {\n    type: String,\n    default: 'label'\n  },\n  keyField: {\n    type: String,\n    default: 'key'\n  },\n  childrenField: {\n    type: String,\n    default: 'children'\n  },\n  // for menu, not documented\n  value: [String, Number]\n};\nconst popoverPropKeys = Object.keys(popoverBaseProps);\nconst dropdownProps = Object.assign(Object.assign(Object.assign({}, popoverBaseProps), dropdownBaseProps), useTheme.props);\nexport default defineComponent({\n  name: 'Dropdown',\n  inheritAttrs: false,\n  props: dropdownProps,\n\n  setup(props) {\n    const uncontrolledShowRef = ref(false);\n    const mergedShowRef = useMergedState(toRef(props, 'show'), uncontrolledShowRef);\n    const treemateRef = computed(() => {\n      const {\n        keyField,\n        childrenField\n      } = props;\n      return createTreeMate(props.options, {\n        getKey(node) {\n          return node[keyField];\n        },\n\n        getDisabled(node) {\n          return node.disabled === true;\n        },\n\n        getIgnored(node) {\n          return node.type === 'divider' || node.type === 'render';\n        },\n\n        getChildren(node) {\n          return node[childrenField];\n        }\n\n      });\n    });\n    const tmNodesRef = computed(() => {\n      return treemateRef.value.treeNodes;\n    });\n    const hoverKeyRef = ref(null);\n    const keyboardKeyRef = ref(null);\n    const lastToggledSubmenuKeyRef = ref(null);\n    const pendingKeyRef = computed(() => {\n      var _a, _b, _c;\n\n      return (_c = (_b = (_a = hoverKeyRef.value) !== null && _a !== void 0 ? _a : keyboardKeyRef.value) !== null && _b !== void 0 ? _b : lastToggledSubmenuKeyRef.value) !== null && _c !== void 0 ? _c : null;\n    });\n    const pendingKeyPathRef = computed(() => treemateRef.value.getPath(pendingKeyRef.value).keyPath);\n    const activeKeyPathRef = computed(() => treemateRef.value.getPath(props.value).keyPath);\n    const keyboardEnabledRef = useMemo(() => {\n      return props.keyboard && mergedShowRef.value;\n    });\n    useKeyboard({\n      keydown: {\n        ArrowUp: {\n          prevent: true,\n          handler: handleKeyDownUp\n        },\n        ArrowRight: {\n          prevent: true,\n          handler: handleKeyDownRight\n        },\n        ArrowDown: {\n          prevent: true,\n          handler: handleKeyDownDown\n        },\n        ArrowLeft: {\n          prevent: true,\n          handler: handleKeyDownLeft\n        },\n        Escape: handleKeyDownEsc\n      },\n      keyup: {\n        Enter: handleKeyUpEnter\n      }\n    }, keyboardEnabledRef);\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Dropdown', '-dropdown', style, dropdownLight, props, mergedClsPrefixRef);\n    provide(dropdownInjectionKey, {\n      labelFieldRef: toRef(props, 'labelField'),\n      childrenFieldRef: toRef(props, 'childrenField'),\n      renderLabelRef: toRef(props, 'renderLabel'),\n      renderIconRef: toRef(props, 'renderIcon'),\n      hoverKeyRef: hoverKeyRef,\n      keyboardKeyRef: keyboardKeyRef,\n      lastToggledSubmenuKeyRef: lastToggledSubmenuKeyRef,\n      pendingKeyPathRef: pendingKeyPathRef,\n      activeKeyPathRef: activeKeyPathRef,\n      animatedRef: toRef(props, 'animated'),\n      mergedShowRef: mergedShowRef,\n      doSelect,\n      doUpdateShow\n    }); // watch\n\n    watch(mergedShowRef, value => {\n      if (!value) clearPendingState();\n    }); // methods\n\n    function doSelect(key, node) {\n      const {\n        onSelect\n      } = props;\n      if (onSelect) call(onSelect, key, node);\n    }\n\n    function doUpdateShow(value) {\n      const {\n        'onUpdate:show': _onUpdateShow,\n        onUpdateShow\n      } = props;\n      if (_onUpdateShow) call(_onUpdateShow, value);\n      if (onUpdateShow) call(onUpdateShow, value);\n      uncontrolledShowRef.value = value;\n    }\n\n    function clearPendingState() {\n      hoverKeyRef.value = null;\n      keyboardKeyRef.value = null;\n      lastToggledSubmenuKeyRef.value = null;\n    }\n\n    function handleKeyDownEsc() {\n      doUpdateShow(false);\n    }\n\n    function handleKeyDownLeft() {\n      handleKeyDown('left');\n    }\n\n    function handleKeyDownRight() {\n      handleKeyDown('right');\n    }\n\n    function handleKeyDownUp() {\n      handleKeyDown('up');\n    }\n\n    function handleKeyDownDown() {\n      handleKeyDown('down');\n    }\n\n    function handleKeyUpEnter() {\n      const pendingNode = getPendingNode();\n\n      if (pendingNode === null || pendingNode === void 0 ? void 0 : pendingNode.isLeaf) {\n        doSelect(pendingNode.key, pendingNode.rawNode);\n        doUpdateShow(false);\n      }\n    }\n\n    function getPendingNode() {\n      var _a;\n\n      const {\n        value: treeMate\n      } = treemateRef;\n      const {\n        value: pendingKey\n      } = pendingKeyRef;\n      if (!treeMate || pendingKey === null) return null;\n      return (_a = treeMate.getNode(pendingKey)) !== null && _a !== void 0 ? _a : null;\n    }\n\n    function handleKeyDown(direction) {\n      const {\n        value: pendingKey\n      } = pendingKeyRef;\n      const {\n        value: {\n          getFirstAvailableNode\n        }\n      } = treemateRef;\n      let nextKeyboardKey = null;\n\n      if (pendingKey === null) {\n        const firstNode = getFirstAvailableNode();\n\n        if (firstNode !== null) {\n          nextKeyboardKey = firstNode.key;\n        }\n      } else {\n        const currentNode = getPendingNode();\n\n        if (currentNode) {\n          let nextNode;\n\n          switch (direction) {\n            case 'down':\n              nextNode = currentNode.getNext();\n              break;\n\n            case 'up':\n              nextNode = currentNode.getPrev();\n              break;\n\n            case 'right':\n              nextNode = currentNode.getChild();\n              break;\n\n            case 'left':\n              nextNode = currentNode.getParent();\n              break;\n          }\n\n          if (nextNode) nextKeyboardKey = nextNode.key;\n        }\n      }\n\n      if (nextKeyboardKey !== null) {\n        hoverKeyRef.value = null;\n        keyboardKeyRef.value = nextKeyboardKey;\n      }\n    }\n\n    const cssVarsRef = computed(() => {\n      const {\n        size,\n        inverted\n      } = props;\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        padding,\n        dividerColor,\n        borderRadius,\n        optionOpacityDisabled,\n        [createKey('optionIconSuffixWidth', size)]: optionIconSuffixWidth,\n        [createKey('optionSuffixWidth', size)]: optionSuffixWidth,\n        [createKey('optionIconPrefixWidth', size)]: optionIconPrefixWidth,\n        [createKey('optionPrefixWidth', size)]: optionPrefixWidth,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('optionHeight', size)]: optionHeight,\n        [createKey('optionIconSize', size)]: optionIconSize\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-font-size': fontSize,\n        '--n-padding': padding,\n        '--n-border-radius': borderRadius,\n        '--n-option-height': optionHeight,\n        '--n-option-prefix-width': optionPrefixWidth,\n        '--n-option-icon-prefix-width': optionIconPrefixWidth,\n        '--n-option-suffix-width': optionSuffixWidth,\n        '--n-option-icon-suffix-width': optionIconSuffixWidth,\n        '--n-option-icon-size': optionIconSize,\n        '--n-divider-color': dividerColor,\n        '--n-option-opacity-disabled': optionOpacityDisabled\n      }; // writing like this is the fastest method\n\n      if (inverted) {\n        vars['--n-color'] = self.colorInverted;\n        vars['--n-option-color-hover'] = self.optionColorHoverInverted;\n        vars['--n-option-color-active'] = self.optionColorActiveInverted;\n        vars['--n-option-text-color'] = self.optionTextColorInverted;\n        vars['--n-option-text-color-hover'] = self.optionTextColorHoverInverted;\n        vars['--n-option-text-color-active'] = self.optionTextColorActiveInverted;\n        vars['--n-option-text-color-child-active'] = self.optionTextColorChildActiveInverted;\n        vars['--n-prefix-color'] = self.prefixColorInverted;\n        vars['--n-suffix-color'] = self.suffixColorInverted;\n        vars['--n-group-header-text-color'] = self.groupHeaderTextColorInverted;\n      } else {\n        vars['--n-color'] = self.color;\n        vars['--n-option-color-hover'] = self.optionColorHover;\n        vars['--n-option-color-active'] = self.optionColorActive;\n        vars['--n-option-text-color'] = self.optionTextColor;\n        vars['--n-option-text-color-hover'] = self.optionTextColorHover;\n        vars['--n-option-text-color-active'] = self.optionTextColorActive;\n        vars['--n-option-text-color-child-active'] = self.optionTextColorChildActive;\n        vars['--n-prefix-color'] = self.prefixColor;\n        vars['--n-suffix-color'] = self.suffixColor;\n        vars['--n-group-header-text-color'] = self.groupHeaderTextColor;\n      }\n\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('dropdown', computed(() => `${props.size[0]}${props.inverted ? 'i' : ''}`), cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      // data\n      tmNodes: tmNodesRef,\n      // show\n      mergedShow: mergedShowRef,\n      // methods\n      doUpdateShow,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    const renderPopoverBody = (className, ref, style, onMouseenter, onMouseleave) => {\n      var _a;\n\n      const {\n        mergedClsPrefix\n      } = this;\n      (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n      const dropdownProps = {\n        ref: createRefSetter(ref),\n        class: [className, `${mergedClsPrefix}-dropdown`, this.themeClass, this.trigger === 'manual' && `${mergedClsPrefix}-popover--manual-trigger`, this.showArrow && `${mergedClsPrefix}-popover--show-arrow`],\n        clsPrefix: mergedClsPrefix,\n        tmNodes: this.tmNodes,\n        style: [style, this.cssVars],\n        showArrow: this.showArrow,\n        arrowStyle: this.arrowStyle,\n        onMouseenter,\n        onMouseleave\n      };\n      return h(NDropdownMenu, mergeProps(this.$attrs, dropdownProps));\n    };\n\n    const {\n      mergedTheme\n    } = this;\n    const popoverProps = {\n      show: this.mergedShow,\n      theme: mergedTheme.peers.Popover,\n      themeOverrides: mergedTheme.peerOverrides.Popover,\n      internalRenderBody: renderPopoverBody,\n      onUpdateShow: this.doUpdateShow\n    };\n    return h(NPopover, Object.assign({}, keep(this.$props, popoverPropKeys), popoverProps), {\n      trigger: () => {\n        var _a, _b;\n\n        return (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/dropdown/src/Dropdown.js"],"names":["defineComponent","h","computed","ref","toRef","watch","provide","mergeProps","createTreeMate","useMergedState","useKeyboard","useMemo","popoverBaseProps","useConfig","useTheme","useThemeClass","NPopover","keep","call","createKey","createRefSetter","dropdownLight","NDropdownMenu","style","dropdownInjectionKey","dropdownBaseProps","animated","type","Boolean","default","keyboard","size","String","inverted","placement","onSelect","Function","Array","options","showArrow","renderLabel","renderIcon","labelField","keyField","childrenField","value","Number","popoverPropKeys","Object","keys","dropdownProps","assign","props","name","inheritAttrs","setup","uncontrolledShowRef","mergedShowRef","treemateRef","getKey","node","getDisabled","disabled","getIgnored","getChildren","tmNodesRef","treeNodes","hoverKeyRef","keyboardKeyRef","lastToggledSubmenuKeyRef","pendingKeyRef","_a","_b","_c","pendingKeyPathRef","getPath","keyPath","activeKeyPathRef","keyboardEnabledRef","keydown","ArrowUp","prevent","handler","handleKeyDownUp","ArrowRight","handleKeyDownRight","ArrowDown","handleKeyDownDown","ArrowLeft","handleKeyDownLeft","Escape","handleKeyDownEsc","keyup","Enter","handleKeyUpEnter","mergedClsPrefixRef","inlineThemeDisabled","themeRef","labelFieldRef","childrenFieldRef","renderLabelRef","renderIconRef","animatedRef","doSelect","doUpdateShow","clearPendingState","key","_onUpdateShow","onUpdateShow","handleKeyDown","pendingNode","getPendingNode","isLeaf","rawNode","treeMate","pendingKey","getNode","direction","getFirstAvailableNode","nextKeyboardKey","firstNode","currentNode","nextNode","getNext","getPrev","getChild","getParent","cssVarsRef","common","cubicBezierEaseInOut","self","padding","dividerColor","borderRadius","optionOpacityDisabled","optionIconSuffixWidth","optionSuffixWidth","optionIconPrefixWidth","optionPrefixWidth","fontSize","optionHeight","optionIconSize","vars","colorInverted","optionColorHoverInverted","optionColorActiveInverted","optionTextColorInverted","optionTextColorHoverInverted","optionTextColorActiveInverted","optionTextColorChildActiveInverted","prefixColorInverted","suffixColorInverted","groupHeaderTextColorInverted","color","optionColorHover","optionColorActive","optionTextColor","optionTextColorHover","optionTextColorActive","optionTextColorChildActive","prefixColor","suffixColor","groupHeaderTextColor","themeClassHandle","undefined","mergedClsPrefix","mergedTheme","tmNodes","mergedShow","cssVars","themeClass","onRender","render","renderPopoverBody","className","onMouseenter","onMouseleave","class","trigger","clsPrefix","arrowStyle","$attrs","popoverProps","show","theme","peers","Popover","themeOverrides","peerOverrides","internalRenderBody","$props","$slots"],"mappings":"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","sourcesContent":["import { defineComponent, h, computed, ref, toRef, watch, provide, mergeProps } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { useMergedState, useKeyboard, useMemo } from 'vooks';\nimport { popoverBaseProps } from '../../popover/src/Popover';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { NPopover } from '../../popover';\nimport { keep, call, createKey, createRefSetter } from '../../_utils';\nimport { dropdownLight } from '../styles';\nimport NDropdownMenu from './DropdownMenu';\nimport style from './styles/index.cssr';\nimport { dropdownInjectionKey } from './context';\nconst dropdownBaseProps = {\n    animated: {\n        type: Boolean,\n        default: true\n    },\n    keyboard: {\n        type: Boolean,\n        default: true\n    },\n    size: {\n        type: String,\n        default: 'medium'\n    },\n    inverted: Boolean,\n    placement: {\n        type: String,\n        default: 'bottom'\n    },\n    onSelect: [Function, Array],\n    options: {\n        type: Array,\n        default: () => []\n    },\n    showArrow: Boolean,\n    renderLabel: Function,\n    renderIcon: Function,\n    labelField: {\n        type: String,\n        default: 'label'\n    },\n    keyField: {\n        type: String,\n        default: 'key'\n    },\n    childrenField: {\n        type: String,\n        default: 'children'\n    },\n    // for menu, not documented\n    value: [String, Number]\n};\nconst popoverPropKeys = Object.keys(popoverBaseProps);\nconst dropdownProps = Object.assign(Object.assign(Object.assign({}, popoverBaseProps), dropdownBaseProps), useTheme.props);\nexport default defineComponent({\n    name: 'Dropdown',\n    inheritAttrs: false,\n    props: dropdownProps,\n    setup(props) {\n        const uncontrolledShowRef = ref(false);\n        const mergedShowRef = useMergedState(toRef(props, 'show'), uncontrolledShowRef);\n        const treemateRef = computed(() => {\n            const { keyField, childrenField } = props;\n            return createTreeMate(props.options, {\n                getKey(node) {\n                    return node[keyField];\n                },\n                getDisabled(node) {\n                    return node.disabled === true;\n                },\n                getIgnored(node) {\n                    return node.type === 'divider' || node.type === 'render';\n                },\n                getChildren(node) {\n                    return node[childrenField];\n                }\n            });\n        });\n        const tmNodesRef = computed(() => {\n            return treemateRef.value.treeNodes;\n        });\n        const hoverKeyRef = ref(null);\n        const keyboardKeyRef = ref(null);\n        const lastToggledSubmenuKeyRef = ref(null);\n        const pendingKeyRef = computed(() => {\n            var _a, _b, _c;\n            return ((_c = (_b = (_a = hoverKeyRef.value) !== null && _a !== void 0 ? _a : keyboardKeyRef.value) !== null && _b !== void 0 ? _b : lastToggledSubmenuKeyRef.value) !== null && _c !== void 0 ? _c : null);\n        });\n        const pendingKeyPathRef = computed(() => treemateRef.value.getPath(pendingKeyRef.value).keyPath);\n        const activeKeyPathRef = computed(() => treemateRef.value.getPath(props.value).keyPath);\n        const keyboardEnabledRef = useMemo(() => {\n            return props.keyboard && mergedShowRef.value;\n        });\n        useKeyboard({\n            keydown: {\n                ArrowUp: {\n                    prevent: true,\n                    handler: handleKeyDownUp\n                },\n                ArrowRight: {\n                    prevent: true,\n                    handler: handleKeyDownRight\n                },\n                ArrowDown: {\n                    prevent: true,\n                    handler: handleKeyDownDown\n                },\n                ArrowLeft: {\n                    prevent: true,\n                    handler: handleKeyDownLeft\n                },\n                Escape: handleKeyDownEsc\n            },\n            keyup: {\n                Enter: handleKeyUpEnter\n            }\n        }, keyboardEnabledRef);\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Dropdown', '-dropdown', style, dropdownLight, props, mergedClsPrefixRef);\n        provide(dropdownInjectionKey, {\n            labelFieldRef: toRef(props, 'labelField'),\n            childrenFieldRef: toRef(props, 'childrenField'),\n            renderLabelRef: toRef(props, 'renderLabel'),\n            renderIconRef: toRef(props, 'renderIcon'),\n            hoverKeyRef: hoverKeyRef,\n            keyboardKeyRef: keyboardKeyRef,\n            lastToggledSubmenuKeyRef: lastToggledSubmenuKeyRef,\n            pendingKeyPathRef: pendingKeyPathRef,\n            activeKeyPathRef: activeKeyPathRef,\n            animatedRef: toRef(props, 'animated'),\n            mergedShowRef: mergedShowRef,\n            doSelect,\n            doUpdateShow\n        });\n        // watch\n        watch(mergedShowRef, (value) => {\n            if (!value)\n                clearPendingState();\n        });\n        // methods\n        function doSelect(key, node) {\n            const { onSelect } = props;\n            if (onSelect)\n                call(onSelect, key, node);\n        }\n        function doUpdateShow(value) {\n            const { 'onUpdate:show': _onUpdateShow, onUpdateShow } = props;\n            if (_onUpdateShow)\n                call(_onUpdateShow, value);\n            if (onUpdateShow)\n                call(onUpdateShow, value);\n            uncontrolledShowRef.value = value;\n        }\n        function clearPendingState() {\n            hoverKeyRef.value = null;\n            keyboardKeyRef.value = null;\n            lastToggledSubmenuKeyRef.value = null;\n        }\n        function handleKeyDownEsc() {\n            doUpdateShow(false);\n        }\n        function handleKeyDownLeft() {\n            handleKeyDown('left');\n        }\n        function handleKeyDownRight() {\n            handleKeyDown('right');\n        }\n        function handleKeyDownUp() {\n            handleKeyDown('up');\n        }\n        function handleKeyDownDown() {\n            handleKeyDown('down');\n        }\n        function handleKeyUpEnter() {\n            const pendingNode = getPendingNode();\n            if (pendingNode === null || pendingNode === void 0 ? void 0 : pendingNode.isLeaf) {\n                doSelect(pendingNode.key, pendingNode.rawNode);\n                doUpdateShow(false);\n            }\n        }\n        function getPendingNode() {\n            var _a;\n            const { value: treeMate } = treemateRef;\n            const { value: pendingKey } = pendingKeyRef;\n            if (!treeMate || pendingKey === null)\n                return null;\n            return (_a = treeMate.getNode(pendingKey)) !== null && _a !== void 0 ? _a : null;\n        }\n        function handleKeyDown(direction) {\n            const { value: pendingKey } = pendingKeyRef;\n            const { value: { getFirstAvailableNode } } = treemateRef;\n            let nextKeyboardKey = null;\n            if (pendingKey === null) {\n                const firstNode = getFirstAvailableNode();\n                if (firstNode !== null) {\n                    nextKeyboardKey = firstNode.key;\n                }\n            }\n            else {\n                const currentNode = getPendingNode();\n                if (currentNode) {\n                    let nextNode;\n                    switch (direction) {\n                        case 'down':\n                            nextNode = currentNode.getNext();\n                            break;\n                        case 'up':\n                            nextNode = currentNode.getPrev();\n                            break;\n                        case 'right':\n                            nextNode = currentNode.getChild();\n                            break;\n                        case 'left':\n                            nextNode = currentNode.getParent();\n                            break;\n                    }\n                    if (nextNode)\n                        nextKeyboardKey = nextNode.key;\n                }\n            }\n            if (nextKeyboardKey !== null) {\n                hoverKeyRef.value = null;\n                keyboardKeyRef.value = nextKeyboardKey;\n            }\n        }\n        const cssVarsRef = computed(() => {\n            const { size, inverted } = props;\n            const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n            const { padding, dividerColor, borderRadius, optionOpacityDisabled, [createKey('optionIconSuffixWidth', size)]: optionIconSuffixWidth, [createKey('optionSuffixWidth', size)]: optionSuffixWidth, [createKey('optionIconPrefixWidth', size)]: optionIconPrefixWidth, [createKey('optionPrefixWidth', size)]: optionPrefixWidth, [createKey('fontSize', size)]: fontSize, [createKey('optionHeight', size)]: optionHeight, [createKey('optionIconSize', size)]: optionIconSize } = self;\n            const vars = {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-font-size': fontSize,\n                '--n-padding': padding,\n                '--n-border-radius': borderRadius,\n                '--n-option-height': optionHeight,\n                '--n-option-prefix-width': optionPrefixWidth,\n                '--n-option-icon-prefix-width': optionIconPrefixWidth,\n                '--n-option-suffix-width': optionSuffixWidth,\n                '--n-option-icon-suffix-width': optionIconSuffixWidth,\n                '--n-option-icon-size': optionIconSize,\n                '--n-divider-color': dividerColor,\n                '--n-option-opacity-disabled': optionOpacityDisabled\n            };\n            // writing like this is the fastest method\n            if (inverted) {\n                vars['--n-color'] = self.colorInverted;\n                vars['--n-option-color-hover'] = self.optionColorHoverInverted;\n                vars['--n-option-color-active'] = self.optionColorActiveInverted;\n                vars['--n-option-text-color'] = self.optionTextColorInverted;\n                vars['--n-option-text-color-hover'] = self.optionTextColorHoverInverted;\n                vars['--n-option-text-color-active'] =\n                    self.optionTextColorActiveInverted;\n                vars['--n-option-text-color-child-active'] =\n                    self.optionTextColorChildActiveInverted;\n                vars['--n-prefix-color'] = self.prefixColorInverted;\n                vars['--n-suffix-color'] = self.suffixColorInverted;\n                vars['--n-group-header-text-color'] = self.groupHeaderTextColorInverted;\n            }\n            else {\n                vars['--n-color'] = self.color;\n                vars['--n-option-color-hover'] = self.optionColorHover;\n                vars['--n-option-color-active'] = self.optionColorActive;\n                vars['--n-option-text-color'] = self.optionTextColor;\n                vars['--n-option-text-color-hover'] = self.optionTextColorHover;\n                vars['--n-option-text-color-active'] = self.optionTextColorActive;\n                vars['--n-option-text-color-child-active'] =\n                    self.optionTextColorChildActive;\n                vars['--n-prefix-color'] = self.prefixColor;\n                vars['--n-suffix-color'] = self.suffixColor;\n                vars['--n-group-header-text-color'] = self.groupHeaderTextColor;\n            }\n            return vars;\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('dropdown', computed(() => `${props.size[0]}${props.inverted ? 'i' : ''}`), cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedTheme: themeRef,\n            // data\n            tmNodes: tmNodesRef,\n            // show\n            mergedShow: mergedShowRef,\n            // methods\n            doUpdateShow,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const renderPopoverBody = (className, ref, style, onMouseenter, onMouseleave) => {\n            var _a;\n            const { mergedClsPrefix } = this;\n            (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n            const dropdownProps = {\n                ref: createRefSetter(ref),\n                class: [\n                    className,\n                    `${mergedClsPrefix}-dropdown`,\n                    this.themeClass,\n                    this.trigger === 'manual' &&\n                        `${mergedClsPrefix}-popover--manual-trigger`,\n                    this.showArrow && `${mergedClsPrefix}-popover--show-arrow`\n                ],\n                clsPrefix: mergedClsPrefix,\n                tmNodes: this.tmNodes,\n                style: [style, this.cssVars],\n                showArrow: this.showArrow,\n                arrowStyle: this.arrowStyle,\n                onMouseenter,\n                onMouseleave\n            };\n            return h(NDropdownMenu, mergeProps(this.$attrs, dropdownProps));\n        };\n        const { mergedTheme } = this;\n        const popoverProps = {\n            show: this.mergedShow,\n            theme: mergedTheme.peers.Popover,\n            themeOverrides: mergedTheme.peerOverrides.Popover,\n            internalRenderBody: renderPopoverBody,\n            onUpdateShow: this.doUpdateShow\n        };\n        return (h(NPopover, Object.assign({}, keep(this.$props, popoverPropKeys), popoverProps), {\n            trigger: () => { var _a, _b; return (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a); }\n        }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}