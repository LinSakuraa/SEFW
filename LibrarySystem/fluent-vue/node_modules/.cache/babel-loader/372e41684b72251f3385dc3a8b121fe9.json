{"ast":null,"code":"import { warn } from '../utils';\n\nclass ZIndexManager {\n  constructor() {\n    this.elementZIndex = new Map();\n    this.nextZIndex = 2000;\n  }\n\n  get elementCount() {\n    return this.elementZIndex.size;\n  }\n\n  ensureZIndex(el, zIndex) {\n    const {\n      elementZIndex\n    } = this;\n\n    if (zIndex !== undefined) {\n      el.style.zIndex = `${zIndex}`;\n      elementZIndex.delete(el);\n      return;\n    }\n\n    const {\n      nextZIndex\n    } = this;\n\n    if (elementZIndex.has(el)) {\n      const currentZIndex = elementZIndex.get(el);\n      if (currentZIndex + 1 === this.nextZIndex) return;\n    }\n\n    el.style.zIndex = `${nextZIndex}`;\n    elementZIndex.set(el, nextZIndex);\n    this.nextZIndex = nextZIndex + 1;\n    this.squashState();\n  }\n\n  unregister(el, zIndex) {\n    const {\n      elementZIndex\n    } = this;\n\n    if (elementZIndex.has(el)) {\n      elementZIndex.delete(el);\n    } else if (zIndex === undefined) {\n      warn('z-index-manager/unregister-element', 'Element not found when unregistering.');\n    }\n\n    this.squashState();\n  }\n\n  squashState() {\n    const {\n      elementCount\n    } = this;\n\n    if (!elementCount) {\n      this.nextZIndex = 2000;\n    }\n\n    if (this.nextZIndex - elementCount > 2500) this.rearrange();\n  }\n\n  rearrange() {\n    const elementZIndexPair = Array.from(this.elementZIndex.entries());\n    elementZIndexPair.sort((pair1, pair2) => {\n      return pair1[1] - pair2[1];\n    });\n    this.nextZIndex = 2000;\n    elementZIndexPair.forEach(pair => {\n      const el = pair[0];\n      const zIndex = this.nextZIndex++;\n      if (`${zIndex}` !== el.style.zIndex) el.style.zIndex = `${zIndex}`;\n    });\n  }\n\n}\n\nexport default new ZIndexManager();","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vdirs/es/zindexable/z-index-manager.js"],"names":["warn","ZIndexManager","constructor","elementZIndex","Map","nextZIndex","elementCount","size","ensureZIndex","el","zIndex","undefined","style","delete","has","currentZIndex","get","set","squashState","unregister","rearrange","elementZIndexPair","Array","from","entries","sort","pair1","pair2","forEach","pair"],"mappings":"AAAA,SAASA,IAAT,QAAqB,UAArB;;AACA,MAAMC,aAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAG;AACV,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACH;;AACe,MAAZC,YAAY,GAAG;AACf,WAAO,KAAKH,aAAL,CAAmBI,IAA1B;AACH;;AACDC,EAAAA,YAAY,CAACC,EAAD,EAAKC,MAAL,EAAa;AACrB,UAAM;AAAEP,MAAAA;AAAF,QAAoB,IAA1B;;AACA,QAAIO,MAAM,KAAKC,SAAf,EAA0B;AACtBF,MAAAA,EAAE,CAACG,KAAH,CAASF,MAAT,GAAmB,GAAEA,MAAO,EAA5B;AACAP,MAAAA,aAAa,CAACU,MAAd,CAAqBJ,EAArB;AACA;AACH;;AACD,UAAM;AAAEJ,MAAAA;AAAF,QAAiB,IAAvB;;AACA,QAAIF,aAAa,CAACW,GAAd,CAAkBL,EAAlB,CAAJ,EAA2B;AACvB,YAAMM,aAAa,GAAGZ,aAAa,CAACa,GAAd,CAAkBP,EAAlB,CAAtB;AACA,UAAIM,aAAa,GAAG,CAAhB,KAAsB,KAAKV,UAA/B,EACI;AACP;;AACDI,IAAAA,EAAE,CAACG,KAAH,CAASF,MAAT,GAAmB,GAAEL,UAAW,EAAhC;AACAF,IAAAA,aAAa,CAACc,GAAd,CAAkBR,EAAlB,EAAsBJ,UAAtB;AACA,SAAKA,UAAL,GAAkBA,UAAU,GAAG,CAA/B;AACA,SAAKa,WAAL;AACH;;AACDC,EAAAA,UAAU,CAACV,EAAD,EAAKC,MAAL,EAAa;AACnB,UAAM;AAAEP,MAAAA;AAAF,QAAoB,IAA1B;;AACA,QAAIA,aAAa,CAACW,GAAd,CAAkBL,EAAlB,CAAJ,EAA2B;AACvBN,MAAAA,aAAa,CAACU,MAAd,CAAqBJ,EAArB;AACH,KAFD,MAGK,IAAIC,MAAM,KAAKC,SAAf,EAA0B;AAC3BX,MAAAA,IAAI,CAAC,oCAAD,EAAuC,uCAAvC,CAAJ;AACH;;AACD,SAAKkB,WAAL;AACH;;AACDA,EAAAA,WAAW,GAAG;AACV,UAAM;AAAEZ,MAAAA;AAAF,QAAmB,IAAzB;;AACA,QAAI,CAACA,YAAL,EAAmB;AACf,WAAKD,UAAL,GAAkB,IAAlB;AACH;;AACD,QAAI,KAAKA,UAAL,GAAkBC,YAAlB,GAAiC,IAArC,EACI,KAAKc,SAAL;AACP;;AACDA,EAAAA,SAAS,GAAG;AACR,UAAMC,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKpB,aAAL,CAAmBqB,OAAnB,EAAX,CAA1B;AACAH,IAAAA,iBAAiB,CAACI,IAAlB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrC,aAAOD,KAAK,CAAC,CAAD,CAAL,GAAWC,KAAK,CAAC,CAAD,CAAvB;AACH,KAFD;AAGA,SAAKtB,UAAL,GAAkB,IAAlB;AACAgB,IAAAA,iBAAiB,CAACO,OAAlB,CAA2BC,IAAD,IAAU;AAChC,YAAMpB,EAAE,GAAGoB,IAAI,CAAC,CAAD,CAAf;AACA,YAAMnB,MAAM,GAAG,KAAKL,UAAL,EAAf;AACA,UAAK,GAAEK,MAAO,EAAV,KAAgBD,EAAE,CAACG,KAAH,CAASF,MAA7B,EACID,EAAE,CAACG,KAAH,CAASF,MAAT,GAAmB,GAAEA,MAAO,EAA5B;AACP,KALD;AAMH;;AAxDe;;AA0DpB,eAAe,IAAIT,aAAJ,EAAf","sourcesContent":["import { warn } from '../utils';\nclass ZIndexManager {\n    constructor() {\n        this.elementZIndex = new Map();\n        this.nextZIndex = 2000;\n    }\n    get elementCount() {\n        return this.elementZIndex.size;\n    }\n    ensureZIndex(el, zIndex) {\n        const { elementZIndex } = this;\n        if (zIndex !== undefined) {\n            el.style.zIndex = `${zIndex}`;\n            elementZIndex.delete(el);\n            return;\n        }\n        const { nextZIndex } = this;\n        if (elementZIndex.has(el)) {\n            const currentZIndex = elementZIndex.get(el);\n            if (currentZIndex + 1 === this.nextZIndex)\n                return;\n        }\n        el.style.zIndex = `${nextZIndex}`;\n        elementZIndex.set(el, nextZIndex);\n        this.nextZIndex = nextZIndex + 1;\n        this.squashState();\n    }\n    unregister(el, zIndex) {\n        const { elementZIndex } = this;\n        if (elementZIndex.has(el)) {\n            elementZIndex.delete(el);\n        }\n        else if (zIndex === undefined) {\n            warn('z-index-manager/unregister-element', 'Element not found when unregistering.');\n        }\n        this.squashState();\n    }\n    squashState() {\n        const { elementCount } = this;\n        if (!elementCount) {\n            this.nextZIndex = 2000;\n        }\n        if (this.nextZIndex - elementCount > 2500)\n            this.rearrange();\n    }\n    rearrange() {\n        const elementZIndexPair = Array.from(this.elementZIndex.entries());\n        elementZIndexPair.sort((pair1, pair2) => {\n            return pair1[1] - pair2[1];\n        });\n        this.nextZIndex = 2000;\n        elementZIndexPair.forEach((pair) => {\n            const el = pair[0];\n            const zIndex = this.nextZIndex++;\n            if (`${zIndex}` !== el.style.zIndex)\n                el.style.zIndex = `${zIndex}`;\n        });\n    }\n}\nexport default new ZIndexManager();\n"]},"metadata":{},"sourceType":"module"}