{"ast":null,"code":"import { Observable } from \"../observation/observable\";\nimport { DOM } from \"../dom\";\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\n\nexport const booleanConverter = {\n  toView(value) {\n    return value ? \"true\" : \"false\";\n  },\n\n  fromView(value) {\n    if (value === null || value === void 0 || value === \"false\" || value === false || value === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\n\nexport const nullableNumberConverter = {\n  toView(value) {\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    const number = value * 1;\n    return isNaN(number) ? null : number.toString();\n  },\n\n  fromView(value) {\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    const number = value * 1;\n    return isNaN(number) ? null : number;\n  }\n\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\n\nexport class AttributeDefinition {\n  /**\n   * Creates an instance of AttributeDefinition.\n   * @param Owner - The class constructor that owns this attribute.\n   * @param name - The name of the property associated with the attribute.\n   * @param attribute - The name of the attribute in HTML.\n   * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n   * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n   * to convert values to and from a DOM string.\n   */\n  constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n    this.guards = new Set();\n    this.Owner = Owner;\n    this.name = name;\n    this.attribute = attribute;\n    this.mode = mode;\n    this.converter = converter;\n    this.fieldName = `_${name}`;\n    this.callbackName = `${name}Changed`;\n    this.hasCallback = this.callbackName in Owner.prototype;\n\n    if (mode === \"boolean\" && converter === void 0) {\n      this.converter = booleanConverter;\n    }\n  }\n  /**\n   * Sets the value of the attribute/property on the source element.\n   * @param source - The source element to access.\n   * @param value - The value to set the attribute/property to.\n   */\n\n\n  setValue(source, newValue) {\n    const oldValue = source[this.fieldName];\n    const converter = this.converter;\n\n    if (converter !== void 0) {\n      newValue = converter.fromView(newValue);\n    }\n\n    if (oldValue !== newValue) {\n      source[this.fieldName] = newValue;\n      this.tryReflectToAttribute(source);\n\n      if (this.hasCallback) {\n        source[this.callbackName](oldValue, newValue);\n      }\n\n      source.$fastController.notify(this.name);\n    }\n  }\n  /**\n   * Gets the value of the attribute/property on the source element.\n   * @param source - The source element to access.\n   */\n\n\n  getValue(source) {\n    Observable.track(source, this.name);\n    return source[this.fieldName];\n  }\n  /** @internal */\n\n\n  onAttributeChangedCallback(element, value) {\n    if (this.guards.has(element)) {\n      return;\n    }\n\n    this.guards.add(element);\n    this.setValue(element, value);\n    this.guards.delete(element);\n  }\n\n  tryReflectToAttribute(element) {\n    const mode = this.mode;\n    const guards = this.guards;\n\n    if (guards.has(element) || mode === \"fromView\") {\n      return;\n    }\n\n    DOM.queueUpdate(() => {\n      guards.add(element);\n      const latestValue = element[this.fieldName];\n\n      switch (mode) {\n        case \"reflect\":\n          const converter = this.converter;\n          DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n          break;\n\n        case \"boolean\":\n          DOM.setBooleanAttribute(element, this.attribute, latestValue);\n          break;\n      }\n\n      guards.delete(element);\n    });\n  }\n  /**\n   * Collects all attribute definitions associated with the owner.\n   * @param Owner - The class constructor to collect attribute for.\n   * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n   * @internal\n   */\n\n\n  static collect(Owner, ...attributeLists) {\n    const attributes = [];\n    attributeLists.push(Owner.attributes);\n\n    for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n      const list = attributeLists[i];\n\n      if (list === void 0) {\n        continue;\n      }\n\n      for (let j = 0, jj = list.length; j < jj; ++j) {\n        const config = list[j];\n\n        if (typeof config === \"string\") {\n          attributes.push(new AttributeDefinition(Owner, config));\n        } else {\n          attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n        }\n      }\n    }\n\n    return attributes;\n  }\n\n}\nexport function attr(configOrTarget, prop) {\n  let config;\n\n  function decorator($target, $prop) {\n    if (arguments.length > 1) {\n      // Non invocation:\n      // - @attr\n      // Invocation with or w/o opts:\n      // - @attr()\n      // - @attr({...opts})\n      config.property = $prop;\n    }\n\n    const attributes = $target.constructor.attributes || ($target.constructor.attributes = []);\n    attributes.push(config);\n  }\n\n  if (arguments.length > 1) {\n    // Non invocation:\n    // - @attr\n    config = {};\n    decorator(configOrTarget, prop);\n    return;\n  } // Invocation with or w/o opts:\n  // - @attr()\n  // - @attr({...opts})\n\n\n  config = configOrTarget === void 0 ? {} : configOrTarget;\n  return decorator;\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/components/attributes.js"],"names":["Observable","DOM","booleanConverter","toView","value","fromView","nullableNumberConverter","undefined","number","isNaN","toString","AttributeDefinition","constructor","Owner","name","attribute","toLowerCase","mode","converter","guards","Set","fieldName","callbackName","hasCallback","prototype","setValue","source","newValue","oldValue","tryReflectToAttribute","$fastController","notify","getValue","track","onAttributeChangedCallback","element","has","add","delete","queueUpdate","latestValue","setAttribute","setBooleanAttribute","collect","attributeLists","attributes","push","i","ii","length","list","j","jj","config","property","attr","configOrTarget","prop","decorator","$target","$prop","arguments"],"mappings":"AAAA,SAASA,UAAT,QAA2B,2BAA3B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG;AAC5BC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAOA,KAAK,GAAG,MAAH,GAAY,OAAxB;AACH,GAH2B;;AAI5BC,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AACZ,QAAIA,KAAK,KAAK,IAAV,IACAA,KAAK,KAAK,KAAK,CADf,IAEAA,KAAK,KAAK,OAFV,IAGAA,KAAK,KAAK,KAHV,IAIAA,KAAK,KAAK,CAJd,EAIiB;AACb,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAb2B,CAAzB;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,uBAAuB,GAAG;AACnCH,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKG,SAAhC,EAA2C;AACvC,aAAO,IAAP;AACH;;AACD,UAAMC,MAAM,GAAGJ,KAAK,GAAG,CAAvB;AACA,WAAOK,KAAK,CAACD,MAAD,CAAL,GAAgB,IAAhB,GAAuBA,MAAM,CAACE,QAAP,EAA9B;AACH,GAPkC;;AAQnCL,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AACZ,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKG,SAAhC,EAA2C;AACvC,aAAO,IAAP;AACH;;AACD,UAAMC,MAAM,GAAGJ,KAAK,GAAG,CAAvB;AACA,WAAOK,KAAK,CAACD,MAAD,CAAL,GAAgB,IAAhB,GAAuBA,MAA9B;AACH;;AAdkC,CAAhC;AAgBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,mBAAN,CAA0B;AAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,SAAS,GAAGD,IAAI,CAACE,WAAL,EAA1B,EAA8CC,IAAI,GAAG,SAArD,EAAgEC,SAAhE,EAA2E;AAClF,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,SAAKP,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKG,SAAL,GAAkB,IAAGP,IAAK,EAA1B;AACA,SAAKQ,YAAL,GAAqB,GAAER,IAAK,SAA5B;AACA,SAAKS,WAAL,GAAmB,KAAKD,YAAL,IAAqBT,KAAK,CAACW,SAA9C;;AACA,QAAIP,IAAI,KAAK,SAAT,IAAsBC,SAAS,KAAK,KAAK,CAA7C,EAAgD;AAC5C,WAAKA,SAAL,GAAiBhB,gBAAjB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIuB,EAAAA,QAAQ,CAACC,MAAD,EAASC,QAAT,EAAmB;AACvB,UAAMC,QAAQ,GAAGF,MAAM,CAAC,KAAKL,SAAN,CAAvB;AACA,UAAMH,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACtBS,MAAAA,QAAQ,GAAGT,SAAS,CAACb,QAAV,CAAmBsB,QAAnB,CAAX;AACH;;AACD,QAAIC,QAAQ,KAAKD,QAAjB,EAA2B;AACvBD,MAAAA,MAAM,CAAC,KAAKL,SAAN,CAAN,GAAyBM,QAAzB;AACA,WAAKE,qBAAL,CAA2BH,MAA3B;;AACA,UAAI,KAAKH,WAAT,EAAsB;AAClBG,QAAAA,MAAM,CAAC,KAAKJ,YAAN,CAAN,CAA0BM,QAA1B,EAAoCD,QAApC;AACH;;AACDD,MAAAA,MAAM,CAACI,eAAP,CAAuBC,MAAvB,CAA8B,KAAKjB,IAAnC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIkB,EAAAA,QAAQ,CAACN,MAAD,EAAS;AACb1B,IAAAA,UAAU,CAACiC,KAAX,CAAiBP,MAAjB,EAAyB,KAAKZ,IAA9B;AACA,WAAOY,MAAM,CAAC,KAAKL,SAAN,CAAb;AACH;AACD;;;AACAa,EAAAA,0BAA0B,CAACC,OAAD,EAAU/B,KAAV,EAAiB;AACvC,QAAI,KAAKe,MAAL,CAAYiB,GAAZ,CAAgBD,OAAhB,CAAJ,EAA8B;AAC1B;AACH;;AACD,SAAKhB,MAAL,CAAYkB,GAAZ,CAAgBF,OAAhB;AACA,SAAKV,QAAL,CAAcU,OAAd,EAAuB/B,KAAvB;AACA,SAAKe,MAAL,CAAYmB,MAAZ,CAAmBH,OAAnB;AACH;;AACDN,EAAAA,qBAAqB,CAACM,OAAD,EAAU;AAC3B,UAAMlB,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAME,MAAM,GAAG,KAAKA,MAApB;;AACA,QAAIA,MAAM,CAACiB,GAAP,CAAWD,OAAX,KAAuBlB,IAAI,KAAK,UAApC,EAAgD;AAC5C;AACH;;AACDhB,IAAAA,GAAG,CAACsC,WAAJ,CAAgB,MAAM;AAClBpB,MAAAA,MAAM,CAACkB,GAAP,CAAWF,OAAX;AACA,YAAMK,WAAW,GAAGL,OAAO,CAAC,KAAKd,SAAN,CAA3B;;AACA,cAAQJ,IAAR;AACI,aAAK,SAAL;AACI,gBAAMC,SAAS,GAAG,KAAKA,SAAvB;AACAjB,UAAAA,GAAG,CAACwC,YAAJ,CAAiBN,OAAjB,EAA0B,KAAKpB,SAA/B,EAA0CG,SAAS,KAAK,KAAK,CAAnB,GAAuBA,SAAS,CAACf,MAAV,CAAiBqC,WAAjB,CAAvB,GAAuDA,WAAjG;AACA;;AACJ,aAAK,SAAL;AACIvC,UAAAA,GAAG,CAACyC,mBAAJ,CAAwBP,OAAxB,EAAiC,KAAKpB,SAAtC,EAAiDyB,WAAjD;AACA;AAPR;;AASArB,MAAAA,MAAM,CAACmB,MAAP,CAAcH,OAAd;AACH,KAbD;AAcH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACkB,SAAPQ,OAAO,CAAC9B,KAAD,EAAQ,GAAG+B,cAAX,EAA2B;AACrC,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,cAAc,CAACE,IAAf,CAAoBjC,KAAK,CAACgC,UAA1B;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,cAAc,CAACK,MAApC,EAA4CF,CAAC,GAAGC,EAAhD,EAAoD,EAAED,CAAtD,EAAyD;AACrD,YAAMG,IAAI,GAAGN,cAAc,CAACG,CAAD,CAA3B;;AACA,UAAIG,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACjB;AACH;;AACD,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACD,MAA1B,EAAkCE,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC3C,cAAME,MAAM,GAAGH,IAAI,CAACC,CAAD,CAAnB;;AACA,YAAI,OAAOE,MAAP,KAAkB,QAAtB,EAAgC;AAC5BR,UAAAA,UAAU,CAACC,IAAX,CAAgB,IAAInC,mBAAJ,CAAwBE,KAAxB,EAA+BwC,MAA/B,CAAhB;AACH,SAFD,MAGK;AACDR,UAAAA,UAAU,CAACC,IAAX,CAAgB,IAAInC,mBAAJ,CAAwBE,KAAxB,EAA+BwC,MAAM,CAACC,QAAtC,EAAgDD,MAAM,CAACtC,SAAvD,EAAkEsC,MAAM,CAACpC,IAAzE,EAA+EoC,MAAM,CAACnC,SAAtF,CAAhB;AACH;AACJ;AACJ;;AACD,WAAO2B,UAAP;AACH;;AA3G4B;AA6GjC,OAAO,SAASU,IAAT,CAAcC,cAAd,EAA8BC,IAA9B,EAAoC;AACvC,MAAIJ,MAAJ;;AACA,WAASK,SAAT,CAAmBC,OAAnB,EAA4BC,KAA5B,EAAmC;AAC/B,QAAIC,SAAS,CAACZ,MAAV,GAAmB,CAAvB,EAA0B;AACtB;AACA;AACA;AACA;AACA;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBM,KAAlB;AACH;;AACD,UAAMf,UAAU,GAAGc,OAAO,CAAC/C,WAAR,CAAoBiC,UAApB,KACdc,OAAO,CAAC/C,WAAR,CAAoBiC,UAApB,GAAiC,EADnB,CAAnB;AAEAA,IAAAA,UAAU,CAACC,IAAX,CAAgBO,MAAhB;AACH;;AACD,MAAIQ,SAAS,CAACZ,MAAV,GAAmB,CAAvB,EAA0B;AACtB;AACA;AACAI,IAAAA,MAAM,GAAG,EAAT;AACAK,IAAAA,SAAS,CAACF,cAAD,EAAiBC,IAAjB,CAAT;AACA;AACH,GArBsC,CAsBvC;AACA;AACA;;;AACAJ,EAAAA,MAAM,GAAGG,cAAc,KAAK,KAAK,CAAxB,GAA4B,EAA5B,GAAiCA,cAA1C;AACA,SAAOE,SAAP;AACH","sourcesContent":["import { Observable } from \"../observation/observable\";\nimport { DOM } from \"../dom\";\n/**\n * A {@link ValueConverter} that converts to and from `boolean` values.\n * @remarks\n * Used automatically when the `boolean` {@link AttributeMode} is selected.\n * @public\n */\nexport const booleanConverter = {\n    toView(value) {\n        return value ? \"true\" : \"false\";\n    },\n    fromView(value) {\n        if (value === null ||\n            value === void 0 ||\n            value === \"false\" ||\n            value === false ||\n            value === 0) {\n            return false;\n        }\n        return true;\n    },\n};\n/**\n * A {@link ValueConverter} that converts to and from `number` values.\n * @remarks\n * This converter allows for nullable numbers, returning `null` if the\n * input was `null`, `undefined`, or `NaN`.\n * @public\n */\nexport const nullableNumberConverter = {\n    toView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number.toString();\n    },\n    fromView(value) {\n        if (value === null || value === undefined) {\n            return null;\n        }\n        const number = value * 1;\n        return isNaN(number) ? null : number;\n    },\n};\n/**\n * An implementation of {@link Accessor} that supports reactivity,\n * change callbacks, attribute reflection, and type conversion for\n * custom elements.\n * @public\n */\nexport class AttributeDefinition {\n    /**\n     * Creates an instance of AttributeDefinition.\n     * @param Owner - The class constructor that owns this attribute.\n     * @param name - The name of the property associated with the attribute.\n     * @param attribute - The name of the attribute in HTML.\n     * @param mode - The {@link AttributeMode} that describes the behavior of this attribute.\n     * @param converter - A {@link ValueConverter} that integrates with the property getter/setter\n     * to convert values to and from a DOM string.\n     */\n    constructor(Owner, name, attribute = name.toLowerCase(), mode = \"reflect\", converter) {\n        this.guards = new Set();\n        this.Owner = Owner;\n        this.name = name;\n        this.attribute = attribute;\n        this.mode = mode;\n        this.converter = converter;\n        this.fieldName = `_${name}`;\n        this.callbackName = `${name}Changed`;\n        this.hasCallback = this.callbackName in Owner.prototype;\n        if (mode === \"boolean\" && converter === void 0) {\n            this.converter = booleanConverter;\n        }\n    }\n    /**\n     * Sets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     * @param value - The value to set the attribute/property to.\n     */\n    setValue(source, newValue) {\n        const oldValue = source[this.fieldName];\n        const converter = this.converter;\n        if (converter !== void 0) {\n            newValue = converter.fromView(newValue);\n        }\n        if (oldValue !== newValue) {\n            source[this.fieldName] = newValue;\n            this.tryReflectToAttribute(source);\n            if (this.hasCallback) {\n                source[this.callbackName](oldValue, newValue);\n            }\n            source.$fastController.notify(this.name);\n        }\n    }\n    /**\n     * Gets the value of the attribute/property on the source element.\n     * @param source - The source element to access.\n     */\n    getValue(source) {\n        Observable.track(source, this.name);\n        return source[this.fieldName];\n    }\n    /** @internal */\n    onAttributeChangedCallback(element, value) {\n        if (this.guards.has(element)) {\n            return;\n        }\n        this.guards.add(element);\n        this.setValue(element, value);\n        this.guards.delete(element);\n    }\n    tryReflectToAttribute(element) {\n        const mode = this.mode;\n        const guards = this.guards;\n        if (guards.has(element) || mode === \"fromView\") {\n            return;\n        }\n        DOM.queueUpdate(() => {\n            guards.add(element);\n            const latestValue = element[this.fieldName];\n            switch (mode) {\n                case \"reflect\":\n                    const converter = this.converter;\n                    DOM.setAttribute(element, this.attribute, converter !== void 0 ? converter.toView(latestValue) : latestValue);\n                    break;\n                case \"boolean\":\n                    DOM.setBooleanAttribute(element, this.attribute, latestValue);\n                    break;\n            }\n            guards.delete(element);\n        });\n    }\n    /**\n     * Collects all attribute definitions associated with the owner.\n     * @param Owner - The class constructor to collect attribute for.\n     * @param attributeLists - Any existing attributes to collect and merge with those associated with the owner.\n     * @internal\n     */\n    static collect(Owner, ...attributeLists) {\n        const attributes = [];\n        attributeLists.push(Owner.attributes);\n        for (let i = 0, ii = attributeLists.length; i < ii; ++i) {\n            const list = attributeLists[i];\n            if (list === void 0) {\n                continue;\n            }\n            for (let j = 0, jj = list.length; j < jj; ++j) {\n                const config = list[j];\n                if (typeof config === \"string\") {\n                    attributes.push(new AttributeDefinition(Owner, config));\n                }\n                else {\n                    attributes.push(new AttributeDefinition(Owner, config.property, config.attribute, config.mode, config.converter));\n                }\n            }\n        }\n        return attributes;\n    }\n}\nexport function attr(configOrTarget, prop) {\n    let config;\n    function decorator($target, $prop) {\n        if (arguments.length > 1) {\n            // Non invocation:\n            // - @attr\n            // Invocation with or w/o opts:\n            // - @attr()\n            // - @attr({...opts})\n            config.property = $prop;\n        }\n        const attributes = $target.constructor.attributes ||\n            ($target.constructor.attributes = []);\n        attributes.push(config);\n    }\n    if (arguments.length > 1) {\n        // Non invocation:\n        // - @attr\n        config = {};\n        decorator(configOrTarget, prop);\n        return;\n    }\n    // Invocation with or w/o opts:\n    // - @attr()\n    // - @attr({...opts})\n    config = configOrTarget === void 0 ? {} : configOrTarget;\n    return decorator;\n}\n"]},"metadata":{},"sourceType":"module"}