{"ast":null,"code":"import { CSSDirective } from \"./css-directive\";\nimport { ElementStyles } from \"./element-styles\";\n\nfunction collectStyles(strings, values) {\n  const styles = [];\n  let cssString = \"\";\n  const behaviors = [];\n\n  for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n    cssString += strings[i];\n    let value = values[i];\n\n    if (value instanceof CSSDirective) {\n      const behavior = value.createBehavior();\n      value = value.createCSS();\n\n      if (behavior) {\n        behaviors.push(behavior);\n      }\n    }\n\n    if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n      if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n        cssString = \"\";\n      }\n\n      styles.push(value);\n    } else {\n      cssString += value;\n    }\n  }\n\n  cssString += strings[strings.length - 1];\n\n  if (cssString.trim() !== \"\") {\n    styles.push(cssString);\n  }\n\n  return {\n    styles,\n    behaviors\n  };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\n\n\nexport function css(strings, ...values) {\n  const {\n    styles,\n    behaviors\n  } = collectStyles(strings, values);\n  const elementStyles = ElementStyles.create(styles);\n\n  if (behaviors.length) {\n    elementStyles.withBehaviors(...behaviors);\n  }\n\n  return elementStyles;\n}\n\nclass CSSPartial extends CSSDirective {\n  constructor(styles, behaviors) {\n    super();\n    this.behaviors = behaviors;\n    this.css = \"\";\n    const stylesheets = styles.reduce((accumulated, current) => {\n      if (typeof current === \"string\") {\n        this.css += current;\n      } else {\n        accumulated.push(current);\n      }\n\n      return accumulated;\n    }, []);\n\n    if (stylesheets.length) {\n      this.styles = ElementStyles.create(stylesheets);\n    }\n  }\n\n  createBehavior() {\n    return this;\n  }\n\n  createCSS() {\n    return this.css;\n  }\n\n  bind(el) {\n    if (this.styles) {\n      el.$fastController.addStyles(this.styles);\n    }\n\n    if (this.behaviors.length) {\n      el.$fastController.addBehaviors(this.behaviors);\n    }\n  }\n\n  unbind(el) {\n    if (this.styles) {\n      el.$fastController.removeStyles(this.styles);\n    }\n\n    if (this.behaviors.length) {\n      el.$fastController.removeBehaviors(this.behaviors);\n    }\n  }\n\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\n\n\nexport function cssPartial(strings, ...values) {\n  const {\n    styles,\n    behaviors\n  } = collectStyles(strings, values);\n  return new CSSPartial(styles, behaviors);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/styles/css.js"],"names":["CSSDirective","ElementStyles","collectStyles","strings","values","styles","cssString","behaviors","i","ii","length","value","behavior","createBehavior","createCSS","push","CSSStyleSheet","trim","css","elementStyles","create","withBehaviors","CSSPartial","constructor","stylesheets","reduce","accumulated","current","bind","el","$fastController","addStyles","addBehaviors","unbind","removeStyles","removeBehaviors","cssPartial"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,MAAhC,EAAwC;AACpC,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGN,OAAO,CAACO,MAAR,GAAiB,CAAtC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiD,EAAED,CAAnD,EAAsD;AAClDF,IAAAA,SAAS,IAAIH,OAAO,CAACK,CAAD,CAApB;AACA,QAAIG,KAAK,GAAGP,MAAM,CAACI,CAAD,CAAlB;;AACA,QAAIG,KAAK,YAAYX,YAArB,EAAmC;AAC/B,YAAMY,QAAQ,GAAGD,KAAK,CAACE,cAAN,EAAjB;AACAF,MAAAA,KAAK,GAAGA,KAAK,CAACG,SAAN,EAAR;;AACA,UAAIF,QAAJ,EAAc;AACVL,QAAAA,SAAS,CAACQ,IAAV,CAAeH,QAAf;AACH;AACJ;;AACD,QAAID,KAAK,YAAYV,aAAjB,IAAkCU,KAAK,YAAYK,aAAvD,EAAsE;AAClE,UAAIV,SAAS,CAACW,IAAV,OAAqB,EAAzB,EAA6B;AACzBZ,QAAAA,MAAM,CAACU,IAAP,CAAYT,SAAZ;AACAA,QAAAA,SAAS,GAAG,EAAZ;AACH;;AACDD,MAAAA,MAAM,CAACU,IAAP,CAAYJ,KAAZ;AACH,KAND,MAOK;AACDL,MAAAA,SAAS,IAAIK,KAAb;AACH;AACJ;;AACDL,EAAAA,SAAS,IAAIH,OAAO,CAACA,OAAO,CAACO,MAAR,GAAiB,CAAlB,CAApB;;AACA,MAAIJ,SAAS,CAACW,IAAV,OAAqB,EAAzB,EAA6B;AACzBZ,IAAAA,MAAM,CAACU,IAAP,CAAYT,SAAZ;AACH;;AACD,SAAO;AACHD,IAAAA,MADG;AAEHE,IAAAA;AAFG,GAAP;AAIH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASW,GAAT,CAAaf,OAAb,EAAsB,GAAGC,MAAzB,EAAiC;AACpC,QAAM;AAAEC,IAAAA,MAAF;AAAUE,IAAAA;AAAV,MAAwBL,aAAa,CAACC,OAAD,EAAUC,MAAV,CAA3C;AACA,QAAMe,aAAa,GAAGlB,aAAa,CAACmB,MAAd,CAAqBf,MAArB,CAAtB;;AACA,MAAIE,SAAS,CAACG,MAAd,EAAsB;AAClBS,IAAAA,aAAa,CAACE,aAAd,CAA4B,GAAGd,SAA/B;AACH;;AACD,SAAOY,aAAP;AACH;;AACD,MAAMG,UAAN,SAAyBtB,YAAzB,CAAsC;AAClCuB,EAAAA,WAAW,CAAClB,MAAD,EAASE,SAAT,EAAoB;AAC3B;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKW,GAAL,GAAW,EAAX;AACA,UAAMM,WAAW,GAAGnB,MAAM,CAACoB,MAAP,CAAc,CAACC,WAAD,EAAcC,OAAd,KAA0B;AACxD,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,aAAKT,GAAL,IAAYS,OAAZ;AACH,OAFD,MAGK;AACDD,QAAAA,WAAW,CAACX,IAAZ,CAAiBY,OAAjB;AACH;;AACD,aAAOD,WAAP;AACH,KARmB,EAQjB,EARiB,CAApB;;AASA,QAAIF,WAAW,CAACd,MAAhB,EAAwB;AACpB,WAAKL,MAAL,GAAcJ,aAAa,CAACmB,MAAd,CAAqBI,WAArB,CAAd;AACH;AACJ;;AACDX,EAAAA,cAAc,GAAG;AACb,WAAO,IAAP;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKI,GAAZ;AACH;;AACDU,EAAAA,IAAI,CAACC,EAAD,EAAK;AACL,QAAI,KAAKxB,MAAT,EAAiB;AACbwB,MAAAA,EAAE,CAACC,eAAH,CAAmBC,SAAnB,CAA6B,KAAK1B,MAAlC;AACH;;AACD,QAAI,KAAKE,SAAL,CAAeG,MAAnB,EAA2B;AACvBmB,MAAAA,EAAE,CAACC,eAAH,CAAmBE,YAAnB,CAAgC,KAAKzB,SAArC;AACH;AACJ;;AACD0B,EAAAA,MAAM,CAACJ,EAAD,EAAK;AACP,QAAI,KAAKxB,MAAT,EAAiB;AACbwB,MAAAA,EAAE,CAACC,eAAH,CAAmBI,YAAnB,CAAgC,KAAK7B,MAArC;AACH;;AACD,QAAI,KAAKE,SAAL,CAAeG,MAAnB,EAA2B;AACvBmB,MAAAA,EAAE,CAACC,eAAH,CAAmBK,eAAnB,CAAmC,KAAK5B,SAAxC;AACH;AACJ;;AAvCiC;AAyCtC;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAS6B,UAAT,CAAoBjC,OAApB,EAA6B,GAAGC,MAAhC,EAAwC;AAC3C,QAAM;AAAEC,IAAAA,MAAF;AAAUE,IAAAA;AAAV,MAAwBL,aAAa,CAACC,OAAD,EAAUC,MAAV,CAA3C;AACA,SAAO,IAAIkB,UAAJ,CAAejB,MAAf,EAAuBE,SAAvB,CAAP;AACH","sourcesContent":["import { CSSDirective } from \"./css-directive\";\nimport { ElementStyles } from \"./element-styles\";\nfunction collectStyles(strings, values) {\n    const styles = [];\n    let cssString = \"\";\n    const behaviors = [];\n    for (let i = 0, ii = strings.length - 1; i < ii; ++i) {\n        cssString += strings[i];\n        let value = values[i];\n        if (value instanceof CSSDirective) {\n            const behavior = value.createBehavior();\n            value = value.createCSS();\n            if (behavior) {\n                behaviors.push(behavior);\n            }\n        }\n        if (value instanceof ElementStyles || value instanceof CSSStyleSheet) {\n            if (cssString.trim() !== \"\") {\n                styles.push(cssString);\n                cssString = \"\";\n            }\n            styles.push(value);\n        }\n        else {\n            cssString += value;\n        }\n    }\n    cssString += strings[strings.length - 1];\n    if (cssString.trim() !== \"\") {\n        styles.push(cssString);\n    }\n    return {\n        styles,\n        behaviors,\n    };\n}\n/**\n * Transforms a template literal string into styles.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @remarks\n * The css helper supports interpolation of strings and ElementStyle instances.\n * @public\n */\nexport function css(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    const elementStyles = ElementStyles.create(styles);\n    if (behaviors.length) {\n        elementStyles.withBehaviors(...behaviors);\n    }\n    return elementStyles;\n}\nclass CSSPartial extends CSSDirective {\n    constructor(styles, behaviors) {\n        super();\n        this.behaviors = behaviors;\n        this.css = \"\";\n        const stylesheets = styles.reduce((accumulated, current) => {\n            if (typeof current === \"string\") {\n                this.css += current;\n            }\n            else {\n                accumulated.push(current);\n            }\n            return accumulated;\n        }, []);\n        if (stylesheets.length) {\n            this.styles = ElementStyles.create(stylesheets);\n        }\n    }\n    createBehavior() {\n        return this;\n    }\n    createCSS() {\n        return this.css;\n    }\n    bind(el) {\n        if (this.styles) {\n            el.$fastController.addStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.addBehaviors(this.behaviors);\n        }\n    }\n    unbind(el) {\n        if (this.styles) {\n            el.$fastController.removeStyles(this.styles);\n        }\n        if (this.behaviors.length) {\n            el.$fastController.removeBehaviors(this.behaviors);\n        }\n    }\n}\n/**\n * Transforms a template literal string into partial CSS.\n * @param strings - The string fragments that are interpolated with the values.\n * @param values - The values that are interpolated with the string fragments.\n * @public\n */\nexport function cssPartial(strings, ...values) {\n    const { styles, behaviors } = collectStyles(strings, values);\n    return new CSSPartial(styles, behaviors);\n}\n"]},"metadata":{},"sourceType":"module"}