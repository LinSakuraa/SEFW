{"ast":null,"code":"import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELAB color space}\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\n\nexport class ColorLAB {\n  constructor(l, a, b) {\n    this.l = l;\n    this.a = a;\n    this.b = b;\n  }\n  /**\n   * Construct a {@link ColorLAB} from a config object.\n   */\n\n\n  static fromObject(data) {\n    if (data && !isNaN(data.l) && !isNaN(data.a) && !isNaN(data.b)) {\n      return new ColorLAB(data.l, data.a, data.b);\n    }\n\n    return null;\n  }\n  /**\n   * Determines if a color is equal to another\n   * @param rhs - the value to compare\n   */\n\n\n  equalValue(rhs) {\n    return this.l === rhs.l && this.a === rhs.a && this.b === rhs.b;\n  }\n  /**\n   * Returns a new {@link ColorLAB} rounded to the provided precision\n   * @param precision - the precision to round to\n   */\n\n\n  roundToPrecision(precision) {\n    return new ColorLAB(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.a, precision), roundToPrecisionSmall(this.b, precision));\n  }\n  /**\n   * Returns the {@link ColorLAB} formatted as an object.\n   */\n\n\n  toObject() {\n    return {\n      l: this.l,\n      a: this.a,\n      b: this.b\n    };\n  }\n\n}\nColorLAB.epsilon = 216 / 24389;\nColorLAB.kappa = 24389 / 27;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-colors/dist/color-lab.js"],"names":["roundToPrecisionSmall","ColorLAB","constructor","l","a","b","fromObject","data","isNaN","equalValue","rhs","roundToPrecision","precision","toObject","epsilon","kappa"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,kBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACjB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACH;AACD;AACJ;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,QAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACJ,CAAN,CAAd,IAA0B,CAACK,KAAK,CAACD,IAAI,CAACH,CAAN,CAAhC,IAA4C,CAACI,KAAK,CAACD,IAAI,CAACF,CAAN,CAAtD,EAAgE;AAC5D,aAAO,IAAIJ,QAAJ,CAAaM,IAAI,CAACJ,CAAlB,EAAqBI,IAAI,CAACH,CAA1B,EAA6BG,IAAI,CAACF,CAAlC,CAAP;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,WAAO,KAAKP,CAAL,KAAWO,GAAG,CAACP,CAAf,IAAoB,KAAKC,CAAL,KAAWM,GAAG,CAACN,CAAnC,IAAwC,KAAKC,CAAL,KAAWK,GAAG,CAACL,CAA9D;AACH;AACD;AACJ;AACA;AACA;;;AACIM,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,WAAO,IAAIX,QAAJ,CAAaD,qBAAqB,CAAC,KAAKG,CAAN,EAASS,SAAT,CAAlC,EAAuDZ,qBAAqB,CAAC,KAAKI,CAAN,EAASQ,SAAT,CAA5E,EAAiGZ,qBAAqB,CAAC,KAAKK,CAAN,EAASO,SAAT,CAAtH,CAAP;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,WAAO;AAAEV,MAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,MAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,MAAAA,CAAC,EAAE,KAAKA;AAAhC,KAAP;AACH;;AAlCiB;AAoCtBJ,QAAQ,CAACa,OAAT,GAAmB,MAAM,KAAzB;AACAb,QAAQ,CAACc,KAAT,GAAiB,QAAQ,EAAzB","sourcesContent":["import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELAB color space}\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nexport class ColorLAB {\n    constructor(l, a, b) {\n        this.l = l;\n        this.a = a;\n        this.b = b;\n    }\n    /**\n     * Construct a {@link ColorLAB} from a config object.\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.l) && !isNaN(data.a) && !isNaN(data.b)) {\n            return new ColorLAB(data.l, data.a, data.b);\n        }\n        return null;\n    }\n    /**\n     * Determines if a color is equal to another\n     * @param rhs - the value to compare\n     */\n    equalValue(rhs) {\n        return this.l === rhs.l && this.a === rhs.a && this.b === rhs.b;\n    }\n    /**\n     * Returns a new {@link ColorLAB} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorLAB(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.a, precision), roundToPrecisionSmall(this.b, precision));\n    }\n    /**\n     * Returns the {@link ColorLAB} formatted as an object.\n     */\n    toObject() {\n        return { l: this.l, a: this.a, b: this.b };\n    }\n}\nColorLAB.epsilon = 216 / 24389;\nColorLAB.kappa = 24389 / 27;\n"]},"metadata":{},"sourceType":"module"}