{"ast":null,"code":"import zIndexManager from './z-index-manager';\nconst ctx = '@@ziContext'; // We don't expect manually bound zindex should be changed\n\nconst zindexable = {\n  mounted(el, bindings) {\n    const {\n      value = {}\n    } = bindings;\n    const {\n      zIndex,\n      enabled\n    } = value;\n    el[ctx] = {\n      enabled: !!enabled,\n      initialized: false\n    };\n\n    if (enabled) {\n      zIndexManager.ensureZIndex(el, zIndex);\n      el[ctx].initialized = true;\n    }\n  },\n\n  updated(el, bindings) {\n    const {\n      value = {}\n    } = bindings;\n    const {\n      zIndex,\n      enabled\n    } = value;\n    const cachedEnabled = el[ctx].enabled;\n\n    if (enabled && !cachedEnabled) {\n      zIndexManager.ensureZIndex(el, zIndex);\n      el[ctx].initialized = true;\n    }\n\n    el[ctx].enabled = !!enabled;\n  },\n\n  unmounted(el, bindings) {\n    if (!el[ctx].initialized) return;\n    const {\n      value = {}\n    } = bindings;\n    const {\n      zIndex\n    } = value;\n    zIndexManager.unregister(el, zIndex);\n  }\n\n};\nexport default zindexable;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vdirs/es/zindexable/index.js"],"names":["zIndexManager","ctx","zindexable","mounted","el","bindings","value","zIndex","enabled","initialized","ensureZIndex","updated","cachedEnabled","unmounted","unregister"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,mBAA1B;AACA,MAAMC,GAAG,GAAG,aAAZ,C,CACA;;AACA,MAAMC,UAAU,GAAG;AACfC,EAAAA,OAAO,CAACC,EAAD,EAAKC,QAAL,EAAe;AAClB,UAAM;AAAEC,MAAAA,KAAK,GAAG;AAAV,QAAiBD,QAAvB;AACA,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBF,KAA5B;AACAF,IAAAA,EAAE,CAACH,GAAD,CAAF,GAAU;AACNO,MAAAA,OAAO,EAAE,CAAC,CAACA,OADL;AAENC,MAAAA,WAAW,EAAE;AAFP,KAAV;;AAIA,QAAID,OAAJ,EAAa;AACTR,MAAAA,aAAa,CAACU,YAAd,CAA2BN,EAA3B,EAA+BG,MAA/B;AACAH,MAAAA,EAAE,CAACH,GAAD,CAAF,CAAQQ,WAAR,GAAsB,IAAtB;AACH;AACJ,GAZc;;AAafE,EAAAA,OAAO,CAACP,EAAD,EAAKC,QAAL,EAAe;AAClB,UAAM;AAAEC,MAAAA,KAAK,GAAG;AAAV,QAAiBD,QAAvB;AACA,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBF,KAA5B;AACA,UAAMM,aAAa,GAAGR,EAAE,CAACH,GAAD,CAAF,CAAQO,OAA9B;;AACA,QAAIA,OAAO,IAAI,CAACI,aAAhB,EAA+B;AAC3BZ,MAAAA,aAAa,CAACU,YAAd,CAA2BN,EAA3B,EAA+BG,MAA/B;AACAH,MAAAA,EAAE,CAACH,GAAD,CAAF,CAAQQ,WAAR,GAAsB,IAAtB;AACH;;AACDL,IAAAA,EAAE,CAACH,GAAD,CAAF,CAAQO,OAAR,GAAkB,CAAC,CAACA,OAApB;AACH,GAtBc;;AAuBfK,EAAAA,SAAS,CAACT,EAAD,EAAKC,QAAL,EAAe;AACpB,QAAI,CAACD,EAAE,CAACH,GAAD,CAAF,CAAQQ,WAAb,EACI;AACJ,UAAM;AAAEH,MAAAA,KAAK,GAAG;AAAV,QAAiBD,QAAvB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAaD,KAAnB;AACAN,IAAAA,aAAa,CAACc,UAAd,CAAyBV,EAAzB,EAA6BG,MAA7B;AACH;;AA7Bc,CAAnB;AA+BA,eAAeL,UAAf","sourcesContent":["import zIndexManager from './z-index-manager';\nconst ctx = '@@ziContext';\n// We don't expect manually bound zindex should be changed\nconst zindexable = {\n    mounted(el, bindings) {\n        const { value = {} } = bindings;\n        const { zIndex, enabled } = value;\n        el[ctx] = {\n            enabled: !!enabled,\n            initialized: false\n        };\n        if (enabled) {\n            zIndexManager.ensureZIndex(el, zIndex);\n            el[ctx].initialized = true;\n        }\n    },\n    updated(el, bindings) {\n        const { value = {} } = bindings;\n        const { zIndex, enabled } = value;\n        const cachedEnabled = el[ctx].enabled;\n        if (enabled && !cachedEnabled) {\n            zIndexManager.ensureZIndex(el, zIndex);\n            el[ctx].initialized = true;\n        }\n        el[ctx].enabled = !!enabled;\n    },\n    unmounted(el, bindings) {\n        if (!el[ctx].initialized)\n            return;\n        const { value = {} } = bindings;\n        const { zIndex } = value;\n        zIndexManager.unregister(el, zIndex);\n    }\n};\nexport default zindexable;\n"]},"metadata":{},"sourceType":"module"}