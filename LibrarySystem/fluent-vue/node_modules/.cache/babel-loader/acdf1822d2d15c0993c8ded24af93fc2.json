{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keyArrowDown, keyArrowUp, keyEnd, keyHome, wrapInBounds } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { AccordionItem } from \"../accordion-item\";\n/**\n * Expand mode for {@link Accordion}\n * @public\n */\n\nexport var AccordionExpandMode;\n\n(function (AccordionExpandMode) {\n  /**\n   * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.\n   */\n  AccordionExpandMode[\"single\"] = \"single\";\n  /**\n   * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.\n   */\n\n  AccordionExpandMode[\"multi\"] = \"multi\";\n})(AccordionExpandMode || (AccordionExpandMode = {}));\n/**\n * An Accordion Custom HTML Element\n * Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.\n * @public\n *\n * @remarks\n * Designed to be used with {@link @microsoft/fast-foundation#accordionTemplate} and {@link @microsoft/fast-foundation#(AccordionItem:class)}.\n */\n\n\nexport class Accordion extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Controls the expand mode of the Accordion, either allowing\n     * single or multiple item expansion.\n     * @public\n     *\n     * @remarks\n     * HTML attribute: expand-mode\n     */\n\n    this.expandmode = AccordionExpandMode.multi;\n    this.activeItemIndex = 0;\n\n    this.change = () => {\n      this.$emit(\"change\");\n    };\n\n    this.setItems = () => {\n      var _a;\n\n      if (this.accordionItems.length === 0) {\n        return;\n      }\n\n      this.accordionIds = this.getItemIds();\n      this.accordionItems.forEach((item, index) => {\n        if (item instanceof AccordionItem) {\n          item.addEventListener(\"change\", this.activeItemChange);\n\n          if (this.isSingleExpandMode()) {\n            this.activeItemIndex !== index ? item.expanded = false : item.expanded = true;\n          }\n        }\n\n        const itemId = this.accordionIds[index];\n        item.setAttribute(\"id\", typeof itemId !== \"string\" ? `accordion-${index + 1}` : itemId);\n        this.activeid = this.accordionIds[this.activeItemIndex];\n        item.addEventListener(\"keydown\", this.handleItemKeyDown);\n        item.addEventListener(\"focus\", this.handleItemFocus);\n      });\n\n      if (this.isSingleExpandMode()) {\n        const expandedItem = (_a = this.findExpandedItem()) !== null && _a !== void 0 ? _a : this.accordionItems[0];\n        expandedItem.setAttribute(\"aria-disabled\", \"true\");\n      }\n    };\n\n    this.removeItemListeners = oldValue => {\n      oldValue.forEach((item, index) => {\n        item.removeEventListener(\"change\", this.activeItemChange);\n        item.removeEventListener(\"keydown\", this.handleItemKeyDown);\n        item.removeEventListener(\"focus\", this.handleItemFocus);\n      });\n    };\n\n    this.activeItemChange = event => {\n      const selectedItem = event.target;\n      this.activeid = selectedItem.getAttribute(\"id\");\n\n      if (this.isSingleExpandMode()) {\n        this.resetItems();\n        selectedItem.expanded = true;\n        selectedItem.setAttribute(\"aria-disabled\", \"true\");\n        this.accordionItems.forEach(item => {\n          if (!item.hasAttribute(\"disabled\") && item.id !== this.activeid) {\n            item.removeAttribute(\"aria-disabled\");\n          }\n        });\n      }\n\n      this.activeItemIndex = Array.from(this.accordionItems).indexOf(selectedItem);\n      this.change();\n    };\n\n    this.handleItemKeyDown = event => {\n      // only handle the keydown if the event target is the accordion item\n      // prevents arrow keys from moving focus to accordion headers when focus is on accordion item panel content\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      this.accordionIds = this.getItemIds();\n\n      switch (event.key) {\n        case keyArrowUp:\n          event.preventDefault();\n          this.adjust(-1);\n          break;\n\n        case keyArrowDown:\n          event.preventDefault();\n          this.adjust(1);\n          break;\n\n        case keyHome:\n          this.activeItemIndex = 0;\n          this.focusItem();\n          break;\n\n        case keyEnd:\n          this.activeItemIndex = this.accordionItems.length - 1;\n          this.focusItem();\n          break;\n      }\n    };\n\n    this.handleItemFocus = event => {\n      // update the active item index if the focus moves to an accordion item via a different method other than the up and down arrow key actions\n      // only do so if the focus is actually on the accordion item and not on any of its children\n      if (event.target === event.currentTarget) {\n        const focusedItem = event.target;\n        const focusedIndex = this.activeItemIndex = Array.from(this.accordionItems).indexOf(focusedItem);\n\n        if (this.activeItemIndex !== focusedIndex && focusedIndex !== -1) {\n          this.activeItemIndex = focusedIndex;\n          this.activeid = this.accordionIds[this.activeItemIndex];\n        }\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  accordionItemsChanged(oldValue, newValue) {\n    if (this.$fastController.isConnected) {\n      this.removeItemListeners(oldValue);\n      this.setItems();\n    }\n  }\n\n  findExpandedItem() {\n    for (let item = 0; item < this.accordionItems.length; item++) {\n      if (this.accordionItems[item].getAttribute(\"expanded\") === \"true\") {\n        return this.accordionItems[item];\n      }\n    }\n\n    return null;\n  }\n\n  resetItems() {\n    this.accordionItems.forEach((item, index) => {\n      item.expanded = false;\n    });\n  }\n\n  getItemIds() {\n    return this.accordionItems.map(accordionItem => {\n      return accordionItem.getAttribute(\"id\");\n    });\n  }\n\n  isSingleExpandMode() {\n    return this.expandmode === AccordionExpandMode.single;\n  }\n\n  adjust(adjustment) {\n    this.activeItemIndex = wrapInBounds(0, this.accordionItems.length - 1, this.activeItemIndex + adjustment);\n    this.focusItem();\n  }\n\n  focusItem() {\n    const element = this.accordionItems[this.activeItemIndex];\n\n    if (element instanceof AccordionItem) {\n      element.expandbutton.focus();\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"expand-mode\"\n})], Accordion.prototype, \"expandmode\", void 0);\n\n__decorate([observable], Accordion.prototype, \"accordionItems\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/accordion/accordion.js"],"names":["__decorate","attr","observable","keyArrowDown","keyArrowUp","keyEnd","keyHome","wrapInBounds","FoundationElement","AccordionItem","AccordionExpandMode","Accordion","constructor","arguments","expandmode","multi","activeItemIndex","change","$emit","setItems","_a","accordionItems","length","accordionIds","getItemIds","forEach","item","index","addEventListener","activeItemChange","isSingleExpandMode","expanded","itemId","setAttribute","activeid","handleItemKeyDown","handleItemFocus","expandedItem","findExpandedItem","removeItemListeners","oldValue","removeEventListener","event","selectedItem","target","getAttribute","resetItems","hasAttribute","id","removeAttribute","Array","from","indexOf","currentTarget","key","preventDefault","adjust","focusItem","focusedItem","focusedIndex","accordionItemsChanged","newValue","$fastController","isConnected","map","accordionItem","single","adjustment","element","expandbutton","focus","attribute","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keyArrowDown, keyArrowUp, keyEnd, keyHome, wrapInBounds, } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { AccordionItem } from \"../accordion-item\";\n/**\n * Expand mode for {@link Accordion}\n * @public\n */\nexport var AccordionExpandMode;\n(function (AccordionExpandMode) {\n    /**\n     * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.\n     */\n    AccordionExpandMode[\"single\"] = \"single\";\n    /**\n     * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.\n     */\n    AccordionExpandMode[\"multi\"] = \"multi\";\n})(AccordionExpandMode || (AccordionExpandMode = {}));\n/**\n * An Accordion Custom HTML Element\n * Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.\n * @public\n *\n * @remarks\n * Designed to be used with {@link @microsoft/fast-foundation#accordionTemplate} and {@link @microsoft/fast-foundation#(AccordionItem:class)}.\n */\nexport class Accordion extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Controls the expand mode of the Accordion, either allowing\n         * single or multiple item expansion.\n         * @public\n         *\n         * @remarks\n         * HTML attribute: expand-mode\n         */\n        this.expandmode = AccordionExpandMode.multi;\n        this.activeItemIndex = 0;\n        this.change = () => {\n            this.$emit(\"change\");\n        };\n        this.setItems = () => {\n            var _a;\n            if (this.accordionItems.length === 0) {\n                return;\n            }\n            this.accordionIds = this.getItemIds();\n            this.accordionItems.forEach((item, index) => {\n                if (item instanceof AccordionItem) {\n                    item.addEventListener(\"change\", this.activeItemChange);\n                    if (this.isSingleExpandMode()) {\n                        this.activeItemIndex !== index\n                            ? (item.expanded = false)\n                            : (item.expanded = true);\n                    }\n                }\n                const itemId = this.accordionIds[index];\n                item.setAttribute(\"id\", typeof itemId !== \"string\" ? `accordion-${index + 1}` : itemId);\n                this.activeid = this.accordionIds[this.activeItemIndex];\n                item.addEventListener(\"keydown\", this.handleItemKeyDown);\n                item.addEventListener(\"focus\", this.handleItemFocus);\n            });\n            if (this.isSingleExpandMode()) {\n                const expandedItem = (_a = this.findExpandedItem()) !== null && _a !== void 0 ? _a : this.accordionItems[0];\n                expandedItem.setAttribute(\"aria-disabled\", \"true\");\n            }\n        };\n        this.removeItemListeners = (oldValue) => {\n            oldValue.forEach((item, index) => {\n                item.removeEventListener(\"change\", this.activeItemChange);\n                item.removeEventListener(\"keydown\", this.handleItemKeyDown);\n                item.removeEventListener(\"focus\", this.handleItemFocus);\n            });\n        };\n        this.activeItemChange = (event) => {\n            const selectedItem = event.target;\n            this.activeid = selectedItem.getAttribute(\"id\");\n            if (this.isSingleExpandMode()) {\n                this.resetItems();\n                selectedItem.expanded = true;\n                selectedItem.setAttribute(\"aria-disabled\", \"true\");\n                this.accordionItems.forEach((item) => {\n                    if (!item.hasAttribute(\"disabled\") && item.id !== this.activeid) {\n                        item.removeAttribute(\"aria-disabled\");\n                    }\n                });\n            }\n            this.activeItemIndex = Array.from(this.accordionItems).indexOf(selectedItem);\n            this.change();\n        };\n        this.handleItemKeyDown = (event) => {\n            // only handle the keydown if the event target is the accordion item\n            // prevents arrow keys from moving focus to accordion headers when focus is on accordion item panel content\n            if (event.target !== event.currentTarget) {\n                return;\n            }\n            this.accordionIds = this.getItemIds();\n            switch (event.key) {\n                case keyArrowUp:\n                    event.preventDefault();\n                    this.adjust(-1);\n                    break;\n                case keyArrowDown:\n                    event.preventDefault();\n                    this.adjust(1);\n                    break;\n                case keyHome:\n                    this.activeItemIndex = 0;\n                    this.focusItem();\n                    break;\n                case keyEnd:\n                    this.activeItemIndex = this.accordionItems.length - 1;\n                    this.focusItem();\n                    break;\n            }\n        };\n        this.handleItemFocus = (event) => {\n            // update the active item index if the focus moves to an accordion item via a different method other than the up and down arrow key actions\n            // only do so if the focus is actually on the accordion item and not on any of its children\n            if (event.target === event.currentTarget) {\n                const focusedItem = event.target;\n                const focusedIndex = (this.activeItemIndex = Array.from(this.accordionItems).indexOf(focusedItem));\n                if (this.activeItemIndex !== focusedIndex && focusedIndex !== -1) {\n                    this.activeItemIndex = focusedIndex;\n                    this.activeid = this.accordionIds[this.activeItemIndex];\n                }\n            }\n        };\n    }\n    /**\n     * @internal\n     */\n    accordionItemsChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected) {\n            this.removeItemListeners(oldValue);\n            this.setItems();\n        }\n    }\n    findExpandedItem() {\n        for (let item = 0; item < this.accordionItems.length; item++) {\n            if (this.accordionItems[item].getAttribute(\"expanded\") === \"true\") {\n                return this.accordionItems[item];\n            }\n        }\n        return null;\n    }\n    resetItems() {\n        this.accordionItems.forEach((item, index) => {\n            item.expanded = false;\n        });\n    }\n    getItemIds() {\n        return this.accordionItems.map((accordionItem) => {\n            return accordionItem.getAttribute(\"id\");\n        });\n    }\n    isSingleExpandMode() {\n        return this.expandmode === AccordionExpandMode.single;\n    }\n    adjust(adjustment) {\n        this.activeItemIndex = wrapInBounds(0, this.accordionItems.length - 1, this.activeItemIndex + adjustment);\n        this.focusItem();\n    }\n    focusItem() {\n        const element = this.accordionItems[this.activeItemIndex];\n        if (element instanceof AccordionItem) {\n            element.expandbutton.focus();\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"expand-mode\" })\n], Accordion.prototype, \"expandmode\", void 0);\n__decorate([\n    observable\n], Accordion.prototype, \"accordionItems\", void 0);\n"]},"metadata":{},"sourceType":"module"}