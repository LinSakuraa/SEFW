{"ast":null,"code":"import { computed, inject, ref, nextTick } from 'vue';\nimport { useKeyboard } from 'vooks';\nimport { datePickerInjectionKey } from '../interface';\nconst TIME_FORMAT = 'HH:mm:ss';\nconst usePanelCommonProps = {\n  active: Boolean,\n  dateFormat: String,\n  timeFormat: {\n    type: String,\n    value: TIME_FORMAT\n  },\n  value: {\n    type: [Array, Number],\n    default: null\n  },\n  shortcuts: Object,\n  defaultTime: [Number, String, Array],\n  onConfirm: Function,\n  onClose: Function,\n  onTabOut: Function,\n  onUpdateValue: {\n    type: Function,\n    required: true\n  },\n  themeClass: String,\n  onRender: Function\n}; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nfunction usePanelCommon(props) {\n  const {\n    dateLocaleRef,\n    timePickerSizeRef,\n    timePickerPropsRef,\n    localeRef,\n    mergedClsPrefixRef,\n    mergedThemeRef // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n  } = inject(datePickerInjectionKey);\n  const dateFnsOptionsRef = computed(() => {\n    return {\n      locale: dateLocaleRef.value.locale\n    };\n  });\n  const selfRef = ref(null);\n  const keyboardState = useKeyboard();\n\n  function doConfirm() {\n    const {\n      onConfirm\n    } = props;\n    if (onConfirm) onConfirm();\n  }\n\n  function doUpdateValue(value, doUpdate) {\n    const {\n      onUpdateValue\n    } = props;\n    onUpdateValue(value, doUpdate);\n  }\n\n  function doClose(disableUpdateOnClose = false) {\n    const {\n      onClose\n    } = props;\n    if (onClose) onClose(disableUpdateOnClose);\n  }\n\n  function doTabOut() {\n    const {\n      onTabOut\n    } = props;\n    if (onTabOut) onTabOut();\n  }\n\n  function handleClearClick() {\n    doUpdateValue(null, true);\n    doClose(true);\n  }\n\n  function handleFocusDetectorFocus() {\n    doTabOut();\n  }\n\n  function disableTransitionOneTick() {\n    if (props.active) {\n      void nextTick(() => {\n        const {\n          value: selfEl\n        } = selfRef;\n        if (!selfEl) return;\n        const dateEls = selfEl.querySelectorAll('[data-n-date]');\n        dateEls.forEach(el => {\n          el.classList.add('transition-disabled');\n        });\n        void selfEl.offsetWidth;\n        dateEls.forEach(el => {\n          el.classList.remove('transition-disabled');\n        });\n      });\n    }\n  }\n\n  function handlePanelKeyDown(e) {\n    if (e.code === 'Tab' && e.target === selfRef.value && keyboardState.shift) {\n      e.preventDefault();\n      doTabOut();\n    }\n  }\n\n  function handlePanelFocus(e) {\n    const {\n      value: el\n    } = selfRef;\n\n    if (keyboardState.tab && e.target === el && (el === null || el === void 0 ? void 0 : el.contains(e.relatedTarget))) {\n      doTabOut();\n    }\n  }\n\n  let cachedValue = null;\n  let cached = false;\n\n  function cachePendingValue() {\n    cachedValue = props.value;\n    cached = true;\n  }\n\n  function clearPendingValue() {\n    cached = false;\n  }\n\n  function restorePendingValue() {\n    if (cached) {\n      doUpdateValue(cachedValue, false);\n      cached = false;\n    }\n  }\n\n  function getShortcutValue(shortcut) {\n    if (typeof shortcut === 'function') {\n      return shortcut();\n    }\n\n    return shortcut;\n  }\n\n  const showMonthYearPanel = ref(false);\n\n  function handleOpenQuickSelectMonthPanel() {\n    showMonthYearPanel.value = !showMonthYearPanel.value;\n  }\n\n  return {\n    mergedTheme: mergedThemeRef,\n    mergedClsPrefix: mergedClsPrefixRef,\n    dateFnsOptions: dateFnsOptionsRef,\n    timePickerSize: timePickerSizeRef,\n    timePickerProps: timePickerPropsRef,\n    selfRef,\n    locale: localeRef,\n    doConfirm,\n    doClose,\n    doUpdateValue,\n    doTabOut,\n    handleClearClick,\n    handleFocusDetectorFocus,\n    disableTransitionOneTick,\n    handlePanelKeyDown,\n    handlePanelFocus,\n    cachePendingValue,\n    clearPendingValue,\n    restorePendingValue,\n    getShortcutValue,\n    handleShortcutMouseleave: restorePendingValue,\n    showMonthYearPanel,\n    handleOpenQuickSelectMonthPanel\n  };\n}\n\nexport { usePanelCommon, usePanelCommonProps };","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/date-picker/src/panel/use-panel-common.js"],"names":["computed","inject","ref","nextTick","useKeyboard","datePickerInjectionKey","TIME_FORMAT","usePanelCommonProps","active","Boolean","dateFormat","String","timeFormat","type","value","Array","Number","default","shortcuts","Object","defaultTime","onConfirm","Function","onClose","onTabOut","onUpdateValue","required","themeClass","onRender","usePanelCommon","props","dateLocaleRef","timePickerSizeRef","timePickerPropsRef","localeRef","mergedClsPrefixRef","mergedThemeRef","dateFnsOptionsRef","locale","selfRef","keyboardState","doConfirm","doUpdateValue","doUpdate","doClose","disableUpdateOnClose","doTabOut","handleClearClick","handleFocusDetectorFocus","disableTransitionOneTick","selfEl","dateEls","querySelectorAll","forEach","el","classList","add","offsetWidth","remove","handlePanelKeyDown","e","code","target","shift","preventDefault","handlePanelFocus","tab","contains","relatedTarget","cachedValue","cached","cachePendingValue","clearPendingValue","restorePendingValue","getShortcutValue","shortcut","showMonthYearPanel","handleOpenQuickSelectMonthPanel","mergedTheme","mergedClsPrefix","dateFnsOptions","timePickerSize","timePickerProps","handleShortcutMouseleave"],"mappings":"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","sourcesContent":["import { computed, inject, ref, nextTick } from 'vue';\nimport { useKeyboard } from 'vooks';\nimport { datePickerInjectionKey } from '../interface';\nconst TIME_FORMAT = 'HH:mm:ss';\nconst usePanelCommonProps = {\n    active: Boolean,\n    dateFormat: String,\n    timeFormat: {\n        type: String,\n        value: TIME_FORMAT\n    },\n    value: {\n        type: [Array, Number],\n        default: null\n    },\n    shortcuts: Object,\n    defaultTime: [Number, String, Array],\n    onConfirm: Function,\n    onClose: Function,\n    onTabOut: Function,\n    onUpdateValue: {\n        type: Function,\n        required: true\n    },\n    themeClass: String,\n    onRender: Function\n};\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction usePanelCommon(props) {\n    const { dateLocaleRef, timePickerSizeRef, timePickerPropsRef, localeRef, mergedClsPrefixRef, mergedThemeRef\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n     } = inject(datePickerInjectionKey);\n    const dateFnsOptionsRef = computed(() => {\n        return {\n            locale: dateLocaleRef.value.locale\n        };\n    });\n    const selfRef = ref(null);\n    const keyboardState = useKeyboard();\n    function doConfirm() {\n        const { onConfirm } = props;\n        if (onConfirm)\n            onConfirm();\n    }\n    function doUpdateValue(value, doUpdate) {\n        const { onUpdateValue } = props;\n        onUpdateValue(value, doUpdate);\n    }\n    function doClose(disableUpdateOnClose = false) {\n        const { onClose } = props;\n        if (onClose)\n            onClose(disableUpdateOnClose);\n    }\n    function doTabOut() {\n        const { onTabOut } = props;\n        if (onTabOut)\n            onTabOut();\n    }\n    function handleClearClick() {\n        doUpdateValue(null, true);\n        doClose(true);\n    }\n    function handleFocusDetectorFocus() {\n        doTabOut();\n    }\n    function disableTransitionOneTick() {\n        if (props.active) {\n            void nextTick(() => {\n                const { value: selfEl } = selfRef;\n                if (!selfEl)\n                    return;\n                const dateEls = selfEl.querySelectorAll('[data-n-date]');\n                dateEls.forEach((el) => {\n                    el.classList.add('transition-disabled');\n                });\n                void selfEl.offsetWidth;\n                dateEls.forEach((el) => {\n                    el.classList.remove('transition-disabled');\n                });\n            });\n        }\n    }\n    function handlePanelKeyDown(e) {\n        if (e.code === 'Tab' && e.target === selfRef.value && keyboardState.shift) {\n            e.preventDefault();\n            doTabOut();\n        }\n    }\n    function handlePanelFocus(e) {\n        const { value: el } = selfRef;\n        if (keyboardState.tab &&\n            e.target === el &&\n            (el === null || el === void 0 ? void 0 : el.contains(e.relatedTarget))) {\n            doTabOut();\n        }\n    }\n    let cachedValue = null;\n    let cached = false;\n    function cachePendingValue() {\n        cachedValue = props.value;\n        cached = true;\n    }\n    function clearPendingValue() {\n        cached = false;\n    }\n    function restorePendingValue() {\n        if (cached) {\n            doUpdateValue(cachedValue, false);\n            cached = false;\n        }\n    }\n    function getShortcutValue(shortcut) {\n        if (typeof shortcut === 'function') {\n            return shortcut();\n        }\n        return shortcut;\n    }\n    const showMonthYearPanel = ref(false);\n    function handleOpenQuickSelectMonthPanel() {\n        showMonthYearPanel.value = !showMonthYearPanel.value;\n    }\n    return {\n        mergedTheme: mergedThemeRef,\n        mergedClsPrefix: mergedClsPrefixRef,\n        dateFnsOptions: dateFnsOptionsRef,\n        timePickerSize: timePickerSizeRef,\n        timePickerProps: timePickerPropsRef,\n        selfRef,\n        locale: localeRef,\n        doConfirm,\n        doClose,\n        doUpdateValue,\n        doTabOut,\n        handleClearClick,\n        handleFocusDetectorFocus,\n        disableTransitionOneTick,\n        handlePanelKeyDown,\n        handlePanelFocus,\n        cachePendingValue,\n        clearPendingValue,\n        restorePendingValue,\n        getShortcutValue,\n        handleShortcutMouseleave: restorePendingValue,\n        showMonthYearPanel,\n        handleOpenQuickSelectMonthPanel\n    };\n}\nexport { usePanelCommon, usePanelCommonProps };\n"]},"metadata":{},"sourceType":"module"}