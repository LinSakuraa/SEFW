{"ast":null,"code":"import { h, defineComponent, inject, Fragment } from 'vue';\nimport { happensIn, pxfy } from 'seemly';\nimport { formatLength } from '../../../_utils';\nimport { NCheckbox } from '../../../checkbox';\nimport { NEllipsis } from '../../../ellipsis';\nimport SortButton from '../HeaderButton/SortButton';\nimport FilterButton from '../HeaderButton/FilterButton';\nimport { isColumnSortable, isColumnFilterable, createNextSorter, getColKey, isColumnSorting } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nimport SelectionMenu from './SelectionMenu';\n\nfunction renderTitle(column) {\n  return typeof column.title === 'function' ? column.title(column) : column.title;\n}\n\nexport default defineComponent({\n  name: 'DataTableHeader',\n  props: {\n    discrete: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  setup() {\n    const {\n      mergedClsPrefixRef,\n      scrollXRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      allRowsCheckedRef,\n      someRowsCheckedRef,\n      rowsRef,\n      colsRef,\n      mergedThemeRef,\n      checkOptionsRef,\n      mergedSortStateRef,\n      componentId,\n      scrollPartRef,\n      mergedTableLayoutRef,\n      headerCheckboxDisabledRef,\n      handleTableHeaderScroll,\n      deriveNextSorter,\n      doUncheckAll,\n      doCheckAll // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(dataTableInjectionKey);\n\n    function handleCheckboxUpdateChecked() {\n      if (allRowsCheckedRef.value) {\n        doUncheckAll();\n      } else {\n        doCheckAll();\n      }\n    }\n\n    function handleColHeaderClick(e, column) {\n      if (happensIn(e, 'dataTableFilter')) return;\n      if (!isColumnSortable(column)) return;\n      const activeSorter = mergedSortStateRef.value.find(state => state.columnKey === column.key) || null;\n      const nextSorter = createNextSorter(column, activeSorter);\n      deriveNextSorter(nextSorter);\n    }\n\n    function handleMouseenter() {\n      scrollPartRef.value = 'head';\n    }\n\n    return {\n      componentId,\n      mergedSortState: mergedSortStateRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      scrollX: scrollXRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      allRowsChecked: allRowsCheckedRef,\n      someRowsChecked: someRowsCheckedRef,\n      rows: rowsRef,\n      cols: colsRef,\n      mergedTheme: mergedThemeRef,\n      checkOptions: checkOptionsRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      headerCheckboxDisabled: headerCheckboxDisabledRef,\n      handleMouseenter,\n      handleCheckboxUpdateChecked,\n      handleColHeaderClick,\n      handleTableHeaderScroll\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix,\n      fixedColumnLeftMap,\n      fixedColumnRightMap,\n      currentPage,\n      allRowsChecked,\n      someRowsChecked,\n      rows,\n      cols,\n      mergedTheme,\n      checkOptions,\n      componentId,\n      discrete,\n      mergedTableLayout,\n      headerCheckboxDisabled,\n      mergedSortState,\n      handleColHeaderClick,\n      handleCheckboxUpdateChecked\n    } = this;\n    let hasEllipsis = false;\n    const theadVNode = h(\"thead\", {\n      class: `${mergedClsPrefix}-data-table-thead`,\n      \"data-n-id\": componentId\n    }, rows.map(row => {\n      return h(\"tr\", {\n        class: `${mergedClsPrefix}-data-table-tr`\n      }, row.map(({\n        column,\n        colSpan,\n        rowSpan,\n        isLast\n      }) => {\n        var _a, _b;\n\n        const key = getColKey(column);\n        const {\n          ellipsis\n        } = column;\n        if (!hasEllipsis && ellipsis) hasEllipsis = true;\n        const leftFixed = (key in fixedColumnLeftMap);\n        const rightFixed = (key in fixedColumnRightMap);\n        return h(\"th\", {\n          key: key,\n          style: {\n            textAlign: column.align,\n            left: pxfy((_a = fixedColumnLeftMap[key]) === null || _a === void 0 ? void 0 : _a.start),\n            right: pxfy((_b = fixedColumnRightMap[key]) === null || _b === void 0 ? void 0 : _b.start)\n          },\n          colspan: colSpan,\n          rowspan: rowSpan,\n          \"data-col-key\": key,\n          class: [`${mergedClsPrefix}-data-table-th`, (leftFixed || rightFixed) && `${mergedClsPrefix}-data-table-th--fixed-${leftFixed ? 'left' : 'right'}`, {\n            [`${mergedClsPrefix}-data-table-th--hover`]: isColumnSorting(column, mergedSortState),\n            [`${mergedClsPrefix}-data-table-th--filterable`]: isColumnFilterable(column),\n            [`${mergedClsPrefix}-data-table-th--sortable`]: isColumnSortable(column),\n            [`${mergedClsPrefix}-data-table-th--selection`]: column.type === 'selection',\n            [`${mergedClsPrefix}-data-table-th--last`]: isLast\n          }, column.className],\n          onClick: column.type !== 'selection' && column.type !== 'expand' && !('children' in column) ? e => {\n            handleColHeaderClick(e, column);\n          } : undefined\n        }, column.type === 'selection' ? h(Fragment, null, h(NCheckbox, {\n          key: currentPage,\n          privateInsideTable: true,\n          checked: allRowsChecked,\n          indeterminate: someRowsChecked,\n          disabled: headerCheckboxDisabled,\n          onUpdateChecked: handleCheckboxUpdateChecked\n        }), checkOptions ? h(SelectionMenu, {\n          clsPrefix: mergedClsPrefix\n        }) : null) : ellipsis === true || ellipsis && !ellipsis.tooltip ? h(\"div\", {\n          class: `${mergedClsPrefix}-data-table-th__ellipsis`\n        }, renderTitle(column)) // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        : ellipsis && typeof ellipsis === 'object' ? h(NEllipsis, Object.assign({}, ellipsis, {\n          theme: mergedTheme.peers.Ellipsis,\n          themeOverrides: mergedTheme.peerOverrides.Ellipsis\n        }), {\n          default: () => renderTitle(column)\n        }) : renderTitle(column), isColumnSortable(column) ? h(SortButton, {\n          column: column\n        }) : null, isColumnFilterable(column) ? h(FilterButton, {\n          column: column,\n          options: column.filterOptions\n        }) : null);\n      }));\n    }));\n\n    if (!discrete) {\n      return theadVNode;\n    }\n\n    const {\n      handleTableHeaderScroll,\n      handleMouseenter,\n      scrollX\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-base-table-header`,\n      onScroll: handleTableHeaderScroll,\n      onMouseenter: handleMouseenter\n    }, h(\"table\", {\n      ref: \"body\",\n      class: `${mergedClsPrefix}-data-table-table`,\n      style: {\n        minWidth: formatLength(scrollX),\n        tableLayout: mergedTableLayout\n      }\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), theadVNode));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/TableParts/Header.js"],"names":["h","defineComponent","inject","Fragment","happensIn","pxfy","formatLength","NCheckbox","NEllipsis","SortButton","FilterButton","isColumnSortable","isColumnFilterable","createNextSorter","getColKey","isColumnSorting","dataTableInjectionKey","SelectionMenu","renderTitle","column","title","name","props","discrete","type","Boolean","default","setup","mergedClsPrefixRef","scrollXRef","fixedColumnLeftMapRef","fixedColumnRightMapRef","mergedCurrentPageRef","allRowsCheckedRef","someRowsCheckedRef","rowsRef","colsRef","mergedThemeRef","checkOptionsRef","mergedSortStateRef","componentId","scrollPartRef","mergedTableLayoutRef","headerCheckboxDisabledRef","handleTableHeaderScroll","deriveNextSorter","doUncheckAll","doCheckAll","handleCheckboxUpdateChecked","value","handleColHeaderClick","e","activeSorter","find","state","columnKey","key","nextSorter","handleMouseenter","mergedSortState","mergedClsPrefix","scrollX","fixedColumnLeftMap","fixedColumnRightMap","currentPage","allRowsChecked","someRowsChecked","rows","cols","mergedTheme","checkOptions","mergedTableLayout","headerCheckboxDisabled","render","hasEllipsis","theadVNode","class","map","row","colSpan","rowSpan","isLast","_a","_b","ellipsis","leftFixed","rightFixed","style","textAlign","align","left","start","right","colspan","rowspan","className","onClick","undefined","privateInsideTable","checked","indeterminate","disabled","onUpdateChecked","clsPrefix","tooltip","Object","assign","theme","peers","Ellipsis","themeOverrides","peerOverrides","options","filterOptions","onScroll","onMouseenter","ref","minWidth","tableLayout","col"],"mappings":"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","sourcesContent":["import { h, defineComponent, inject, Fragment } from 'vue';\nimport { happensIn, pxfy } from 'seemly';\nimport { formatLength } from '../../../_utils';\nimport { NCheckbox } from '../../../checkbox';\nimport { NEllipsis } from '../../../ellipsis';\nimport SortButton from '../HeaderButton/SortButton';\nimport FilterButton from '../HeaderButton/FilterButton';\nimport { isColumnSortable, isColumnFilterable, createNextSorter, getColKey, isColumnSorting } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nimport SelectionMenu from './SelectionMenu';\nfunction renderTitle(column) {\n    return typeof column.title === 'function'\n        ? column.title(column)\n        : column.title;\n}\nexport default defineComponent({\n    name: 'DataTableHeader',\n    props: {\n        discrete: {\n            type: Boolean,\n            default: true\n        }\n    },\n    setup() {\n        const { mergedClsPrefixRef, scrollXRef, fixedColumnLeftMapRef, fixedColumnRightMapRef, mergedCurrentPageRef, allRowsCheckedRef, someRowsCheckedRef, rowsRef, colsRef, mergedThemeRef, checkOptionsRef, mergedSortStateRef, componentId, scrollPartRef, mergedTableLayoutRef, headerCheckboxDisabledRef, handleTableHeaderScroll, deriveNextSorter, doUncheckAll, doCheckAll\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        function handleCheckboxUpdateChecked() {\n            if (allRowsCheckedRef.value) {\n                doUncheckAll();\n            }\n            else {\n                doCheckAll();\n            }\n        }\n        function handleColHeaderClick(e, column) {\n            if (happensIn(e, 'dataTableFilter'))\n                return;\n            if (!isColumnSortable(column))\n                return;\n            const activeSorter = mergedSortStateRef.value.find((state) => state.columnKey === column.key) || null;\n            const nextSorter = createNextSorter(column, activeSorter);\n            deriveNextSorter(nextSorter);\n        }\n        function handleMouseenter() {\n            scrollPartRef.value = 'head';\n        }\n        return {\n            componentId,\n            mergedSortState: mergedSortStateRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            scrollX: scrollXRef,\n            fixedColumnLeftMap: fixedColumnLeftMapRef,\n            fixedColumnRightMap: fixedColumnRightMapRef,\n            currentPage: mergedCurrentPageRef,\n            allRowsChecked: allRowsCheckedRef,\n            someRowsChecked: someRowsCheckedRef,\n            rows: rowsRef,\n            cols: colsRef,\n            mergedTheme: mergedThemeRef,\n            checkOptions: checkOptionsRef,\n            mergedTableLayout: mergedTableLayoutRef,\n            headerCheckboxDisabled: headerCheckboxDisabledRef,\n            handleMouseenter,\n            handleCheckboxUpdateChecked,\n            handleColHeaderClick,\n            handleTableHeaderScroll\n        };\n    },\n    render() {\n        const { mergedClsPrefix, fixedColumnLeftMap, fixedColumnRightMap, currentPage, allRowsChecked, someRowsChecked, rows, cols, mergedTheme, checkOptions, componentId, discrete, mergedTableLayout, headerCheckboxDisabled, mergedSortState, handleColHeaderClick, handleCheckboxUpdateChecked } = this;\n        let hasEllipsis = false;\n        const theadVNode = (h(\"thead\", { class: `${mergedClsPrefix}-data-table-thead`, \"data-n-id\": componentId }, rows.map((row) => {\n            return (h(\"tr\", { class: `${mergedClsPrefix}-data-table-tr` }, row.map(({ column, colSpan, rowSpan, isLast }) => {\n                var _a, _b;\n                const key = getColKey(column);\n                const { ellipsis } = column;\n                if (!hasEllipsis && ellipsis)\n                    hasEllipsis = true;\n                const leftFixed = key in fixedColumnLeftMap;\n                const rightFixed = key in fixedColumnRightMap;\n                return (h(\"th\", { key: key, style: {\n                        textAlign: column.align,\n                        left: pxfy((_a = fixedColumnLeftMap[key]) === null || _a === void 0 ? void 0 : _a.start),\n                        right: pxfy((_b = fixedColumnRightMap[key]) === null || _b === void 0 ? void 0 : _b.start)\n                    }, colspan: colSpan, rowspan: rowSpan, \"data-col-key\": key, class: [\n                        `${mergedClsPrefix}-data-table-th`,\n                        (leftFixed || rightFixed) &&\n                            `${mergedClsPrefix}-data-table-th--fixed-${leftFixed ? 'left' : 'right'}`,\n                        {\n                            [`${mergedClsPrefix}-data-table-th--hover`]: isColumnSorting(column, mergedSortState),\n                            [`${mergedClsPrefix}-data-table-th--filterable`]: isColumnFilterable(column),\n                            [`${mergedClsPrefix}-data-table-th--sortable`]: isColumnSortable(column),\n                            [`${mergedClsPrefix}-data-table-th--selection`]: column.type === 'selection',\n                            [`${mergedClsPrefix}-data-table-th--last`]: isLast\n                        },\n                        column.className\n                    ], onClick: column.type !== 'selection' &&\n                        column.type !== 'expand' &&\n                        !('children' in column)\n                        ? (e) => {\n                            handleColHeaderClick(e, column);\n                        }\n                        : undefined },\n                    column.type === 'selection' ? (h(Fragment, null,\n                        h(NCheckbox, { key: currentPage, privateInsideTable: true, checked: allRowsChecked, indeterminate: someRowsChecked, disabled: headerCheckboxDisabled, onUpdateChecked: handleCheckboxUpdateChecked }),\n                        checkOptions ? (h(SelectionMenu, { clsPrefix: mergedClsPrefix })) : null)) : ellipsis === true || (ellipsis && !ellipsis.tooltip) ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-th__ellipsis` }, renderTitle(column))) // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                        : ellipsis && typeof ellipsis === 'object' ? (h(NEllipsis, Object.assign({}, ellipsis, { theme: mergedTheme.peers.Ellipsis, themeOverrides: mergedTheme.peerOverrides.Ellipsis }), {\n                            default: () => renderTitle(column)\n                        })) : (renderTitle(column)),\n                    isColumnSortable(column) ? (h(SortButton, { column: column })) : null,\n                    isColumnFilterable(column) ? (h(FilterButton, { column: column, options: column.filterOptions })) : null));\n            })));\n        })));\n        if (!discrete) {\n            return theadVNode;\n        }\n        const { handleTableHeaderScroll, handleMouseenter, scrollX } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-data-table-base-table-header`, onScroll: handleTableHeaderScroll, onMouseenter: handleMouseenter },\n            h(\"table\", { ref: \"body\", class: `${mergedClsPrefix}-data-table-table`, style: {\n                    minWidth: formatLength(scrollX),\n                    tableLayout: mergedTableLayout\n                } },\n                h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n                theadVNode)));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}