{"ast":null,"code":"export function flatten(treeNodes, expandedKeys) {\n  const expandedKeySet = expandedKeys ? new Set(expandedKeys) : undefined;\n  const flattenedNodes = [];\n\n  function traverse(treeNodes) {\n    treeNodes.forEach(treeNode => {\n      flattenedNodes.push(treeNode);\n      if (treeNode.isLeaf || !treeNode.children || treeNode.ignored) return;\n\n      if (treeNode.isGroup) {\n        // group node shouldn't be expanded\n        traverse(treeNode.children);\n      } else if ( // normal non-leaf node\n      expandedKeySet === undefined || expandedKeySet.has(treeNode.key)) {\n        traverse(treeNode.children);\n      }\n    });\n  }\n\n  traverse(treeNodes);\n  return flattenedNodes;\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/treemate/es/flatten.js"],"names":["flatten","treeNodes","expandedKeys","expandedKeySet","Set","undefined","flattenedNodes","traverse","forEach","treeNode","push","isLeaf","children","ignored","isGroup","has","key"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,SAAjB,EAA4BC,YAA5B,EAA0C;AAC7C,QAAMC,cAAc,GAAGD,YAAY,GAAG,IAAIE,GAAJ,CAAQF,YAAR,CAAH,GAA2BG,SAA9D;AACA,QAAMC,cAAc,GAAG,EAAvB;;AACA,WAASC,QAAT,CAAkBN,SAAlB,EAA6B;AACzBA,IAAAA,SAAS,CAACO,OAAV,CAAmBC,QAAD,IAAc;AAC5BH,MAAAA,cAAc,CAACI,IAAf,CAAoBD,QAApB;AACA,UAAIA,QAAQ,CAACE,MAAT,IAAmB,CAACF,QAAQ,CAACG,QAA7B,IAAyCH,QAAQ,CAACI,OAAtD,EACI;;AACJ,UAAIJ,QAAQ,CAACK,OAAb,EAAsB;AAClB;AACAP,QAAAA,QAAQ,CAACE,QAAQ,CAACG,QAAV,CAAR;AACH,OAHD,MAIK,KACL;AACAT,MAAAA,cAAc,KAAKE,SAAnB,IACIF,cAAc,CAACY,GAAf,CAAmBN,QAAQ,CAACO,GAA5B,CAHC,EAGiC;AAClCT,QAAAA,QAAQ,CAACE,QAAQ,CAACG,QAAV,CAAR;AACH;AACJ,KAdD;AAeH;;AACDL,EAAAA,QAAQ,CAACN,SAAD,CAAR;AACA,SAAOK,cAAP;AACH","sourcesContent":["export function flatten(treeNodes, expandedKeys) {\n    const expandedKeySet = expandedKeys ? new Set(expandedKeys) : undefined;\n    const flattenedNodes = [];\n    function traverse(treeNodes) {\n        treeNodes.forEach((treeNode) => {\n            flattenedNodes.push(treeNode);\n            if (treeNode.isLeaf || !treeNode.children || treeNode.ignored)\n                return;\n            if (treeNode.isGroup) {\n                // group node shouldn't be expanded\n                traverse(treeNode.children);\n            }\n            else if (\n            // normal non-leaf node\n            expandedKeySet === undefined ||\n                expandedKeySet.has(treeNode.key)) {\n                traverse(treeNode.children);\n            }\n        });\n    }\n    traverse(treeNodes);\n    return flattenedNodes;\n}\n"]},"metadata":{},"sourceType":"module"}