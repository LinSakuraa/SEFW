{"ast":null,"code":"// use absolute path to make sure no circular ref of style\n// this -> modal-index -> modal-style\nimport { h, defineComponent, ref } from 'vue';\nimport NModal from '../../modal/src/Modal';\nimport { keep } from '../../_utils';\nimport { NDialog } from './Dialog';\nimport { dialogProps, dialogPropKeys } from './dialogProps';\nexport const exposedDialogEnvProps = Object.assign(Object.assign({}, dialogProps), {\n  closeOnEsc: {\n    type: Boolean,\n    default: true\n  },\n  internalStyle: [String, Object],\n  maskClosable: {\n    type: Boolean,\n    default: true\n  },\n  onPositiveClick: Function,\n  onNegativeClick: Function,\n  onClose: Function,\n  onMaskClick: Function\n});\nexport const NDialogEnvironment = defineComponent({\n  name: 'DialogEnvironment',\n  props: Object.assign(Object.assign({}, exposedDialogEnvProps), {\n    internalKey: {\n      type: String,\n      required: true\n    },\n    to: [String, Object],\n    // private\n    onInternalAfterLeave: {\n      type: Function,\n      required: true\n    }\n  }),\n\n  setup(props) {\n    const showRef = ref(true);\n\n    function handleAfterLeave() {\n      props.onInternalAfterLeave(props.internalKey);\n    }\n\n    function handlePositiveClick(e) {\n      const {\n        onPositiveClick\n      } = props;\n\n      if (onPositiveClick) {\n        void Promise.resolve(onPositiveClick(e)).then(result => {\n          if (result === false) return;\n          hide();\n        });\n      } else {\n        hide();\n      }\n    }\n\n    function handleNegativeClick(e) {\n      const {\n        onNegativeClick\n      } = props;\n\n      if (onNegativeClick) {\n        void Promise.resolve(onNegativeClick(e)).then(result => {\n          if (result === false) return;\n          hide();\n        });\n      } else {\n        hide();\n      }\n    }\n\n    function handleCloseClick() {\n      const {\n        onClose\n      } = props;\n\n      if (onClose) {\n        void Promise.resolve(onClose()).then(result => {\n          if (result === false) return;\n          hide();\n        });\n      } else {\n        hide();\n      }\n    }\n\n    function handleMaskClick(e) {\n      const {\n        onMaskClick,\n        maskClosable\n      } = props;\n\n      if (onMaskClick) {\n        onMaskClick(e);\n        maskClosable && hide();\n      }\n    }\n\n    function hide() {\n      showRef.value = false;\n    }\n\n    function handleUpdateShow(value) {\n      showRef.value = value;\n    }\n\n    return {\n      show: showRef,\n      hide,\n      handleUpdateShow,\n      handleAfterLeave,\n      handleCloseClick,\n      handleNegativeClick,\n      handlePositiveClick,\n      handleMaskClick\n    };\n  },\n\n  render() {\n    const {\n      handlePositiveClick,\n      handleUpdateShow,\n      handleNegativeClick,\n      handleCloseClick,\n      handleAfterLeave,\n      handleMaskClick,\n      to,\n      maskClosable,\n      show\n    } = this;\n    return h(NModal, {\n      show: show,\n      onUpdateShow: handleUpdateShow,\n      onMaskClick: handleMaskClick,\n      to: to,\n      maskClosable: maskClosable,\n      onAfterLeave: handleAfterLeave,\n      closeOnEsc: this.closeOnEsc,\n      internalAppear: true,\n      internalDialog: true\n    }, {\n      default: () => h(NDialog, Object.assign({}, keep(this.$props, dialogPropKeys), {\n        style: this.internalStyle,\n        onClose: handleCloseClick,\n        onNegativeClick: handleNegativeClick,\n        onPositiveClick: handlePositiveClick\n      }))\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/dialog/src/DialogEnvironment.js"],"names":["h","defineComponent","ref","NModal","keep","NDialog","dialogProps","dialogPropKeys","exposedDialogEnvProps","Object","assign","closeOnEsc","type","Boolean","default","internalStyle","String","maskClosable","onPositiveClick","Function","onNegativeClick","onClose","onMaskClick","NDialogEnvironment","name","props","internalKey","required","to","onInternalAfterLeave","setup","showRef","handleAfterLeave","handlePositiveClick","e","Promise","resolve","then","result","hide","handleNegativeClick","handleCloseClick","handleMaskClick","value","handleUpdateShow","show","render","onUpdateShow","onAfterLeave","internalAppear","internalDialog","$props","style"],"mappings":"AAAA;AACA;AACA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,GAA7B,QAAwC,KAAxC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,eAA5C;AACA,OAAO,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,WAAlB,CAAd,EAA8C;AAAEK,EAAAA,UAAU,EAAE;AAAEC,IAAAA,IAAI,EAAEC,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAAd;AAAgDC,EAAAA,aAAa,EAAE,CAACC,MAAD,EAASP,MAAT,CAA/D;AAAiFQ,EAAAA,YAAY,EAAE;AAC1KL,IAAAA,IAAI,EAAEC,OADoK;AAE1KC,IAAAA,OAAO,EAAE;AAFiK,GAA/F;AAG5EI,EAAAA,eAAe,EAAEC,QAH2D;AAGjDC,EAAAA,eAAe,EAAED,QAHgC;AAGtBE,EAAAA,OAAO,EAAEF,QAHa;AAGHG,EAAAA,WAAW,EAAEH;AAHV,CAA9C,CAA9B;AAIP,OAAO,MAAMI,kBAAkB,GAAGtB,eAAe,CAAC;AAC9CuB,EAAAA,IAAI,EAAE,mBADwC;AAE9CC,EAAAA,KAAK,EAAEhB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,qBAAlB,CAAd,EAAwD;AAAEkB,IAAAA,WAAW,EAAE;AACtEd,MAAAA,IAAI,EAAEI,MADgE;AAEtEW,MAAAA,QAAQ,EAAE;AAF4D,KAAf;AAGxDC,IAAAA,EAAE,EAAE,CAACZ,MAAD,EAASP,MAAT,CAHoD;AAI3D;AACAoB,IAAAA,oBAAoB,EAAE;AAClBjB,MAAAA,IAAI,EAAEO,QADY;AAElBQ,MAAAA,QAAQ,EAAE;AAFQ;AALqC,GAAxD,CAFuC;;AAW9CG,EAAAA,KAAK,CAACL,KAAD,EAAQ;AACT,UAAMM,OAAO,GAAG7B,GAAG,CAAC,IAAD,CAAnB;;AACA,aAAS8B,gBAAT,GAA4B;AACxBP,MAAAA,KAAK,CAACI,oBAAN,CAA2BJ,KAAK,CAACC,WAAjC;AACH;;AACD,aAASO,mBAAT,CAA6BC,CAA7B,EAAgC;AAC5B,YAAM;AAAEhB,QAAAA;AAAF,UAAsBO,KAA5B;;AACA,UAAIP,eAAJ,EAAqB;AACjB,aAAKiB,OAAO,CAACC,OAAR,CAAgBlB,eAAe,CAACgB,CAAD,CAA/B,EAAoCG,IAApC,CAA0CC,MAAD,IAAY;AACtD,cAAIA,MAAM,KAAK,KAAf,EACI;AACJC,UAAAA,IAAI;AACP,SAJI,CAAL;AAKH,OAND,MAOK;AACDA,QAAAA,IAAI;AACP;AACJ;;AACD,aAASC,mBAAT,CAA6BN,CAA7B,EAAgC;AAC5B,YAAM;AAAEd,QAAAA;AAAF,UAAsBK,KAA5B;;AACA,UAAIL,eAAJ,EAAqB;AACjB,aAAKe,OAAO,CAACC,OAAR,CAAgBhB,eAAe,CAACc,CAAD,CAA/B,EAAoCG,IAApC,CAA0CC,MAAD,IAAY;AACtD,cAAIA,MAAM,KAAK,KAAf,EACI;AACJC,UAAAA,IAAI;AACP,SAJI,CAAL;AAKH,OAND,MAOK;AACDA,QAAAA,IAAI;AACP;AACJ;;AACD,aAASE,gBAAT,GAA4B;AACxB,YAAM;AAAEpB,QAAAA;AAAF,UAAcI,KAApB;;AACA,UAAIJ,OAAJ,EAAa;AACT,aAAKc,OAAO,CAACC,OAAR,CAAgBf,OAAO,EAAvB,EAA2BgB,IAA3B,CAAiCC,MAAD,IAAY;AAC7C,cAAIA,MAAM,KAAK,KAAf,EACI;AACJC,UAAAA,IAAI;AACP,SAJI,CAAL;AAKH,OAND,MAOK;AACDA,QAAAA,IAAI;AACP;AACJ;;AACD,aAASG,eAAT,CAAyBR,CAAzB,EAA4B;AACxB,YAAM;AAAEZ,QAAAA,WAAF;AAAeL,QAAAA;AAAf,UAAgCQ,KAAtC;;AACA,UAAIH,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACY,CAAD,CAAX;AACAjB,QAAAA,YAAY,IAAIsB,IAAI,EAApB;AACH;AACJ;;AACD,aAASA,IAAT,GAAgB;AACZR,MAAAA,OAAO,CAACY,KAAR,GAAgB,KAAhB;AACH;;AACD,aAASC,gBAAT,CAA0BD,KAA1B,EAAiC;AAC7BZ,MAAAA,OAAO,CAACY,KAAR,GAAgBA,KAAhB;AACH;;AACD,WAAO;AACHE,MAAAA,IAAI,EAAEd,OADH;AAEHQ,MAAAA,IAFG;AAGHK,MAAAA,gBAHG;AAIHZ,MAAAA,gBAJG;AAKHS,MAAAA,gBALG;AAMHD,MAAAA,mBANG;AAOHP,MAAAA,mBAPG;AAQHS,MAAAA;AARG,KAAP;AAUH,GA9E6C;;AA+E9CI,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEb,MAAAA,mBAAF;AAAuBW,MAAAA,gBAAvB;AAAyCJ,MAAAA,mBAAzC;AAA8DC,MAAAA,gBAA9D;AAAgFT,MAAAA,gBAAhF;AAAkGU,MAAAA,eAAlG;AAAmHd,MAAAA,EAAnH;AAAuHX,MAAAA,YAAvH;AAAqI4B,MAAAA;AAArI,QAA8I,IAApJ;AACA,WAAQ7C,CAAC,CAACG,MAAD,EAAS;AAAE0C,MAAAA,IAAI,EAAEA,IAAR;AAAcE,MAAAA,YAAY,EAAEH,gBAA5B;AAA8CtB,MAAAA,WAAW,EAAEoB,eAA3D;AAA4Ed,MAAAA,EAAE,EAAEA,EAAhF;AAAoFX,MAAAA,YAAY,EAAEA,YAAlG;AAAgH+B,MAAAA,YAAY,EAAEhB,gBAA9H;AAAgJrB,MAAAA,UAAU,EAAE,KAAKA,UAAjK;AAA6KsC,MAAAA,cAAc,EAAE,IAA7L;AAAmMC,MAAAA,cAAc,EAAE;AAAnN,KAAT,EAAoO;AACzOpC,MAAAA,OAAO,EAAE,MAAOd,CAAC,CAACK,OAAD,EAAUI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAI,CAAC,KAAK+C,MAAN,EAAc5C,cAAd,CAAtB,EAAqD;AAAE6C,QAAAA,KAAK,EAAE,KAAKrC,aAAd;AAA6BM,QAAAA,OAAO,EAAEoB,gBAAtC;AAAwDrB,QAAAA,eAAe,EAAEoB,mBAAzE;AAA8FtB,QAAAA,eAAe,EAAEe;AAA/G,OAArD,CAAV;AADwN,KAApO,CAAT;AAGH;;AApF6C,CAAD,CAA1C","sourcesContent":["// use absolute path to make sure no circular ref of style\n// this -> modal-index -> modal-style\nimport { h, defineComponent, ref } from 'vue';\nimport NModal from '../../modal/src/Modal';\nimport { keep } from '../../_utils';\nimport { NDialog } from './Dialog';\nimport { dialogProps, dialogPropKeys } from './dialogProps';\nexport const exposedDialogEnvProps = Object.assign(Object.assign({}, dialogProps), { closeOnEsc: { type: Boolean, default: true }, internalStyle: [String, Object], maskClosable: {\n        type: Boolean,\n        default: true\n    }, onPositiveClick: Function, onNegativeClick: Function, onClose: Function, onMaskClick: Function });\nexport const NDialogEnvironment = defineComponent({\n    name: 'DialogEnvironment',\n    props: Object.assign(Object.assign({}, exposedDialogEnvProps), { internalKey: {\n            type: String,\n            required: true\n        }, to: [String, Object], \n        // private\n        onInternalAfterLeave: {\n            type: Function,\n            required: true\n        } }),\n    setup(props) {\n        const showRef = ref(true);\n        function handleAfterLeave() {\n            props.onInternalAfterLeave(props.internalKey);\n        }\n        function handlePositiveClick(e) {\n            const { onPositiveClick } = props;\n            if (onPositiveClick) {\n                void Promise.resolve(onPositiveClick(e)).then((result) => {\n                    if (result === false)\n                        return;\n                    hide();\n                });\n            }\n            else {\n                hide();\n            }\n        }\n        function handleNegativeClick(e) {\n            const { onNegativeClick } = props;\n            if (onNegativeClick) {\n                void Promise.resolve(onNegativeClick(e)).then((result) => {\n                    if (result === false)\n                        return;\n                    hide();\n                });\n            }\n            else {\n                hide();\n            }\n        }\n        function handleCloseClick() {\n            const { onClose } = props;\n            if (onClose) {\n                void Promise.resolve(onClose()).then((result) => {\n                    if (result === false)\n                        return;\n                    hide();\n                });\n            }\n            else {\n                hide();\n            }\n        }\n        function handleMaskClick(e) {\n            const { onMaskClick, maskClosable } = props;\n            if (onMaskClick) {\n                onMaskClick(e);\n                maskClosable && hide();\n            }\n        }\n        function hide() {\n            showRef.value = false;\n        }\n        function handleUpdateShow(value) {\n            showRef.value = value;\n        }\n        return {\n            show: showRef,\n            hide,\n            handleUpdateShow,\n            handleAfterLeave,\n            handleCloseClick,\n            handleNegativeClick,\n            handlePositiveClick,\n            handleMaskClick\n        };\n    },\n    render() {\n        const { handlePositiveClick, handleUpdateShow, handleNegativeClick, handleCloseClick, handleAfterLeave, handleMaskClick, to, maskClosable, show } = this;\n        return (h(NModal, { show: show, onUpdateShow: handleUpdateShow, onMaskClick: handleMaskClick, to: to, maskClosable: maskClosable, onAfterLeave: handleAfterLeave, closeOnEsc: this.closeOnEsc, internalAppear: true, internalDialog: true }, {\n            default: () => (h(NDialog, Object.assign({}, keep(this.$props, dialogPropKeys), { style: this.internalStyle, onClose: handleCloseClick, onNegativeClick: handleNegativeClick, onPositiveClick: handlePositiveClick })))\n        }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}