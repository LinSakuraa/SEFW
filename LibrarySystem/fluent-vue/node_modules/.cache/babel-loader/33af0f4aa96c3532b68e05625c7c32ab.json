{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keyEnter, keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedSwitch } from \"./switch.form-associated\";\n/**\n * A Switch Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.\n *\n * @public\n */\n\nexport class Switch extends FormAssociatedSwitch {\n  constructor() {\n    super();\n    /**\n     * The element's value to be included in form submission when checked.\n     * Default to \"on\" to reach parity with input[type=\"checkbox\"]\n     *\n     * @internal\n     */\n\n    this.initialValue = \"on\";\n    /**\n     * @internal\n     */\n\n    this.keypressHandler = e => {\n      switch (e.key) {\n        case keyEnter:\n        case keySpace:\n          this.checked = !this.checked;\n          break;\n      }\n    };\n    /**\n     * @internal\n     */\n\n\n    this.clickHandler = e => {\n      if (!this.disabled && !this.readOnly) {\n        this.checked = !this.checked;\n      }\n    };\n\n    this.proxy.setAttribute(\"type\", \"checkbox\");\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.readOnly = this.readOnly;\n    }\n\n    this.readOnly ? this.classList.add(\"readonly\") : this.classList.remove(\"readonly\");\n  }\n  /**\n   * @internal\n   */\n\n\n  checkedChanged(prev, next) {\n    super.checkedChanged(prev, next);\n    /**\n     * @deprecated - this behavior already exists in the template and should not exist in the class.\n     */\n\n    this.checked ? this.classList.add(\"checked\") : this.classList.remove(\"checked\");\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], Switch.prototype, \"readOnly\", void 0);\n\n__decorate([observable], Switch.prototype, \"defaultSlottedNodes\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/switch/switch.js"],"names":["__decorate","attr","observable","keyEnter","keySpace","FormAssociatedSwitch","Switch","constructor","initialValue","keypressHandler","e","key","checked","clickHandler","disabled","readOnly","proxy","setAttribute","readOnlyChanged","HTMLInputElement","classList","add","remove","checkedChanged","prev","next","attribute","mode","prototype"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,yBAAjC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,+BAAnC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAN,SAAqBD,oBAArB,CAA0C;AAC7CE,EAAAA,WAAW,GAAG;AACV;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoB,IAApB;AACA;AACR;AACA;;AACQ,SAAKC,eAAL,GAAwBC,CAAD,IAAO;AAC1B,cAAQA,CAAC,CAACC,GAAV;AACI,aAAKR,QAAL;AACA,aAAKC,QAAL;AACI,eAAKQ,OAAL,GAAe,CAAC,KAAKA,OAArB;AACA;AAJR;AAMH,KAPD;AAQA;AACR;AACA;;;AACQ,SAAKC,YAAL,GAAqBH,CAAD,IAAO;AACvB,UAAI,CAAC,KAAKI,QAAN,IAAkB,CAAC,KAAKC,QAA5B,EAAsC;AAClC,aAAKH,OAAL,GAAe,CAAC,KAAKA,OAArB;AACH;AACJ,KAJD;;AAKA,SAAKI,KAAL,CAAWC,YAAX,CAAwB,MAAxB,EAAgC,UAAhC;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKF,KAAL,YAAsBG,gBAA1B,EAA4C;AACxC,WAAKH,KAAL,CAAWD,QAAX,GAAsB,KAAKA,QAA3B;AACH;;AACD,SAAKA,QAAL,GACM,KAAKK,SAAL,CAAeC,GAAf,CAAmB,UAAnB,CADN,GAEM,KAAKD,SAAL,CAAeE,MAAf,CAAsB,UAAtB,CAFN;AAGH;AACD;AACJ;AACA;;;AACIC,EAAAA,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAa;AACvB,UAAMF,cAAN,CAAqBC,IAArB,EAA2BC,IAA3B;AACA;AACR;AACA;;AACQ,SAAKb,OAAL,GAAe,KAAKQ,SAAL,CAAeC,GAAf,CAAmB,SAAnB,CAAf,GAA+C,KAAKD,SAAL,CAAeE,MAAf,CAAsB,SAAtB,CAA/C;AACH;;AAhD4C;;AAkDjDtB,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEyB,EAAAA,SAAS,EAAE,UAAb;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CAAD,CADG,CAAD,EAEPrB,MAAM,CAACsB,SAFA,EAEW,UAFX,EAEuB,KAAK,CAF5B,CAAV;;AAGA5B,UAAU,CAAC,CACPE,UADO,CAAD,EAEPI,MAAM,CAACsB,SAFA,EAEW,qBAFX,EAEkC,KAAK,CAFvC,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keyEnter, keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedSwitch } from \"./switch.form-associated\";\n/**\n * A Switch Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.\n *\n * @public\n */\nexport class Switch extends FormAssociatedSwitch {\n    constructor() {\n        super();\n        /**\n         * The element's value to be included in form submission when checked.\n         * Default to \"on\" to reach parity with input[type=\"checkbox\"]\n         *\n         * @internal\n         */\n        this.initialValue = \"on\";\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            switch (e.key) {\n                case keyEnter:\n                case keySpace:\n                    this.checked = !this.checked;\n                    break;\n            }\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            if (!this.disabled && !this.readOnly) {\n                this.checked = !this.checked;\n            }\n        };\n        this.proxy.setAttribute(\"type\", \"checkbox\");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n        this.readOnly\n            ? this.classList.add(\"readonly\")\n            : this.classList.remove(\"readonly\");\n    }\n    /**\n     * @internal\n     */\n    checkedChanged(prev, next) {\n        super.checkedChanged(prev, next);\n        /**\n         * @deprecated - this behavior already exists in the template and should not exist in the class.\n         */\n        this.checked ? this.classList.add(\"checked\") : this.classList.remove(\"checked\");\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], Switch.prototype, \"readOnly\", void 0);\n__decorate([\n    observable\n], Switch.prototype, \"defaultSlottedNodes\", void 0);\n"]},"metadata":{},"sourceType":"module"}