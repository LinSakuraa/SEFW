{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, html, observable } from \"@microsoft/fast-element\";\nimport { eventFocusIn, eventFocusOut, eventKeyDown, keyEnter, keyEscape, keyFunction2 } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DataGridCellTypes } from \"./data-grid.options\";\nexport { DataGridCellTypes };\nconst defaultCellContentsTemplate = html`\n    <template>\n        ${x => x.rowData === null || x.columnDefinition === null || x.columnDefinition.columnDataKey === null ? null : x.rowData[x.columnDefinition.columnDataKey]}\n    </template>\n`;\nconst defaultHeaderCellContentsTemplate = html`\n    <template>\n        ${x => x.columnDefinition === null ? null : x.columnDefinition.title === undefined ? x.columnDefinition.columnDataKey : x.columnDefinition.title}\n    </template>\n`;\n/**\n * A Data Grid Cell Custom HTML Element.\n *\n * @public\n */\n\nexport class DataGridCell extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * The type of cell\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: cell-type\n     */\n\n    this.cellType = DataGridCellTypes.default;\n    /**\n     * The base data for the parent row\n     *\n     * @public\n     */\n\n    this.rowData = null;\n    /**\n     * The base data for the column\n     *\n     * @public\n     */\n\n    this.columnDefinition = null;\n    this.isActiveCell = false;\n    this.customCellView = null;\n\n    this.updateCellStyle = () => {\n      this.style.gridColumn = this.gridColumn;\n    };\n  }\n\n  cellTypeChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateCellView();\n    }\n  }\n\n  gridColumnChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateCellStyle();\n    }\n  }\n\n  columnDefinitionChanged(oldValue, newValue) {\n    if (this.$fastController.isConnected) {\n      this.updateCellView();\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    var _a;\n\n    super.connectedCallback();\n    this.addEventListener(eventFocusIn, this.handleFocusin);\n    this.addEventListener(eventFocusOut, this.handleFocusout);\n    this.addEventListener(eventKeyDown, this.handleKeydown);\n    this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === undefined ? 0 : this.columnDefinition.gridColumn}`;\n    this.updateCellView();\n    this.updateCellStyle();\n  }\n  /**\n   * @internal\n   */\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(eventFocusIn, this.handleFocusin);\n    this.removeEventListener(eventFocusOut, this.handleFocusout);\n    this.removeEventListener(eventKeyDown, this.handleKeydown);\n    this.disconnectCellView();\n  }\n\n  handleFocusin(e) {\n    if (this.isActiveCell) {\n      return;\n    }\n\n    this.isActiveCell = true;\n\n    switch (this.cellType) {\n      case DataGridCellTypes.columnHeader:\n        if (this.columnDefinition !== null && this.columnDefinition.headerCellInternalFocusQueue !== true && typeof this.columnDefinition.headerCellFocusTargetCallback === \"function\") {\n          // move focus to the focus target\n          const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n\n          if (focusTarget !== null) {\n            focusTarget.focus();\n          }\n        }\n\n        break;\n\n      default:\n        if (this.columnDefinition !== null && this.columnDefinition.cellInternalFocusQueue !== true && typeof this.columnDefinition.cellFocusTargetCallback === \"function\") {\n          // move focus to the focus target\n          const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n\n          if (focusTarget !== null) {\n            focusTarget.focus();\n          }\n        }\n\n        break;\n    }\n\n    this.$emit(\"cell-focused\", this);\n  }\n\n  handleFocusout(e) {\n    if (this !== document.activeElement && !this.contains(document.activeElement)) {\n      this.isActiveCell = false;\n    }\n  }\n\n  handleKeydown(e) {\n    if (e.defaultPrevented || this.columnDefinition === null || this.cellType === DataGridCellTypes.default && this.columnDefinition.cellInternalFocusQueue !== true || this.cellType === DataGridCellTypes.columnHeader && this.columnDefinition.headerCellInternalFocusQueue !== true) {\n      return;\n    }\n\n    switch (e.key) {\n      case keyEnter:\n      case keyFunction2:\n        if (this.contains(document.activeElement) && document.activeElement !== this) {\n          return;\n        }\n\n        switch (this.cellType) {\n          case DataGridCellTypes.columnHeader:\n            if (this.columnDefinition.headerCellFocusTargetCallback !== undefined) {\n              const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n\n              if (focusTarget !== null) {\n                focusTarget.focus();\n              }\n\n              e.preventDefault();\n            }\n\n            break;\n\n          default:\n            if (this.columnDefinition.cellFocusTargetCallback !== undefined) {\n              const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n\n              if (focusTarget !== null) {\n                focusTarget.focus();\n              }\n\n              e.preventDefault();\n            }\n\n            break;\n        }\n\n        break;\n\n      case keyEscape:\n        if (this.contains(document.activeElement) && document.activeElement !== this) {\n          this.focus();\n          e.preventDefault();\n        }\n\n        break;\n    }\n  }\n\n  updateCellView() {\n    this.disconnectCellView();\n\n    if (this.columnDefinition === null) {\n      return;\n    }\n\n    switch (this.cellType) {\n      case DataGridCellTypes.columnHeader:\n        if (this.columnDefinition.headerCellTemplate !== undefined) {\n          this.customCellView = this.columnDefinition.headerCellTemplate.render(this, this);\n        } else {\n          this.customCellView = defaultHeaderCellContentsTemplate.render(this, this);\n        }\n\n        break;\n\n      case undefined:\n      case DataGridCellTypes.rowHeader:\n      case DataGridCellTypes.default:\n        if (this.columnDefinition.cellTemplate !== undefined) {\n          this.customCellView = this.columnDefinition.cellTemplate.render(this, this);\n        } else {\n          this.customCellView = defaultCellContentsTemplate.render(this, this);\n        }\n\n        break;\n    }\n  }\n\n  disconnectCellView() {\n    if (this.customCellView !== null) {\n      this.customCellView.dispose();\n      this.customCellView = null;\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"cell-type\"\n})], DataGridCell.prototype, \"cellType\", void 0);\n\n__decorate([attr({\n  attribute: \"grid-column\"\n})], DataGridCell.prototype, \"gridColumn\", void 0);\n\n__decorate([observable], DataGridCell.prototype, \"rowData\", void 0);\n\n__decorate([observable], DataGridCell.prototype, \"columnDefinition\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/data-grid/data-grid-cell.js"],"names":["__decorate","attr","html","observable","eventFocusIn","eventFocusOut","eventKeyDown","keyEnter","keyEscape","keyFunction2","FoundationElement","DataGridCellTypes","defaultCellContentsTemplate","x","rowData","columnDefinition","columnDataKey","defaultHeaderCellContentsTemplate","title","undefined","DataGridCell","constructor","arguments","cellType","default","isActiveCell","customCellView","updateCellStyle","style","gridColumn","cellTypeChanged","$fastController","isConnected","updateCellView","gridColumnChanged","columnDefinitionChanged","oldValue","newValue","connectedCallback","_a","addEventListener","handleFocusin","handleFocusout","handleKeydown","disconnectedCallback","removeEventListener","disconnectCellView","e","columnHeader","headerCellInternalFocusQueue","headerCellFocusTargetCallback","focusTarget","focus","cellInternalFocusQueue","cellFocusTargetCallback","$emit","document","activeElement","contains","defaultPrevented","key","preventDefault","headerCellTemplate","render","rowHeader","cellTemplate","dispose","attribute","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, html, observable } from \"@microsoft/fast-element\";\nimport { eventFocusIn, eventFocusOut, eventKeyDown, keyEnter, keyEscape, keyFunction2, } from \"@microsoft/fast-web-utilities\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { DataGridCellTypes } from \"./data-grid.options\";\nexport { DataGridCellTypes };\nconst defaultCellContentsTemplate = html `\n    <template>\n        ${x => x.rowData === null ||\n    x.columnDefinition === null ||\n    x.columnDefinition.columnDataKey === null\n    ? null\n    : x.rowData[x.columnDefinition.columnDataKey]}\n    </template>\n`;\nconst defaultHeaderCellContentsTemplate = html `\n    <template>\n        ${x => x.columnDefinition === null\n    ? null\n    : x.columnDefinition.title === undefined\n        ? x.columnDefinition.columnDataKey\n        : x.columnDefinition.title}\n    </template>\n`;\n/**\n * A Data Grid Cell Custom HTML Element.\n *\n * @public\n */\nexport class DataGridCell extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The type of cell\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: cell-type\n         */\n        this.cellType = DataGridCellTypes.default;\n        /**\n         * The base data for the parent row\n         *\n         * @public\n         */\n        this.rowData = null;\n        /**\n         * The base data for the column\n         *\n         * @public\n         */\n        this.columnDefinition = null;\n        this.isActiveCell = false;\n        this.customCellView = null;\n        this.updateCellStyle = () => {\n            this.style.gridColumn = this.gridColumn;\n        };\n    }\n    cellTypeChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateCellView();\n        }\n    }\n    gridColumnChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateCellStyle();\n        }\n    }\n    columnDefinitionChanged(oldValue, newValue) {\n        if (this.$fastController.isConnected) {\n            this.updateCellView();\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a;\n        super.connectedCallback();\n        this.addEventListener(eventFocusIn, this.handleFocusin);\n        this.addEventListener(eventFocusOut, this.handleFocusout);\n        this.addEventListener(eventKeyDown, this.handleKeydown);\n        this.style.gridColumn = `${((_a = this.columnDefinition) === null || _a === void 0 ? void 0 : _a.gridColumn) === undefined\n            ? 0\n            : this.columnDefinition.gridColumn}`;\n        this.updateCellView();\n        this.updateCellStyle();\n    }\n    /**\n     * @internal\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener(eventFocusIn, this.handleFocusin);\n        this.removeEventListener(eventFocusOut, this.handleFocusout);\n        this.removeEventListener(eventKeyDown, this.handleKeydown);\n        this.disconnectCellView();\n    }\n    handleFocusin(e) {\n        if (this.isActiveCell) {\n            return;\n        }\n        this.isActiveCell = true;\n        switch (this.cellType) {\n            case DataGridCellTypes.columnHeader:\n                if (this.columnDefinition !== null &&\n                    this.columnDefinition.headerCellInternalFocusQueue !== true &&\n                    typeof this.columnDefinition.headerCellFocusTargetCallback ===\n                        \"function\") {\n                    // move focus to the focus target\n                    const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n                    if (focusTarget !== null) {\n                        focusTarget.focus();\n                    }\n                }\n                break;\n            default:\n                if (this.columnDefinition !== null &&\n                    this.columnDefinition.cellInternalFocusQueue !== true &&\n                    typeof this.columnDefinition.cellFocusTargetCallback === \"function\") {\n                    // move focus to the focus target\n                    const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n                    if (focusTarget !== null) {\n                        focusTarget.focus();\n                    }\n                }\n                break;\n        }\n        this.$emit(\"cell-focused\", this);\n    }\n    handleFocusout(e) {\n        if (this !== document.activeElement && !this.contains(document.activeElement)) {\n            this.isActiveCell = false;\n        }\n    }\n    handleKeydown(e) {\n        if (e.defaultPrevented ||\n            this.columnDefinition === null ||\n            (this.cellType === DataGridCellTypes.default &&\n                this.columnDefinition.cellInternalFocusQueue !== true) ||\n            (this.cellType === DataGridCellTypes.columnHeader &&\n                this.columnDefinition.headerCellInternalFocusQueue !== true)) {\n            return;\n        }\n        switch (e.key) {\n            case keyEnter:\n            case keyFunction2:\n                if (this.contains(document.activeElement) &&\n                    document.activeElement !== this) {\n                    return;\n                }\n                switch (this.cellType) {\n                    case DataGridCellTypes.columnHeader:\n                        if (this.columnDefinition.headerCellFocusTargetCallback !==\n                            undefined) {\n                            const focusTarget = this.columnDefinition.headerCellFocusTargetCallback(this);\n                            if (focusTarget !== null) {\n                                focusTarget.focus();\n                            }\n                            e.preventDefault();\n                        }\n                        break;\n                    default:\n                        if (this.columnDefinition.cellFocusTargetCallback !== undefined) {\n                            const focusTarget = this.columnDefinition.cellFocusTargetCallback(this);\n                            if (focusTarget !== null) {\n                                focusTarget.focus();\n                            }\n                            e.preventDefault();\n                        }\n                        break;\n                }\n                break;\n            case keyEscape:\n                if (this.contains(document.activeElement) &&\n                    document.activeElement !== this) {\n                    this.focus();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateCellView() {\n        this.disconnectCellView();\n        if (this.columnDefinition === null) {\n            return;\n        }\n        switch (this.cellType) {\n            case DataGridCellTypes.columnHeader:\n                if (this.columnDefinition.headerCellTemplate !== undefined) {\n                    this.customCellView = this.columnDefinition.headerCellTemplate.render(this, this);\n                }\n                else {\n                    this.customCellView = defaultHeaderCellContentsTemplate.render(this, this);\n                }\n                break;\n            case undefined:\n            case DataGridCellTypes.rowHeader:\n            case DataGridCellTypes.default:\n                if (this.columnDefinition.cellTemplate !== undefined) {\n                    this.customCellView = this.columnDefinition.cellTemplate.render(this, this);\n                }\n                else {\n                    this.customCellView = defaultCellContentsTemplate.render(this, this);\n                }\n                break;\n        }\n    }\n    disconnectCellView() {\n        if (this.customCellView !== null) {\n            this.customCellView.dispose();\n            this.customCellView = null;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"cell-type\" })\n], DataGridCell.prototype, \"cellType\", void 0);\n__decorate([\n    attr({ attribute: \"grid-column\" })\n], DataGridCell.prototype, \"gridColumn\", void 0);\n__decorate([\n    observable\n], DataGridCell.prototype, \"rowData\", void 0);\n__decorate([\n    observable\n], DataGridCell.prototype, \"columnDefinition\", void 0);\n"]},"metadata":{},"sourceType":"module"}