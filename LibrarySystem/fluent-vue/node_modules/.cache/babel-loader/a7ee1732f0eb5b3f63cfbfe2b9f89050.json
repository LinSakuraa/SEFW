{"ast":null,"code":"import { h, defineComponent, inject } from 'vue';\nimport { NCheckbox } from '../../checkbox';\nimport { treeInjectionKey } from './interface';\nexport default defineComponent({\n  name: 'NTreeNodeCheckbox',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    focusable: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    indeterminate: Boolean,\n    onCheck: Function\n  },\n\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n\n    function doCheck(value) {\n      const {\n        onCheck\n      } = props;\n      if (onCheck) return onCheck(value);\n    }\n\n    function handleUpdateValue(value) {\n      if (props.indeterminate) {\n        doCheck(false);\n      } else {\n        doCheck(value);\n      }\n    }\n\n    return {\n      handleUpdateValue,\n      mergedTheme: NTree.mergedThemeRef\n    };\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      mergedTheme,\n      checked,\n      indeterminate,\n      disabled,\n      focusable,\n      handleUpdateValue\n    } = this;\n    return h(\"span\", {\n      class: `${clsPrefix}-tree-node-checkbox`,\n      \"data-checkbox\": true\n    }, h(NCheckbox, {\n      focusable: focusable,\n      disabled: disabled,\n      theme: mergedTheme.peers.Checkbox,\n      themeOverrides: mergedTheme.peerOverrides.Checkbox,\n      checked: checked,\n      indeterminate: indeterminate,\n      onUpdateChecked: handleUpdateValue\n    }));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/tree/src/TreeNodeCheckbox.js"],"names":["h","defineComponent","inject","NCheckbox","treeInjectionKey","name","props","clsPrefix","type","String","required","focusable","Boolean","disabled","checked","indeterminate","onCheck","Function","setup","NTree","doCheck","value","handleUpdateValue","mergedTheme","mergedThemeRef","render","class","theme","peers","Checkbox","themeOverrides","peerOverrides","onUpdateChecked"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,MAA7B,QAA2C,KAA3C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,eAAeH,eAAe,CAAC;AAC3BI,EAAAA,IAAI,EAAE,mBADqB;AAE3BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAEC,MADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KADR;AAKHC,IAAAA,SAAS,EAAEC,OALR;AAMHC,IAAAA,QAAQ,EAAED,OANP;AAOHE,IAAAA,OAAO,EAAEF,OAPN;AAQHG,IAAAA,aAAa,EAAEH,OARZ;AASHI,IAAAA,OAAO,EAAEC;AATN,GAFoB;;AAa3BC,EAAAA,KAAK,CAACZ,KAAD,EAAQ;AACT;AACA,UAAMa,KAAK,GAAGjB,MAAM,CAACE,gBAAD,CAApB;;AACA,aAASgB,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,YAAM;AAAEL,QAAAA;AAAF,UAAcV,KAApB;AACA,UAAIU,OAAJ,EACI,OAAOA,OAAO,CAACK,KAAD,CAAd;AACP;;AACD,aAASC,iBAAT,CAA2BD,KAA3B,EAAkC;AAC9B,UAAIf,KAAK,CAACS,aAAV,EAAyB;AACrBK,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH,OAFD,MAGK;AACDA,QAAAA,OAAO,CAACC,KAAD,CAAP;AACH;AACJ;;AACD,WAAO;AACHC,MAAAA,iBADG;AAEHC,MAAAA,WAAW,EAAEJ,KAAK,CAACK;AAFhB,KAAP;AAIH,GAjC0B;;AAkC3BC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElB,MAAAA,SAAF;AAAagB,MAAAA,WAAb;AAA0BT,MAAAA,OAA1B;AAAmCC,MAAAA,aAAnC;AAAkDF,MAAAA,QAAlD;AAA4DF,MAAAA,SAA5D;AAAuEW,MAAAA;AAAvE,QAA6F,IAAnG;AACA,WAAQtB,CAAC,CAAC,MAAD,EAAS;AAAE0B,MAAAA,KAAK,EAAG,GAAEnB,SAAU,qBAAtB;AAA4C,uBAAiB;AAA7D,KAAT,EACLP,CAAC,CAACG,SAAD,EAAY;AAAEQ,MAAAA,SAAS,EAAEA,SAAb;AAAwBE,MAAAA,QAAQ,EAAEA,QAAlC;AAA4Cc,MAAAA,KAAK,EAAEJ,WAAW,CAACK,KAAZ,CAAkBC,QAArE;AAA+EC,MAAAA,cAAc,EAAEP,WAAW,CAACQ,aAAZ,CAA0BF,QAAzH;AAAmIf,MAAAA,OAAO,EAAEA,OAA5I;AAAqJC,MAAAA,aAAa,EAAEA,aAApK;AAAmLiB,MAAAA,eAAe,EAAEV;AAApM,KAAZ,CADI,CAAT;AAEH;;AAtC0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, inject } from 'vue';\nimport { NCheckbox } from '../../checkbox';\nimport { treeInjectionKey } from './interface';\nexport default defineComponent({\n    name: 'NTreeNodeCheckbox',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        focusable: Boolean,\n        disabled: Boolean,\n        checked: Boolean,\n        indeterminate: Boolean,\n        onCheck: Function\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NTree = inject(treeInjectionKey);\n        function doCheck(value) {\n            const { onCheck } = props;\n            if (onCheck)\n                return onCheck(value);\n        }\n        function handleUpdateValue(value) {\n            if (props.indeterminate) {\n                doCheck(false);\n            }\n            else {\n                doCheck(value);\n            }\n        }\n        return {\n            handleUpdateValue,\n            mergedTheme: NTree.mergedThemeRef\n        };\n    },\n    render() {\n        const { clsPrefix, mergedTheme, checked, indeterminate, disabled, focusable, handleUpdateValue } = this;\n        return (h(\"span\", { class: `${clsPrefix}-tree-node-checkbox`, \"data-checkbox\": true },\n            h(NCheckbox, { focusable: focusable, disabled: disabled, theme: mergedTheme.peers.Checkbox, themeOverrides: mergedTheme.peerOverrides.Checkbox, checked: checked, indeterminate: indeterminate, onUpdateChecked: handleUpdateValue })));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}