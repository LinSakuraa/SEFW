{"ast":null,"code":"import { DOM } from \"../dom\";\nimport { Observable } from \"../observation/observable\";\nimport { enableArrayObservation } from \"../observation/array-observer\";\nimport { emptyArray } from \"../platform\";\nimport { HTMLDirective } from \"./html-directive\";\nimport { HTMLView } from \"./view\";\nconst defaultRepeatOptions = Object.freeze({\n  positioning: false,\n  recycle: true\n});\n\nfunction bindWithoutPositioning(view, items, index, context) {\n  view.bind(items[index], context);\n}\n\nfunction bindWithPositioning(view, items, index, context) {\n  const childContext = Object.create(context);\n  childContext.index = index;\n  childContext.length = items.length;\n  view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\n\n\nexport class RepeatBehavior {\n  /**\n   * Creates an instance of RepeatBehavior.\n   * @param location - The location in the DOM to render the repeat.\n   * @param itemsBinding - The array to render.\n   * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n   * @param templateBinding - The template to render for each item.\n   * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n   * @param options - Options used to turn on special repeat features.\n   */\n  constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n    this.location = location;\n    this.itemsBinding = itemsBinding;\n    this.templateBinding = templateBinding;\n    this.options = options;\n    this.source = null;\n    this.views = [];\n    this.items = null;\n    this.itemsObserver = null;\n    this.originalContext = void 0;\n    this.childContext = void 0;\n    this.bindView = bindWithoutPositioning;\n    this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n    this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n\n    if (options.positioning) {\n      this.bindView = bindWithPositioning;\n    }\n  }\n  /**\n   * Bind this behavior to the source.\n   * @param source - The source to bind to.\n   * @param context - The execution context that the binding is operating within.\n   */\n\n\n  bind(source, context) {\n    this.source = source;\n    this.originalContext = context;\n    this.childContext = Object.create(context);\n    this.childContext.parent = source;\n    this.childContext.parentContext = this.originalContext;\n    this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n    this.template = this.templateBindingObserver.observe(source, this.originalContext);\n    this.observeItems(true);\n    this.refreshAllViews();\n  }\n  /**\n   * Unbinds this behavior from the source.\n   * @param source - The source to unbind from.\n   */\n\n\n  unbind() {\n    this.source = null;\n    this.items = null;\n\n    if (this.itemsObserver !== null) {\n      this.itemsObserver.unsubscribe(this);\n    }\n\n    this.unbindAllViews();\n    this.itemsBindingObserver.disconnect();\n    this.templateBindingObserver.disconnect();\n  }\n  /** @internal */\n\n\n  handleChange(source, args) {\n    if (source === this.itemsBinding) {\n      this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n      this.observeItems();\n      this.refreshAllViews();\n    } else if (source === this.templateBinding) {\n      this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n      this.refreshAllViews(true);\n    } else {\n      this.updateViews(args);\n    }\n  }\n\n  observeItems(force = false) {\n    if (!this.items) {\n      this.items = emptyArray;\n      return;\n    }\n\n    const oldObserver = this.itemsObserver;\n    const newObserver = this.itemsObserver = Observable.getNotifier(this.items);\n    const hasNewObserver = oldObserver !== newObserver;\n\n    if (hasNewObserver && oldObserver !== null) {\n      oldObserver.unsubscribe(this);\n    }\n\n    if (hasNewObserver || force) {\n      newObserver.subscribe(this);\n    }\n  }\n\n  updateViews(splices) {\n    const childContext = this.childContext;\n    const views = this.views;\n    const totalRemoved = [];\n    const bindView = this.bindView;\n    let removeDelta = 0;\n\n    for (let i = 0, ii = splices.length; i < ii; ++i) {\n      const splice = splices[i];\n      const removed = splice.removed;\n      totalRemoved.push(...views.splice(splice.index + removeDelta, removed.length));\n      removeDelta -= splice.addedCount;\n    }\n\n    const items = this.items;\n    const template = this.template;\n\n    for (let i = 0, ii = splices.length; i < ii; ++i) {\n      const splice = splices[i];\n      let addIndex = splice.index;\n      const end = addIndex + splice.addedCount;\n\n      for (; addIndex < end; ++addIndex) {\n        const neighbor = views[addIndex];\n        const location = neighbor ? neighbor.firstChild : this.location;\n        const view = this.options.recycle && totalRemoved.length > 0 ? totalRemoved.shift() : template.create();\n        views.splice(addIndex, 0, view);\n        bindView(view, items, addIndex, childContext);\n        view.insertBefore(location);\n      }\n    }\n\n    for (let i = 0, ii = totalRemoved.length; i < ii; ++i) {\n      totalRemoved[i].dispose();\n    }\n\n    if (this.options.positioning) {\n      for (let i = 0, ii = views.length; i < ii; ++i) {\n        const currentContext = views[i].context;\n        currentContext.length = ii;\n        currentContext.index = i;\n      }\n    }\n  }\n\n  refreshAllViews(templateChanged = false) {\n    const items = this.items;\n    const childContext = this.childContext;\n    const template = this.template;\n    const location = this.location;\n    const bindView = this.bindView;\n    let itemsLength = items.length;\n    let views = this.views;\n    let viewsLength = views.length;\n\n    if (itemsLength === 0 || templateChanged) {\n      // all views need to be removed\n      HTMLView.disposeContiguousBatch(views);\n      viewsLength = 0;\n    }\n\n    if (viewsLength === 0) {\n      // all views need to be created\n      this.views = views = new Array(itemsLength);\n\n      for (let i = 0; i < itemsLength; ++i) {\n        const view = template.create();\n        bindView(view, items, i, childContext);\n        views[i] = view;\n        view.insertBefore(location);\n      }\n    } else {\n      // attempt to reuse existing views with new data\n      let i = 0;\n\n      for (; i < itemsLength; ++i) {\n        if (i < viewsLength) {\n          const view = views[i];\n          bindView(view, items, i, childContext);\n        } else {\n          const view = template.create();\n          bindView(view, items, i, childContext);\n          views.push(view);\n          view.insertBefore(location);\n        }\n      }\n\n      const removed = views.splice(i, viewsLength - i);\n\n      for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n        removed[i].dispose();\n      }\n    }\n  }\n\n  unbindAllViews() {\n    const views = this.views;\n\n    for (let i = 0, ii = views.length; i < ii; ++i) {\n      views[i].unbind();\n    }\n  }\n\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\n\nexport class RepeatDirective extends HTMLDirective {\n  /**\n   * Creates an instance of RepeatDirective.\n   * @param itemsBinding - The binding that provides the array to render.\n   * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n   * @param options - Options used to turn on special repeat features.\n   */\n  constructor(itemsBinding, templateBinding, options) {\n    super();\n    this.itemsBinding = itemsBinding;\n    this.templateBinding = templateBinding;\n    this.options = options;\n    /**\n     * Creates a placeholder string based on the directive's index within the template.\n     * @param index - The index of the directive within the template.\n     */\n\n    this.createPlaceholder = DOM.createBlockPlaceholder;\n    enableArrayObservation();\n    this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n    this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n  }\n  /**\n   * Creates a behavior for the provided target node.\n   * @param target - The node instance to create the behavior for.\n   */\n\n\n  createBehavior(target) {\n    return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n  }\n\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\n\nexport function repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n  const templateBinding = typeof templateOrTemplateBinding === \"function\" ? templateOrTemplateBinding : () => templateOrTemplateBinding;\n  return new RepeatDirective(itemsBinding, templateBinding, options);\n}","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/templating/repeat.js"],"names":["DOM","Observable","enableArrayObservation","emptyArray","HTMLDirective","HTMLView","defaultRepeatOptions","Object","freeze","positioning","recycle","bindWithoutPositioning","view","items","index","context","bind","bindWithPositioning","childContext","create","length","RepeatBehavior","constructor","location","itemsBinding","isItemsBindingVolatile","templateBinding","isTemplateBindingVolatile","options","source","views","itemsObserver","originalContext","bindView","itemsBindingObserver","binding","templateBindingObserver","parent","parentContext","observe","template","observeItems","refreshAllViews","unbind","unsubscribe","unbindAllViews","disconnect","handleChange","args","updateViews","force","oldObserver","newObserver","getNotifier","hasNewObserver","subscribe","splices","totalRemoved","removeDelta","i","ii","splice","removed","push","addedCount","addIndex","end","neighbor","firstChild","shift","insertBefore","dispose","currentContext","templateChanged","itemsLength","viewsLength","disposeContiguousBatch","Array","RepeatDirective","createPlaceholder","createBlockPlaceholder","isVolatileBinding","createBehavior","target","repeat","templateOrTemplateBinding"],"mappings":"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","sourcesContent":["import { DOM } from \"../dom\";\nimport { Observable, } from \"../observation/observable\";\nimport { enableArrayObservation } from \"../observation/array-observer\";\nimport { emptyArray } from \"../platform\";\nimport { HTMLDirective } from \"./html-directive\";\nimport { HTMLView } from \"./view\";\nconst defaultRepeatOptions = Object.freeze({\n    positioning: false,\n    recycle: true,\n});\nfunction bindWithoutPositioning(view, items, index, context) {\n    view.bind(items[index], context);\n}\nfunction bindWithPositioning(view, items, index, context) {\n    const childContext = Object.create(context);\n    childContext.index = index;\n    childContext.length = items.length;\n    view.bind(items[index], childContext);\n}\n/**\n * A behavior that renders a template for each item in an array.\n * @public\n */\nexport class RepeatBehavior {\n    /**\n     * Creates an instance of RepeatBehavior.\n     * @param location - The location in the DOM to render the repeat.\n     * @param itemsBinding - The array to render.\n     * @param isItemsBindingVolatile - Indicates whether the items binding has volatile dependencies.\n     * @param templateBinding - The template to render for each item.\n     * @param isTemplateBindingVolatile - Indicates whether the template binding has volatile dependencies.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(location, itemsBinding, isItemsBindingVolatile, templateBinding, isTemplateBindingVolatile, options) {\n        this.location = location;\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        this.source = null;\n        this.views = [];\n        this.items = null;\n        this.itemsObserver = null;\n        this.originalContext = void 0;\n        this.childContext = void 0;\n        this.bindView = bindWithoutPositioning;\n        this.itemsBindingObserver = Observable.binding(itemsBinding, this, isItemsBindingVolatile);\n        this.templateBindingObserver = Observable.binding(templateBinding, this, isTemplateBindingVolatile);\n        if (options.positioning) {\n            this.bindView = bindWithPositioning;\n        }\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source, context) {\n        this.source = source;\n        this.originalContext = context;\n        this.childContext = Object.create(context);\n        this.childContext.parent = source;\n        this.childContext.parentContext = this.originalContext;\n        this.items = this.itemsBindingObserver.observe(source, this.originalContext);\n        this.template = this.templateBindingObserver.observe(source, this.originalContext);\n        this.observeItems(true);\n        this.refreshAllViews();\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.source = null;\n        this.items = null;\n        if (this.itemsObserver !== null) {\n            this.itemsObserver.unsubscribe(this);\n        }\n        this.unbindAllViews();\n        this.itemsBindingObserver.disconnect();\n        this.templateBindingObserver.disconnect();\n    }\n    /** @internal */\n    handleChange(source, args) {\n        if (source === this.itemsBinding) {\n            this.items = this.itemsBindingObserver.observe(this.source, this.originalContext);\n            this.observeItems();\n            this.refreshAllViews();\n        }\n        else if (source === this.templateBinding) {\n            this.template = this.templateBindingObserver.observe(this.source, this.originalContext);\n            this.refreshAllViews(true);\n        }\n        else {\n            this.updateViews(args);\n        }\n    }\n    observeItems(force = false) {\n        if (!this.items) {\n            this.items = emptyArray;\n            return;\n        }\n        const oldObserver = this.itemsObserver;\n        const newObserver = (this.itemsObserver = Observable.getNotifier(this.items));\n        const hasNewObserver = oldObserver !== newObserver;\n        if (hasNewObserver && oldObserver !== null) {\n            oldObserver.unsubscribe(this);\n        }\n        if (hasNewObserver || force) {\n            newObserver.subscribe(this);\n        }\n    }\n    updateViews(splices) {\n        const childContext = this.childContext;\n        const views = this.views;\n        const totalRemoved = [];\n        const bindView = this.bindView;\n        let removeDelta = 0;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            const removed = splice.removed;\n            totalRemoved.push(...views.splice(splice.index + removeDelta, removed.length));\n            removeDelta -= splice.addedCount;\n        }\n        const items = this.items;\n        const template = this.template;\n        for (let i = 0, ii = splices.length; i < ii; ++i) {\n            const splice = splices[i];\n            let addIndex = splice.index;\n            const end = addIndex + splice.addedCount;\n            for (; addIndex < end; ++addIndex) {\n                const neighbor = views[addIndex];\n                const location = neighbor ? neighbor.firstChild : this.location;\n                const view = this.options.recycle && totalRemoved.length > 0\n                    ? totalRemoved.shift()\n                    : template.create();\n                views.splice(addIndex, 0, view);\n                bindView(view, items, addIndex, childContext);\n                view.insertBefore(location);\n            }\n        }\n        for (let i = 0, ii = totalRemoved.length; i < ii; ++i) {\n            totalRemoved[i].dispose();\n        }\n        if (this.options.positioning) {\n            for (let i = 0, ii = views.length; i < ii; ++i) {\n                const currentContext = views[i].context;\n                currentContext.length = ii;\n                currentContext.index = i;\n            }\n        }\n    }\n    refreshAllViews(templateChanged = false) {\n        const items = this.items;\n        const childContext = this.childContext;\n        const template = this.template;\n        const location = this.location;\n        const bindView = this.bindView;\n        let itemsLength = items.length;\n        let views = this.views;\n        let viewsLength = views.length;\n        if (itemsLength === 0 || templateChanged) {\n            // all views need to be removed\n            HTMLView.disposeContiguousBatch(views);\n            viewsLength = 0;\n        }\n        if (viewsLength === 0) {\n            // all views need to be created\n            this.views = views = new Array(itemsLength);\n            for (let i = 0; i < itemsLength; ++i) {\n                const view = template.create();\n                bindView(view, items, i, childContext);\n                views[i] = view;\n                view.insertBefore(location);\n            }\n        }\n        else {\n            // attempt to reuse existing views with new data\n            let i = 0;\n            for (; i < itemsLength; ++i) {\n                if (i < viewsLength) {\n                    const view = views[i];\n                    bindView(view, items, i, childContext);\n                }\n                else {\n                    const view = template.create();\n                    bindView(view, items, i, childContext);\n                    views.push(view);\n                    view.insertBefore(location);\n                }\n            }\n            const removed = views.splice(i, viewsLength - i);\n            for (i = 0, itemsLength = removed.length; i < itemsLength; ++i) {\n                removed[i].dispose();\n            }\n        }\n    }\n    unbindAllViews() {\n        const views = this.views;\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n            views[i].unbind();\n        }\n    }\n}\n/**\n * A directive that configures list rendering.\n * @public\n */\nexport class RepeatDirective extends HTMLDirective {\n    /**\n     * Creates an instance of RepeatDirective.\n     * @param itemsBinding - The binding that provides the array to render.\n     * @param templateBinding - The template binding used to obtain a template to render for each item in the array.\n     * @param options - Options used to turn on special repeat features.\n     */\n    constructor(itemsBinding, templateBinding, options) {\n        super();\n        this.itemsBinding = itemsBinding;\n        this.templateBinding = templateBinding;\n        this.options = options;\n        /**\n         * Creates a placeholder string based on the directive's index within the template.\n         * @param index - The index of the directive within the template.\n         */\n        this.createPlaceholder = DOM.createBlockPlaceholder;\n        enableArrayObservation();\n        this.isItemsBindingVolatile = Observable.isVolatileBinding(itemsBinding);\n        this.isTemplateBindingVolatile = Observable.isVolatileBinding(templateBinding);\n    }\n    /**\n     * Creates a behavior for the provided target node.\n     * @param target - The node instance to create the behavior for.\n     */\n    createBehavior(target) {\n        return new RepeatBehavior(target, this.itemsBinding, this.isItemsBindingVolatile, this.templateBinding, this.isTemplateBindingVolatile, this.options);\n    }\n}\n/**\n * A directive that enables list rendering.\n * @param itemsBinding - The array to render.\n * @param templateOrTemplateBinding - The template or a template binding used obtain a template\n * to render for each item in the array.\n * @param options - Options used to turn on special repeat features.\n * @public\n */\nexport function repeat(itemsBinding, templateOrTemplateBinding, options = defaultRepeatOptions) {\n    const templateBinding = typeof templateOrTemplateBinding === \"function\"\n        ? templateOrTemplateBinding\n        : () => templateOrTemplateBinding;\n    return new RepeatDirective(itemsBinding, templateBinding, options);\n}\n"]},"metadata":{},"sourceType":"module"}