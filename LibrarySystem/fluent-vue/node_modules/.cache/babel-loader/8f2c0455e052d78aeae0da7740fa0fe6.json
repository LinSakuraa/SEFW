{"ast":null,"code":"import { computed, h, defineComponent, provide, ref } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { call, createInjectionKey, warn } from '../../_utils';\nimport { collapseLight } from '../styles';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst collapseProps = Object.assign(Object.assign({}, useTheme.props), {\n  defaultExpandedNames: {\n    type: [Array, String],\n    default: null\n  },\n  expandedNames: [Array, String],\n  arrowPlacement: {\n    type: String,\n    default: 'left'\n  },\n  accordion: {\n    type: Boolean,\n    default: false\n  },\n  displayDirective: {\n    type: String,\n    default: 'if'\n  },\n  onItemHeaderClick: [Function, Array],\n  'onUpdate:expandedNames': [Function, Array],\n  onUpdateExpandedNames: [Function, Array],\n  // deprecated\n  onExpandedNamesChange: {\n    type: [Function, Array],\n    validator: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('collapse', '`on-expanded-names-change` is deprecated, please use `on-update:expanded-names` instead.');\n      }\n\n      return true;\n    },\n    default: undefined\n  }\n});\nexport const collapseInjectionKey = createInjectionKey('n-collapse');\nexport default defineComponent({\n  name: 'Collapse',\n  props: collapseProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled,\n      mergedRtlRef\n    } = useConfig(props);\n    const uncontrolledExpandedNamesRef = ref(props.defaultExpandedNames);\n    const controlledExpandedNamesRef = computed(() => props.expandedNames);\n    const mergedExpandedNamesRef = useMergedState(controlledExpandedNamesRef, uncontrolledExpandedNamesRef);\n    const themeRef = useTheme('Collapse', '-collapse', style, collapseLight, props, mergedClsPrefixRef);\n\n    function doUpdateExpandedNames(names) {\n      const {\n        'onUpdate:expandedNames': _onUpdateExpandedNames,\n        onUpdateExpandedNames,\n        onExpandedNamesChange\n      } = props;\n\n      if (onUpdateExpandedNames) {\n        call(onUpdateExpandedNames, names);\n      }\n\n      if (_onUpdateExpandedNames) {\n        call(_onUpdateExpandedNames, names);\n      }\n\n      if (onExpandedNamesChange) {\n        call(onExpandedNamesChange, names);\n      }\n\n      uncontrolledExpandedNamesRef.value = names;\n    }\n\n    function doItemHeaderClick(info) {\n      const {\n        onItemHeaderClick\n      } = props;\n\n      if (onItemHeaderClick) {\n        call(onItemHeaderClick, info);\n      }\n    }\n\n    function toggleItem(collapse, name, event) {\n      const {\n        accordion\n      } = props;\n      const {\n        value: expandedNames\n      } = mergedExpandedNamesRef;\n\n      if (accordion) {\n        if (collapse) {\n          doUpdateExpandedNames([name]);\n          doItemHeaderClick({\n            name,\n            expanded: true,\n            event\n          });\n        } else {\n          doUpdateExpandedNames([]);\n          doItemHeaderClick({\n            name,\n            expanded: false,\n            event\n          });\n        }\n      } else {\n        if (!Array.isArray(expandedNames)) {\n          doUpdateExpandedNames([name]);\n          doItemHeaderClick({\n            name,\n            expanded: true,\n            event\n          });\n        } else {\n          const activeNames = expandedNames.slice();\n          const index = activeNames.findIndex(activeName => name === activeName);\n\n          if (~index) {\n            activeNames.splice(index, 1);\n            doUpdateExpandedNames(activeNames);\n            doItemHeaderClick({\n              name,\n              expanded: false,\n              event\n            });\n          } else {\n            activeNames.push(name);\n            doUpdateExpandedNames(activeNames);\n            doItemHeaderClick({\n              name,\n              expanded: true,\n              event\n            });\n          }\n        }\n      }\n    }\n\n    provide(collapseInjectionKey, {\n      props,\n      mergedClsPrefixRef,\n      expandedNamesRef: mergedExpandedNamesRef,\n      slots,\n      toggleItem\n    });\n    const rtlEnabledRef = useRtl('Collapse', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          titleFontWeight,\n          dividerColor,\n          titleTextColor,\n          textColor,\n          arrowColor,\n          fontSize,\n          titleFontSize\n        }\n      } = themeRef.value;\n      return {\n        '--n-font-size': fontSize,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-text-color': textColor,\n        '--n-divider-color': dividerColor,\n        '--n-title-font-size': titleFontSize,\n        '--n-title-text-color': titleTextColor,\n        '--n-title-font-weight': titleFontWeight,\n        '--n-arrow-color': arrowColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('collapse', undefined, cssVarsRef, props) : undefined;\n    return {\n      rtlEnabled: rtlEnabledRef,\n      mergedTheme: themeRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"div\", {\n      class: [`${this.mergedClsPrefix}-collapse`, this.rtlEnabled && `${this.mergedClsPrefix}-collapse--rtl`, this.themeClass],\n      style: this.cssVars\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/collapse/src/Collapse.js"],"names":["computed","h","defineComponent","provide","ref","useMergedState","useConfig","useTheme","useThemeClass","call","createInjectionKey","warn","collapseLight","style","useRtl","collapseProps","Object","assign","props","defaultExpandedNames","type","Array","String","default","expandedNames","arrowPlacement","accordion","Boolean","displayDirective","onItemHeaderClick","Function","onUpdateExpandedNames","onExpandedNamesChange","validator","process","env","NODE_ENV","undefined","collapseInjectionKey","name","setup","slots","mergedClsPrefixRef","inlineThemeDisabled","mergedRtlRef","uncontrolledExpandedNamesRef","controlledExpandedNamesRef","mergedExpandedNamesRef","themeRef","doUpdateExpandedNames","names","_onUpdateExpandedNames","value","doItemHeaderClick","info","toggleItem","collapse","event","expanded","isArray","activeNames","slice","index","findIndex","activeName","splice","push","expandedNamesRef","rtlEnabledRef","cssVarsRef","common","cubicBezierEaseInOut","self","titleFontWeight","dividerColor","titleTextColor","textColor","arrowColor","fontSize","titleFontSize","themeClassHandle","rtlEnabled","mergedTheme","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","class","$slots"],"mappings":"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","sourcesContent":["import { computed, h, defineComponent, provide, ref } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { call, createInjectionKey, warn } from '../../_utils';\nimport { collapseLight } from '../styles';\nimport style from './styles/index.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nconst collapseProps = Object.assign(Object.assign({}, useTheme.props), { defaultExpandedNames: {\n        type: [Array, String],\n        default: null\n    }, expandedNames: [Array, String], arrowPlacement: {\n        type: String,\n        default: 'left'\n    }, accordion: {\n        type: Boolean,\n        default: false\n    }, displayDirective: {\n        type: String,\n        default: 'if'\n    }, onItemHeaderClick: [Function, Array], 'onUpdate:expandedNames': [Function, Array], onUpdateExpandedNames: [Function, Array], \n    // deprecated\n    onExpandedNamesChange: {\n        type: [Function, Array],\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('collapse', '`on-expanded-names-change` is deprecated, please use `on-update:expanded-names` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    } });\nexport const collapseInjectionKey = createInjectionKey('n-collapse');\nexport default defineComponent({\n    name: 'Collapse',\n    props: collapseProps,\n    setup(props, { slots }) {\n        const { mergedClsPrefixRef, inlineThemeDisabled, mergedRtlRef } = useConfig(props);\n        const uncontrolledExpandedNamesRef = ref(props.defaultExpandedNames);\n        const controlledExpandedNamesRef = computed(() => props.expandedNames);\n        const mergedExpandedNamesRef = useMergedState(controlledExpandedNamesRef, uncontrolledExpandedNamesRef);\n        const themeRef = useTheme('Collapse', '-collapse', style, collapseLight, props, mergedClsPrefixRef);\n        function doUpdateExpandedNames(names) {\n            const { 'onUpdate:expandedNames': _onUpdateExpandedNames, onUpdateExpandedNames, onExpandedNamesChange } = props;\n            if (onUpdateExpandedNames) {\n                call(onUpdateExpandedNames, names);\n            }\n            if (_onUpdateExpandedNames) {\n                call(_onUpdateExpandedNames, names);\n            }\n            if (onExpandedNamesChange) {\n                call(onExpandedNamesChange, names);\n            }\n            uncontrolledExpandedNamesRef.value = names;\n        }\n        function doItemHeaderClick(info) {\n            const { onItemHeaderClick } = props;\n            if (onItemHeaderClick) {\n                call(onItemHeaderClick, info);\n            }\n        }\n        function toggleItem(collapse, name, event) {\n            const { accordion } = props;\n            const { value: expandedNames } = mergedExpandedNamesRef;\n            if (accordion) {\n                if (collapse) {\n                    doUpdateExpandedNames([name]);\n                    doItemHeaderClick({ name, expanded: true, event });\n                }\n                else {\n                    doUpdateExpandedNames([]);\n                    doItemHeaderClick({ name, expanded: false, event });\n                }\n            }\n            else {\n                if (!Array.isArray(expandedNames)) {\n                    doUpdateExpandedNames([name]);\n                    doItemHeaderClick({ name, expanded: true, event });\n                }\n                else {\n                    const activeNames = expandedNames.slice();\n                    const index = activeNames.findIndex((activeName) => name === activeName);\n                    if (~index) {\n                        activeNames.splice(index, 1);\n                        doUpdateExpandedNames(activeNames);\n                        doItemHeaderClick({ name, expanded: false, event });\n                    }\n                    else {\n                        activeNames.push(name);\n                        doUpdateExpandedNames(activeNames);\n                        doItemHeaderClick({ name, expanded: true, event });\n                    }\n                }\n            }\n        }\n        provide(collapseInjectionKey, {\n            props,\n            mergedClsPrefixRef,\n            expandedNamesRef: mergedExpandedNamesRef,\n            slots,\n            toggleItem\n        });\n        const rtlEnabledRef = useRtl('Collapse', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { titleFontWeight, dividerColor, titleTextColor, textColor, arrowColor, fontSize, titleFontSize } } = themeRef.value;\n            return {\n                '--n-font-size': fontSize,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-text-color': textColor,\n                '--n-divider-color': dividerColor,\n                '--n-title-font-size': titleFontSize,\n                '--n-title-text-color': titleTextColor,\n                '--n-title-font-weight': titleFontWeight,\n                '--n-arrow-color': arrowColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('collapse', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            rtlEnabled: rtlEnabledRef,\n            mergedTheme: themeRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"div\", { class: [\n                `${this.mergedClsPrefix}-collapse`,\n                this.rtlEnabled && `${this.mergedClsPrefix}-collapse--rtl`,\n                this.themeClass\n            ], style: this.cssVars }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}