{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { ARIAGlobalStatesAndProperties, StartEnd } from \"../patterns/index\";\nimport { applyMixins } from \"../utilities/index\";\nimport { FormAssociatedTextField } from \"./text-field.form-associated\";\nimport { TextFieldType } from \"./text-field.options\";\nexport { TextFieldType };\n/**\n * A Text Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type=\"text\" /> element }.\n *\n * @public\n */\n\nexport class TextField extends FormAssociatedTextField {\n  constructor() {\n    super(...arguments);\n    /**\n     * Allows setting a type or mode of text.\n     * @public\n     * @remarks\n     * HTML Attribute: type\n     */\n\n    this.type = TextFieldType.text;\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.readOnly = this.readOnly;\n      this.validate();\n    }\n  }\n\n  autofocusChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.autofocus = this.autofocus;\n      this.validate();\n    }\n  }\n\n  placeholderChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.placeholder = this.placeholder;\n    }\n  }\n\n  typeChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.type = this.type;\n      this.validate();\n    }\n  }\n\n  listChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.setAttribute(\"list\", this.list);\n      this.validate();\n    }\n  }\n\n  maxlengthChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.maxLength = this.maxlength;\n      this.validate();\n    }\n  }\n\n  minlengthChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.minLength = this.minlength;\n      this.validate();\n    }\n  }\n\n  patternChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.pattern = this.pattern;\n      this.validate();\n    }\n  }\n\n  sizeChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.size = this.size;\n    }\n  }\n\n  spellcheckChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.spellcheck = this.spellcheck;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.proxy.setAttribute(\"type\", this.type);\n    this.validate();\n\n    if (this.autofocus) {\n      DOM.queueUpdate(() => {\n        this.focus();\n      });\n    }\n  }\n  /**\n   * Handles the internal control's `input` event\n   * @internal\n   */\n\n\n  handleTextInput() {\n    this.value = this.control.value;\n  }\n  /**\n   * Change event handler for inner control.\n   * @remarks\n   * \"Change\" events are not `composable` so they will not\n   * permeate the shadow DOM boundary. This fn effectively proxies\n   * the change event, emitting a `change` event whenever the internal\n   * control emits a `change` event\n   * @internal\n   */\n\n\n  handleChange() {\n    this.$emit(\"change\");\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], TextField.prototype, \"readOnly\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TextField.prototype, \"autofocus\", void 0);\n\n__decorate([attr], TextField.prototype, \"placeholder\", void 0);\n\n__decorate([attr], TextField.prototype, \"type\", void 0);\n\n__decorate([attr], TextField.prototype, \"list\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], TextField.prototype, \"maxlength\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], TextField.prototype, \"minlength\", void 0);\n\n__decorate([attr], TextField.prototype, \"pattern\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], TextField.prototype, \"size\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TextField.prototype, \"spellcheck\", void 0);\n\n__decorate([observable], TextField.prototype, \"defaultSlottedNodes\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA textbox role\n *\n * @public\n */\n\n\nexport class DelegatesARIATextbox {}\napplyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);\napplyMixins(TextField, StartEnd, DelegatesARIATextbox);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/text-field/text-field.js"],"names":["__decorate","attr","DOM","nullableNumberConverter","observable","ARIAGlobalStatesAndProperties","StartEnd","applyMixins","FormAssociatedTextField","TextFieldType","TextField","constructor","arguments","type","text","readOnlyChanged","proxy","HTMLInputElement","readOnly","validate","autofocusChanged","autofocus","placeholderChanged","placeholder","typeChanged","listChanged","setAttribute","list","maxlengthChanged","maxLength","maxlength","minlengthChanged","minLength","minlength","patternChanged","pattern","sizeChanged","size","spellcheckChanged","spellcheck","connectedCallback","queueUpdate","focus","handleTextInput","value","control","handleChange","$emit","attribute","mode","prototype","converter","DelegatesARIATextbox"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { ARIAGlobalStatesAndProperties, StartEnd, } from \"../patterns/index\";\nimport { applyMixins } from \"../utilities/index\";\nimport { FormAssociatedTextField } from \"./text-field.form-associated\";\nimport { TextFieldType } from \"./text-field.options\";\nexport { TextFieldType };\n/**\n * A Text Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type=\"text\" /> element }.\n *\n * @public\n */\nexport class TextField extends FormAssociatedTextField {\n    constructor() {\n        super(...arguments);\n        /**\n         * Allows setting a type or mode of text.\n         * @public\n         * @remarks\n         * HTML Attribute: type\n         */\n        this.type = TextFieldType.text;\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n            this.validate();\n        }\n    }\n    autofocusChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.autofocus = this.autofocus;\n            this.validate();\n        }\n    }\n    placeholderChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.placeholder = this.placeholder;\n        }\n    }\n    typeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.type = this.type;\n            this.validate();\n        }\n    }\n    listChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.setAttribute(\"list\", this.list);\n            this.validate();\n        }\n    }\n    maxlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.maxLength = this.maxlength;\n            this.validate();\n        }\n    }\n    minlengthChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.minLength = this.minlength;\n            this.validate();\n        }\n    }\n    patternChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.pattern = this.pattern;\n            this.validate();\n        }\n    }\n    sizeChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.size = this.size;\n        }\n    }\n    spellcheckChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.spellcheck = this.spellcheck;\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.proxy.setAttribute(\"type\", this.type);\n        this.validate();\n        if (this.autofocus) {\n            DOM.queueUpdate(() => {\n                this.focus();\n            });\n        }\n    }\n    /**\n     * Handles the internal control's `input` event\n     * @internal\n     */\n    handleTextInput() {\n        this.value = this.control.value;\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * \"Change\" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit(\"change\");\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], TextField.prototype, \"readOnly\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextField.prototype, \"autofocus\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"placeholder\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"type\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"list\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"maxlength\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"minlength\", void 0);\n__decorate([\n    attr\n], TextField.prototype, \"pattern\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextField.prototype, \"size\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextField.prototype, \"spellcheck\", void 0);\n__decorate([\n    observable\n], TextField.prototype, \"defaultSlottedNodes\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA textbox role\n *\n * @public\n */\nexport class DelegatesARIATextbox {\n}\napplyMixins(DelegatesARIATextbox, ARIAGlobalStatesAndProperties);\napplyMixins(TextField, StartEnd, DelegatesARIATextbox);\n"]},"metadata":{},"sourceType":"module"}