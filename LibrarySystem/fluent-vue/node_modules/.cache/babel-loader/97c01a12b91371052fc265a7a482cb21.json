{"ast":null,"code":"import { h, defineComponent, provide, computed } from 'vue';\nimport { avatarGroupInjectionKey } from '../../avatar/src/context';\nimport NAvatar from '../../avatar/src/Avatar';\nimport { useConfig, useTheme } from '../../_mixins';\nimport style from './styles/avatar-group.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nimport { avatarGroupLight } from '../styles';\nconst avatarGroupProps = Object.assign(Object.assign({}, useTheme.props), {\n  max: Number,\n  maxStyle: [Object, String],\n  options: {\n    type: Array,\n    default: () => []\n  },\n  vertical: Boolean,\n  size: [String, Number]\n});\nexport default defineComponent({\n  name: 'AvatarGroup',\n  props: avatarGroupProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const mergedThemeRef = useTheme('AvatarGroup', '-avatar-group', style, avatarGroupLight, props, mergedClsPrefixRef);\n    provide(avatarGroupInjectionKey, props);\n    const rtlEnabledRef = useRtl('AvatarGroup', mergedRtlRef, mergedClsPrefixRef);\n    const restOptionsRef = computed(() => {\n      const {\n        max\n      } = props;\n      if (max === undefined) return undefined;\n      const {\n        options\n      } = props;\n      if (options.length > max) return options.slice(max - 1, options.length);\n      return [];\n    });\n    const displayedOptionsRef = computed(() => {\n      const {\n        options,\n        max\n      } = props;\n      if (max === undefined) return options;\n      if (options.length > max) return options.slice(0, max - 1);\n      if (options.length === max) return options.slice(0, max);\n      return options;\n    });\n    return {\n      mergedTheme: mergedThemeRef,\n      rtlEnabled: rtlEnabledRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      restOptions: restOptionsRef,\n      displayedOptions: displayedOptionsRef\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix,\n      displayedOptions,\n      restOptions,\n      mergedTheme,\n      $slots\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-avatar-group`, this.rtlEnabled && `${mergedClsPrefix}-avatar-group--rtl`, this.vertical && `${mergedClsPrefix}-avatar-group--vertical`],\n      role: \"group\"\n    }, displayedOptions.map(option => {\n      return $slots.avatar ? $slots.avatar({\n        option\n      }) : h(NAvatar, {\n        src: option.src,\n        theme: mergedTheme.peers.Avatar,\n        themeOverrides: mergedTheme.peerOverrides.Avatar\n      });\n    }), restOptions !== undefined && restOptions.length > 0 && ($slots.rest ? $slots.rest({\n      options: restOptions,\n      rest: restOptions.length\n    }) : h(NAvatar, {\n      style: this.maxStyle,\n      theme: mergedTheme.peers.Avatar,\n      themeOverrides: mergedTheme.peerOverrides.Avatar\n    }, {\n      default: () => `+${restOptions.length}`\n    })));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/avatar-group/src/AvatarGroup.js"],"names":["h","defineComponent","provide","computed","avatarGroupInjectionKey","NAvatar","useConfig","useTheme","style","useRtl","avatarGroupLight","avatarGroupProps","Object","assign","props","max","Number","maxStyle","String","options","type","Array","default","vertical","Boolean","size","name","setup","mergedClsPrefixRef","mergedRtlRef","mergedThemeRef","rtlEnabledRef","restOptionsRef","undefined","length","slice","displayedOptionsRef","mergedTheme","rtlEnabled","mergedClsPrefix","restOptions","displayedOptions","render","$slots","class","role","map","option","avatar","src","theme","peers","Avatar","themeOverrides","peerOverrides","rest"],"mappings":"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","sourcesContent":["import { h, defineComponent, provide, computed } from 'vue';\nimport { avatarGroupInjectionKey } from '../../avatar/src/context';\nimport NAvatar from '../../avatar/src/Avatar';\nimport { useConfig, useTheme } from '../../_mixins';\nimport style from './styles/avatar-group.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nimport { avatarGroupLight } from '../styles';\nconst avatarGroupProps = Object.assign(Object.assign({}, useTheme.props), { max: Number, maxStyle: [Object, String], options: {\n        type: Array,\n        default: () => []\n    }, vertical: Boolean, size: [String, Number] });\nexport default defineComponent({\n    name: 'AvatarGroup',\n    props: avatarGroupProps,\n    setup(props) {\n        const { mergedClsPrefixRef, mergedRtlRef } = useConfig(props);\n        const mergedThemeRef = useTheme('AvatarGroup', '-avatar-group', style, avatarGroupLight, props, mergedClsPrefixRef);\n        provide(avatarGroupInjectionKey, props);\n        const rtlEnabledRef = useRtl('AvatarGroup', mergedRtlRef, mergedClsPrefixRef);\n        const restOptionsRef = computed(() => {\n            const { max } = props;\n            if (max === undefined)\n                return undefined;\n            const { options } = props;\n            if (options.length > max)\n                return options.slice(max - 1, options.length);\n            return [];\n        });\n        const displayedOptionsRef = computed(() => {\n            const { options, max } = props;\n            if (max === undefined)\n                return options;\n            if (options.length > max)\n                return options.slice(0, max - 1);\n            if (options.length === max)\n                return options.slice(0, max);\n            return options;\n        });\n        return {\n            mergedTheme: mergedThemeRef,\n            rtlEnabled: rtlEnabledRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            restOptions: restOptionsRef,\n            displayedOptions: displayedOptionsRef\n        };\n    },\n    render() {\n        const { mergedClsPrefix, displayedOptions, restOptions, mergedTheme, $slots } = this;\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-avatar-group`,\n                this.rtlEnabled && `${mergedClsPrefix}-avatar-group--rtl`,\n                this.vertical && `${mergedClsPrefix}-avatar-group--vertical`\n            ], role: \"group\" },\n            displayedOptions.map((option) => {\n                return $slots.avatar ? ($slots.avatar({ option })) : (h(NAvatar, { src: option.src, theme: mergedTheme.peers.Avatar, themeOverrides: mergedTheme.peerOverrides.Avatar }));\n            }),\n            restOptions !== undefined &&\n                restOptions.length > 0 &&\n                ($slots.rest ? ($slots.rest({ options: restOptions, rest: restOptions.length })) : (h(NAvatar, { style: this.maxStyle, theme: mergedTheme.peers.Avatar, themeOverrides: mergedTheme.peerOverrides.Avatar }, {\n                    default: () => `+${restOptions.length}`\n                })))));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}