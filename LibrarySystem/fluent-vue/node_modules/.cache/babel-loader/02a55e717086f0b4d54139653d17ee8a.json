{"ast":null,"code":"import { h, defineComponent, computed, provide, toRef, mergeProps, ref, cloneVNode } from 'vue';\nimport { useBreakpoints, useMemo } from 'vooks';\nimport { VResizeObserver } from 'vueuc';\nimport { pxfy, parseResponsivePropValue, beforeNextFrameOnce } from 'seemly';\nimport { defaultBreakpoints } from '../../config-provider/src/config';\nimport { useConfig } from '../../_mixins';\nimport { getSlot, flatten } from '../../_utils';\nimport { defaultSpan, gridInjectionKey } from './config';\nconst defaultCols = 24;\nconst gridProps = {\n  responsive: {\n    type: [String, Boolean],\n    default: 'self'\n  },\n  cols: {\n    type: [Number, String],\n    default: defaultCols\n  },\n  itemResponsive: Boolean,\n  collapsed: Boolean,\n  // may create grid rows < collapsedRows since a item may take all the row\n  collapsedRows: {\n    type: Number,\n    default: 1\n  },\n  itemStyle: [Object, String],\n  xGap: {\n    type: [Number, String],\n    default: 0\n  },\n  yGap: {\n    type: [Number, String],\n    default: 0\n  }\n};\nexport default defineComponent({\n  name: 'Grid',\n  inheritAttrs: false,\n  props: gridProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      mergedBreakpointsRef\n    } = useConfig(props);\n    const numRegex = /^\\d+$/;\n    const widthRef = ref(undefined);\n    const breakpointsRef = useBreakpoints((mergedBreakpointsRef === null || mergedBreakpointsRef === void 0 ? void 0 : mergedBreakpointsRef.value) || defaultBreakpoints);\n    const isResponsiveRef = useMemo(() => {\n      if (props.itemResponsive) return true;\n      if (!numRegex.test(props.cols.toString())) return true;\n      if (!numRegex.test(props.xGap.toString())) return true;\n      if (!numRegex.test(props.yGap.toString())) return true;\n      return false;\n    });\n    const responsiveQueryRef = computed(() => {\n      if (!isResponsiveRef.value) return undefined;\n      return props.responsive === 'self' ? widthRef.value : breakpointsRef.value;\n    });\n    const responsiveColsRef = useMemo(() => {\n      var _a;\n\n      return (_a = Number(parseResponsivePropValue(props.cols.toString(), responsiveQueryRef.value))) !== null && _a !== void 0 ? _a : defaultCols;\n    });\n    const responsiveXGapRef = useMemo(() => parseResponsivePropValue(props.xGap.toString(), responsiveQueryRef.value));\n    const responsiveYGapRef = useMemo(() => parseResponsivePropValue(props.yGap.toString(), responsiveQueryRef.value));\n\n    const handleResize = entry => {\n      widthRef.value = entry.contentRect.width;\n    };\n\n    const handleResizeRaf = entry => {\n      beforeNextFrameOnce(handleResize, entry);\n    };\n\n    const overflowRef = ref(false);\n    const handleResizeRef = computed(() => {\n      if (props.responsive === 'self') {\n        return handleResizeRaf;\n      }\n\n      return undefined;\n    });\n    provide(gridInjectionKey, {\n      itemStyleRef: toRef(props, 'itemStyle'),\n      xGapRef: responsiveXGapRef,\n      overflowRef\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      style: computed(() => {\n        return {\n          width: '100%',\n          display: 'grid',\n          gridTemplateColumns: `repeat(${responsiveColsRef.value}, minmax(0, 1fr))`,\n          columnGap: pxfy(responsiveXGapRef.value),\n          rowGap: pxfy(responsiveYGapRef.value)\n        };\n      }),\n      isResponsive: isResponsiveRef,\n      responsiveQuery: responsiveQueryRef,\n      responsiveCols: responsiveColsRef,\n      handleResize: handleResizeRef,\n      overflow: overflowRef\n    };\n  },\n\n  render() {\n    const renderContent = () => {\n      var _a, _b, _c, _d, _e, _f;\n\n      this.overflow = false; // render will be called twice when mounted, I can't figure out why\n      // 2 jobs will be pushed into job queues with same id, and then be flushed\n\n      const rawChildren = flatten(getSlot(this));\n      const childrenAndRawSpan = [];\n      const {\n        collapsed,\n        collapsedRows,\n        responsiveCols,\n        responsiveQuery\n      } = this;\n      rawChildren.forEach(child => {\n        var _a, _b, _c;\n\n        if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.__GRID_ITEM__) !== true) return;\n        const clonedChild = cloneVNode(child);\n        const rawChildSpan = Number((_c = parseResponsivePropValue((_b = clonedChild.props) === null || _b === void 0 ? void 0 : _b.span, responsiveQuery)) !== null && _c !== void 0 ? _c : defaultSpan);\n        if (rawChildSpan === 0) return;\n        childrenAndRawSpan.push({\n          child: clonedChild,\n          rawChildSpan\n        });\n      });\n      let suffixSpan = 0;\n      const maybeSuffixNode = (_a = childrenAndRawSpan[childrenAndRawSpan.length - 1]) === null || _a === void 0 ? void 0 : _a.child;\n\n      if (maybeSuffixNode === null || maybeSuffixNode === void 0 ? void 0 : maybeSuffixNode.props) {\n        const suffixPropValue = (_b = maybeSuffixNode.props) === null || _b === void 0 ? void 0 : _b.suffix;\n\n        if (suffixPropValue !== undefined && suffixPropValue !== false) {\n          suffixSpan = (_d = (_c = maybeSuffixNode.props) === null || _c === void 0 ? void 0 : _c.span) !== null && _d !== void 0 ? _d : defaultSpan;\n          maybeSuffixNode.props.privateSpan = suffixSpan;\n          maybeSuffixNode.props.privateColStart = responsiveCols + 1 - suffixSpan;\n          maybeSuffixNode.props.privateShow = true;\n        }\n      }\n\n      let spanCounter = 0;\n      let done = false;\n\n      for (const {\n        child,\n        rawChildSpan\n      } of childrenAndRawSpan) {\n        if (done) {\n          this.overflow = true;\n        }\n\n        if (!done) {\n          const childOffset = Number((_f = parseResponsivePropValue((_e = child.props) === null || _e === void 0 ? void 0 : _e.offset, responsiveQuery)) !== null && _f !== void 0 ? _f : 0);\n          const childSpan = Math.min(rawChildSpan + childOffset, responsiveCols) || 1;\n\n          if (!child.props) {\n            child.props = {\n              privateSpan: childSpan,\n              privateOffset: childOffset\n            };\n          } else {\n            child.props.privateSpan = childSpan;\n            child.props.privateOffset = childOffset;\n          }\n\n          if (collapsed) {\n            const remainder = spanCounter % responsiveCols;\n\n            if (childSpan + remainder > responsiveCols) {\n              spanCounter += responsiveCols - remainder;\n            }\n\n            if (childSpan + spanCounter + suffixSpan > collapsedRows * responsiveCols) {\n              done = true;\n            } else {\n              spanCounter += childSpan;\n            }\n          }\n        }\n\n        if (done) {\n          if (child.props) {\n            if (child.props.privateShow !== true) {\n              child.props.privateShow = false;\n            }\n          } else {\n            child.props = {\n              privateShow: false\n            };\n          }\n        }\n      }\n\n      return h('div', mergeProps({\n        class: `${this.mergedClsPrefix}-grid`,\n        style: this.style\n      }, this.$attrs), childrenAndRawSpan.map(({\n        child\n      }) => child));\n    };\n\n    return this.isResponsive && this.responsive === 'self' ? h(VResizeObserver, {\n      onResize: this.handleResize\n    }, {\n      default: renderContent\n    }) : renderContent();\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/grid/src/Grid.js"],"names":["h","defineComponent","computed","provide","toRef","mergeProps","ref","cloneVNode","useBreakpoints","useMemo","VResizeObserver","pxfy","parseResponsivePropValue","beforeNextFrameOnce","defaultBreakpoints","useConfig","getSlot","flatten","defaultSpan","gridInjectionKey","defaultCols","gridProps","responsive","type","String","Boolean","default","cols","Number","itemResponsive","collapsed","collapsedRows","itemStyle","Object","xGap","yGap","name","inheritAttrs","props","setup","mergedClsPrefixRef","mergedBreakpointsRef","numRegex","widthRef","undefined","breakpointsRef","value","isResponsiveRef","test","toString","responsiveQueryRef","responsiveColsRef","_a","responsiveXGapRef","responsiveYGapRef","handleResize","entry","contentRect","width","handleResizeRaf","overflowRef","handleResizeRef","itemStyleRef","xGapRef","mergedClsPrefix","style","display","gridTemplateColumns","columnGap","rowGap","isResponsive","responsiveQuery","responsiveCols","overflow","render","renderContent","_b","_c","_d","_e","_f","rawChildren","childrenAndRawSpan","forEach","child","__GRID_ITEM__","clonedChild","rawChildSpan","span","push","suffixSpan","maybeSuffixNode","length","suffixPropValue","suffix","privateSpan","privateColStart","privateShow","spanCounter","done","childOffset","offset","childSpan","Math","min","privateOffset","remainder","class","$attrs","map","onResize"],"mappings":"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","sourcesContent":["import { h, defineComponent, computed, provide, toRef, mergeProps, ref, cloneVNode } from 'vue';\nimport { useBreakpoints, useMemo } from 'vooks';\nimport { VResizeObserver } from 'vueuc';\nimport { pxfy, parseResponsivePropValue, beforeNextFrameOnce } from 'seemly';\nimport { defaultBreakpoints } from '../../config-provider/src/config';\nimport { useConfig } from '../../_mixins';\nimport { getSlot, flatten } from '../../_utils';\nimport { defaultSpan, gridInjectionKey } from './config';\nconst defaultCols = 24;\nconst gridProps = {\n    responsive: {\n        type: [String, Boolean],\n        default: 'self'\n    },\n    cols: {\n        type: [Number, String],\n        default: defaultCols\n    },\n    itemResponsive: Boolean,\n    collapsed: Boolean,\n    // may create grid rows < collapsedRows since a item may take all the row\n    collapsedRows: {\n        type: Number,\n        default: 1\n    },\n    itemStyle: [Object, String],\n    xGap: {\n        type: [Number, String],\n        default: 0\n    },\n    yGap: {\n        type: [Number, String],\n        default: 0\n    }\n};\nexport default defineComponent({\n    name: 'Grid',\n    inheritAttrs: false,\n    props: gridProps,\n    setup(props) {\n        const { mergedClsPrefixRef, mergedBreakpointsRef } = useConfig(props);\n        const numRegex = /^\\d+$/;\n        const widthRef = ref(undefined);\n        const breakpointsRef = useBreakpoints((mergedBreakpointsRef === null || mergedBreakpointsRef === void 0 ? void 0 : mergedBreakpointsRef.value) || defaultBreakpoints);\n        const isResponsiveRef = useMemo(() => {\n            if (props.itemResponsive)\n                return true;\n            if (!numRegex.test(props.cols.toString()))\n                return true;\n            if (!numRegex.test(props.xGap.toString()))\n                return true;\n            if (!numRegex.test(props.yGap.toString()))\n                return true;\n            return false;\n        });\n        const responsiveQueryRef = computed(() => {\n            if (!isResponsiveRef.value)\n                return undefined;\n            return props.responsive === 'self' ? widthRef.value : breakpointsRef.value;\n        });\n        const responsiveColsRef = useMemo(() => {\n            var _a;\n            return ((_a = Number(parseResponsivePropValue(props.cols.toString(), responsiveQueryRef.value))) !== null && _a !== void 0 ? _a : defaultCols);\n        });\n        const responsiveXGapRef = useMemo(() => parseResponsivePropValue(props.xGap.toString(), responsiveQueryRef.value));\n        const responsiveYGapRef = useMemo(() => parseResponsivePropValue(props.yGap.toString(), responsiveQueryRef.value));\n        const handleResize = (entry) => {\n            widthRef.value = entry.contentRect.width;\n        };\n        const handleResizeRaf = (entry) => {\n            beforeNextFrameOnce(handleResize, entry);\n        };\n        const overflowRef = ref(false);\n        const handleResizeRef = computed(() => {\n            if (props.responsive === 'self') {\n                return handleResizeRaf;\n            }\n            return undefined;\n        });\n        provide(gridInjectionKey, {\n            itemStyleRef: toRef(props, 'itemStyle'),\n            xGapRef: responsiveXGapRef,\n            overflowRef\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            style: computed(() => {\n                return {\n                    width: '100%',\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${responsiveColsRef.value}, minmax(0, 1fr))`,\n                    columnGap: pxfy(responsiveXGapRef.value),\n                    rowGap: pxfy(responsiveYGapRef.value)\n                };\n            }),\n            isResponsive: isResponsiveRef,\n            responsiveQuery: responsiveQueryRef,\n            responsiveCols: responsiveColsRef,\n            handleResize: handleResizeRef,\n            overflow: overflowRef\n        };\n    },\n    render() {\n        const renderContent = () => {\n            var _a, _b, _c, _d, _e, _f;\n            this.overflow = false;\n            // render will be called twice when mounted, I can't figure out why\n            // 2 jobs will be pushed into job queues with same id, and then be flushed\n            const rawChildren = flatten(getSlot(this));\n            const childrenAndRawSpan = [];\n            const { collapsed, collapsedRows, responsiveCols, responsiveQuery } = this;\n            rawChildren.forEach((child) => {\n                var _a, _b, _c;\n                if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.__GRID_ITEM__) !== true)\n                    return;\n                const clonedChild = cloneVNode(child);\n                const rawChildSpan = Number((_c = parseResponsivePropValue((_b = clonedChild.props) === null || _b === void 0 ? void 0 : _b.span, responsiveQuery)) !== null && _c !== void 0 ? _c : defaultSpan);\n                if (rawChildSpan === 0)\n                    return;\n                childrenAndRawSpan.push({\n                    child: clonedChild,\n                    rawChildSpan\n                });\n            });\n            let suffixSpan = 0;\n            const maybeSuffixNode = (_a = childrenAndRawSpan[childrenAndRawSpan.length - 1]) === null || _a === void 0 ? void 0 : _a.child;\n            if (maybeSuffixNode === null || maybeSuffixNode === void 0 ? void 0 : maybeSuffixNode.props) {\n                const suffixPropValue = (_b = maybeSuffixNode.props) === null || _b === void 0 ? void 0 : _b.suffix;\n                if (suffixPropValue !== undefined && suffixPropValue !== false) {\n                    suffixSpan = (_d = (_c = maybeSuffixNode.props) === null || _c === void 0 ? void 0 : _c.span) !== null && _d !== void 0 ? _d : defaultSpan;\n                    maybeSuffixNode.props.privateSpan = suffixSpan;\n                    maybeSuffixNode.props.privateColStart =\n                        responsiveCols + 1 - suffixSpan;\n                    maybeSuffixNode.props.privateShow = true;\n                }\n            }\n            let spanCounter = 0;\n            let done = false;\n            for (const { child, rawChildSpan } of childrenAndRawSpan) {\n                if (done) {\n                    this.overflow = true;\n                }\n                if (!done) {\n                    const childOffset = Number((_f = parseResponsivePropValue((_e = child.props) === null || _e === void 0 ? void 0 : _e.offset, responsiveQuery)) !== null && _f !== void 0 ? _f : 0);\n                    const childSpan = Math.min(rawChildSpan + childOffset, responsiveCols) || 1;\n                    if (!child.props) {\n                        child.props = {\n                            privateSpan: childSpan,\n                            privateOffset: childOffset\n                        };\n                    }\n                    else {\n                        child.props.privateSpan = childSpan;\n                        child.props.privateOffset = childOffset;\n                    }\n                    if (collapsed) {\n                        const remainder = spanCounter % responsiveCols;\n                        if (childSpan + remainder > responsiveCols) {\n                            spanCounter += responsiveCols - remainder;\n                        }\n                        if (childSpan + spanCounter + suffixSpan >\n                            collapsedRows * responsiveCols) {\n                            done = true;\n                        }\n                        else {\n                            spanCounter += childSpan;\n                        }\n                    }\n                }\n                if (done) {\n                    if (child.props) {\n                        if (child.props.privateShow !== true) {\n                            child.props.privateShow = false;\n                        }\n                    }\n                    else {\n                        child.props = {\n                            privateShow: false\n                        };\n                    }\n                }\n            }\n            return h('div', mergeProps({\n                class: `${this.mergedClsPrefix}-grid`,\n                style: this.style\n            }, this.$attrs), childrenAndRawSpan.map(({ child }) => child));\n        };\n        return this.isResponsive && this.responsive === 'self' ? (h(VResizeObserver, { onResize: this.handleResize }, {\n            default: renderContent\n        })) : (renderContent());\n    }\n});\n"]},"metadata":{},"sourceType":"module"}