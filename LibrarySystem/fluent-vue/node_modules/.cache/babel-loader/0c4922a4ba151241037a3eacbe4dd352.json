{"ast":null,"code":"import { computed, inject, provide, onBeforeUnmount } from 'vue';\nimport { createInjectionKey } from '../_utils';\nexport const formItemInjectionKey = createInjectionKey('n-form-item');\nexport default function useFormItem(props, {\n  defaultSize = 'medium',\n  mergedSize,\n  mergedDisabled\n} = {}) {\n  const NFormItem = inject(formItemInjectionKey, null);\n  provide(formItemInjectionKey, null);\n  const mergedSizeRef = computed(mergedSize ? () => mergedSize(NFormItem) : () => {\n    const {\n      size\n    } = props;\n    if (size) return size;\n\n    if (NFormItem) {\n      const {\n        mergedSize\n      } = NFormItem;\n\n      if (mergedSize.value !== undefined) {\n        return mergedSize.value;\n      }\n    }\n\n    return defaultSize;\n  });\n  const mergedDisabledRef = computed(mergedDisabled ? () => mergedDisabled(NFormItem) : () => {\n    const {\n      disabled\n    } = props;\n\n    if (disabled !== undefined) {\n      return disabled;\n    }\n\n    if (NFormItem) {\n      return NFormItem.disabled.value;\n    }\n\n    return false;\n  });\n  const mergedStatusRef = computed(() => {\n    const {\n      status\n    } = props;\n    if (status) return status;\n    return NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.mergedValidationStatus.value;\n  });\n  onBeforeUnmount(() => {\n    if (NFormItem) {\n      NFormItem.restoreValidation();\n    }\n  });\n  return {\n    mergedSizeRef,\n    mergedDisabledRef,\n    mergedStatusRef,\n\n    nTriggerFormBlur() {\n      if (NFormItem) {\n        NFormItem.handleContentBlur();\n      }\n    },\n\n    nTriggerFormChange() {\n      if (NFormItem) {\n        NFormItem.handleContentChange();\n      }\n    },\n\n    nTriggerFormFocus() {\n      if (NFormItem) {\n        NFormItem.handleContentFocus();\n      }\n    },\n\n    nTriggerFormInput() {\n      if (NFormItem) {\n        NFormItem.handleContentInput();\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_mixins/use-form-item.js"],"names":["computed","inject","provide","onBeforeUnmount","createInjectionKey","formItemInjectionKey","useFormItem","props","defaultSize","mergedSize","mergedDisabled","NFormItem","mergedSizeRef","size","value","undefined","mergedDisabledRef","disabled","mergedStatusRef","status","mergedValidationStatus","restoreValidation","nTriggerFormBlur","handleContentBlur","nTriggerFormChange","handleContentChange","nTriggerFormFocus","handleContentFocus","nTriggerFormInput","handleContentInput"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,eAApC,QAA2D,KAA3D;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,OAAO,MAAMC,oBAAoB,GAAGD,kBAAkB,CAAC,aAAD,CAA/C;AACP,eAAe,SAASE,WAAT,CAAqBC,KAArB,EAA4B;AAAEC,EAAAA,WAAW,GAAG,QAAhB;AAA0BC,EAAAA,UAA1B;AAAsCC,EAAAA;AAAtC,IAAyD,EAArF,EAAyF;AACpG,QAAMC,SAAS,GAAGV,MAAM,CAACI,oBAAD,EAAuB,IAAvB,CAAxB;AACAH,EAAAA,OAAO,CAACG,oBAAD,EAAuB,IAAvB,CAAP;AACA,QAAMO,aAAa,GAAGZ,QAAQ,CAACS,UAAU,GACnC,MAAMA,UAAU,CAACE,SAAD,CADmB,GAEnC,MAAM;AACJ,UAAM;AAAEE,MAAAA;AAAF,QAAWN,KAAjB;AACA,QAAIM,IAAJ,EACI,OAAOA,IAAP;;AACJ,QAAIF,SAAJ,EAAe;AACX,YAAM;AAAEF,QAAAA;AAAF,UAAiBE,SAAvB;;AACA,UAAIF,UAAU,CAACK,KAAX,KAAqBC,SAAzB,EAAoC;AAChC,eAAON,UAAU,CAACK,KAAlB;AACH;AACJ;;AACD,WAAON,WAAP;AACH,GAbyB,CAA9B;AAcA,QAAMQ,iBAAiB,GAAGhB,QAAQ,CAACU,cAAc,GAC3C,MAAMA,cAAc,CAACC,SAAD,CADuB,GAE3C,MAAM;AACJ,UAAM;AAAEM,MAAAA;AAAF,QAAeV,KAArB;;AACA,QAAIU,QAAQ,KAAKF,SAAjB,EAA4B;AACxB,aAAOE,QAAP;AACH;;AACD,QAAIN,SAAJ,EAAe;AACX,aAAOA,SAAS,CAACM,QAAV,CAAmBH,KAA1B;AACH;;AACD,WAAO,KAAP;AACH,GAX6B,CAAlC;AAYA,QAAMI,eAAe,GAAGlB,QAAQ,CAAC,MAAM;AACnC,UAAM;AAAEmB,MAAAA;AAAF,QAAaZ,KAAnB;AACA,QAAIY,MAAJ,EACI,OAAOA,MAAP;AACJ,WAAOR,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACS,sBAAV,CAAiCN,KAA9F;AACH,GAL+B,CAAhC;AAMAX,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAIQ,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACU,iBAAV;AACH;AACJ,GAJc,CAAf;AAKA,SAAO;AACHT,IAAAA,aADG;AAEHI,IAAAA,iBAFG;AAGHE,IAAAA,eAHG;;AAIHI,IAAAA,gBAAgB,GAAG;AACf,UAAIX,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACY,iBAAV;AACH;AACJ,KARE;;AASHC,IAAAA,kBAAkB,GAAG;AACjB,UAAIb,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACc,mBAAV;AACH;AACJ,KAbE;;AAcHC,IAAAA,iBAAiB,GAAG;AAChB,UAAIf,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACgB,kBAAV;AACH;AACJ,KAlBE;;AAmBHC,IAAAA,iBAAiB,GAAG;AAChB,UAAIjB,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACkB,kBAAV;AACH;AACJ;;AAvBE,GAAP;AAyBH","sourcesContent":["import { computed, inject, provide, onBeforeUnmount } from 'vue';\nimport { createInjectionKey } from '../_utils';\nexport const formItemInjectionKey = createInjectionKey('n-form-item');\nexport default function useFormItem(props, { defaultSize = 'medium', mergedSize, mergedDisabled } = {}) {\n    const NFormItem = inject(formItemInjectionKey, null);\n    provide(formItemInjectionKey, null);\n    const mergedSizeRef = computed(mergedSize\n        ? () => mergedSize(NFormItem)\n        : () => {\n            const { size } = props;\n            if (size)\n                return size;\n            if (NFormItem) {\n                const { mergedSize } = NFormItem;\n                if (mergedSize.value !== undefined) {\n                    return mergedSize.value;\n                }\n            }\n            return defaultSize;\n        });\n    const mergedDisabledRef = computed(mergedDisabled\n        ? () => mergedDisabled(NFormItem)\n        : () => {\n            const { disabled } = props;\n            if (disabled !== undefined) {\n                return disabled;\n            }\n            if (NFormItem) {\n                return NFormItem.disabled.value;\n            }\n            return false;\n        });\n    const mergedStatusRef = computed(() => {\n        const { status } = props;\n        if (status)\n            return status;\n        return NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.mergedValidationStatus.value;\n    });\n    onBeforeUnmount(() => {\n        if (NFormItem) {\n            NFormItem.restoreValidation();\n        }\n    });\n    return {\n        mergedSizeRef,\n        mergedDisabledRef,\n        mergedStatusRef,\n        nTriggerFormBlur() {\n            if (NFormItem) {\n                NFormItem.handleContentBlur();\n            }\n        },\n        nTriggerFormChange() {\n            if (NFormItem) {\n                NFormItem.handleContentChange();\n            }\n        },\n        nTriggerFormFocus() {\n            if (NFormItem) {\n                NFormItem.handleContentFocus();\n            }\n        },\n        nTriggerFormInput() {\n            if (NFormItem) {\n                NFormItem.handleContentInput();\n            }\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}