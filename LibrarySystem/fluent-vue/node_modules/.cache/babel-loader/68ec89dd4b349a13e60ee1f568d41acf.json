{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction lowBit(n) {\n  return n & -n;\n}\n\nexport class FinweckTree {\n  /**\n   * @param l length of the array\n   * @param min min value of the array\n   */\n  constructor(l, min) {\n    this.l = l;\n    this.min = min;\n    const ft = new Array(l + 1);\n\n    for (let i = 0; i < l + 1; ++i) {\n      ft[i] = 0;\n    }\n\n    this.ft = ft;\n  }\n  /**\n   * Add arr[i] by n, start from 0\n   * @param i the index of the element to be added\n   * @param n the value to be added\n   */\n\n\n  add(i, n) {\n    if (n === 0) return;\n    const {\n      l,\n      ft\n    } = this;\n    i += 1;\n\n    while (i <= l) {\n      ft[i] += n;\n      i += lowBit(i);\n    }\n  }\n  /**\n   * Get the value of index i\n   * @param i index\n   * @returns value of the index\n   */\n\n\n  get(i) {\n    return this.sum(i + 1) - this.sum(i);\n  }\n  /**\n   * Get the sum of first i elements\n   * @param i count of head elements to be added\n   * @returns the sum of first i elements\n   */\n\n\n  sum(i) {\n    if (i === 0) return 0;\n    const {\n      ft,\n      min,\n      l\n    } = this;\n    if (i === undefined) i = l;\n    if (i > l) throw new Error('[FinweckTree.sum]: `i` is larger than length.');\n    let ret = i * min;\n\n    while (i > 0) {\n      ret += ft[i];\n      i -= lowBit(i);\n    }\n\n    return ret;\n  }\n  /**\n   * Get the largest count of head elements whose sum are <= threshold\n   * @param threshold\n   * @returns the largest count of head elements whose sum are <= threshold\n   */\n\n\n  getBound(threshold) {\n    let l = 0;\n    let r = this.l;\n\n    while (r > l) {\n      const m = Math.floor((l + r) / 2);\n      const sumM = this.sum(m);\n\n      if (sumM > threshold) {\n        r = m;\n        continue;\n      } else if (sumM < threshold) {\n        if (l === m) {\n          if (this.sum(l + 1) <= threshold) return l + 1;\n          return m;\n        }\n\n        l = m;\n      } else {\n        return m;\n      }\n    }\n\n    return l;\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vueuc/es/shared/finweck-tree.js"],"names":["lowBit","n","FinweckTree","constructor","l","min","ft","Array","i","add","get","sum","undefined","Error","ret","getBound","threshold","r","m","Math","floor","sumM"],"mappings":"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","sourcesContent":["function lowBit(n) {\n    return n & -n;\n}\nexport class FinweckTree {\n    /**\n     * @param l length of the array\n     * @param min min value of the array\n     */\n    constructor(l, min) {\n        this.l = l;\n        this.min = min;\n        const ft = new Array(l + 1);\n        for (let i = 0; i < l + 1; ++i) {\n            ft[i] = 0;\n        }\n        this.ft = ft;\n    }\n    /**\n     * Add arr[i] by n, start from 0\n     * @param i the index of the element to be added\n     * @param n the value to be added\n     */\n    add(i, n) {\n        if (n === 0)\n            return;\n        const { l, ft } = this;\n        i += 1;\n        while (i <= l) {\n            ft[i] += n;\n            i += lowBit(i);\n        }\n    }\n    /**\n     * Get the value of index i\n     * @param i index\n     * @returns value of the index\n     */\n    get(i) {\n        return this.sum(i + 1) - this.sum(i);\n    }\n    /**\n     * Get the sum of first i elements\n     * @param i count of head elements to be added\n     * @returns the sum of first i elements\n     */\n    sum(i) {\n        if (i === 0)\n            return 0;\n        const { ft, min, l } = this;\n        if (i === undefined)\n            i = l;\n        if (i > l)\n            throw new Error('[FinweckTree.sum]: `i` is larger than length.');\n        let ret = i * min;\n        while (i > 0) {\n            ret += ft[i];\n            i -= lowBit(i);\n        }\n        return ret;\n    }\n    /**\n     * Get the largest count of head elements whose sum are <= threshold\n     * @param threshold\n     * @returns the largest count of head elements whose sum are <= threshold\n     */\n    getBound(threshold) {\n        let l = 0;\n        let r = this.l;\n        while (r > l) {\n            const m = Math.floor((l + r) / 2);\n            const sumM = this.sum(m);\n            if (sumM > threshold) {\n                r = m;\n                continue;\n            }\n            else if (sumM < threshold) {\n                if (l === m) {\n                    if (this.sum(l + 1) <= threshold)\n                        return l + 1;\n                    return m;\n                }\n                l = m;\n            }\n            else {\n                return m;\n            }\n        }\n        return l;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}