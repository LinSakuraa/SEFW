{"ast":null,"code":"import { h, defineComponent, provide, Fragment, inject } from 'vue';\nimport { render } from '../../_utils';\nimport { useMenuChild } from './use-menu-child';\nimport { useMenuChildProps } from './use-menu-child-props'; // eslint-disable-next-line import/no-cycle\n\nimport { itemRenderer } from './utils';\nimport { submenuInjectionKey, menuInjectionKey, menuItemGroupInjectionKey } from './context';\nexport const menuItemGroupProps = Object.assign(Object.assign({}, useMenuChildProps), {\n  tmNodes: {\n    type: Array,\n    required: true\n  }\n});\nexport const NMenuOptionGroup = defineComponent({\n  name: 'MenuOptionGroup',\n  props: menuItemGroupProps,\n\n  setup(props) {\n    provide(submenuInjectionKey, null);\n    const MenuChild = useMenuChild(props);\n    provide(menuItemGroupInjectionKey, {\n      paddingLeftRef: MenuChild.paddingLeft\n    }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const {\n      mergedClsPrefixRef,\n      props: menuProps\n    } = inject(menuInjectionKey);\n    return function () {\n      const {\n        value: mergedClsPrefix\n      } = mergedClsPrefixRef;\n      const paddingLeft = MenuChild.paddingLeft.value;\n      return h(\"div\", {\n        class: `${mergedClsPrefix}-menu-item-group`,\n        role: \"group\"\n      }, h(\"span\", {\n        class: `${mergedClsPrefix}-menu-item-group-title`,\n        style: paddingLeft !== undefined ? `padding-left: ${paddingLeft}px;` : undefined\n      }, render(props.title), props.extra ? h(Fragment, null, \" \", render(props.extra)) : null), h(\"div\", null, props.tmNodes.map(tmNode => itemRenderer(tmNode, menuProps))));\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/menu/src/MenuOptionGroup.js"],"names":["h","defineComponent","provide","Fragment","inject","render","useMenuChild","useMenuChildProps","itemRenderer","submenuInjectionKey","menuInjectionKey","menuItemGroupInjectionKey","menuItemGroupProps","Object","assign","tmNodes","type","Array","required","NMenuOptionGroup","name","props","setup","MenuChild","paddingLeftRef","paddingLeft","mergedClsPrefixRef","menuProps","value","mergedClsPrefix","class","role","style","undefined","title","extra","map","tmNode"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,MAAhD,QAA8D,KAA9D;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iBAAT,QAAkC,wBAAlC,C,CACA;;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,yBAAhD,QAAiF,WAAjF;AACA,OAAO,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,iBAAlB,CAAd,EAAoD;AAAEQ,EAAAA,OAAO,EAAE;AACzFC,IAAAA,IAAI,EAAEC,KADmF;AAEzFC,IAAAA,QAAQ,EAAE;AAF+E;AAAX,CAApD,CAA3B;AAIP,OAAO,MAAMC,gBAAgB,GAAGlB,eAAe,CAAC;AAC5CmB,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,KAAK,EAAET,kBAFqC;;AAG5CU,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACTnB,IAAAA,OAAO,CAACO,mBAAD,EAAsB,IAAtB,CAAP;AACA,UAAMc,SAAS,GAAGjB,YAAY,CAACe,KAAD,CAA9B;AACAnB,IAAAA,OAAO,CAACS,yBAAD,EAA4B;AAC/Ba,MAAAA,cAAc,EAAED,SAAS,CAACE;AADK,KAA5B,CAAP,CAHS,CAMT;;AACA,UAAM;AAAEC,MAAAA,kBAAF;AAAsBL,MAAAA,KAAK,EAAEM;AAA7B,QAA2CvB,MAAM,CAACM,gBAAD,CAAvD;AACA,WAAO,YAAY;AACf,YAAM;AAAEkB,QAAAA,KAAK,EAAEC;AAAT,UAA6BH,kBAAnC;AACA,YAAMD,WAAW,GAAGF,SAAS,CAACE,WAAV,CAAsBG,KAA1C;AACA,aAAQ5B,CAAC,CAAC,KAAD,EAAQ;AAAE8B,QAAAA,KAAK,EAAG,GAAED,eAAgB,kBAA5B;AAA+CE,QAAAA,IAAI,EAAE;AAArD,OAAR,EACL/B,CAAC,CAAC,MAAD,EAAS;AAAE8B,QAAAA,KAAK,EAAG,GAAED,eAAgB,wBAA5B;AAAqDG,QAAAA,KAAK,EAAEP,WAAW,KAAKQ,SAAhB,GAC3D,iBAAgBR,WAAY,KAD+B,GAE5DQ;AAFA,OAAT,EAGG5B,MAAM,CAACgB,KAAK,CAACa,KAAP,CAHT,EAIGb,KAAK,CAACc,KAAN,GAAcnC,CAAC,CAACG,QAAD,EAAW,IAAX,EACX,GADW,EAEXE,MAAM,CAACgB,KAAK,CAACc,KAAP,CAFK,CAAf,GAE2B,IAN9B,CADI,EAQLnC,CAAC,CAAC,KAAD,EAAQ,IAAR,EAAcqB,KAAK,CAACN,OAAN,CAAcqB,GAAd,CAAmBC,MAAD,IAAY7B,YAAY,CAAC6B,MAAD,EAASV,SAAT,CAA1C,CAAd,CARI,CAAT;AASH,KAZD;AAaH;;AAxB2C,CAAD,CAAxC","sourcesContent":["import { h, defineComponent, provide, Fragment, inject } from 'vue';\nimport { render } from '../../_utils';\nimport { useMenuChild } from './use-menu-child';\nimport { useMenuChildProps } from './use-menu-child-props';\n// eslint-disable-next-line import/no-cycle\nimport { itemRenderer } from './utils';\nimport { submenuInjectionKey, menuInjectionKey, menuItemGroupInjectionKey } from './context';\nexport const menuItemGroupProps = Object.assign(Object.assign({}, useMenuChildProps), { tmNodes: {\n        type: Array,\n        required: true\n    } });\nexport const NMenuOptionGroup = defineComponent({\n    name: 'MenuOptionGroup',\n    props: menuItemGroupProps,\n    setup(props) {\n        provide(submenuInjectionKey, null);\n        const MenuChild = useMenuChild(props);\n        provide(menuItemGroupInjectionKey, {\n            paddingLeftRef: MenuChild.paddingLeft\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { mergedClsPrefixRef, props: menuProps } = inject(menuInjectionKey);\n        return function () {\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            const paddingLeft = MenuChild.paddingLeft.value;\n            return (h(\"div\", { class: `${mergedClsPrefix}-menu-item-group`, role: \"group\" },\n                h(\"span\", { class: `${mergedClsPrefix}-menu-item-group-title`, style: paddingLeft !== undefined\n                        ? `padding-left: ${paddingLeft}px;`\n                        : undefined },\n                    render(props.title),\n                    props.extra ? h(Fragment, null,\n                        \" \",\n                        render(props.extra)) : null),\n                h(\"div\", null, props.tmNodes.map((tmNode) => itemRenderer(tmNode, menuProps)))));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}