{"ast":null,"code":"import { h, defineComponent, inject, ref, onMounted, watch, toRef, computed } from 'vue';\nimport { logInjectionKey } from './context';\nexport default defineComponent({\n  props: {\n    line: {\n      type: String,\n      default: ''\n    }\n  },\n\n  setup(props) {\n    const {\n      trimRef,\n      highlightRef,\n      languageRef,\n      mergedHljsRef\n    } = // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(logInjectionKey);\n    const selfRef = ref(null);\n    const maybeTrimmedLinesRef = computed(() => {\n      return trimRef.value ? props.line.trim() : props.line;\n    });\n\n    function setInnerHTML() {\n      if (selfRef.value) {\n        selfRef.value.innerHTML = generateCodeHTML(languageRef.value, maybeTrimmedLinesRef.value);\n      }\n    }\n\n    function generateCodeHTML(language, code) {\n      const {\n        value: hljs\n      } = mergedHljsRef;\n\n      if (hljs) {\n        if (language && hljs.getLanguage(language)) {\n          return hljs.highlight(code, {\n            language\n          }).value;\n        }\n      }\n\n      return code;\n    }\n\n    onMounted(() => {\n      if (highlightRef.value) {\n        setInnerHTML();\n      }\n    });\n    watch(toRef(props, 'line'), () => {\n      if (highlightRef.value) {\n        setInnerHTML();\n      }\n    });\n    return {\n      highlight: highlightRef,\n      selfRef,\n      maybeTrimmedLines: maybeTrimmedLinesRef\n    };\n  },\n\n  render() {\n    const {\n      highlight,\n      maybeTrimmedLines\n    } = this;\n    return h(\"pre\", {\n      ref: \"selfRef\"\n    }, highlight ? null : maybeTrimmedLines);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/log/src/LogLine.js"],"names":["h","defineComponent","inject","ref","onMounted","watch","toRef","computed","logInjectionKey","props","line","type","String","default","setup","trimRef","highlightRef","languageRef","mergedHljsRef","selfRef","maybeTrimmedLinesRef","value","trim","setInnerHTML","innerHTML","generateCodeHTML","language","code","hljs","getLanguage","highlight","maybeTrimmedLines","render"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,SAA1C,EAAqDC,KAArD,EAA4DC,KAA5D,EAAmEC,QAAnE,QAAmF,KAAnF;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,eAAeP,eAAe,CAAC;AAC3BQ,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAEC,MADJ;AAEFC,MAAAA,OAAO,EAAE;AAFP;AADH,GADoB;;AAO3BC,EAAAA,KAAK,CAACL,KAAD,EAAQ;AACT,UAAM;AAAEM,MAAAA,OAAF;AAAWC,MAAAA,YAAX;AAAyBC,MAAAA,WAAzB;AAAsCC,MAAAA;AAAtC,QACN;AACAhB,IAAAA,MAAM,CAACM,eAAD,CAFN;AAGA,UAAMW,OAAO,GAAGhB,GAAG,CAAC,IAAD,CAAnB;AACA,UAAMiB,oBAAoB,GAAGb,QAAQ,CAAC,MAAM;AACxC,aAAOQ,OAAO,CAACM,KAAR,GAAgBZ,KAAK,CAACC,IAAN,CAAWY,IAAX,EAAhB,GAAoCb,KAAK,CAACC,IAAjD;AACH,KAFoC,CAArC;;AAGA,aAASa,YAAT,GAAwB;AACpB,UAAIJ,OAAO,CAACE,KAAZ,EAAmB;AACfF,QAAAA,OAAO,CAACE,KAAR,CAAcG,SAAd,GAA0BC,gBAAgB,CAACR,WAAW,CAACI,KAAb,EAAoBD,oBAAoB,CAACC,KAAzC,CAA1C;AACH;AACJ;;AACD,aAASI,gBAAT,CAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AACtC,YAAM;AAAEN,QAAAA,KAAK,EAAEO;AAAT,UAAkBV,aAAxB;;AACA,UAAIU,IAAJ,EAAU;AACN,YAAIF,QAAQ,IAAIE,IAAI,CAACC,WAAL,CAAiBH,QAAjB,CAAhB,EAA4C;AACxC,iBAAOE,IAAI,CAACE,SAAL,CAAeH,IAAf,EAAqB;AAAED,YAAAA;AAAF,WAArB,EAAmCL,KAA1C;AACH;AACJ;;AACD,aAAOM,IAAP;AACH;;AACDvB,IAAAA,SAAS,CAAC,MAAM;AACZ,UAAIY,YAAY,CAACK,KAAjB,EAAwB;AACpBE,QAAAA,YAAY;AACf;AACJ,KAJQ,CAAT;AAKAlB,IAAAA,KAAK,CAACC,KAAK,CAACG,KAAD,EAAQ,MAAR,CAAN,EAAuB,MAAM;AAC9B,UAAIO,YAAY,CAACK,KAAjB,EAAwB;AACpBE,QAAAA,YAAY;AACf;AACJ,KAJI,CAAL;AAKA,WAAO;AACHO,MAAAA,SAAS,EAAEd,YADR;AAEHG,MAAAA,OAFG;AAGHY,MAAAA,iBAAiB,EAAEX;AAHhB,KAAP;AAKH,GA5C0B;;AA6C3BY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEF,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAmC,IAAzC;AACA,WAAO/B,CAAC,CAAC,KAAD,EAAQ;AAAEG,MAAAA,GAAG,EAAE;AAAP,KAAR,EAA4B2B,SAAS,GAAG,IAAH,GAAUC,iBAA/C,CAAR;AACH;;AAhD0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, inject, ref, onMounted, watch, toRef, computed } from 'vue';\nimport { logInjectionKey } from './context';\nexport default defineComponent({\n    props: {\n        line: {\n            type: String,\n            default: ''\n        }\n    },\n    setup(props) {\n        const { trimRef, highlightRef, languageRef, mergedHljsRef } = \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inject(logInjectionKey);\n        const selfRef = ref(null);\n        const maybeTrimmedLinesRef = computed(() => {\n            return trimRef.value ? props.line.trim() : props.line;\n        });\n        function setInnerHTML() {\n            if (selfRef.value) {\n                selfRef.value.innerHTML = generateCodeHTML(languageRef.value, maybeTrimmedLinesRef.value);\n            }\n        }\n        function generateCodeHTML(language, code) {\n            const { value: hljs } = mergedHljsRef;\n            if (hljs) {\n                if (language && hljs.getLanguage(language)) {\n                    return hljs.highlight(code, { language }).value;\n                }\n            }\n            return code;\n        }\n        onMounted(() => {\n            if (highlightRef.value) {\n                setInnerHTML();\n            }\n        });\n        watch(toRef(props, 'line'), () => {\n            if (highlightRef.value) {\n                setInnerHTML();\n            }\n        });\n        return {\n            highlight: highlightRef,\n            selfRef,\n            maybeTrimmedLines: maybeTrimmedLinesRef\n        };\n    },\n    render() {\n        const { highlight, maybeTrimmedLines } = this;\n        return h(\"pre\", { ref: \"selfRef\" }, highlight ? null : maybeTrimmedLines);\n    }\n});\n"]},"metadata":{},"sourceType":"module"}