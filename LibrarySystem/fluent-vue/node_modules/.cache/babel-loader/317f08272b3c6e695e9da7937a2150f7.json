{"ast":null,"code":"import { h, defineComponent, inject } from 'vue';\nimport { SwitcherIcon } from '../../_internal/icons';\nimport { NIconSwitchTransition, NBaseLoading, NBaseIcon } from '../../_internal';\nimport { treeInjectionKey } from './interface';\nexport default defineComponent({\n  name: 'NTreeSwitcher',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    expanded: Boolean,\n    hide: Boolean,\n    loading: Boolean,\n    onClick: Function\n  },\n\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const {\n      renderSwitcherIconRef\n    } = inject(treeInjectionKey, null);\n    return () => {\n      const {\n        clsPrefix\n      } = props;\n      return h(\"span\", {\n        \"data-switcher\": true,\n        class: [`${clsPrefix}-tree-node-switcher`, {\n          [`${clsPrefix}-tree-node-switcher--expanded`]: props.expanded,\n          [`${clsPrefix}-tree-node-switcher--hide`]: props.hide\n        }],\n        onClick: props.onClick\n      }, h(\"div\", {\n        class: `${clsPrefix}-tree-node-switcher__icon`\n      }, h(NIconSwitchTransition, null, {\n        default: () => {\n          if (props.loading) {\n            return h(NBaseLoading, {\n              clsPrefix: clsPrefix,\n              key: \"loading\",\n              radius: 85,\n              strokeWidth: 20\n            });\n          }\n\n          const {\n            value: renderSwitcherIcon\n          } = renderSwitcherIconRef;\n          return renderSwitcherIcon ? renderSwitcherIcon() : h(NBaseIcon, {\n            clsPrefix: clsPrefix,\n            key: \"switcher\"\n          }, {\n            default: () => h(SwitcherIcon, null)\n          });\n        }\n      })));\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/tree/src/TreeNodeSwitcher.js"],"names":["h","defineComponent","inject","SwitcherIcon","NIconSwitchTransition","NBaseLoading","NBaseIcon","treeInjectionKey","name","props","clsPrefix","type","String","required","expanded","Boolean","hide","loading","onClick","Function","setup","renderSwitcherIconRef","class","default","key","radius","strokeWidth","value","renderSwitcherIcon"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,MAA7B,QAA2C,KAA3C;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,qBAAT,EAAgCC,YAAhC,EAA8CC,SAA9C,QAA+D,iBAA/D;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,eAAeN,eAAe,CAAC;AAC3BO,EAAAA,IAAI,EAAE,eADqB;AAE3BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAEC,MADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH,KADR;AAKHC,IAAAA,QAAQ,EAAEC,OALP;AAMHC,IAAAA,IAAI,EAAED,OANH;AAOHE,IAAAA,OAAO,EAAEF,OAPN;AAQHG,IAAAA,OAAO,EAAEC;AARN,GAFoB;;AAY3BC,EAAAA,KAAK,CAACX,KAAD,EAAQ;AACT;AACA,UAAM;AAAEY,MAAAA;AAAF,QAA4BnB,MAAM,CAACK,gBAAD,EAAmB,IAAnB,CAAxC;AACA,WAAO,MAAM;AACT,YAAM;AAAEG,QAAAA;AAAF,UAAgBD,KAAtB;AACA,aAAQT,CAAC,CAAC,MAAD,EAAS;AAAE,yBAAiB,IAAnB;AAAyBsB,QAAAA,KAAK,EAAE,CACzC,GAAEZ,SAAU,qBAD6B,EAE1C;AACI,WAAE,GAAEA,SAAU,+BAAd,GAA+CD,KAAK,CAACK,QADzD;AAEI,WAAE,GAAEJ,SAAU,2BAAd,GAA2CD,KAAK,CAACO;AAFrD,SAF0C,CAAhC;AAMXE,QAAAA,OAAO,EAAET,KAAK,CAACS;AANJ,OAAT,EAOLlB,CAAC,CAAC,KAAD,EAAQ;AAAEsB,QAAAA,KAAK,EAAG,GAAEZ,SAAU;AAAtB,OAAR,EACGV,CAAC,CAACI,qBAAD,EAAwB,IAAxB,EAA8B;AAC3BmB,QAAAA,OAAO,EAAE,MAAM;AACX,cAAId,KAAK,CAACQ,OAAV,EAAmB;AACf,mBAAQjB,CAAC,CAACK,YAAD,EAAe;AAAEK,cAAAA,SAAS,EAAEA,SAAb;AAAwBc,cAAAA,GAAG,EAAE,SAA7B;AAAwCC,cAAAA,MAAM,EAAE,EAAhD;AAAoDC,cAAAA,WAAW,EAAE;AAAjE,aAAf,CAAT;AACH;;AACD,gBAAM;AAAEC,YAAAA,KAAK,EAAEC;AAAT,cAAgCP,qBAAtC;AACA,iBAAOO,kBAAkB,GAAIA,kBAAkB,EAAtB,GAA6B5B,CAAC,CAACM,SAAD,EAAY;AAAEI,YAAAA,SAAS,EAAEA,SAAb;AAAwBc,YAAAA,GAAG,EAAE;AAA7B,WAAZ,EAAuD;AAAED,YAAAA,OAAO,EAAE,MAAMvB,CAAC,CAACG,YAAD,EAAe,IAAf;AAAlB,WAAvD,CAAvD;AACH;AAP0B,OAA9B,CADJ,CAPI,CAAT;AAiBH,KAnBD;AAoBH;;AAnC0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, inject } from 'vue';\nimport { SwitcherIcon } from '../../_internal/icons';\nimport { NIconSwitchTransition, NBaseLoading, NBaseIcon } from '../../_internal';\nimport { treeInjectionKey } from './interface';\nexport default defineComponent({\n    name: 'NTreeSwitcher',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        expanded: Boolean,\n        hide: Boolean,\n        loading: Boolean,\n        onClick: Function\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { renderSwitcherIconRef } = inject(treeInjectionKey, null);\n        return () => {\n            const { clsPrefix } = props;\n            return (h(\"span\", { \"data-switcher\": true, class: [\n                    `${clsPrefix}-tree-node-switcher`,\n                    {\n                        [`${clsPrefix}-tree-node-switcher--expanded`]: props.expanded,\n                        [`${clsPrefix}-tree-node-switcher--hide`]: props.hide\n                    }\n                ], onClick: props.onClick },\n                h(\"div\", { class: `${clsPrefix}-tree-node-switcher__icon` },\n                    h(NIconSwitchTransition, null, {\n                        default: () => {\n                            if (props.loading) {\n                                return (h(NBaseLoading, { clsPrefix: clsPrefix, key: \"loading\", radius: 85, strokeWidth: 20 }));\n                            }\n                            const { value: renderSwitcherIcon } = renderSwitcherIconRef;\n                            return renderSwitcherIcon ? (renderSwitcherIcon()) : (h(NBaseIcon, { clsPrefix: clsPrefix, key: \"switcher\" }, { default: () => h(SwitcherIcon, null) }));\n                        }\n                    }))));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}