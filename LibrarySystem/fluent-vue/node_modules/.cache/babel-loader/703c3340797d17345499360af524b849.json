{"ast":null,"code":"import { pxfy } from 'seemly';\nimport { computed, defineComponent, h, Fragment, mergeProps } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { createKey, useHoudini } from '../../_utils';\nimport { skeletonLight } from '../styles';\nimport style from './styles/index.cssr';\nconst skeletonProps = Object.assign(Object.assign({}, useTheme.props), {\n  text: Boolean,\n  round: Boolean,\n  circle: Boolean,\n  height: [String, Number],\n  width: [String, Number],\n  size: String,\n  repeat: {\n    type: Number,\n    default: 1\n  },\n  animated: {\n    type: Boolean,\n    default: true\n  },\n  sharp: {\n    type: Boolean,\n    default: true\n  }\n});\nexport default defineComponent({\n  name: 'Skeleton',\n  inheritAttrs: false,\n  props: skeletonProps,\n\n  setup(props) {\n    useHoudini();\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const themeRef = useTheme('Skeleton', '-skeleton', style, skeletonLight, props, mergedClsPrefixRef);\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      style: computed(() => {\n        var _a, _b;\n\n        const theme = themeRef.value;\n        const {\n          common: {\n            cubicBezierEaseInOut\n          }\n        } = theme;\n        const selfThemeVars = theme.self;\n        const {\n          color,\n          colorEnd,\n          borderRadius\n        } = selfThemeVars;\n        let sizeHeight;\n        const {\n          circle,\n          sharp,\n          round,\n          width,\n          height,\n          size,\n          text,\n          animated\n        } = props;\n\n        if (size !== undefined) {\n          sizeHeight = selfThemeVars[createKey('height', size)];\n        }\n\n        const mergedWidth = circle ? (_a = width !== null && width !== void 0 ? width : height) !== null && _a !== void 0 ? _a : sizeHeight : width;\n        const mergedHeight = (_b = circle ? width !== null && width !== void 0 ? width : height : height) !== null && _b !== void 0 ? _b : sizeHeight;\n        return {\n          display: text ? 'inline-block' : '',\n          verticalAlign: text ? '-0.125em' : '',\n          borderRadius: circle ? '50%' : round ? '4096px' : sharp ? '' : borderRadius,\n          width: typeof mergedWidth === 'number' ? pxfy(mergedWidth) : mergedWidth,\n          height: typeof mergedHeight === 'number' ? pxfy(mergedHeight) : mergedHeight,\n          animation: !animated ? 'none' : '',\n          '--n-bezier': cubicBezierEaseInOut,\n          '--n-color-start': color,\n          '--n-color-end': colorEnd\n        };\n      })\n    };\n  },\n\n  render() {\n    const {\n      repeat,\n      style,\n      mergedClsPrefix,\n      $attrs\n    } = this; // BUG:\n    // Chrome devtools can't read the element\n    // Maybe it's a bug of chrome\n\n    const child = h('div', mergeProps({\n      class: `${mergedClsPrefix}-skeleton`,\n      style: style\n    }, $attrs));\n\n    if (repeat > 1) {\n      return h(Fragment, null, Array.apply(null, {\n        length: repeat\n      }).map(_ => [child, '\\n']));\n    }\n\n    return child;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/skeleton/src/Skeleton.js"],"names":["pxfy","computed","defineComponent","h","Fragment","mergeProps","useConfig","useTheme","createKey","useHoudini","skeletonLight","style","skeletonProps","Object","assign","props","text","Boolean","round","circle","height","String","Number","width","size","repeat","type","default","animated","sharp","name","inheritAttrs","setup","mergedClsPrefixRef","themeRef","mergedClsPrefix","_a","_b","theme","value","common","cubicBezierEaseInOut","selfThemeVars","self","color","colorEnd","borderRadius","sizeHeight","undefined","mergedWidth","mergedHeight","display","verticalAlign","animation","render","$attrs","child","class","Array","apply","length","map","_"],"mappings":"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","sourcesContent":["import { pxfy } from 'seemly';\nimport { computed, defineComponent, h, Fragment, mergeProps } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { createKey, useHoudini } from '../../_utils';\nimport { skeletonLight } from '../styles';\nimport style from './styles/index.cssr';\nconst skeletonProps = Object.assign(Object.assign({}, useTheme.props), { text: Boolean, round: Boolean, circle: Boolean, height: [String, Number], width: [String, Number], size: String, repeat: {\n        type: Number,\n        default: 1\n    }, animated: {\n        type: Boolean,\n        default: true\n    }, sharp: {\n        type: Boolean,\n        default: true\n    } });\nexport default defineComponent({\n    name: 'Skeleton',\n    inheritAttrs: false,\n    props: skeletonProps,\n    setup(props) {\n        useHoudini();\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Skeleton', '-skeleton', style, skeletonLight, props, mergedClsPrefixRef);\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            style: computed(() => {\n                var _a, _b;\n                const theme = themeRef.value;\n                const { common: { cubicBezierEaseInOut } } = theme;\n                const selfThemeVars = theme.self;\n                const { color, colorEnd, borderRadius } = selfThemeVars;\n                let sizeHeight;\n                const { circle, sharp, round, width, height, size, text, animated } = props;\n                if (size !== undefined) {\n                    sizeHeight = selfThemeVars[createKey('height', size)];\n                }\n                const mergedWidth = circle ? (_a = width !== null && width !== void 0 ? width : height) !== null && _a !== void 0 ? _a : sizeHeight : width;\n                const mergedHeight = (_b = (circle ? width !== null && width !== void 0 ? width : height : height)) !== null && _b !== void 0 ? _b : sizeHeight;\n                return {\n                    display: text ? 'inline-block' : '',\n                    verticalAlign: text ? '-0.125em' : '',\n                    borderRadius: circle\n                        ? '50%'\n                        : round\n                            ? '4096px'\n                            : sharp\n                                ? ''\n                                : borderRadius,\n                    width: typeof mergedWidth === 'number' ? pxfy(mergedWidth) : mergedWidth,\n                    height: typeof mergedHeight === 'number'\n                        ? pxfy(mergedHeight)\n                        : mergedHeight,\n                    animation: !animated ? 'none' : '',\n                    '--n-bezier': cubicBezierEaseInOut,\n                    '--n-color-start': color,\n                    '--n-color-end': colorEnd\n                };\n            })\n        };\n    },\n    render() {\n        const { repeat, style, mergedClsPrefix, $attrs } = this;\n        // BUG:\n        // Chrome devtools can't read the element\n        // Maybe it's a bug of chrome\n        const child = h('div', mergeProps({\n            class: `${mergedClsPrefix}-skeleton`,\n            style: style\n        }, $attrs));\n        if (repeat > 1) {\n            return (h(Fragment, null, Array.apply(null, { length: repeat }).map((_) => [\n                child,\n                '\\n'\n            ])));\n        }\n        return child;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}