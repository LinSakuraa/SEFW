{"ast":null,"code":"/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = function () {\n  if (typeof globalThis !== \"undefined\") {\n    // We're running in a modern environment.\n    return globalThis;\n  }\n\n  if (typeof global !== \"undefined\") {\n    // We're running in NodeJS\n    return global;\n  }\n\n  if (typeof self !== \"undefined\") {\n    // We're running in a worker.\n    return self;\n  }\n\n  if (typeof window !== \"undefined\") {\n    // We're running in the browser's main thread.\n    return window;\n  }\n\n  try {\n    // Hopefully we never get here...\n    // Not all environments allow eval and Function. Use only as a last resort:\n    // eslint-disable-next-line no-new-func\n    return new Function(\"return this\")();\n  } catch (_a) {\n    // If all fails, give up and create an object.\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return {};\n  }\n}(); // API-only Polyfill for trustedTypes\n\nif ($global.trustedTypes === void 0) {\n  $global.trustedTypes = {\n    createPolicy: (n, r) => r\n  };\n}\n\nconst propConfig = {\n  configurable: false,\n  enumerable: false,\n  writable: false\n};\n\nif ($global.FAST === void 0) {\n  Reflect.defineProperty($global, \"FAST\", Object.assign({\n    value: Object.create(null)\n  }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\n\n\nexport const FAST = $global.FAST;\n\nif (FAST.getById === void 0) {\n  const storage = Object.create(null);\n  Reflect.defineProperty(FAST, \"getById\", Object.assign({\n    value(id, initialize) {\n      let found = storage[id];\n\n      if (found === void 0) {\n        found = initialize ? storage[id] = initialize() : null;\n      }\n\n      return found;\n    }\n\n  }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\n\n\nexport const emptyArray = Object.freeze([]);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/platform.js"],"names":["$global","globalThis","global","self","window","Function","_a","trustedTypes","createPolicy","n","r","propConfig","configurable","enumerable","writable","FAST","Reflect","defineProperty","Object","assign","value","create","getById","storage","id","initialize","found","emptyArray","freeze"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,OAAO,GAAI,YAAY;AAChC,MAAI,OAAOC,UAAP,KAAsB,WAA1B,EAAuC;AACnC;AACA,WAAOA,UAAP;AACH;;AACD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B;AACA,WAAOA,MAAP;AACH;;AACD,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC7B;AACA,WAAOA,IAAP;AACH;;AACD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B;AACA,WAAOA,MAAP;AACH;;AACD,MAAI;AACA;AACA;AACA;AACA,WAAO,IAAIC,QAAJ,CAAa,aAAb,GAAP;AACH,GALD,CAMA,OAAOC,EAAP,EAAW;AACP;AACA;AACA,WAAO,EAAP;AACH;AACJ,CA5BsB,EAAhB,C,CA6BP;;AACA,IAAIN,OAAO,CAACO,YAAR,KAAyB,KAAK,CAAlC,EAAqC;AACjCP,EAAAA,OAAO,CAACO,YAAR,GAAuB;AAAEC,IAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUA;AAA1B,GAAvB;AACH;;AACD,MAAMC,UAAU,GAAG;AACfC,EAAAA,YAAY,EAAE,KADC;AAEfC,EAAAA,UAAU,EAAE,KAFG;AAGfC,EAAAA,QAAQ,EAAE;AAHK,CAAnB;;AAKA,IAAId,OAAO,CAACe,IAAR,KAAiB,KAAK,CAA1B,EAA6B;AACzBC,EAAAA,OAAO,CAACC,cAAR,CAAuBjB,OAAvB,EAAgC,MAAhC,EAAwCkB,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,KAAK,EAAEF,MAAM,CAACG,MAAP,CAAc,IAAd;AAAT,GAAd,EAA8CV,UAA9C,CAAxC;AACH;AACD;AACA;AACA;AACA;;;AACA,OAAO,MAAMI,IAAI,GAAGf,OAAO,CAACe,IAArB;;AACP,IAAIA,IAAI,CAACO,OAAL,KAAiB,KAAK,CAA1B,EAA6B;AACzB,QAAMC,OAAO,GAAGL,MAAM,CAACG,MAAP,CAAc,IAAd,CAAhB;AACAL,EAAAA,OAAO,CAACC,cAAR,CAAuBF,IAAvB,EAA6B,SAA7B,EAAwCG,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,KAAK,CAACI,EAAD,EAAKC,UAAL,EAAiB;AACtE,UAAIC,KAAK,GAAGH,OAAO,CAACC,EAAD,CAAnB;;AACA,UAAIE,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAClBA,QAAAA,KAAK,GAAGD,UAAU,GAAIF,OAAO,CAACC,EAAD,CAAP,GAAcC,UAAU,EAA5B,GAAkC,IAApD;AACH;;AACD,aAAOC,KAAP;AACH;;AANiD,GAAd,EAM/Bf,UAN+B,CAAxC;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMgB,UAAU,GAAGT,MAAM,CAACU,MAAP,CAAc,EAAd,CAAnB","sourcesContent":["/**\n * A reference to globalThis, with support\n * for browsers that don't yet support the spec.\n * @public\n */\nexport const $global = (function () {\n    if (typeof globalThis !== \"undefined\") {\n        // We're running in a modern environment.\n        return globalThis;\n    }\n    if (typeof global !== \"undefined\") {\n        // We're running in NodeJS\n        return global;\n    }\n    if (typeof self !== \"undefined\") {\n        // We're running in a worker.\n        return self;\n    }\n    if (typeof window !== \"undefined\") {\n        // We're running in the browser's main thread.\n        return window;\n    }\n    try {\n        // Hopefully we never get here...\n        // Not all environments allow eval and Function. Use only as a last resort:\n        // eslint-disable-next-line no-new-func\n        return new Function(\"return this\")();\n    }\n    catch (_a) {\n        // If all fails, give up and create an object.\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return {};\n    }\n})();\n// API-only Polyfill for trustedTypes\nif ($global.trustedTypes === void 0) {\n    $global.trustedTypes = { createPolicy: (n, r) => r };\n}\nconst propConfig = {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n};\nif ($global.FAST === void 0) {\n    Reflect.defineProperty($global, \"FAST\", Object.assign({ value: Object.create(null) }, propConfig));\n}\n/**\n * The FAST global.\n * @internal\n */\nexport const FAST = $global.FAST;\nif (FAST.getById === void 0) {\n    const storage = Object.create(null);\n    Reflect.defineProperty(FAST, \"getById\", Object.assign({ value(id, initialize) {\n            let found = storage[id];\n            if (found === void 0) {\n                found = initialize ? (storage[id] = initialize()) : null;\n            }\n            return found;\n        } }, propConfig));\n}\n/**\n * A readonly, empty array.\n * @remarks\n * Typically returned by APIs that return arrays when there are\n * no actual items to return.\n * @internal\n */\nexport const emptyArray = Object.freeze([]);\n"]},"metadata":{},"sourceType":"module"}