{"ast":null,"code":"import { h, toRef, ref, inject, defineComponent, watch } from 'vue';\nimport { useMemo } from 'vooks';\nimport { useInjectionCollection, useInjectionElementCollection } from '../../_utils/composable';\nimport { createInjectionKey, getTitleAttribute } from '../../_utils';\nexport const anchorInjectionKey = createInjectionKey('n-anchor');\nconst anchorLinkProps = {\n  title: String,\n  href: String\n};\nexport default defineComponent({\n  name: 'AnchorLink',\n  props: anchorLinkProps,\n\n  setup(props, {\n    slots\n  }) {\n    const titleRef = ref(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const NAnchor = inject(anchorInjectionKey);\n    const hrefRef = toRef(props, 'href');\n    const activeRef = useMemo(() => {\n      return hrefRef.value && hrefRef.value === NAnchor.activeHref.value;\n    });\n    useInjectionCollection(anchorInjectionKey, 'collectedLinkHrefs', hrefRef);\n    useInjectionElementCollection(anchorInjectionKey, 'titleEls', () => titleRef.value);\n    watch(activeRef, value => {\n      if (value && titleRef.value) {\n        NAnchor.updateBarPosition(titleRef.value);\n      }\n    });\n\n    function handleClick() {\n      if (props.href !== undefined) {\n        NAnchor.setActiveHref(props.href);\n      }\n    }\n\n    return () => {\n      var _a;\n\n      const {\n        value: mergedClsPrefix\n      } = NAnchor.mergedClsPrefix;\n      return h(\"div\", {\n        class: [`${mergedClsPrefix}-anchor-link`, activeRef.value && `${mergedClsPrefix}-anchor-link--active`]\n      }, h(\"a\", {\n        ref: titleRef,\n        class: [`${mergedClsPrefix}-anchor-link__title`],\n        href: props.href,\n        title: getTitleAttribute(props.title),\n        onClick: handleClick\n      }, props.title), (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/anchor/src/Link.js"],"names":["h","toRef","ref","inject","defineComponent","watch","useMemo","useInjectionCollection","useInjectionElementCollection","createInjectionKey","getTitleAttribute","anchorInjectionKey","anchorLinkProps","title","String","href","name","props","setup","slots","titleRef","NAnchor","hrefRef","activeRef","value","activeHref","updateBarPosition","handleClick","undefined","setActiveHref","_a","mergedClsPrefix","class","onClick","default","call"],"mappings":"AAAA,SAASA,CAAT,EAAYC,KAAZ,EAAmBC,GAAnB,EAAwBC,MAAxB,EAAgCC,eAAhC,EAAiDC,KAAjD,QAA8D,KAA9D;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,sBAAT,EAAiCC,6BAAjC,QAAsE,yBAAtE;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,cAAtD;AACA,OAAO,MAAMC,kBAAkB,GAAGF,kBAAkB,CAAC,UAAD,CAA7C;AACP,MAAMG,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAEC,MADa;AAEpBC,EAAAA,IAAI,EAAED;AAFc,CAAxB;AAIA,eAAeV,eAAe,CAAC;AAC3BY,EAAAA,IAAI,EAAE,YADqB;AAE3BC,EAAAA,KAAK,EAAEL,eAFoB;;AAG3BM,EAAAA,KAAK,CAACD,KAAD,EAAQ;AAAEE,IAAAA;AAAF,GAAR,EAAmB;AACpB,UAAMC,QAAQ,GAAGlB,GAAG,CAAC,IAAD,CAApB,CADoB,CAEpB;;AACA,UAAMmB,OAAO,GAAGlB,MAAM,CAACQ,kBAAD,CAAtB;AACA,UAAMW,OAAO,GAAGrB,KAAK,CAACgB,KAAD,EAAQ,MAAR,CAArB;AACA,UAAMM,SAAS,GAAGjB,OAAO,CAAC,MAAM;AAC5B,aAAOgB,OAAO,CAACE,KAAR,IAAiBF,OAAO,CAACE,KAAR,KAAkBH,OAAO,CAACI,UAAR,CAAmBD,KAA7D;AACH,KAFwB,CAAzB;AAGAjB,IAAAA,sBAAsB,CAACI,kBAAD,EAAqB,oBAArB,EAA2CW,OAA3C,CAAtB;AACAd,IAAAA,6BAA6B,CAACG,kBAAD,EAAqB,UAArB,EAAiC,MAAMS,QAAQ,CAACI,KAAhD,CAA7B;AACAnB,IAAAA,KAAK,CAACkB,SAAD,EAAaC,KAAD,IAAW;AACxB,UAAIA,KAAK,IAAIJ,QAAQ,CAACI,KAAtB,EAA6B;AACzBH,QAAAA,OAAO,CAACK,iBAAR,CAA0BN,QAAQ,CAACI,KAAnC;AACH;AACJ,KAJI,CAAL;;AAKA,aAASG,WAAT,GAAuB;AACnB,UAAIV,KAAK,CAACF,IAAN,KAAea,SAAnB,EAA8B;AAC1BP,QAAAA,OAAO,CAACQ,aAAR,CAAsBZ,KAAK,CAACF,IAA5B;AACH;AACJ;;AACD,WAAO,MAAM;AACT,UAAIe,EAAJ;;AACA,YAAM;AAAEN,QAAAA,KAAK,EAAEO;AAAT,UAA6BV,OAAO,CAACU,eAA3C;AACA,aAAQ/B,CAAC,CAAC,KAAD,EAAQ;AAAEgC,QAAAA,KAAK,EAAE,CACjB,GAAED,eAAgB,cADD,EAElBR,SAAS,CAACC,KAAV,IAAoB,GAAEO,eAAgB,sBAFpB;AAAT,OAAR,EAIL/B,CAAC,CAAC,GAAD,EAAM;AAAEE,QAAAA,GAAG,EAAEkB,QAAP;AAAiBY,QAAAA,KAAK,EAAE,CAAE,GAAED,eAAgB,qBAApB,CAAxB;AAAmEhB,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAA/E;AAAqFF,QAAAA,KAAK,EAAEH,iBAAiB,CAACO,KAAK,CAACJ,KAAP,CAA7G;AAA4HoB,QAAAA,OAAO,EAAEN;AAArI,OAAN,EAA0JV,KAAK,CAACJ,KAAhK,CAJI,EAIoK,CAACiB,EAAE,GAAGX,KAAK,CAACe,OAAZ,MAAyB,IAAzB,IAAiCJ,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GACzKA,EAAE,CAACK,IAAH,CAAQhB,KAAR,CALK,CAAT;AAMH,KATD;AAUH;;AAjC0B,CAAD,CAA9B","sourcesContent":["import { h, toRef, ref, inject, defineComponent, watch } from 'vue';\nimport { useMemo } from 'vooks';\nimport { useInjectionCollection, useInjectionElementCollection } from '../../_utils/composable';\nimport { createInjectionKey, getTitleAttribute } from '../../_utils';\nexport const anchorInjectionKey = createInjectionKey('n-anchor');\nconst anchorLinkProps = {\n    title: String,\n    href: String\n};\nexport default defineComponent({\n    name: 'AnchorLink',\n    props: anchorLinkProps,\n    setup(props, { slots }) {\n        const titleRef = ref(null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NAnchor = inject(anchorInjectionKey);\n        const hrefRef = toRef(props, 'href');\n        const activeRef = useMemo(() => {\n            return hrefRef.value && hrefRef.value === NAnchor.activeHref.value;\n        });\n        useInjectionCollection(anchorInjectionKey, 'collectedLinkHrefs', hrefRef);\n        useInjectionElementCollection(anchorInjectionKey, 'titleEls', () => titleRef.value);\n        watch(activeRef, (value) => {\n            if (value && titleRef.value) {\n                NAnchor.updateBarPosition(titleRef.value);\n            }\n        });\n        function handleClick() {\n            if (props.href !== undefined) {\n                NAnchor.setActiveHref(props.href);\n            }\n        }\n        return () => {\n            var _a;\n            const { value: mergedClsPrefix } = NAnchor.mergedClsPrefix;\n            return (h(\"div\", { class: [\n                    `${mergedClsPrefix}-anchor-link`,\n                    activeRef.value && `${mergedClsPrefix}-anchor-link--active`\n                ] },\n                h(\"a\", { ref: titleRef, class: [`${mergedClsPrefix}-anchor-link__title`], href: props.href, title: getTitleAttribute(props.title), onClick: handleClick }, props.title), (_a = slots.default) === null || _a === void 0 ? void 0 :\n                _a.call(slots)));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}