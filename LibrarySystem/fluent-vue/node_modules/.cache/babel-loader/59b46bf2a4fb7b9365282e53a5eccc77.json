{"ast":null,"code":"import { inject, ref, toRef } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { warn, call, createInjectionKey } from '../../_utils';\nconst radioProps = {\n  name: String,\n  value: {\n    type: [String, Number],\n    default: 'on'\n  },\n  checked: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultChecked: Boolean,\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  label: String,\n  size: String,\n  onUpdateChecked: [Function, Array],\n  'onUpdate:checked': [Function, Array],\n  // deprecated\n  checkedValue: {\n    type: Boolean,\n    validator: () => {\n      warn('radio', '`checked-value` is deprecated, please use `checked` instead.');\n      return true;\n    },\n    default: undefined\n  }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\n\nfunction setup(props) {\n  const formItem = useFormItem(props, {\n    mergedSize(NFormItem) {\n      const {\n        size\n      } = props;\n      if (size !== undefined) return size;\n\n      if (NRadioGroup) {\n        const {\n          mergedSizeRef: {\n            value: mergedSize\n          }\n        } = NRadioGroup;\n\n        if (mergedSize !== undefined) {\n          return mergedSize;\n        }\n      }\n\n      if (NFormItem) {\n        return NFormItem.mergedSize.value;\n      }\n\n      return 'medium';\n    },\n\n    mergedDisabled(NFormItem) {\n      if (props.disabled) return true;\n      if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value) return true;\n      if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value) return true;\n      return false;\n    }\n\n  });\n  const {\n    mergedSizeRef,\n    mergedDisabledRef\n  } = formItem;\n  const inputRef = ref(null);\n  const labelRef = ref(null);\n  const NRadioGroup = inject(radioGroupInjectionKey, null);\n  const uncontrolledCheckedRef = ref(props.defaultChecked);\n  const controlledCheckedRef = toRef(props, 'checked');\n  const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n  const renderSafeCheckedRef = useMemo(() => {\n    if (NRadioGroup) return NRadioGroup.valueRef.value === props.value;\n    return mergedCheckedRef.value;\n  });\n  const mergedNameRef = useMemo(() => {\n    const {\n      name\n    } = props;\n    if (name !== undefined) return name;\n    if (NRadioGroup) return NRadioGroup.nameRef.value;\n  });\n  const focusRef = ref(false);\n\n  function doUpdateChecked() {\n    if (NRadioGroup) {\n      const {\n        doUpdateValue\n      } = NRadioGroup;\n      const {\n        value\n      } = props;\n      call(doUpdateValue, value);\n    } else {\n      const {\n        onUpdateChecked,\n        'onUpdate:checked': _onUpdateChecked\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateChecked) call(onUpdateChecked, true);\n      if (_onUpdateChecked) call(_onUpdateChecked, true);\n      nTriggerFormInput();\n      nTriggerFormChange();\n      uncontrolledCheckedRef.value = true;\n    }\n  }\n\n  function toggle() {\n    if (mergedDisabledRef.value) return;\n\n    if (!renderSafeCheckedRef.value) {\n      doUpdateChecked();\n    }\n  }\n\n  function handleRadioInputChange() {\n    toggle();\n  }\n\n  function handleRadioInputBlur() {\n    focusRef.value = false;\n  }\n\n  function handleRadioInputFocus() {\n    focusRef.value = true;\n  }\n\n  return {\n    mergedClsPrefix: NRadioGroup ? NRadioGroup.mergedClsPrefixRef : useConfig(props).mergedClsPrefixRef,\n    inputRef,\n    labelRef,\n    mergedName: mergedNameRef,\n    mergedDisabled: mergedDisabledRef,\n    uncontrolledChecked: uncontrolledCheckedRef,\n    renderSafeChecked: renderSafeCheckedRef,\n    focus: focusRef,\n    mergedSize: mergedSizeRef,\n    handleRadioInputChange,\n    handleRadioInputBlur,\n    handleRadioInputFocus\n  };\n}\n\nsetup.props = radioProps;\nexport default setup;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/radio/src/use-radio.js"],"names":["inject","ref","toRef","useMemo","useMergedState","useConfig","useFormItem","warn","call","createInjectionKey","radioProps","name","String","value","type","Number","default","checked","Boolean","undefined","defaultChecked","disabled","label","size","onUpdateChecked","Function","Array","checkedValue","validator","radioGroupInjectionKey","setup","props","formItem","mergedSize","NFormItem","NRadioGroup","mergedSizeRef","mergedDisabled","disabledRef","mergedDisabledRef","inputRef","labelRef","uncontrolledCheckedRef","controlledCheckedRef","mergedCheckedRef","renderSafeCheckedRef","valueRef","mergedNameRef","nameRef","focusRef","doUpdateChecked","doUpdateValue","_onUpdateChecked","nTriggerFormInput","nTriggerFormChange","toggle","handleRadioInputChange","handleRadioInputBlur","handleRadioInputFocus","mergedClsPrefix","mergedClsPrefixRef","mergedName","uncontrolledChecked","renderSafeChecked","focus"],"mappings":"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","sourcesContent":["import { inject, ref, toRef } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { warn, call, createInjectionKey } from '../../_utils';\nconst radioProps = {\n    name: String,\n    value: {\n        type: [String, Number],\n        default: 'on'\n    },\n    checked: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultChecked: Boolean,\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    label: String,\n    size: String,\n    onUpdateChecked: [Function, Array],\n    'onUpdate:checked': [Function, Array],\n    // deprecated\n    checkedValue: {\n        type: Boolean,\n        validator: () => {\n            warn('radio', '`checked-value` is deprecated, please use `checked` instead.');\n            return true;\n        },\n        default: undefined\n    }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n    const formItem = useFormItem(props, {\n        mergedSize(NFormItem) {\n            const { size } = props;\n            if (size !== undefined)\n                return size;\n            if (NRadioGroup) {\n                const { mergedSizeRef: { value: mergedSize } } = NRadioGroup;\n                if (mergedSize !== undefined) {\n                    return mergedSize;\n                }\n            }\n            if (NFormItem) {\n                return NFormItem.mergedSize.value;\n            }\n            return 'medium';\n        },\n        mergedDisabled(NFormItem) {\n            if (props.disabled)\n                return true;\n            if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value)\n                return true;\n            if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value)\n                return true;\n            return false;\n        }\n    });\n    const { mergedSizeRef, mergedDisabledRef } = formItem;\n    const inputRef = ref(null);\n    const labelRef = ref(null);\n    const NRadioGroup = inject(radioGroupInjectionKey, null);\n    const uncontrolledCheckedRef = ref(props.defaultChecked);\n    const controlledCheckedRef = toRef(props, 'checked');\n    const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n    const renderSafeCheckedRef = useMemo(() => {\n        if (NRadioGroup)\n            return NRadioGroup.valueRef.value === props.value;\n        return mergedCheckedRef.value;\n    });\n    const mergedNameRef = useMemo(() => {\n        const { name } = props;\n        if (name !== undefined)\n            return name;\n        if (NRadioGroup)\n            return NRadioGroup.nameRef.value;\n    });\n    const focusRef = ref(false);\n    function doUpdateChecked() {\n        if (NRadioGroup) {\n            const { doUpdateValue } = NRadioGroup;\n            const { value } = props;\n            call(doUpdateValue, value);\n        }\n        else {\n            const { onUpdateChecked, 'onUpdate:checked': _onUpdateChecked } = props;\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            if (onUpdateChecked)\n                call(onUpdateChecked, true);\n            if (_onUpdateChecked)\n                call(_onUpdateChecked, true);\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledCheckedRef.value = true;\n        }\n    }\n    function toggle() {\n        if (mergedDisabledRef.value)\n            return;\n        if (!renderSafeCheckedRef.value) {\n            doUpdateChecked();\n        }\n    }\n    function handleRadioInputChange() {\n        toggle();\n    }\n    function handleRadioInputBlur() {\n        focusRef.value = false;\n    }\n    function handleRadioInputFocus() {\n        focusRef.value = true;\n    }\n    return {\n        mergedClsPrefix: NRadioGroup\n            ? NRadioGroup.mergedClsPrefixRef\n            : useConfig(props).mergedClsPrefixRef,\n        inputRef,\n        labelRef,\n        mergedName: mergedNameRef,\n        mergedDisabled: mergedDisabledRef,\n        uncontrolledChecked: uncontrolledCheckedRef,\n        renderSafeChecked: renderSafeCheckedRef,\n        focus: focusRef,\n        mergedSize: mergedSizeRef,\n        handleRadioInputChange,\n        handleRadioInputBlur,\n        handleRadioInputFocus\n    };\n}\nsetup.props = radioProps;\nexport default setup;\n"]},"metadata":{},"sourceType":"module"}