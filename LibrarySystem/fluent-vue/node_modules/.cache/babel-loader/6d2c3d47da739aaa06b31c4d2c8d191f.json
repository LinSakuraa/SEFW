{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { DelegatesARIATextbox } from \"../text-field/index\";\nimport { applyMixins } from \"../utilities\";\nimport { FormAssociatedTextArea } from \"./text-area.form-associated\";\nimport { TextAreaResize } from \"./text-area.options\";\nexport { TextAreaResize };\n/**\n * A Text Area Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.\n *\n * @public\n */\n\nexport class TextArea extends FormAssociatedTextArea {\n  constructor() {\n    super(...arguments);\n    /**\n     * The resize mode of the element.\n     * @public\n     * @remarks\n     * HTML Attribute: resize\n     */\n\n    this.resize = TextAreaResize.none;\n    /**\n     * Sizes the element horizontally by a number of character columns.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: cols\n     */\n\n    this.cols = 20;\n    /**\n     * @internal\n     */\n\n    this.handleTextInput = () => {\n      this.value = this.control.value;\n    };\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.readOnly = this.readOnly;\n    }\n  }\n\n  autofocusChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.autofocus = this.autofocus;\n    }\n  }\n\n  listChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.setAttribute(\"list\", this.list);\n    }\n  }\n\n  maxlengthChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.maxLength = this.maxlength;\n    }\n  }\n\n  minlengthChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.minLength = this.minlength;\n    }\n  }\n\n  spellcheckChanged() {\n    if (this.proxy instanceof HTMLTextAreaElement) {\n      this.proxy.spellcheck = this.spellcheck;\n    }\n  }\n  /**\n   * Change event handler for inner control.\n   * @remarks\n   * \"Change\" events are not `composable` so they will not\n   * permeate the shadow DOM boundary. This fn effectively proxies\n   * the change event, emitting a `change` event whenever the internal\n   * control emits a `change` event\n   * @internal\n   */\n\n\n  handleChange() {\n    this.$emit(\"change\");\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TextArea.prototype, \"readOnly\", void 0);\n\n__decorate([attr], TextArea.prototype, \"resize\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TextArea.prototype, \"autofocus\", void 0);\n\n__decorate([attr({\n  attribute: \"form\"\n})], TextArea.prototype, \"formId\", void 0);\n\n__decorate([attr], TextArea.prototype, \"list\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], TextArea.prototype, \"maxlength\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], TextArea.prototype, \"minlength\", void 0);\n\n__decorate([attr], TextArea.prototype, \"name\", void 0);\n\n__decorate([attr], TextArea.prototype, \"placeholder\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter,\n  mode: \"fromView\"\n})], TextArea.prototype, \"cols\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter,\n  mode: \"fromView\"\n})], TextArea.prototype, \"rows\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], TextArea.prototype, \"spellcheck\", void 0);\n\n__decorate([observable], TextArea.prototype, \"defaultSlottedNodes\", void 0);\n\napplyMixins(TextArea, DelegatesARIATextbox);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/text-area/text-area.js"],"names":["__decorate","attr","nullableNumberConverter","observable","DelegatesARIATextbox","applyMixins","FormAssociatedTextArea","TextAreaResize","TextArea","constructor","arguments","resize","none","cols","handleTextInput","value","control","readOnlyChanged","proxy","HTMLTextAreaElement","readOnly","autofocusChanged","autofocus","listChanged","setAttribute","list","maxlengthChanged","maxLength","maxlength","minlengthChanged","minLength","minlength","spellcheckChanged","spellcheck","handleChange","$emit","mode","prototype","attribute","converter"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { DelegatesARIATextbox } from \"../text-field/index\";\nimport { applyMixins } from \"../utilities\";\nimport { FormAssociatedTextArea } from \"./text-area.form-associated\";\nimport { TextAreaResize } from \"./text-area.options\";\nexport { TextAreaResize };\n/**\n * A Text Area Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.\n *\n * @public\n */\nexport class TextArea extends FormAssociatedTextArea {\n    constructor() {\n        super(...arguments);\n        /**\n         * The resize mode of the element.\n         * @public\n         * @remarks\n         * HTML Attribute: resize\n         */\n        this.resize = TextAreaResize.none;\n        /**\n         * Sizes the element horizontally by a number of character columns.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: cols\n         */\n        this.cols = 20;\n        /**\n         * @internal\n         */\n        this.handleTextInput = () => {\n            this.value = this.control.value;\n        };\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n    autofocusChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.autofocus = this.autofocus;\n        }\n    }\n    listChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.setAttribute(\"list\", this.list);\n        }\n    }\n    maxlengthChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.maxLength = this.maxlength;\n        }\n    }\n    minlengthChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.minLength = this.minlength;\n        }\n    }\n    spellcheckChanged() {\n        if (this.proxy instanceof HTMLTextAreaElement) {\n            this.proxy.spellcheck = this.spellcheck;\n        }\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * \"Change\" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit(\"change\");\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextArea.prototype, \"readOnly\", void 0);\n__decorate([\n    attr\n], TextArea.prototype, \"resize\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextArea.prototype, \"autofocus\", void 0);\n__decorate([\n    attr({ attribute: \"form\" })\n], TextArea.prototype, \"formId\", void 0);\n__decorate([\n    attr\n], TextArea.prototype, \"list\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextArea.prototype, \"maxlength\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], TextArea.prototype, \"minlength\", void 0);\n__decorate([\n    attr\n], TextArea.prototype, \"name\", void 0);\n__decorate([\n    attr\n], TextArea.prototype, \"placeholder\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter, mode: \"fromView\" })\n], TextArea.prototype, \"cols\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter, mode: \"fromView\" })\n], TextArea.prototype, \"rows\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], TextArea.prototype, \"spellcheck\", void 0);\n__decorate([\n    observable\n], TextArea.prototype, \"defaultSlottedNodes\", void 0);\napplyMixins(TextArea, DelegatesARIATextbox);\n"]},"metadata":{},"sourceType":"module"}