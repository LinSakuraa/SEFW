{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { observable } from \"@microsoft/fast-element\";\nimport { BreadcrumbItem } from \"../breadcrumb-item\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * A Breadcrumb Custom HTML Element.\n *\n * @public\n */\n\nexport class Breadcrumb extends FoundationElement {\n  slottedBreadcrumbItemsChanged() {\n    if (this.$fastController.isConnected) {\n      if (this.slottedBreadcrumbItems === undefined || this.slottedBreadcrumbItems.length === 0) {\n        return;\n      }\n\n      const lastNode = this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length - 1];\n      this.setItemSeparator(lastNode);\n      this.setLastItemAriaCurrent(lastNode);\n    }\n  }\n\n  setItemSeparator(lastNode) {\n    this.slottedBreadcrumbItems.forEach(item => {\n      if (item instanceof BreadcrumbItem) {\n        item.separator = true;\n      }\n    });\n\n    if (lastNode instanceof BreadcrumbItem) {\n      lastNode.separator = false;\n    }\n  }\n  /**\n   * @internal\n   * Finds href on childnodes in the light DOM or shadow DOM.\n   * We look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.\n   */\n\n\n  findChildWithHref(node) {\n    var _a, _b;\n\n    if (node.childElementCount > 0) {\n      return node.querySelector(\"a[href]\");\n    } else if ((_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.childElementCount) {\n      return (_b = node.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector(\"a[href]\");\n    } else return null;\n  }\n  /**\n   *  If child node with an anchor tag and with href is found then apply aria-current to child node otherwise apply aria-current to the host element, with an href\n   */\n\n\n  setLastItemAriaCurrent(lastNode) {\n    const childNodeWithHref = this.findChildWithHref(lastNode);\n\n    if (childNodeWithHref === null && lastNode.hasAttribute(\"href\") && lastNode instanceof BreadcrumbItem) {\n      lastNode.ariaCurrent = \"page\";\n    } else if (childNodeWithHref !== null) {\n      childNodeWithHref.setAttribute(\"aria-current\", \"page\");\n    }\n  }\n\n}\n\n__decorate([observable], Breadcrumb.prototype, \"slottedBreadcrumbItems\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/breadcrumb/breadcrumb.js"],"names":["__decorate","observable","BreadcrumbItem","FoundationElement","Breadcrumb","slottedBreadcrumbItemsChanged","$fastController","isConnected","slottedBreadcrumbItems","undefined","length","lastNode","setItemSeparator","setLastItemAriaCurrent","forEach","item","separator","findChildWithHref","node","_a","_b","childElementCount","querySelector","shadowRoot","childNodeWithHref","hasAttribute","ariaCurrent","setAttribute","prototype"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,SAAyBD,iBAAzB,CAA2C;AAC9CE,EAAAA,6BAA6B,GAAG;AAC5B,QAAI,KAAKC,eAAL,CAAqBC,WAAzB,EAAsC;AAClC,UAAI,KAAKC,sBAAL,KAAgCC,SAAhC,IACA,KAAKD,sBAAL,CAA4BE,MAA5B,KAAuC,CAD3C,EAC8C;AAC1C;AACH;;AACD,YAAMC,QAAQ,GAAG,KAAKH,sBAAL,CAA4B,KAAKA,sBAAL,CAA4BE,MAA5B,GAAqC,CAAjE,CAAjB;AACA,WAAKE,gBAAL,CAAsBD,QAAtB;AACA,WAAKE,sBAAL,CAA4BF,QAA5B;AACH;AACJ;;AACDC,EAAAA,gBAAgB,CAACD,QAAD,EAAW;AACvB,SAAKH,sBAAL,CAA4BM,OAA5B,CAAqCC,IAAD,IAAU;AAC1C,UAAIA,IAAI,YAAYb,cAApB,EAAoC;AAChCa,QAAAA,IAAI,CAACC,SAAL,GAAiB,IAAjB;AACH;AACJ,KAJD;;AAKA,QAAIL,QAAQ,YAAYT,cAAxB,EAAwC;AACpCS,MAAAA,QAAQ,CAACK,SAAT,GAAqB,KAArB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,QAAIC,EAAJ,EAAQC,EAAR;;AACA,QAAIF,IAAI,CAACG,iBAAL,GAAyB,CAA7B,EAAgC;AAC5B,aAAOH,IAAI,CAACI,aAAL,CAAmB,SAAnB,CAAP;AACH,KAFD,MAGK,IAAI,CAACH,EAAE,GAAGD,IAAI,CAACK,UAAX,MAA2B,IAA3B,IAAmCJ,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACE,iBAAnE,EAAsF;AACvF,aAAO,CAACD,EAAE,GAAGF,IAAI,CAACK,UAAX,MAA2B,IAA3B,IAAmCH,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACE,aAAH,CAAiB,SAAjB,CAAnE;AACH,KAFI,MAID,OAAO,IAAP;AACP;AACD;AACJ;AACA;;;AACIT,EAAAA,sBAAsB,CAACF,QAAD,EAAW;AAC7B,UAAMa,iBAAiB,GAAG,KAAKP,iBAAL,CAAuBN,QAAvB,CAA1B;;AACA,QAAIa,iBAAiB,KAAK,IAAtB,IACAb,QAAQ,CAACc,YAAT,CAAsB,MAAtB,CADA,IAEAd,QAAQ,YAAYT,cAFxB,EAEwC;AACpCS,MAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAvB;AACH,KAJD,MAKK,IAAIF,iBAAiB,KAAK,IAA1B,EAAgC;AACjCA,MAAAA,iBAAiB,CAACG,YAAlB,CAA+B,cAA/B,EAA+C,MAA/C;AACH;AACJ;;AAnD6C;;AAqDlD3B,UAAU,CAAC,CACPC,UADO,CAAD,EAEPG,UAAU,CAACwB,SAFJ,EAEe,wBAFf,EAEyC,KAAK,CAF9C,CAAV","sourcesContent":["import { __decorate } from \"tslib\";\nimport { observable } from \"@microsoft/fast-element\";\nimport { BreadcrumbItem } from \"../breadcrumb-item\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * A Breadcrumb Custom HTML Element.\n *\n * @public\n */\nexport class Breadcrumb extends FoundationElement {\n    slottedBreadcrumbItemsChanged() {\n        if (this.$fastController.isConnected) {\n            if (this.slottedBreadcrumbItems === undefined ||\n                this.slottedBreadcrumbItems.length === 0) {\n                return;\n            }\n            const lastNode = this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length - 1];\n            this.setItemSeparator(lastNode);\n            this.setLastItemAriaCurrent(lastNode);\n        }\n    }\n    setItemSeparator(lastNode) {\n        this.slottedBreadcrumbItems.forEach((item) => {\n            if (item instanceof BreadcrumbItem) {\n                item.separator = true;\n            }\n        });\n        if (lastNode instanceof BreadcrumbItem) {\n            lastNode.separator = false;\n        }\n    }\n    /**\n     * @internal\n     * Finds href on childnodes in the light DOM or shadow DOM.\n     * We look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.\n     */\n    findChildWithHref(node) {\n        var _a, _b;\n        if (node.childElementCount > 0) {\n            return node.querySelector(\"a[href]\");\n        }\n        else if ((_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.childElementCount) {\n            return (_b = node.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector(\"a[href]\");\n        }\n        else\n            return null;\n    }\n    /**\n     *  If child node with an anchor tag and with href is found then apply aria-current to child node otherwise apply aria-current to the host element, with an href\n     */\n    setLastItemAriaCurrent(lastNode) {\n        const childNodeWithHref = this.findChildWithHref(lastNode);\n        if (childNodeWithHref === null &&\n            lastNode.hasAttribute(\"href\") &&\n            lastNode instanceof BreadcrumbItem) {\n            lastNode.ariaCurrent = \"page\";\n        }\n        else if (childNodeWithHref !== null) {\n            childNodeWithHref.setAttribute(\"aria-current\", \"page\");\n        }\n    }\n}\n__decorate([\n    observable\n], Breadcrumb.prototype, \"slottedBreadcrumbItems\", void 0);\n"]},"metadata":{},"sourceType":"module"}