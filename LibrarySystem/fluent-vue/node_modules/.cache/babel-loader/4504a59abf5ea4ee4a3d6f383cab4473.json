{"ast":null,"code":"import { computed, h, defineComponent } from 'vue';\nimport { kebabCase } from 'lodash-es';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { elementLight } from '../styles';\nconst elementProps = Object.assign(Object.assign({}, useTheme.props), {\n  tag: {\n    type: String,\n    default: 'div'\n  }\n});\nexport default defineComponent({\n  name: 'Element',\n  alias: ['El'],\n  props: elementProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Element', '-element', undefined, elementLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common\n      } = themeRef.value;\n      return Object.keys(common).reduce((prevValue, key) => {\n        prevValue[`--${kebabCase(key)}`] = common[key];\n        return prevValue;\n      }, {});\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('element', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      tag,\n      mergedClsPrefix,\n      cssVars,\n      themeClass,\n      onRender,\n      $slots\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    return h(tag, {\n      role: 'none',\n      class: [`${mergedClsPrefix}-element`, themeClass],\n      style: cssVars\n    }, (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/element/src/Element.js"],"names":["computed","h","defineComponent","kebabCase","useConfig","useTheme","useThemeClass","elementLight","elementProps","Object","assign","props","tag","type","String","default","name","alias","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","undefined","cssVarsRef","common","value","keys","reduce","prevValue","key","themeClassHandle","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","$slots","role","class","style","call"],"mappings":"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","sourcesContent":["import { computed, h, defineComponent } from 'vue';\nimport { kebabCase } from 'lodash-es';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { elementLight } from '../styles';\nconst elementProps = Object.assign(Object.assign({}, useTheme.props), { tag: {\n        type: String,\n        default: 'div'\n    } });\nexport default defineComponent({\n    name: 'Element',\n    alias: ['El'],\n    props: elementProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Element', '-element', undefined, elementLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common } = themeRef.value;\n            return Object.keys(common).reduce((prevValue, key) => {\n                prevValue[`--${kebabCase(key)}`] = common[key];\n                return prevValue;\n            }, {});\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('element', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        const { tag, mergedClsPrefix, cssVars, themeClass, onRender, $slots } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        return h(tag, {\n            role: 'none',\n            class: [`${mergedClsPrefix}-element`, themeClass],\n            style: cssVars\n        }, (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}