{"ast":null,"code":"import { computed, h, defineComponent, inject } from 'vue';\nimport { InfoIcon, SuccessIcon, WarningIcon, ErrorIcon } from '../../_internal/icons';\nimport { NIconSwitchTransition, NBaseLoading, NBaseIcon, NBaseClose } from '../../_internal';\nimport { render, createKey } from '../../_utils';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { messageLight } from '../styles';\nimport { messageProps } from './message-props';\nimport { messageProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nconst iconRenderMap = {\n  info: () => h(InfoIcon, null),\n  success: () => h(SuccessIcon, null),\n  warning: () => h(WarningIcon, null),\n  error: () => h(ErrorIcon, null),\n  default: () => null\n};\nexport default defineComponent({\n  name: 'Message',\n  props: Object.assign(Object.assign({}, messageProps), {\n    render: Function\n  }),\n\n  setup(props) {\n    const {\n      inlineThemeDisabled\n    } = useConfig();\n    const {\n      props: messageProviderProps,\n      mergedClsPrefixRef // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(messageProviderInjectionKey);\n    const themeRef = useTheme('Message', '-message', style, messageLight, messageProviderProps, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        type\n      } = props;\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          padding,\n          margin,\n          maxWidth,\n          iconMargin,\n          closeMargin,\n          closeSize,\n          iconSize,\n          fontSize,\n          lineHeight,\n          borderRadius,\n          iconColorInfo,\n          iconColorSuccess,\n          iconColorWarning,\n          iconColorError,\n          iconColorLoading,\n          [createKey('textColor', type)]: textColor,\n          [createKey('boxShadow', type)]: boxShadow,\n          [createKey('color', type)]: color,\n          [createKey('closeColor', type)]: closeColor,\n          [createKey('closeColorPressed', type)]: closeColorPressed,\n          [createKey('closeColorHover', type)]: closeColorHover\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-margin': margin,\n        '--n-padding': padding,\n        '--n-max-width': maxWidth,\n        '--n-font-size': fontSize,\n        '--n-icon-margin': iconMargin,\n        '--n-icon-size': iconSize,\n        '--n-close-size': closeSize,\n        '--n-close-margin': closeMargin,\n        '--n-text-color': textColor,\n        '--n-color': color,\n        '--n-box-shadow': boxShadow,\n        '--n-icon-color-info': iconColorInfo,\n        '--n-icon-color-success': iconColorSuccess,\n        '--n-icon-color-warning': iconColorWarning,\n        '--n-icon-color-error': iconColorError,\n        '--n-icon-color-loading': iconColorLoading,\n        '--n-close-color': closeColor,\n        '--n-close-color-pressed': closeColorPressed,\n        '--n-close-color-hover': closeColorHover,\n        '--n-line-height': lineHeight,\n        '--n-border-radius': borderRadius\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('message', computed(() => props.type[0]), cssVarsRef, {}) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      messageProviderProps,\n\n      handleClose() {\n        var _a;\n\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      },\n\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender,\n      placement: messageProviderProps.placement\n    };\n  },\n\n  render() {\n    const {\n      render: renderMessage,\n      type,\n      closable,\n      content,\n      mergedClsPrefix,\n      cssVars,\n      themeClass,\n      onRender,\n      icon,\n      handleClose,\n      showIcon\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    let iconNode;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-message-wrapper`, themeClass],\n      onMouseenter: this.onMouseenter,\n      onMouseleave: this.onMouseleave,\n      style: [{\n        alignItems: this.placement.startsWith('top') ? 'flex-start' : 'flex-end'\n      }, cssVars]\n    }, renderMessage ? renderMessage(this.$props) : h(\"div\", {\n      class: `${mergedClsPrefix}-message ${mergedClsPrefix}-message--${type}-type`\n    }, (iconNode = createIconVNode(icon, type, mergedClsPrefix)) && showIcon ? h(\"div\", {\n      class: `${mergedClsPrefix}-message__icon ${mergedClsPrefix}-message__icon--${type}-type`\n    }, h(NIconSwitchTransition, null, {\n      default: () => iconNode\n    })) : null, h(\"div\", {\n      class: `${mergedClsPrefix}-message__content`\n    }, render(content)), closable ? h(NBaseClose, {\n      clsPrefix: mergedClsPrefix,\n      class: `${mergedClsPrefix}-message__close`,\n      onClick: handleClose\n    }) : null));\n  }\n\n});\n\nfunction createIconVNode(icon, type, clsPrefix) {\n  if (typeof icon === 'function') {\n    return icon();\n  } else {\n    const innerIcon = type === 'loading' ? h(NBaseLoading, {\n      clsPrefix: clsPrefix,\n      strokeWidth: 24,\n      scale: 0.85\n    }) : iconRenderMap[type]();\n    if (!innerIcon) return null;\n    return h(NBaseIcon, {\n      clsPrefix: clsPrefix,\n      key: type\n    }, {\n      default: () => innerIcon\n    });\n  }\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/message/src/Message.js"],"names":["computed","h","defineComponent","inject","InfoIcon","SuccessIcon","WarningIcon","ErrorIcon","NIconSwitchTransition","NBaseLoading","NBaseIcon","NBaseClose","render","createKey","useConfig","useTheme","useThemeClass","messageLight","messageProps","messageProviderInjectionKey","style","iconRenderMap","info","success","warning","error","default","name","props","Object","assign","Function","setup","inlineThemeDisabled","messageProviderProps","mergedClsPrefixRef","themeRef","cssVarsRef","type","common","cubicBezierEaseInOut","self","padding","margin","maxWidth","iconMargin","closeMargin","closeSize","iconSize","fontSize","lineHeight","borderRadius","iconColorInfo","iconColorSuccess","iconColorWarning","iconColorError","iconColorLoading","textColor","boxShadow","color","closeColor","closeColorPressed","closeColorHover","value","themeClassHandle","undefined","mergedClsPrefix","handleClose","_a","onClose","call","cssVars","themeClass","onRender","placement","renderMessage","closable","content","icon","showIcon","iconNode","class","onMouseenter","onMouseleave","alignItems","startsWith","$props","createIconVNode","clsPrefix","onClick","innerIcon","strokeWidth","scale","key"],"mappings":"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","sourcesContent":["import { computed, h, defineComponent, inject } from 'vue';\nimport { InfoIcon, SuccessIcon, WarningIcon, ErrorIcon } from '../../_internal/icons';\nimport { NIconSwitchTransition, NBaseLoading, NBaseIcon, NBaseClose } from '../../_internal';\nimport { render, createKey } from '../../_utils';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { messageLight } from '../styles';\nimport { messageProps } from './message-props';\nimport { messageProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nconst iconRenderMap = {\n    info: () => h(InfoIcon, null),\n    success: () => h(SuccessIcon, null),\n    warning: () => h(WarningIcon, null),\n    error: () => h(ErrorIcon, null),\n    default: () => null\n};\nexport default defineComponent({\n    name: 'Message',\n    props: Object.assign(Object.assign({}, messageProps), { render: Function }),\n    setup(props) {\n        const { inlineThemeDisabled } = useConfig();\n        const { props: messageProviderProps, mergedClsPrefixRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(messageProviderInjectionKey);\n        const themeRef = useTheme('Message', '-message', style, messageLight, messageProviderProps, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { type } = props;\n            const { common: { cubicBezierEaseInOut }, self: { padding, margin, maxWidth, iconMargin, closeMargin, closeSize, iconSize, fontSize, lineHeight, borderRadius, iconColorInfo, iconColorSuccess, iconColorWarning, iconColorError, iconColorLoading, [createKey('textColor', type)]: textColor, [createKey('boxShadow', type)]: boxShadow, [createKey('color', type)]: color, [createKey('closeColor', type)]: closeColor, [createKey('closeColorPressed', type)]: closeColorPressed, [createKey('closeColorHover', type)]: closeColorHover } } = themeRef.value;\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-margin': margin,\n                '--n-padding': padding,\n                '--n-max-width': maxWidth,\n                '--n-font-size': fontSize,\n                '--n-icon-margin': iconMargin,\n                '--n-icon-size': iconSize,\n                '--n-close-size': closeSize,\n                '--n-close-margin': closeMargin,\n                '--n-text-color': textColor,\n                '--n-color': color,\n                '--n-box-shadow': boxShadow,\n                '--n-icon-color-info': iconColorInfo,\n                '--n-icon-color-success': iconColorSuccess,\n                '--n-icon-color-warning': iconColorWarning,\n                '--n-icon-color-error': iconColorError,\n                '--n-icon-color-loading': iconColorLoading,\n                '--n-close-color': closeColor,\n                '--n-close-color-pressed': closeColorPressed,\n                '--n-close-color-hover': closeColorHover,\n                '--n-line-height': lineHeight,\n                '--n-border-radius': borderRadius\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('message', computed(() => props.type[0]), cssVarsRef, {})\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            messageProviderProps,\n            handleClose() {\n                var _a;\n                (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n            },\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender,\n            placement: messageProviderProps.placement\n        };\n    },\n    render() {\n        const { render: renderMessage, type, closable, content, mergedClsPrefix, cssVars, themeClass, onRender, icon, handleClose, showIcon } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        let iconNode;\n        return (h(\"div\", { class: [`${mergedClsPrefix}-message-wrapper`, themeClass], onMouseenter: this.onMouseenter, onMouseleave: this.onMouseleave, style: [\n                {\n                    alignItems: this.placement.startsWith('top')\n                        ? 'flex-start'\n                        : 'flex-end'\n                },\n                cssVars\n            ] }, renderMessage ? (renderMessage(this.$props)) : (h(\"div\", { class: `${mergedClsPrefix}-message ${mergedClsPrefix}-message--${type}-type` },\n            (iconNode = createIconVNode(icon, type, mergedClsPrefix)) &&\n                showIcon ? (h(\"div\", { class: `${mergedClsPrefix}-message__icon ${mergedClsPrefix}-message__icon--${type}-type` },\n                h(NIconSwitchTransition, null, {\n                    default: () => iconNode\n                }))) : null,\n            h(\"div\", { class: `${mergedClsPrefix}-message__content` }, render(content)),\n            closable ? (h(NBaseClose, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-message__close`, onClick: handleClose })) : null))));\n    }\n});\nfunction createIconVNode(icon, type, clsPrefix) {\n    if (typeof icon === 'function') {\n        return icon();\n    }\n    else {\n        const innerIcon = type === 'loading' ? (h(NBaseLoading, { clsPrefix: clsPrefix, strokeWidth: 24, scale: 0.85 })) : (iconRenderMap[type]());\n        if (!innerIcon)\n            return null;\n        return (h(NBaseIcon, { clsPrefix: clsPrefix, key: type }, {\n            default: () => innerIcon\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}