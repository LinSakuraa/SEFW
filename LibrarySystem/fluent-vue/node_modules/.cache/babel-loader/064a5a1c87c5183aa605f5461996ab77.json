{"ast":null,"code":"import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { FilterIcon } from '../../../_internal/icons';\nimport { NBaseIcon } from '../../../_internal';\nimport { NPopover } from '../../../popover';\nimport RenderFilter from './RenderFilter';\nimport NDataTableFilterMenu from './FilterMenu';\nimport { dataTableInjectionKey } from '../interface';\nimport { useConfig } from '../../../_mixins';\n\nfunction createFilterState(currentFilterState, columnKey, mergedFilterValue) {\n  const nextFilterState = Object.assign({}, currentFilterState);\n  nextFilterState[columnKey] = mergedFilterValue;\n  return nextFilterState;\n}\n\nexport default defineComponent({\n  name: 'DataTableFilterButton',\n  props: {\n    column: {\n      type: Object,\n      required: true\n    },\n    options: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  setup(props) {\n    const {\n      mergedComponentPropsRef\n    } = useConfig();\n    const {\n      mergedThemeRef,\n      mergedClsPrefixRef,\n      mergedFilterStateRef,\n      filterMenuCssVarsRef,\n      doUpdateFilters // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(dataTableInjectionKey);\n    const showPopoverRef = ref(false);\n    const filterStateRef = mergedFilterStateRef;\n    const filterMultipleRef = computed(() => {\n      return props.column.filterMultiple !== false;\n    });\n    const mergedFilterValueRef = computed(() => {\n      const filterValue = filterStateRef.value[props.column.key];\n\n      if (filterValue === undefined) {\n        const {\n          value: multiple\n        } = filterMultipleRef;\n        if (multiple) return [];else return null;\n      }\n\n      return filterValue;\n    });\n    const activeRef = computed(() => {\n      const {\n        value: filterValue\n      } = mergedFilterValueRef;\n\n      if (Array.isArray(filterValue)) {\n        return filterValue.length > 0;\n      }\n\n      return filterValue !== null;\n    });\n    const mergedRenderFilterRef = computed(() => {\n      var _a, _b;\n\n      return ((_b = (_a = mergedComponentPropsRef === null || mergedComponentPropsRef === void 0 ? void 0 : mergedComponentPropsRef.value) === null || _a === void 0 ? void 0 : _a.DataTable) === null || _b === void 0 ? void 0 : _b.renderFilter) || props.column.renderFilter;\n    });\n\n    function handleFilterChange(mergedFilterValue) {\n      const nextFilterState = createFilterState(filterStateRef.value, props.column.key, mergedFilterValue);\n      doUpdateFilters(nextFilterState, props.column);\n    }\n\n    function handleFilterMenuCancel() {\n      showPopoverRef.value = false;\n    }\n\n    function handleFilterMenuConfirm() {\n      showPopoverRef.value = false;\n    }\n\n    return {\n      mergedTheme: mergedThemeRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      active: activeRef,\n      showPopover: showPopoverRef,\n      mergedRenderFilter: mergedRenderFilterRef,\n      filterMultiple: filterMultipleRef,\n      mergedFilterValue: mergedFilterValueRef,\n      filterMenuCssVars: filterMenuCssVarsRef,\n      handleFilterChange,\n      handleFilterMenuConfirm,\n      handleFilterMenuCancel\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      mergedClsPrefix,\n      handleFilterMenuCancel\n    } = this;\n    return h(NPopover, {\n      show: this.showPopover,\n      onUpdateShow: v => this.showPopover = v,\n      trigger: \"click\",\n      theme: mergedTheme.peers.Popover,\n      themeOverrides: mergedTheme.peerOverrides.Popover,\n      placement: \"bottom\",\n      style: {\n        padding: 0\n      }\n    }, {\n      trigger: () => {\n        const {\n          mergedRenderFilter\n        } = this;\n\n        if (mergedRenderFilter) {\n          return h(RenderFilter, {\n            \"data-data-table-filter\": true,\n            render: mergedRenderFilter,\n            active: this.active,\n            show: this.showPopover\n          });\n        }\n\n        const {\n          renderFilterIcon\n        } = this.column;\n        return h(\"div\", {\n          \"data-data-table-filter\": true,\n          class: [`${mergedClsPrefix}-data-table-filter`, {\n            [`${mergedClsPrefix}-data-table-filter--active`]: this.active,\n            [`${mergedClsPrefix}-data-table-filter--show`]: this.showPopover\n          }]\n        }, renderFilterIcon ? renderFilterIcon({\n          active: this.active,\n          show: this.showPopover\n        }) : h(NBaseIcon, {\n          clsPrefix: mergedClsPrefix\n        }, {\n          default: () => h(FilterIcon, null)\n        }));\n      },\n      default: () => {\n        const {\n          renderFilterMenu\n        } = this.column;\n        return renderFilterMenu ? renderFilterMenu({\n          hide: handleFilterMenuCancel\n        }) : h(NDataTableFilterMenu, {\n          style: this.filterMenuCssVars,\n          radioGroupName: String(this.column.key),\n          multiple: this.filterMultiple,\n          value: this.mergedFilterValue,\n          options: this.options,\n          column: this.column,\n          onChange: this.handleFilterChange,\n          onClear: this.handleFilterMenuCancel,\n          onConfirm: this.handleFilterMenuConfirm\n        });\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/HeaderButton/FilterButton.js"],"names":["h","defineComponent","ref","computed","inject","FilterIcon","NBaseIcon","NPopover","RenderFilter","NDataTableFilterMenu","dataTableInjectionKey","useConfig","createFilterState","currentFilterState","columnKey","mergedFilterValue","nextFilterState","Object","assign","name","props","column","type","required","options","Array","default","setup","mergedComponentPropsRef","mergedThemeRef","mergedClsPrefixRef","mergedFilterStateRef","filterMenuCssVarsRef","doUpdateFilters","showPopoverRef","filterStateRef","filterMultipleRef","filterMultiple","mergedFilterValueRef","filterValue","value","key","undefined","multiple","activeRef","isArray","length","mergedRenderFilterRef","_a","_b","DataTable","renderFilter","handleFilterChange","handleFilterMenuCancel","handleFilterMenuConfirm","mergedTheme","mergedClsPrefix","active","showPopover","mergedRenderFilter","filterMenuCssVars","render","show","onUpdateShow","v","trigger","theme","peers","Popover","themeOverrides","peerOverrides","placement","style","padding","renderFilterIcon","class","clsPrefix","renderFilterMenu","hide","radioGroupName","String","onChange","onClear","onConfirm"],"mappings":"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","sourcesContent":["import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { FilterIcon } from '../../../_internal/icons';\nimport { NBaseIcon } from '../../../_internal';\nimport { NPopover } from '../../../popover';\nimport RenderFilter from './RenderFilter';\nimport NDataTableFilterMenu from './FilterMenu';\nimport { dataTableInjectionKey } from '../interface';\nimport { useConfig } from '../../../_mixins';\nfunction createFilterState(currentFilterState, columnKey, mergedFilterValue) {\n    const nextFilterState = Object.assign({}, currentFilterState);\n    nextFilterState[columnKey] = mergedFilterValue;\n    return nextFilterState;\n}\nexport default defineComponent({\n    name: 'DataTableFilterButton',\n    props: {\n        column: {\n            type: Object,\n            required: true\n        },\n        options: {\n            type: Array,\n            default: () => []\n        }\n    },\n    setup(props) {\n        const { mergedComponentPropsRef } = useConfig();\n        const { mergedThemeRef, mergedClsPrefixRef, mergedFilterStateRef, filterMenuCssVarsRef, doUpdateFilters\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        const showPopoverRef = ref(false);\n        const filterStateRef = mergedFilterStateRef;\n        const filterMultipleRef = computed(() => {\n            return props.column.filterMultiple !== false;\n        });\n        const mergedFilterValueRef = computed(() => {\n            const filterValue = filterStateRef.value[props.column.key];\n            if (filterValue === undefined) {\n                const { value: multiple } = filterMultipleRef;\n                if (multiple)\n                    return [];\n                else\n                    return null;\n            }\n            return filterValue;\n        });\n        const activeRef = computed(() => {\n            const { value: filterValue } = mergedFilterValueRef;\n            if (Array.isArray(filterValue)) {\n                return filterValue.length > 0;\n            }\n            return filterValue !== null;\n        });\n        const mergedRenderFilterRef = computed(() => {\n            var _a, _b;\n            return (((_b = (_a = mergedComponentPropsRef === null || mergedComponentPropsRef === void 0 ? void 0 : mergedComponentPropsRef.value) === null || _a === void 0 ? void 0 : _a.DataTable) === null || _b === void 0 ? void 0 : _b.renderFilter) ||\n                props.column.renderFilter);\n        });\n        function handleFilterChange(mergedFilterValue) {\n            const nextFilterState = createFilterState(filterStateRef.value, props.column.key, mergedFilterValue);\n            doUpdateFilters(nextFilterState, props.column);\n        }\n        function handleFilterMenuCancel() {\n            showPopoverRef.value = false;\n        }\n        function handleFilterMenuConfirm() {\n            showPopoverRef.value = false;\n        }\n        return {\n            mergedTheme: mergedThemeRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            active: activeRef,\n            showPopover: showPopoverRef,\n            mergedRenderFilter: mergedRenderFilterRef,\n            filterMultiple: filterMultipleRef,\n            mergedFilterValue: mergedFilterValueRef,\n            filterMenuCssVars: filterMenuCssVarsRef,\n            handleFilterChange,\n            handleFilterMenuConfirm,\n            handleFilterMenuCancel\n        };\n    },\n    render() {\n        const { mergedTheme, mergedClsPrefix, handleFilterMenuCancel } = this;\n        return (h(NPopover, { show: this.showPopover, onUpdateShow: (v) => (this.showPopover = v), trigger: \"click\", theme: mergedTheme.peers.Popover, themeOverrides: mergedTheme.peerOverrides.Popover, placement: \"bottom\", style: { padding: 0 } }, {\n            trigger: () => {\n                const { mergedRenderFilter } = this;\n                if (mergedRenderFilter) {\n                    return (h(RenderFilter, { \"data-data-table-filter\": true, render: mergedRenderFilter, active: this.active, show: this.showPopover }));\n                }\n                const { renderFilterIcon } = this.column;\n                return (h(\"div\", { \"data-data-table-filter\": true, class: [\n                        `${mergedClsPrefix}-data-table-filter`,\n                        {\n                            [`${mergedClsPrefix}-data-table-filter--active`]: this.active,\n                            [`${mergedClsPrefix}-data-table-filter--show`]: this.showPopover\n                        }\n                    ] }, renderFilterIcon ? (renderFilterIcon({\n                    active: this.active,\n                    show: this.showPopover\n                })) : (h(NBaseIcon, { clsPrefix: mergedClsPrefix }, { default: () => h(FilterIcon, null) }))));\n            },\n            default: () => {\n                const { renderFilterMenu } = this.column;\n                return renderFilterMenu ? (renderFilterMenu({ hide: handleFilterMenuCancel })) : (h(NDataTableFilterMenu, { style: this.filterMenuCssVars, radioGroupName: String(this.column.key), multiple: this.filterMultiple, value: this.mergedFilterValue, options: this.options, column: this.column, onChange: this.handleFilterChange, onClear: this.handleFilterMenuCancel, onConfirm: this.handleFilterMenuConfirm }));\n            }\n        }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}