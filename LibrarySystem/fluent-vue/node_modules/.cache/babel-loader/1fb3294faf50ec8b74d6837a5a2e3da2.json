{"ast":null,"code":"import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/p.cssr';\nconst pProps = Object.assign(Object.assign({}, useTheme.props), {\n  depth: [String, Number]\n});\nexport default defineComponent({\n  name: 'P',\n  props: pProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Typography', '-p', style, typographyLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        depth\n      } = props;\n      const typeSafeDepth = depth || '1';\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          pFontSize,\n          pLineHeight,\n          pMargin,\n          pTextColor,\n          [`pTextColor${typeSafeDepth}Depth`]: depthTextColor\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-font-size': pFontSize,\n        '--n-line-height': pLineHeight,\n        '--n-margin': pMargin,\n        '--n-text-color': depth === undefined ? pTextColor : depthTextColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('p', computed(() => `${props.depth || ''}`), cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"p\", {\n      class: [`${this.mergedClsPrefix}-p`, this.themeClass],\n      style: this.cssVars\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/typography/src/p.js"],"names":["h","defineComponent","computed","useConfig","useTheme","useThemeClass","typographyLight","style","pProps","Object","assign","props","depth","String","Number","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","cssVarsRef","typeSafeDepth","common","cubicBezierEaseInOut","self","pFontSize","pLineHeight","pMargin","pTextColor","depthTextColor","value","undefined","themeClassHandle","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","call","class","$slots"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,QAA7B,QAA6C,KAA7C;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAQ,CAACO,KAA3B,CAAd,EAAiD;AAAEC,EAAAA,KAAK,EAAE,CAACC,MAAD,EAASC,MAAT;AAAT,CAAjD,CAAf;AACA,eAAeb,eAAe,CAAC;AAC3Bc,EAAAA,IAAI,EAAE,GADqB;AAE3BJ,EAAAA,KAAK,EAAEH,MAFoB;;AAG3BQ,EAAAA,KAAK,CAACL,KAAD,EAAQ;AACT,UAAM;AAAEM,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA8Cf,SAAS,CAACQ,KAAD,CAA7D;AACA,UAAMQ,QAAQ,GAAGf,QAAQ,CAAC,YAAD,EAAe,IAAf,EAAqBG,KAArB,EAA4BD,eAA5B,EAA6CK,KAA7C,EAAoDM,kBAApD,CAAzB;AACA,UAAMG,UAAU,GAAGlB,QAAQ,CAAC,MAAM;AAC9B,YAAM;AAAEU,QAAAA;AAAF,UAAYD,KAAlB;AACA,YAAMU,aAAa,GAAGT,KAAK,IAAI,GAA/B;AACA,YAAM;AAAEU,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF,SAAV;AAAoCC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAF;AAAaC,UAAAA,WAAb;AAA0BC,UAAAA,OAA1B;AAAmCC,UAAAA,UAAnC;AAA+C,WAAE,aAAYP,aAAc,OAA5B,GAAqCQ;AAApF;AAA1C,UAAmJV,QAAQ,CAACW,KAAlK;AACA,aAAO;AACH,sBAAcP,oBADX;AAEH,yBAAiBE,SAFd;AAGH,2BAAmBC,WAHhB;AAIH,sBAAcC,OAJX;AAKH,0BAAkBf,KAAK,KAAKmB,SAAV,GAAsBH,UAAtB,GAAmCC;AALlD,OAAP;AAOH,KAX0B,CAA3B;AAYA,UAAMG,gBAAgB,GAAGd,mBAAmB,GACtCb,aAAa,CAAC,GAAD,EAAMH,QAAQ,CAAC,MAAO,GAAES,KAAK,CAACC,KAAN,IAAe,EAAG,EAA5B,CAAd,EAA8CQ,UAA9C,EAA0DT,KAA1D,CADyB,GAEtCoB,SAFN;AAGA,WAAO;AACHE,MAAAA,eAAe,EAAEhB,kBADd;AAEHiB,MAAAA,OAAO,EAAEhB,mBAAmB,GAAGa,SAAH,GAAeX,UAFxC;AAGHe,MAAAA,UAAU,EAAEH,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACG,UAH9F;AAIHC,MAAAA,QAAQ,EAAEJ,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACI;AAJ5F,KAAP;AAMH,GA3B0B;;AA4B3BC,EAAAA,MAAM,GAAG;AACL,QAAIC,EAAJ;;AACA,KAACA,EAAE,GAAG,KAAKF,QAAX,MAAyB,IAAzB,IAAiCE,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACC,IAAH,CAAQ,IAAR,CAA1D;AACA,WAAQvC,CAAC,CAAC,GAAD,EAAM;AAAEwC,MAAAA,KAAK,EAAE,CAAE,GAAE,KAAKP,eAAgB,IAAzB,EAA8B,KAAKE,UAAnC,CAAT;AAAyD5B,MAAAA,KAAK,EAAE,KAAK2B;AAArE,KAAN,EAAsF,KAAKO,MAA3F,CAAT;AACH;;AAhC0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/p.cssr';\nconst pProps = Object.assign(Object.assign({}, useTheme.props), { depth: [String, Number] });\nexport default defineComponent({\n    name: 'P',\n    props: pProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Typography', '-p', style, typographyLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { depth } = props;\n            const typeSafeDepth = depth || '1';\n            const { common: { cubicBezierEaseInOut }, self: { pFontSize, pLineHeight, pMargin, pTextColor, [`pTextColor${typeSafeDepth}Depth`]: depthTextColor } } = themeRef.value;\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-font-size': pFontSize,\n                '--n-line-height': pLineHeight,\n                '--n-margin': pMargin,\n                '--n-text-color': depth === undefined ? pTextColor : depthTextColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('p', computed(() => `${props.depth || ''}`), cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"p\", { class: [`${this.mergedClsPrefix}-p`, this.themeClass], style: this.cssVars }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}