{"ast":null,"code":"import { ref, readonly, onBeforeMount, onBeforeUnmount } from 'vue';\nimport { on, off } from 'evtd';\nimport { hasInstance, isBrowser } from './utils';\nconst mousePositionRef = ref(null);\n\nfunction clickHandler(e) {\n  if (e.clientX > 0 || e.clientY > 0) {\n    mousePositionRef.value = {\n      x: e.clientX,\n      y: e.clientY\n    };\n  } else {\n    // x = 0 & y = 0\n    const {\n      target\n    } = e;\n\n    if (target instanceof Element) {\n      const {\n        left,\n        top,\n        width,\n        height\n      } = target.getBoundingClientRect();\n\n      if (left > 0 || top > 0) {\n        // impossible to be triggered by real click\n        mousePositionRef.value = {\n          x: left + width / 2,\n          y: top + height / 2\n        };\n      } else {\n        mousePositionRef.value = {\n          x: 0,\n          y: 0\n        };\n      }\n    } else {\n      mousePositionRef.value = null;\n    }\n  }\n}\n\nlet usedCount = 0;\nlet managable = true;\nexport default function useClickPosition() {\n  if (!isBrowser) return readonly(ref(null));\n  if (usedCount === 0) on('click', document, clickHandler, true);\n\n  const setup = () => {\n    usedCount += 1;\n  };\n\n  if (managable && (managable = hasInstance())) {\n    onBeforeMount(setup);\n    onBeforeUnmount(() => {\n      usedCount -= 1;\n      if (usedCount === 0) off('click', document, clickHandler, true);\n    });\n  } else {\n    setup();\n  }\n\n  return readonly(mousePositionRef);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vooks/es/use-click-position.js"],"names":["ref","readonly","onBeforeMount","onBeforeUnmount","on","off","hasInstance","isBrowser","mousePositionRef","clickHandler","e","clientX","clientY","value","x","y","target","Element","left","top","width","height","getBoundingClientRect","usedCount","managable","useClickPosition","document","setup"],"mappings":"AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,aAAxB,EAAuCC,eAAvC,QAA8D,KAA9D;AACA,SAASC,EAAT,EAAaC,GAAb,QAAwB,MAAxB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,SAAvC;AACA,MAAMC,gBAAgB,GAAGR,GAAG,CAAC,IAAD,CAA5B;;AACA,SAASS,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,MAAIA,CAAC,CAACC,OAAF,GAAY,CAAZ,IAAiBD,CAAC,CAACE,OAAF,GAAY,CAAjC,EAAoC;AAChCJ,IAAAA,gBAAgB,CAACK,KAAjB,GAAyB;AACrBC,MAAAA,CAAC,EAAEJ,CAAC,CAACC,OADgB;AAErBI,MAAAA,CAAC,EAAEL,CAAC,CAACE;AAFgB,KAAzB;AAIH,GALD,MAMK;AACD;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAaN,CAAnB;;AACA,QAAIM,MAAM,YAAYC,OAAtB,EAA+B;AAC3B,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,GAAR;AAAaC,QAAAA,KAAb;AAAoBC,QAAAA;AAApB,UAA+BL,MAAM,CAACM,qBAAP,EAArC;;AACA,UAAIJ,IAAI,GAAG,CAAP,IAAYC,GAAG,GAAG,CAAtB,EAAyB;AACrB;AACAX,QAAAA,gBAAgB,CAACK,KAAjB,GAAyB;AACrBC,UAAAA,CAAC,EAAEI,IAAI,GAAGE,KAAK,GAAG,CADG;AAErBL,UAAAA,CAAC,EAAEI,GAAG,GAAGE,MAAM,GAAG;AAFG,SAAzB;AAIH,OAND,MAOK;AACDb,QAAAA,gBAAgB,CAACK,KAAjB,GAAyB;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE;AAAX,SAAzB;AACH;AACJ,KAZD,MAaK;AACDP,MAAAA,gBAAgB,CAACK,KAAjB,GAAyB,IAAzB;AACH;AACJ;AACJ;;AACD,IAAIU,SAAS,GAAG,CAAhB;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,eAAe,SAASC,gBAAT,GAA4B;AACvC,MAAI,CAAClB,SAAL,EACI,OAAON,QAAQ,CAACD,GAAG,CAAC,IAAD,CAAJ,CAAf;AACJ,MAAIuB,SAAS,KAAK,CAAlB,EACInB,EAAE,CAAC,OAAD,EAAUsB,QAAV,EAAoBjB,YAApB,EAAkC,IAAlC,CAAF;;AACJ,QAAMkB,KAAK,GAAG,MAAM;AAChBJ,IAAAA,SAAS,IAAI,CAAb;AACH,GAFD;;AAGA,MAAIC,SAAS,KAAKA,SAAS,GAAGlB,WAAW,EAA5B,CAAb,EAA8C;AAC1CJ,IAAAA,aAAa,CAACyB,KAAD,CAAb;AACAxB,IAAAA,eAAe,CAAC,MAAM;AAClBoB,MAAAA,SAAS,IAAI,CAAb;AACA,UAAIA,SAAS,KAAK,CAAlB,EACIlB,GAAG,CAAC,OAAD,EAAUqB,QAAV,EAAoBjB,YAApB,EAAkC,IAAlC,CAAH;AACP,KAJc,CAAf;AAKH,GAPD,MAQK;AACDkB,IAAAA,KAAK;AACR;;AACD,SAAO1B,QAAQ,CAACO,gBAAD,CAAf;AACH","sourcesContent":["import { ref, readonly, onBeforeMount, onBeforeUnmount } from 'vue';\nimport { on, off } from 'evtd';\nimport { hasInstance, isBrowser } from './utils';\nconst mousePositionRef = ref(null);\nfunction clickHandler(e) {\n    if (e.clientX > 0 || e.clientY > 0) {\n        mousePositionRef.value = {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n    else {\n        // x = 0 & y = 0\n        const { target } = e;\n        if (target instanceof Element) {\n            const { left, top, width, height } = target.getBoundingClientRect();\n            if (left > 0 || top > 0) {\n                // impossible to be triggered by real click\n                mousePositionRef.value = {\n                    x: left + width / 2,\n                    y: top + height / 2\n                };\n            }\n            else {\n                mousePositionRef.value = { x: 0, y: 0 };\n            }\n        }\n        else {\n            mousePositionRef.value = null;\n        }\n    }\n}\nlet usedCount = 0;\nlet managable = true;\nexport default function useClickPosition() {\n    if (!isBrowser)\n        return readonly(ref(null));\n    if (usedCount === 0)\n        on('click', document, clickHandler, true);\n    const setup = () => {\n        usedCount += 1;\n    };\n    if (managable && (managable = hasInstance())) {\n        onBeforeMount(setup);\n        onBeforeUnmount(() => {\n            usedCount -= 1;\n            if (usedCount === 0)\n                off('click', document, clickHandler, true);\n        });\n    }\n    else {\n        setup();\n    }\n    return readonly(mousePositionRef);\n}\n"]},"metadata":{},"sourceType":"module"}