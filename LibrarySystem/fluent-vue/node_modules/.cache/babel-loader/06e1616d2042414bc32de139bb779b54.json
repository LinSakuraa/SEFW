{"ast":null,"code":"import { isValid, isSameDay, getDate, getMonth, getYear, isSameMonth, isSameYear, getTime, startOfMonth, addDays, addMonths, addYears, addQuarters, getDay, parse, format, startOfYear, getQuarter, isSameQuarter } from 'date-fns';\nimport { START_YEAR } from './config';\n\nfunction getDerivedTimeFromKeyboardEvent(prevValue, event) {\n  const now = getTime(Date.now());\n  if (typeof prevValue !== 'number') return now;\n\n  switch (event.code) {\n    case 'ArrowUp':\n      return getTime(addDays(prevValue, -7));\n\n    case 'ArrowDown':\n      return getTime(addDays(prevValue, 7));\n\n    case 'ArrowRight':\n      return getTime(addDays(prevValue, 1));\n\n    case 'ArrowLeft':\n      return getTime(addDays(prevValue, -1));\n  }\n\n  return now;\n}\n\nconst matcherMap = {\n  date: isSameDay,\n  month: isSameMonth,\n  year: isSameYear,\n  quarter: isSameQuarter\n};\n\nfunction matchDate(sourceTime, patternTime, type = 'date') {\n  const matcher = matcherMap[type];\n\n  if (Array.isArray(sourceTime)) {\n    return sourceTime.some(time => matcher(time, patternTime));\n  } else {\n    return matcher(sourceTime, patternTime);\n  }\n}\n\nfunction dateItem(time, monthTs, valueTs, currentTs) {\n  let inSpan = false;\n  let startOfSpan = false;\n  let endOfSpan = false;\n\n  if (Array.isArray(valueTs)) {\n    if (valueTs[0] < time && time < valueTs[1]) {\n      inSpan = true;\n    }\n\n    if (matchDate(valueTs[0], time)) startOfSpan = true;\n    if (matchDate(valueTs[1], time)) endOfSpan = true;\n  }\n\n  return {\n    type: 'date',\n    dateObject: {\n      date: getDate(time),\n      month: getMonth(time),\n      year: getYear(time)\n    },\n    inCurrentMonth: isSameMonth(time, monthTs),\n    isCurrentDate: matchDate(currentTs, time),\n    inSpan,\n    startOfSpan,\n    endOfSpan,\n    selected: valueTs !== null && matchDate(valueTs, time),\n    ts: getTime(time)\n  };\n}\n\nfunction monthItem(monthTs, valueTs, currentTs) {\n  return {\n    type: 'month',\n    dateObject: {\n      month: getMonth(monthTs),\n      year: getYear(monthTs)\n    },\n    isCurrent: isSameMonth(currentTs, monthTs),\n    selected: valueTs !== null && matchDate(valueTs, monthTs, 'month'),\n    ts: getTime(monthTs)\n  };\n}\n\nfunction yearItem(yearTs, valueTs, currentTs) {\n  return {\n    type: 'year',\n    dateObject: {\n      year: getYear(yearTs)\n    },\n    isCurrent: isSameYear(currentTs, yearTs),\n    selected: valueTs !== null && matchDate(valueTs, yearTs, 'year'),\n    ts: getTime(yearTs)\n  };\n}\n\nfunction quarterItem(quarterTs, valueTs, currentTs) {\n  return {\n    type: 'quarter',\n    dateObject: {\n      quarter: getQuarter(quarterTs),\n      year: getYear(quarterTs)\n    },\n    isCurrent: isSameQuarter(currentTs, quarterTs),\n    selected: valueTs !== null && matchDate(valueTs, quarterTs, 'quarter'),\n    ts: getTime(quarterTs)\n  };\n}\n/**\n * Given time to display calendar, given the selected time, given current time,\n * return the date array of display time's month.\n */\n\n\nfunction dateArray(monthTs, valueTs, currentTs, startDay, strip = false) {\n  const displayMonth = getMonth(monthTs); // First day of current month\n\n  let displayMonthIterator = getTime(startOfMonth(monthTs)); // Last day of last month\n\n  let lastMonthIterator = getTime(addDays(displayMonthIterator, -1));\n  const calendarDays = [];\n  let protectLastMonthDateIsShownFlag = !strip;\n\n  while (getDay(lastMonthIterator) !== startDay || protectLastMonthDateIsShownFlag) {\n    calendarDays.unshift(dateItem(lastMonthIterator, monthTs, valueTs, currentTs));\n    lastMonthIterator = getTime(addDays(lastMonthIterator, -1));\n    protectLastMonthDateIsShownFlag = false;\n  }\n\n  while (getMonth(displayMonthIterator) === displayMonth) {\n    calendarDays.push(dateItem(displayMonthIterator, monthTs, valueTs, currentTs));\n    displayMonthIterator = getTime(addDays(displayMonthIterator, 1));\n  }\n\n  const endIndex = strip ? calendarDays.length <= 28 ? 28 : calendarDays.length <= 35 ? 35 : 42 : 42;\n\n  while (calendarDays.length < endIndex) {\n    calendarDays.push(dateItem(displayMonthIterator, monthTs, valueTs, currentTs));\n    displayMonthIterator = getTime(addDays(displayMonthIterator, 1));\n  }\n\n  return calendarDays;\n}\n\nfunction monthArray(monthTs, valueTs, currentTs) {\n  const calendarMonths = [];\n  const yearStart = startOfYear(monthTs);\n\n  for (let i = 0; i < 12; i++) {\n    calendarMonths.push(monthItem(getTime(addMonths(yearStart, i)), valueTs, currentTs));\n  }\n\n  return calendarMonths;\n}\n\nfunction quarterArray(quarterTs, valueTs, currentTs) {\n  const calendarQuarters = [];\n  const yearStart = startOfYear(quarterTs);\n\n  for (let i = 0; i < 4; i++) {\n    calendarQuarters.push(quarterItem(getTime(addQuarters(yearStart, i)), valueTs, currentTs));\n  }\n\n  return calendarQuarters;\n}\n\nfunction yearArray(yearTs, valueTs, currentTs) {\n  const calendarYears = [];\n  const time1900 = new Date(START_YEAR, 0, 1); // 1900 is not a round time, so we use 1911 as start...\n  // new Date(1900, 0, 1)\n  // 1899-12-31T15:54:17.000Z\n\n  for (let i = 0; i < 200; i++) {\n    calendarYears.push(yearItem(getTime(addYears(time1900, i)), valueTs, currentTs));\n  }\n\n  return calendarYears;\n}\n\nfunction strictParse(string, pattern, backup, option) {\n  const result = parse(string, pattern, backup, option);\n  if (!isValid(result)) return result;else if (format(result, pattern, option) === string) return result;else return new Date(NaN);\n}\n\nfunction getDefaultTime(timeValue) {\n  if (timeValue === undefined) {\n    return undefined;\n  }\n\n  if (typeof timeValue === 'number') {\n    return timeValue;\n  }\n\n  const [hour, minute, second] = timeValue.split(':');\n  return {\n    hours: Number(hour),\n    minutes: Number(minute),\n    seconds: Number(second)\n  };\n}\n\nexport { dateArray, monthArray, yearArray, quarterArray, strictParse, getDerivedTimeFromKeyboardEvent, getDefaultTime };","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/date-picker/src/utils.js"],"names":["isValid","isSameDay","getDate","getMonth","getYear","isSameMonth","isSameYear","getTime","startOfMonth","addDays","addMonths","addYears","addQuarters","getDay","parse","format","startOfYear","getQuarter","isSameQuarter","START_YEAR","getDerivedTimeFromKeyboardEvent","prevValue","event","now","Date","code","matcherMap","date","month","year","quarter","matchDate","sourceTime","patternTime","type","matcher","Array","isArray","some","time","dateItem","monthTs","valueTs","currentTs","inSpan","startOfSpan","endOfSpan","dateObject","inCurrentMonth","isCurrentDate","selected","ts","monthItem","isCurrent","yearItem","yearTs","quarterItem","quarterTs","dateArray","startDay","strip","displayMonth","displayMonthIterator","lastMonthIterator","calendarDays","protectLastMonthDateIsShownFlag","unshift","push","endIndex","length","monthArray","calendarMonths","yearStart","i","quarterArray","calendarQuarters","yearArray","calendarYears","time1900","strictParse","string","pattern","backup","option","result","NaN","getDefaultTime","timeValue","undefined","hour","minute","second","split","hours","Number","minutes","seconds"],"mappings":"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","sourcesContent":["import { isValid, isSameDay, getDate, getMonth, getYear, isSameMonth, isSameYear, getTime, startOfMonth, addDays, addMonths, addYears, addQuarters, getDay, parse, format, startOfYear, getQuarter, isSameQuarter } from 'date-fns';\nimport { START_YEAR } from './config';\nfunction getDerivedTimeFromKeyboardEvent(prevValue, event) {\n    const now = getTime(Date.now());\n    if (typeof prevValue !== 'number')\n        return now;\n    switch (event.code) {\n        case 'ArrowUp':\n            return getTime(addDays(prevValue, -7));\n        case 'ArrowDown':\n            return getTime(addDays(prevValue, 7));\n        case 'ArrowRight':\n            return getTime(addDays(prevValue, 1));\n        case 'ArrowLeft':\n            return getTime(addDays(prevValue, -1));\n    }\n    return now;\n}\nconst matcherMap = {\n    date: isSameDay,\n    month: isSameMonth,\n    year: isSameYear,\n    quarter: isSameQuarter\n};\nfunction matchDate(sourceTime, patternTime, type = 'date') {\n    const matcher = matcherMap[type];\n    if (Array.isArray(sourceTime)) {\n        return sourceTime.some((time) => matcher(time, patternTime));\n    }\n    else {\n        return matcher(sourceTime, patternTime);\n    }\n}\nfunction dateItem(time, monthTs, valueTs, currentTs) {\n    let inSpan = false;\n    let startOfSpan = false;\n    let endOfSpan = false;\n    if (Array.isArray(valueTs)) {\n        if (valueTs[0] < time && time < valueTs[1]) {\n            inSpan = true;\n        }\n        if (matchDate(valueTs[0], time))\n            startOfSpan = true;\n        if (matchDate(valueTs[1], time))\n            endOfSpan = true;\n    }\n    return {\n        type: 'date',\n        dateObject: {\n            date: getDate(time),\n            month: getMonth(time),\n            year: getYear(time)\n        },\n        inCurrentMonth: isSameMonth(time, monthTs),\n        isCurrentDate: matchDate(currentTs, time),\n        inSpan,\n        startOfSpan,\n        endOfSpan,\n        selected: valueTs !== null && matchDate(valueTs, time),\n        ts: getTime(time)\n    };\n}\nfunction monthItem(monthTs, valueTs, currentTs) {\n    return {\n        type: 'month',\n        dateObject: {\n            month: getMonth(monthTs),\n            year: getYear(monthTs)\n        },\n        isCurrent: isSameMonth(currentTs, monthTs),\n        selected: valueTs !== null && matchDate(valueTs, monthTs, 'month'),\n        ts: getTime(monthTs)\n    };\n}\nfunction yearItem(yearTs, valueTs, currentTs) {\n    return {\n        type: 'year',\n        dateObject: {\n            year: getYear(yearTs)\n        },\n        isCurrent: isSameYear(currentTs, yearTs),\n        selected: valueTs !== null && matchDate(valueTs, yearTs, 'year'),\n        ts: getTime(yearTs)\n    };\n}\nfunction quarterItem(quarterTs, valueTs, currentTs) {\n    return {\n        type: 'quarter',\n        dateObject: {\n            quarter: getQuarter(quarterTs),\n            year: getYear(quarterTs)\n        },\n        isCurrent: isSameQuarter(currentTs, quarterTs),\n        selected: valueTs !== null && matchDate(valueTs, quarterTs, 'quarter'),\n        ts: getTime(quarterTs)\n    };\n}\n/**\n * Given time to display calendar, given the selected time, given current time,\n * return the date array of display time's month.\n */\nfunction dateArray(monthTs, valueTs, currentTs, startDay, strip = false) {\n    const displayMonth = getMonth(monthTs);\n    // First day of current month\n    let displayMonthIterator = getTime(startOfMonth(monthTs));\n    // Last day of last month\n    let lastMonthIterator = getTime(addDays(displayMonthIterator, -1));\n    const calendarDays = [];\n    let protectLastMonthDateIsShownFlag = !strip;\n    while (getDay(lastMonthIterator) !== startDay ||\n        protectLastMonthDateIsShownFlag) {\n        calendarDays.unshift(dateItem(lastMonthIterator, monthTs, valueTs, currentTs));\n        lastMonthIterator = getTime(addDays(lastMonthIterator, -1));\n        protectLastMonthDateIsShownFlag = false;\n    }\n    while (getMonth(displayMonthIterator) === displayMonth) {\n        calendarDays.push(dateItem(displayMonthIterator, monthTs, valueTs, currentTs));\n        displayMonthIterator = getTime(addDays(displayMonthIterator, 1));\n    }\n    const endIndex = strip\n        ? calendarDays.length <= 28\n            ? 28\n            : calendarDays.length <= 35\n                ? 35\n                : 42\n        : 42;\n    while (calendarDays.length < endIndex) {\n        calendarDays.push(dateItem(displayMonthIterator, monthTs, valueTs, currentTs));\n        displayMonthIterator = getTime(addDays(displayMonthIterator, 1));\n    }\n    return calendarDays;\n}\nfunction monthArray(monthTs, valueTs, currentTs) {\n    const calendarMonths = [];\n    const yearStart = startOfYear(monthTs);\n    for (let i = 0; i < 12; i++) {\n        calendarMonths.push(monthItem(getTime(addMonths(yearStart, i)), valueTs, currentTs));\n    }\n    return calendarMonths;\n}\nfunction quarterArray(quarterTs, valueTs, currentTs) {\n    const calendarQuarters = [];\n    const yearStart = startOfYear(quarterTs);\n    for (let i = 0; i < 4; i++) {\n        calendarQuarters.push(quarterItem(getTime(addQuarters(yearStart, i)), valueTs, currentTs));\n    }\n    return calendarQuarters;\n}\nfunction yearArray(yearTs, valueTs, currentTs) {\n    const calendarYears = [];\n    const time1900 = new Date(START_YEAR, 0, 1);\n    // 1900 is not a round time, so we use 1911 as start...\n    // new Date(1900, 0, 1)\n    // 1899-12-31T15:54:17.000Z\n    for (let i = 0; i < 200; i++) {\n        calendarYears.push(yearItem(getTime(addYears(time1900, i)), valueTs, currentTs));\n    }\n    return calendarYears;\n}\nfunction strictParse(string, pattern, backup, option) {\n    const result = parse(string, pattern, backup, option);\n    if (!isValid(result))\n        return result;\n    else if (format(result, pattern, option) === string)\n        return result;\n    else\n        return new Date(NaN);\n}\nfunction getDefaultTime(timeValue) {\n    if (timeValue === undefined) {\n        return undefined;\n    }\n    if (typeof timeValue === 'number') {\n        return timeValue;\n    }\n    const [hour, minute, second] = timeValue.split(':');\n    return {\n        hours: Number(hour),\n        minutes: Number(minute),\n        seconds: Number(second)\n    };\n}\nexport { dateArray, monthArray, yearArray, quarterArray, strictParse, getDerivedTimeFromKeyboardEvent, getDefaultTime };\n"]},"metadata":{},"sourceType":"module"}