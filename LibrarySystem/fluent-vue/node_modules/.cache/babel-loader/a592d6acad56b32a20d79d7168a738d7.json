{"ast":null,"code":"import { defineComponent, h, computed } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { NBaseIcon } from '../../_internal';\nimport { WarningIcon, InfoIcon as InfoCircleIcon, ErrorIcon as ErrorCircleIcon, SuccessIcon as SuccessCircleIcon } from '../../_internal/icons';\nconst iconMap = {\n  success: h(SuccessCircleIcon, null),\n  error: h(ErrorCircleIcon, null),\n  warning: h(WarningIcon, null),\n  info: h(InfoCircleIcon, null)\n};\nexport default defineComponent({\n  name: 'ProgressLine',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    percentage: {\n      type: Number,\n      default: 0\n    },\n    railColor: String,\n    railStyle: [String, Object],\n    fillColor: String,\n    status: {\n      type: String,\n      required: true\n    },\n    indicatorPlacement: {\n      type: String,\n      required: true\n    },\n    indicatorTextColor: String,\n    unit: {\n      type: String,\n      default: '%'\n    },\n    processing: {\n      type: Boolean,\n      required: true\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    height: [String, Number],\n    railBorderRadius: [String, Number],\n    fillBorderRadius: [String, Number]\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const styleHeightRef = computed(() => {\n      return formatLength(props.height);\n    });\n    const styleRailBorderRadiusRef = computed(() => {\n      if (props.railBorderRadius !== undefined) {\n        return formatLength(props.railBorderRadius);\n      }\n\n      if (props.height !== undefined) {\n        return formatLength(props.height, {\n          c: 0.5\n        });\n      }\n\n      return '';\n    });\n    const styleFillBorderRadiusRef = computed(() => {\n      if (props.fillBorderRadius !== undefined) {\n        return formatLength(props.fillBorderRadius);\n      }\n\n      if (props.railBorderRadius !== undefined) {\n        return formatLength(props.railBorderRadius);\n      }\n\n      if (props.height !== undefined) {\n        return formatLength(props.height, {\n          c: 0.5\n        });\n      }\n\n      return '';\n    });\n    return () => {\n      const {\n        indicatorPlacement,\n        railColor,\n        railStyle,\n        percentage,\n        unit,\n        indicatorTextColor,\n        status,\n        showIndicator,\n        fillColor,\n        processing,\n        clsPrefix\n      } = props;\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: [`${clsPrefix}-progress-graph-line`, {\n          [`${clsPrefix}-progress-graph-line--indicator-${indicatorPlacement}`]: true\n        }]\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-line-rail`,\n        style: [{\n          backgroundColor: railColor,\n          height: styleHeightRef.value,\n          borderRadius: styleRailBorderRadiusRef.value\n        }, railStyle]\n      }, h(\"div\", {\n        class: [`${clsPrefix}-progress-graph-line-fill`, processing && `${clsPrefix}-progress-graph-line-fill--processing`],\n        style: {\n          maxWidth: `${props.percentage}%`,\n          backgroundColor: fillColor,\n          height: styleHeightRef.value,\n          lineHeight: styleHeightRef.value,\n          borderRadius: styleFillBorderRadiusRef.value\n        }\n      }, indicatorPlacement === 'inside' ? h(\"div\", {\n        class: `${clsPrefix}-progress-graph-line-indicator`\n      }, percentage, unit) : null)))), showIndicator && indicatorPlacement === 'outside' ? h(\"div\", null, slots.default ? h(\"div\", {\n        class: `${clsPrefix}-progress-custom-content`,\n        style: {\n          color: indicatorTextColor\n        },\n        role: \"none\"\n      }, slots.default()) : status === 'default' ? h(\"div\", {\n        role: \"none\",\n        class: `${clsPrefix}-progress-icon ${clsPrefix}-progress-icon--as-text`,\n        style: {\n          color: indicatorTextColor\n        }\n      }, percentage, unit) : h(\"div\", {\n        class: `${clsPrefix}-progress-icon`,\n        \"aria-hidden\": true\n      }, h(NBaseIcon, {\n        clsPrefix: clsPrefix\n      }, {\n        default: () => iconMap[status]\n      }))) : null);\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/progress/src/Line.js"],"names":["defineComponent","h","computed","formatLength","NBaseIcon","WarningIcon","InfoIcon","InfoCircleIcon","ErrorIcon","ErrorCircleIcon","SuccessIcon","SuccessCircleIcon","iconMap","success","error","warning","info","name","props","clsPrefix","type","String","required","percentage","Number","default","railColor","railStyle","Object","fillColor","status","indicatorPlacement","indicatorTextColor","unit","processing","Boolean","showIndicator","height","railBorderRadius","fillBorderRadius","setup","slots","styleHeightRef","styleRailBorderRadiusRef","undefined","c","styleFillBorderRadiusRef","class","role","style","backgroundColor","value","borderRadius","maxWidth","lineHeight","color"],"mappings":"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","sourcesContent":["import { defineComponent, h, computed } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { NBaseIcon } from '../../_internal';\nimport { WarningIcon, InfoIcon as InfoCircleIcon, ErrorIcon as ErrorCircleIcon, SuccessIcon as SuccessCircleIcon } from '../../_internal/icons';\nconst iconMap = {\n    success: h(SuccessCircleIcon, null),\n    error: h(ErrorCircleIcon, null),\n    warning: h(WarningIcon, null),\n    info: h(InfoCircleIcon, null)\n};\nexport default defineComponent({\n    name: 'ProgressLine',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        percentage: {\n            type: Number,\n            default: 0\n        },\n        railColor: String,\n        railStyle: [String, Object],\n        fillColor: String,\n        status: {\n            type: String,\n            required: true\n        },\n        indicatorPlacement: {\n            type: String,\n            required: true\n        },\n        indicatorTextColor: String,\n        unit: {\n            type: String,\n            default: '%'\n        },\n        processing: {\n            type: Boolean,\n            required: true\n        },\n        showIndicator: {\n            type: Boolean,\n            required: true\n        },\n        height: [String, Number],\n        railBorderRadius: [String, Number],\n        fillBorderRadius: [String, Number]\n    },\n    setup(props, { slots }) {\n        const styleHeightRef = computed(() => {\n            return formatLength(props.height);\n        });\n        const styleRailBorderRadiusRef = computed(() => {\n            if (props.railBorderRadius !== undefined) {\n                return formatLength(props.railBorderRadius);\n            }\n            if (props.height !== undefined) {\n                return formatLength(props.height, { c: 0.5 });\n            }\n            return '';\n        });\n        const styleFillBorderRadiusRef = computed(() => {\n            if (props.fillBorderRadius !== undefined) {\n                return formatLength(props.fillBorderRadius);\n            }\n            if (props.railBorderRadius !== undefined) {\n                return formatLength(props.railBorderRadius);\n            }\n            if (props.height !== undefined) {\n                return formatLength(props.height, { c: 0.5 });\n            }\n            return '';\n        });\n        return () => {\n            const { indicatorPlacement, railColor, railStyle, percentage, unit, indicatorTextColor, status, showIndicator, fillColor, processing, clsPrefix } = props;\n            return (h(\"div\", { class: `${clsPrefix}-progress-content`, role: \"none\" },\n                h(\"div\", { class: `${clsPrefix}-progress-graph`, \"aria-hidden\": true },\n                    h(\"div\", { class: [\n                            `${clsPrefix}-progress-graph-line`,\n                            {\n                                [`${clsPrefix}-progress-graph-line--indicator-${indicatorPlacement}`]: true\n                            }\n                        ] },\n                        h(\"div\", { class: `${clsPrefix}-progress-graph-line-rail`, style: [\n                                {\n                                    backgroundColor: railColor,\n                                    height: styleHeightRef.value,\n                                    borderRadius: styleRailBorderRadiusRef.value\n                                },\n                                railStyle\n                            ] },\n                            h(\"div\", { class: [\n                                    `${clsPrefix}-progress-graph-line-fill`,\n                                    processing &&\n                                        `${clsPrefix}-progress-graph-line-fill--processing`\n                                ], style: {\n                                    maxWidth: `${props.percentage}%`,\n                                    backgroundColor: fillColor,\n                                    height: styleHeightRef.value,\n                                    lineHeight: styleHeightRef.value,\n                                    borderRadius: styleFillBorderRadiusRef.value\n                                } }, indicatorPlacement === 'inside' ? (h(\"div\", { class: `${clsPrefix}-progress-graph-line-indicator` },\n                                percentage,\n                                unit)) : null)))),\n                showIndicator && indicatorPlacement === 'outside' ? (h(\"div\", null, slots.default ? (h(\"div\", { class: `${clsPrefix}-progress-custom-content`, style: {\n                        color: indicatorTextColor\n                    }, role: \"none\" }, slots.default())) : status === 'default' ? (h(\"div\", { role: \"none\", class: `${clsPrefix}-progress-icon ${clsPrefix}-progress-icon--as-text`, style: {\n                        color: indicatorTextColor\n                    } },\n                    percentage,\n                    unit)) : (h(\"div\", { class: `${clsPrefix}-progress-icon`, \"aria-hidden\": true },\n                    h(NBaseIcon, { clsPrefix: clsPrefix }, { default: () => iconMap[status] }))))) : null));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}