{"ast":null,"code":"import { onBeforeMount, onBeforeUnmount, ref, readonly } from 'vue';\nimport { on, off } from 'evtd';\nimport { hasInstance, isBrowser } from './utils';\nconst clickedTimeRef = ref(undefined);\nlet usedCount = 0;\n\nfunction handleClick() {\n  clickedTimeRef.value = Date.now();\n}\n\nlet managable = true;\nexport default function useClicked(timeout) {\n  if (!isBrowser) return readonly(ref(false));\n  const clickedRef = ref(false);\n  let timerId = null;\n\n  function clearTimer() {\n    if (timerId !== null) window.clearTimeout(timerId);\n  }\n\n  function clickedHandler() {\n    clearTimer();\n    clickedRef.value = true;\n    timerId = window.setTimeout(() => {\n      clickedRef.value = false;\n    }, timeout);\n  }\n\n  if (usedCount === 0) {\n    on('click', window, handleClick, true);\n  }\n\n  const setup = () => {\n    usedCount += 1;\n    on('click', window, clickedHandler, true);\n  };\n\n  if (managable && (managable = hasInstance())) {\n    onBeforeMount(setup);\n    onBeforeUnmount(() => {\n      usedCount -= 1;\n\n      if (usedCount === 0) {\n        off('click', window, handleClick, true);\n      }\n\n      off('click', window, clickedHandler, true);\n      clearTimer();\n    });\n  } else {\n    setup();\n  }\n\n  return readonly(clickedRef);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/vooks/es/use-clicked.js"],"names":["onBeforeMount","onBeforeUnmount","ref","readonly","on","off","hasInstance","isBrowser","clickedTimeRef","undefined","usedCount","handleClick","value","Date","now","managable","useClicked","timeout","clickedRef","timerId","clearTimer","window","clearTimeout","clickedHandler","setTimeout","setup"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,eAAxB,EAAyCC,GAAzC,EAA8CC,QAA9C,QAA8D,KAA9D;AACA,SAASC,EAAT,EAAaC,GAAb,QAAwB,MAAxB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,SAAvC;AACA,MAAMC,cAAc,GAAGN,GAAG,CAACO,SAAD,CAA1B;AACA,IAAIC,SAAS,GAAG,CAAhB;;AACA,SAASC,WAAT,GAAuB;AACnBH,EAAAA,cAAc,CAACI,KAAf,GAAuBC,IAAI,CAACC,GAAL,EAAvB;AACH;;AACD,IAAIC,SAAS,GAAG,IAAhB;AACA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AACxC,MAAI,CAACV,SAAL,EACI,OAAOJ,QAAQ,CAACD,GAAG,CAAC,KAAD,CAAJ,CAAf;AACJ,QAAMgB,UAAU,GAAGhB,GAAG,CAAC,KAAD,CAAtB;AACA,MAAIiB,OAAO,GAAG,IAAd;;AACA,WAASC,UAAT,GAAsB;AAClB,QAAID,OAAO,KAAK,IAAhB,EACIE,MAAM,CAACC,YAAP,CAAoBH,OAApB;AACP;;AACD,WAASI,cAAT,GAA0B;AACtBH,IAAAA,UAAU;AACVF,IAAAA,UAAU,CAACN,KAAX,GAAmB,IAAnB;AACAO,IAAAA,OAAO,GAAGE,MAAM,CAACG,UAAP,CAAkB,MAAM;AAC9BN,MAAAA,UAAU,CAACN,KAAX,GAAmB,KAAnB;AACH,KAFS,EAEPK,OAFO,CAAV;AAGH;;AACD,MAAIP,SAAS,KAAK,CAAlB,EAAqB;AACjBN,IAAAA,EAAE,CAAC,OAAD,EAAUiB,MAAV,EAAkBV,WAAlB,EAA+B,IAA/B,CAAF;AACH;;AACD,QAAMc,KAAK,GAAG,MAAM;AAChBf,IAAAA,SAAS,IAAI,CAAb;AACAN,IAAAA,EAAE,CAAC,OAAD,EAAUiB,MAAV,EAAkBE,cAAlB,EAAkC,IAAlC,CAAF;AACH,GAHD;;AAIA,MAAIR,SAAS,KAAKA,SAAS,GAAGT,WAAW,EAA5B,CAAb,EAA8C;AAC1CN,IAAAA,aAAa,CAACyB,KAAD,CAAb;AACAxB,IAAAA,eAAe,CAAC,MAAM;AAClBS,MAAAA,SAAS,IAAI,CAAb;;AACA,UAAIA,SAAS,KAAK,CAAlB,EAAqB;AACjBL,QAAAA,GAAG,CAAC,OAAD,EAAUgB,MAAV,EAAkBV,WAAlB,EAA+B,IAA/B,CAAH;AACH;;AACDN,MAAAA,GAAG,CAAC,OAAD,EAAUgB,MAAV,EAAkBE,cAAlB,EAAkC,IAAlC,CAAH;AACAH,MAAAA,UAAU;AACb,KAPc,CAAf;AAQH,GAVD,MAWK;AACDK,IAAAA,KAAK;AACR;;AACD,SAAOtB,QAAQ,CAACe,UAAD,CAAf;AACH","sourcesContent":["import { onBeforeMount, onBeforeUnmount, ref, readonly } from 'vue';\nimport { on, off } from 'evtd';\nimport { hasInstance, isBrowser } from './utils';\nconst clickedTimeRef = ref(undefined);\nlet usedCount = 0;\nfunction handleClick() {\n    clickedTimeRef.value = Date.now();\n}\nlet managable = true;\nexport default function useClicked(timeout) {\n    if (!isBrowser)\n        return readonly(ref(false));\n    const clickedRef = ref(false);\n    let timerId = null;\n    function clearTimer() {\n        if (timerId !== null)\n            window.clearTimeout(timerId);\n    }\n    function clickedHandler() {\n        clearTimer();\n        clickedRef.value = true;\n        timerId = window.setTimeout(() => {\n            clickedRef.value = false;\n        }, timeout);\n    }\n    if (usedCount === 0) {\n        on('click', window, handleClick, true);\n    }\n    const setup = () => {\n        usedCount += 1;\n        on('click', window, clickedHandler, true);\n    };\n    if (managable && (managable = hasInstance())) {\n        onBeforeMount(setup);\n        onBeforeUnmount(() => {\n            usedCount -= 1;\n            if (usedCount === 0) {\n                off('click', window, handleClick, true);\n            }\n            off('click', window, clickedHandler, true);\n            clearTimer();\n        });\n    }\n    else {\n        setup();\n    }\n    return readonly(clickedRef);\n}\n"]},"metadata":{},"sourceType":"module"}