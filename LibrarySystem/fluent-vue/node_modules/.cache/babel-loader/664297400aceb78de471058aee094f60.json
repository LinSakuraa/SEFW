{"ast":null,"code":"import { computed, defineComponent, h, inject, provide } from 'vue';\nimport { renderArrow } from '../../popover/src/PopoverBody';\nimport NDropdownDivider from './DropdownDivider'; // eslint-disable-next-line import/no-cycle\n\nimport NDropdownGroup from './DropdownGroup'; // eslint-disable-next-line import/no-cycle\n\nimport NDropdownOption from './DropdownOption';\nimport NDropdownRenderOption from './DropdownRenderOption';\nimport { isSubmenuNode, isGroupNode, isDividerNode, isRenderNode } from './utils';\nimport { dropdownInjectionKey, dropdownMenuInjectionKey } from './context';\nexport default defineComponent({\n  name: 'DropdownMenu',\n  props: {\n    showArrow: Boolean,\n    arrowStyle: [String, Object],\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNodes: {\n      type: Array,\n      default: () => []\n    },\n    parentKey: {\n      type: [String, Number],\n      default: null\n    }\n  },\n\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const {\n      renderIconRef,\n      childrenFieldRef\n    } = inject(dropdownInjectionKey);\n    provide(dropdownMenuInjectionKey, {\n      showIconRef: computed(() => {\n        const renderIcon = renderIconRef.value;\n        return props.tmNodes.some(tmNode => {\n          var _a;\n\n          if (tmNode.isGroup) {\n            return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({\n              rawNode: rawChild\n            }) => renderIcon ? renderIcon(rawChild) : rawChild.icon);\n          }\n\n          const {\n            rawNode\n          } = tmNode;\n          return renderIcon ? renderIcon(rawNode) : rawNode.icon;\n        });\n      }),\n      hasSubmenuRef: computed(() => {\n        const {\n          value: childrenField\n        } = childrenFieldRef;\n        return props.tmNodes.some(tmNode => {\n          var _a;\n\n          if (tmNode.isGroup) {\n            return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({\n              rawNode: rawChild\n            }) => isSubmenuNode(rawChild, childrenField));\n          }\n\n          const {\n            rawNode\n          } = tmNode;\n          return isSubmenuNode(rawNode, childrenField);\n        });\n      })\n    });\n  },\n\n  render() {\n    const {\n      parentKey,\n      clsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-dropdown-menu`\n    }, this.tmNodes.map(tmNode => {\n      const {\n        rawNode\n      } = tmNode;\n\n      if (isRenderNode(rawNode)) {\n        return h(NDropdownRenderOption, {\n          tmNode: tmNode,\n          key: tmNode.key\n        });\n      }\n\n      if (isDividerNode(rawNode)) {\n        return h(NDropdownDivider, {\n          clsPrefix: clsPrefix,\n          key: tmNode.key\n        });\n      }\n\n      if (isGroupNode(rawNode)) {\n        return h(NDropdownGroup, {\n          clsPrefix: clsPrefix,\n          tmNode: tmNode,\n          parentKey: parentKey,\n          key: tmNode.key\n        });\n      }\n\n      return h(NDropdownOption, {\n        clsPrefix: clsPrefix,\n        tmNode: tmNode,\n        parentKey: parentKey,\n        key: tmNode.key,\n        props: rawNode.props\n      });\n    }), this.showArrow ? renderArrow({\n      clsPrefix,\n      arrowStyle: this.arrowStyle\n    }) : null);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/dropdown/src/DropdownMenu.js"],"names":["computed","defineComponent","h","inject","provide","renderArrow","NDropdownDivider","NDropdownGroup","NDropdownOption","NDropdownRenderOption","isSubmenuNode","isGroupNode","isDividerNode","isRenderNode","dropdownInjectionKey","dropdownMenuInjectionKey","name","props","showArrow","Boolean","arrowStyle","String","Object","clsPrefix","type","required","tmNodes","Array","default","parentKey","Number","setup","renderIconRef","childrenFieldRef","showIconRef","renderIcon","value","some","tmNode","_a","isGroup","children","rawNode","rawChild","icon","hasSubmenuRef","childrenField","render","class","map","key"],"mappings":"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","sourcesContent":["import { computed, defineComponent, h, inject, provide } from 'vue';\nimport { renderArrow } from '../../popover/src/PopoverBody';\nimport NDropdownDivider from './DropdownDivider';\n// eslint-disable-next-line import/no-cycle\nimport NDropdownGroup from './DropdownGroup';\n// eslint-disable-next-line import/no-cycle\nimport NDropdownOption from './DropdownOption';\nimport NDropdownRenderOption from './DropdownRenderOption';\nimport { isSubmenuNode, isGroupNode, isDividerNode, isRenderNode } from './utils';\nimport { dropdownInjectionKey, dropdownMenuInjectionKey } from './context';\nexport default defineComponent({\n    name: 'DropdownMenu',\n    props: {\n        showArrow: Boolean,\n        arrowStyle: [String, Object],\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNodes: {\n            type: Array,\n            default: () => []\n        },\n        parentKey: {\n            type: [String, Number],\n            default: null\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { renderIconRef, childrenFieldRef } = inject(dropdownInjectionKey);\n        provide(dropdownMenuInjectionKey, {\n            showIconRef: computed(() => {\n                const renderIcon = renderIconRef.value;\n                return props.tmNodes.some((tmNode) => {\n                    var _a;\n                    if (tmNode.isGroup) {\n                        return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({ rawNode: rawChild }) => renderIcon ? renderIcon(rawChild) : rawChild.icon);\n                    }\n                    const { rawNode } = tmNode;\n                    return renderIcon ? renderIcon(rawNode) : rawNode.icon;\n                });\n            }),\n            hasSubmenuRef: computed(() => {\n                const { value: childrenField } = childrenFieldRef;\n                return props.tmNodes.some((tmNode) => {\n                    var _a;\n                    if (tmNode.isGroup) {\n                        return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({ rawNode: rawChild }) => isSubmenuNode(rawChild, childrenField));\n                    }\n                    const { rawNode } = tmNode;\n                    return isSubmenuNode(rawNode, childrenField);\n                });\n            })\n        });\n    },\n    render() {\n        const { parentKey, clsPrefix } = this;\n        return (h(\"div\", { class: `${clsPrefix}-dropdown-menu` },\n            this.tmNodes.map((tmNode) => {\n                const { rawNode } = tmNode;\n                if (isRenderNode(rawNode)) {\n                    return (h(NDropdownRenderOption, { tmNode: tmNode, key: tmNode.key }));\n                }\n                if (isDividerNode(rawNode)) {\n                    return h(NDropdownDivider, { clsPrefix: clsPrefix, key: tmNode.key });\n                }\n                if (isGroupNode(rawNode)) {\n                    return (h(NDropdownGroup, { clsPrefix: clsPrefix, tmNode: tmNode, parentKey: parentKey, key: tmNode.key }));\n                }\n                return (h(NDropdownOption, { clsPrefix: clsPrefix, tmNode: tmNode, parentKey: parentKey, key: tmNode.key, props: rawNode.props }));\n            }),\n            this.showArrow\n                ? renderArrow({\n                    clsPrefix,\n                    arrowStyle: this.arrowStyle\n                })\n                : null));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}