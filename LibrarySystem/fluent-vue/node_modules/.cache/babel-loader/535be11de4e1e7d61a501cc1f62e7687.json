{"ast":null,"code":"import { canUseDOM } from \"exenv-es6\";\n/**\n * A test that ensures that all arguments are HTML Elements\n */\n\nexport function isHTMLElement(...args) {\n  return args.every(arg => arg instanceof HTMLElement);\n}\n/**\n * Returns all displayed elements inside of a root node that match a provided selector\n */\n\nexport function getDisplayedNodes(rootNode, selector) {\n  if (!rootNode || !selector || !isHTMLElement(rootNode)) {\n    return;\n  }\n\n  const nodes = Array.from(rootNode.querySelectorAll(selector)); // offsetParent will be null if the element isn't currently displayed,\n  // so this will allow us to operate only on visible nodes\n\n  return nodes.filter(node => node.offsetParent !== null);\n}\n/**\n * Gets the numeric key code associated with a keyboard event. This method is for use with DOM level 3 events\n * that still use the deprecated keyCode property.\n */\n\nexport function getKeyCode(event) {\n  return event === null ? null : event.which || event.keyCode || event.charCode;\n}\n/**\n * Returns the nonce used in the page, if any.\n *\n * Based on https://github.com/cssinjs/jss/blob/master/packages/jss/src/DomRenderer.js\n */\n\nfunction getNonce() {\n  const node = document.querySelector('meta[property=\"csp-nonce\"]');\n\n  if (node) {\n    return node.getAttribute(\"content\");\n  } else {\n    return null;\n  }\n}\n/**\n * Test if the document supports :focus-visible\n */\n\n\nlet _canUseFocusVisible;\n\nexport function canUseFocusVisible() {\n  if (typeof _canUseFocusVisible === \"boolean\") {\n    return _canUseFocusVisible;\n  }\n\n  if (!canUseDOM()) {\n    _canUseFocusVisible = false;\n    return _canUseFocusVisible;\n  } // Check to see if the document supports the focus-visible element\n\n\n  const styleElement = document.createElement(\"style\"); // If nonces are present on the page, use it when creating the style element\n  // to test focus-visible support.\n\n  const styleNonce = getNonce();\n\n  if (styleNonce !== null) {\n    styleElement.setAttribute(\"nonce\", styleNonce);\n  }\n\n  document.head.appendChild(styleElement);\n\n  try {\n    styleElement.sheet.insertRule(\"foo:focus-visible {color:inherit}\", 0);\n    _canUseFocusVisible = true;\n  } catch (e) {\n    _canUseFocusVisible = false;\n  } finally {\n    document.head.removeChild(styleElement);\n  }\n\n  return _canUseFocusVisible;\n}\n\nlet _canUseCssGrid;\n\nexport function canUseCssGrid() {\n  if (typeof _canUseCssGrid === \"boolean\") {\n    return _canUseCssGrid;\n  }\n\n  try {\n    _canUseCssGrid = CSS.supports(\"display\", \"grid\");\n  } catch (_a) {\n    _canUseCssGrid = false;\n  }\n\n  return _canUseCssGrid;\n}\nexport function canUseForcedColors() {\n  return canUseDOM() && (window.matchMedia(\"(forced-colors: none)\").matches || window.matchMedia(\"(forced-colors: active)\").matches);\n}\nexport function resetDocumentCache() {\n  _canUseCssGrid = undefined;\n  _canUseFocusVisible = undefined;\n}\n/**\n * @deprecated Use 'canUseForcedColors' instead\n */\n\nexport const canUsedForcedColors = canUseForcedColors;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-web-utilities/dist/dom.js"],"names":["canUseDOM","isHTMLElement","args","every","arg","HTMLElement","getDisplayedNodes","rootNode","selector","nodes","Array","from","querySelectorAll","filter","node","offsetParent","getKeyCode","event","which","keyCode","charCode","getNonce","document","querySelector","getAttribute","_canUseFocusVisible","canUseFocusVisible","styleElement","createElement","styleNonce","setAttribute","head","appendChild","sheet","insertRule","e","removeChild","_canUseCssGrid","canUseCssGrid","CSS","supports","_a","canUseForcedColors","window","matchMedia","matches","resetDocumentCache","undefined","canUsedForcedColors"],"mappings":"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","sourcesContent":["import { canUseDOM } from \"exenv-es6\";\n/**\n * A test that ensures that all arguments are HTML Elements\n */\nexport function isHTMLElement(...args) {\n    return args.every((arg) => arg instanceof HTMLElement);\n}\n/**\n * Returns all displayed elements inside of a root node that match a provided selector\n */\nexport function getDisplayedNodes(rootNode, selector) {\n    if (!rootNode || !selector || !isHTMLElement(rootNode)) {\n        return;\n    }\n    const nodes = Array.from(rootNode.querySelectorAll(selector));\n    // offsetParent will be null if the element isn't currently displayed,\n    // so this will allow us to operate only on visible nodes\n    return nodes.filter((node) => node.offsetParent !== null);\n}\n/**\n * Gets the numeric key code associated with a keyboard event. This method is for use with DOM level 3 events\n * that still use the deprecated keyCode property.\n */\nexport function getKeyCode(event) {\n    return event === null ? null : event.which || event.keyCode || event.charCode;\n}\n/**\n * Returns the nonce used in the page, if any.\n *\n * Based on https://github.com/cssinjs/jss/blob/master/packages/jss/src/DomRenderer.js\n */\nfunction getNonce() {\n    const node = document.querySelector('meta[property=\"csp-nonce\"]');\n    if (node) {\n        return node.getAttribute(\"content\");\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Test if the document supports :focus-visible\n */\nlet _canUseFocusVisible;\nexport function canUseFocusVisible() {\n    if (typeof _canUseFocusVisible === \"boolean\") {\n        return _canUseFocusVisible;\n    }\n    if (!canUseDOM()) {\n        _canUseFocusVisible = false;\n        return _canUseFocusVisible;\n    }\n    // Check to see if the document supports the focus-visible element\n    const styleElement = document.createElement(\"style\");\n    // If nonces are present on the page, use it when creating the style element\n    // to test focus-visible support.\n    const styleNonce = getNonce();\n    if (styleNonce !== null) {\n        styleElement.setAttribute(\"nonce\", styleNonce);\n    }\n    document.head.appendChild(styleElement);\n    try {\n        styleElement.sheet.insertRule(\"foo:focus-visible {color:inherit}\", 0);\n        _canUseFocusVisible = true;\n    }\n    catch (e) {\n        _canUseFocusVisible = false;\n    }\n    finally {\n        document.head.removeChild(styleElement);\n    }\n    return _canUseFocusVisible;\n}\nlet _canUseCssGrid;\nexport function canUseCssGrid() {\n    if (typeof _canUseCssGrid === \"boolean\") {\n        return _canUseCssGrid;\n    }\n    try {\n        _canUseCssGrid = CSS.supports(\"display\", \"grid\");\n    }\n    catch (_a) {\n        _canUseCssGrid = false;\n    }\n    return _canUseCssGrid;\n}\nexport function canUseForcedColors() {\n    return (canUseDOM() &&\n        (window.matchMedia(\"(forced-colors: none)\").matches ||\n            window.matchMedia(\"(forced-colors: active)\").matches));\n}\nexport function resetDocumentCache() {\n    _canUseCssGrid = undefined;\n    _canUseFocusVisible = undefined;\n}\n/**\n * @deprecated Use 'canUseForcedColors' instead\n */\nexport const canUsedForcedColors = canUseForcedColors;\n"]},"metadata":{},"sourceType":"module"}