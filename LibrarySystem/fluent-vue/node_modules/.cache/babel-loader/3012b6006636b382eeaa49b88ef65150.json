{"ast":null,"code":"import { h, ref, computed, inject, onMounted, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport { buttonGroupInjectionKey } from './ButtonGroup';\nimport style from './styles/button.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nimport { changeColor } from 'seemly';\nconst buttonProps = Object.assign(Object.assign({}, useTheme.props), {\n  color: String,\n  textColor: String,\n  text: Boolean,\n  block: Boolean,\n  loading: Boolean,\n  disabled: Boolean,\n  circle: Boolean,\n  size: String,\n  ghost: Boolean,\n  round: Boolean,\n  secondary: Boolean,\n  tertiary: Boolean,\n  quaternary: Boolean,\n  strong: Boolean,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  type: {\n    type: String,\n    default: 'default'\n  },\n  dashed: Boolean,\n  iconPlacement: {\n    type: String,\n    default: 'left'\n  },\n  attrType: {\n    type: String,\n    default: 'button'\n  },\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  onClick: [Function, Array],\n  internalAutoFocus: Boolean\n});\nconst Button = defineComponent({\n  name: 'Button',\n  props: buttonProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        const {\n          dashed,\n          ghost,\n          text,\n          secondary,\n          tertiary,\n          quaternary\n        } = props;\n\n        if ((dashed || ghost || text) && (secondary || tertiary || quaternary)) {\n          warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n        }\n      });\n    }\n\n    const selfElRef = ref(null);\n    const waveElRef = ref(null);\n    const enterPressedRef = ref(false);\n    onMounted(() => {\n      const {\n        value: selfEl\n      } = selfElRef;\n\n      if (selfEl && !props.disabled && props.focusable && props.internalAutoFocus) {\n        selfEl.focus({\n          preventScroll: true\n        });\n      }\n    });\n    const showBorderRef = useMemo(() => {\n      return !props.quaternary && !props.tertiary && !props.secondary && !props.text && (!props.color || props.ghost || props.dashed) && props.bordered;\n    });\n    const NButtonGroup = inject(buttonGroupInjectionKey, {});\n    const {\n      mergedSizeRef\n    } = useFormItem({}, {\n      defaultSize: 'medium',\n      mergedSize: NFormItem => {\n        const {\n          size\n        } = props;\n        if (size) return size;\n        const {\n          size: buttonGroupSize\n        } = NButtonGroup;\n        if (buttonGroupSize) return buttonGroupSize;\n        const {\n          mergedSize: formItemSize\n        } = NFormItem || {};\n\n        if (formItemSize) {\n          return formItemSize.value;\n        }\n\n        return 'medium';\n      }\n    });\n    const mergedFocusableRef = computed(() => {\n      return props.focusable && !props.disabled;\n    });\n\n    const handleMousedown = e => {\n      var _a;\n\n      e.preventDefault();\n\n      if (props.disabled) {\n        return;\n      }\n\n      if (mergedFocusableRef.value) {\n        (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    const handleClick = e => {\n      var _a;\n\n      if (!props.disabled && !props.loading) {\n        const {\n          onClick\n        } = props;\n        if (onClick) call(onClick, e);\n\n        if (!props.text) {\n          (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n        }\n      }\n    };\n\n    const handleKeyup = e => {\n      switch (e.code) {\n        case 'Enter':\n        case 'NumpadEnter':\n          if (!props.keyboard) {\n            return;\n          }\n\n          enterPressedRef.value = false;\n      }\n    };\n\n    const handleKeydown = e => {\n      switch (e.code) {\n        case 'Enter':\n        case 'NumpadEnter':\n          if (!props.keyboard || props.loading) {\n            e.preventDefault();\n            return;\n          }\n\n          enterPressedRef.value = true;\n      }\n    };\n\n    const handleBlur = () => {\n      enterPressedRef.value = false;\n    };\n\n    const {\n      inlineThemeDisabled,\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n    const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const theme = themeRef.value;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self\n      } = theme;\n      const {\n        rippleDuration,\n        opacityDisabled,\n        fontWeight,\n        fontWeightStrong\n      } = self;\n      const size = mergedSizeRef.value;\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props; // font\n\n      const fontProps = {\n        'font-weight': strong ? fontWeightStrong : fontWeight\n      }; // color\n\n      let colorProps = {\n        '--n-color': 'initial',\n        '--n-color-hover': 'initial',\n        '--n-color-pressed': 'initial',\n        '--n-color-focus': 'initial',\n        '--n-color-disabled': 'initial',\n        '--n-ripple-color': 'initial',\n        '--n-text-color': 'initial',\n        '--n-text-color-hover': 'initial',\n        '--n-text-color-pressed': 'initial',\n        '--n-text-color-focus': 'initial',\n        '--n-text-color-disabled': 'initial'\n      };\n      const typeIsTertiary = type === 'tertiary';\n      const typeIsDefault = type === 'default';\n      const mergedType = typeIsTertiary ? 'default' : type;\n\n      if (text) {\n        const propTextColor = textColor || color;\n        const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-pressed': propTextColor ? createPressedColor(propTextColor) : self[createKey('textColorTextPressed', mergedType)],\n          '--n-text-color-focus': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-disabled': propTextColor || self[createKey('textColorTextDisabled', mergedType)]\n        };\n      } else if (ghost || dashed) {\n        const mergedTextColor = textColor || color;\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n          '--n-text-color-hover': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-pressed': mergedTextColor ? createPressedColor(mergedTextColor) : self[createKey('textColorGhostPressed', mergedType)],\n          '--n-text-color-focus': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-disabled': mergedTextColor || self[createKey('textColorGhostDisabled', mergedType)]\n        };\n      } else if (secondary) {\n        const typeTextColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedTextColor = color || typeTextColor;\n        const isColoredType = type !== 'default' && type !== 'tertiary';\n        colorProps = {\n          '--n-color': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondary)\n          }) : self.colorSecondary,\n          '--n-color-hover': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-pressed': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryPressed)\n          }) : self.colorSecondaryPressed,\n          '--n-color-focus': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-disabled': self.colorSecondary,\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': mergedTextColor,\n          '--n-text-color-pressed': mergedTextColor,\n          '--n-text-color-focus': mergedTextColor,\n          '--n-text-color-disabled': mergedTextColor\n        };\n      } else if (tertiary || quaternary) {\n        const typeColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedColor = color || typeColor;\n\n        if (tertiary) {\n          colorProps['--n-color'] = self.colorTertiary;\n          colorProps['--n-color-hover'] = self.colorTertiaryHover;\n          colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n          colorProps['--n-color-focus'] = self.colorSecondaryHover;\n          colorProps['--n-color-disabled'] = self.colorTertiary;\n        } else {\n          colorProps['--n-color'] = self.colorQuaternary;\n          colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n          colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n          colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n          colorProps['--n-color-disabled'] = self.colorQuaternary;\n        }\n\n        colorProps['--n-ripple-color'] = '#0000';\n        colorProps['--n-text-color'] = mergedColor;\n        colorProps['--n-text-color-hover'] = mergedColor;\n        colorProps['--n-text-color-pressed'] = mergedColor;\n        colorProps['--n-text-color-focus'] = mergedColor;\n        colorProps['--n-text-color-disabled'] = mergedColor;\n      } else {\n        colorProps = {\n          '--n-color': color || self[createKey('color', mergedType)],\n          '--n-color-hover': color ? createHoverColor(color) : self[createKey('colorHover', mergedType)],\n          '--n-color-pressed': color ? createPressedColor(color) : self[createKey('colorPressed', mergedType)],\n          '--n-color-focus': color ? createHoverColor(color) : self[createKey('colorFocus', mergedType)],\n          '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': textColor || (color ? self.textColorPrimary : typeIsTertiary ? self.textColorTertiary : self[createKey('textColor', mergedType)]),\n          '--n-text-color-hover': textColor || (color ? self.textColorHoverPrimary : self[createKey('textColorHover', mergedType)]),\n          '--n-text-color-pressed': textColor || (color ? self.textColorPressedPrimary : self[createKey('textColorPressed', mergedType)]),\n          '--n-text-color-focus': textColor || (color ? self.textColorFocusPrimary : self[createKey('textColorFocus', mergedType)]),\n          '--n-text-color-disabled': textColor || (color ? self.textColorDisabledPrimary : self[createKey('textColorDisabled', mergedType)])\n        };\n      } // border\n\n\n      let borderProps = {\n        '--n-border': 'initial',\n        '--n-border-hover': 'initial',\n        '--n-border-pressed': 'initial',\n        '--n-border-focus': 'initial',\n        '--n-border-disabled': 'initial'\n      };\n\n      if (text) {\n        borderProps = {\n          '--n-border': 'none',\n          '--n-border-hover': 'none',\n          '--n-border-pressed': 'none',\n          '--n-border-focus': 'none',\n          '--n-border-disabled': 'none'\n        };\n      } else {\n        borderProps = {\n          '--n-border': self[createKey('border', mergedType)],\n          '--n-border-hover': self[createKey('borderHover', mergedType)],\n          '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n          '--n-border-focus': self[createKey('borderFocus', mergedType)],\n          '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n        };\n      } // size\n\n\n      const {\n        [createKey('height', size)]: height,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('padding', size)]: padding,\n        [createKey('paddingRound', size)]: paddingRound,\n        [createKey('iconSize', size)]: iconSize,\n        [createKey('borderRadius', size)]: borderRadius,\n        [createKey('iconMargin', size)]: iconMargin,\n        waveOpacity\n      } = self;\n      const sizeProps = {\n        '--n-width': circle && !text ? height : 'initial',\n        '--n-height': text ? 'initial' : height,\n        '--n-font-size': fontSize,\n        '--n-padding': circle ? 'initial' : text ? 'initial' : round ? paddingRound : padding,\n        '--n-icon-size': iconSize,\n        '--n-icon-margin': iconMargin,\n        '--n-border-radius': text ? 'initial' : circle || round ? height : borderRadius\n      };\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-bezier-ease-out': cubicBezierEaseOut,\n        '--n-ripple-duration': rippleDuration,\n        '--n-opacity-disabled': opacityDisabled,\n        '--n-wave-opacity': waveOpacity\n      }, fontProps), colorProps), borderProps), sizeProps);\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('button', computed(() => {\n      let hash = '';\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      if (dashed) hash += 'a';\n      if (ghost) hash += 'b';\n      if (text) hash += 'c';\n      if (round) hash += 'd';\n      if (circle) hash += 'e';\n      if (secondary) hash += 'f';\n      if (tertiary) hash += 'g';\n      if (quaternary) hash += 'h';\n      if (strong) hash += 'i';\n      if (color) hash += 'j' + color2Class(color);\n      if (textColor) hash += 'k' + color2Class(textColor);\n      const {\n        value: size\n      } = mergedSizeRef;\n      hash += 'l' + size[0];\n      hash += 'm' + type[0];\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      selfElRef,\n      waveElRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedFocusable: mergedFocusableRef,\n      mergedSize: mergedSizeRef,\n      showBorder: showBorderRef,\n      enterPressed: enterPressedRef,\n      rtlEnabled: rtlEnabledRef,\n      handleMousedown,\n      handleKeydown,\n      handleBlur,\n      handleKeyup,\n      handleClick,\n      customColorCssVars: computed(() => {\n        const {\n          color\n        } = props;\n        if (!color) return null;\n        const hoverColor = createHoverColor(color);\n        return {\n          '--n-border-color': color,\n          '--n-border-color-hover': hoverColor,\n          '--n-border-color-pressed': createPressedColor(color),\n          '--n-border-color-focus': hoverColor,\n          '--n-border-color-disabled': color\n        };\n      }),\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix,\n      tag: Component,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = resolveWrappedSlot(this.$slots.default, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-button__content`\n    }, children));\n    return h(Component, {\n      ref: \"selfElRef\",\n      class: [this.themeClass, `${mergedClsPrefix}-button`, `${mergedClsPrefix}-button--${this.type}-type`, `${mergedClsPrefix}-button--${this.mergedSize}-type`, this.rtlEnabled && `${mergedClsPrefix}-button--rtl`, this.disabled && `${mergedClsPrefix}-button--disabled`, this.block && `${mergedClsPrefix}-button--block`, this.enterPressed && `${mergedClsPrefix}-button--pressed`, !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`, this.color && `${mergedClsPrefix}-button--color`, this.secondary && `${mergedClsPrefix}-button--secondary`, this.loading && `${mergedClsPrefix}-button--loading`, this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n      ],\n      tabindex: this.mergedFocusable ? 0 : -1,\n      type: this.attrType,\n      style: this.cssVars,\n      disabled: this.disabled,\n      onClick: this.handleClick,\n      onBlur: this.handleBlur,\n      onMousedown: this.handleMousedown,\n      onKeyup: this.handleKeyup,\n      onKeydown: this.handleKeydown\n    }, this.iconPlacement === 'right' && children, h(NFadeInExpandTransition, {\n      width: true\n    }, {\n      default: () => resolveWrappedSlot(this.$slots.icon, children => (this.loading || children) && h(\"span\", {\n        class: `${mergedClsPrefix}-button__icon`,\n        style: {\n          margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n        }\n      }, h(NIconSwitchTransition, null, {\n        default: () => this.loading ? h(NBaseLoading, {\n          clsPrefix: mergedClsPrefix,\n          key: \"loading\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          strokeWidth: 20\n        }) : h(\"div\", {\n          key: \"icon\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          role: \"none\"\n        }, children)\n      })))\n    }), this.iconPlacement === 'left' && children, !this.text ? h(NBaseWave, {\n      ref: \"waveElRef\",\n      clsPrefix: mergedClsPrefix\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__border`,\n      style: this.customColorCssVars\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__state-border`,\n      style: this.customColorCssVars\n    }) : null);\n  }\n\n});\nexport default Button; // XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\n\nexport const XButton = Button; // Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/button/src/Button.js"],"names":["h","ref","computed","inject","onMounted","defineComponent","watchEffect","useMemo","createHoverColor","createPressedColor","useConfig","useFormItem","useTheme","useThemeClass","NFadeInExpandTransition","NIconSwitchTransition","NBaseLoading","NBaseWave","call","color2Class","createKey","isSlotEmpty","resolveWrappedSlot","warnOnce","buttonLight","buttonGroupInjectionKey","style","useRtl","changeColor","buttonProps","Object","assign","props","color","String","textColor","text","Boolean","block","loading","disabled","circle","size","ghost","round","secondary","tertiary","quaternary","strong","focusable","type","default","keyboard","tag","dashed","iconPlacement","attrType","bordered","onClick","Function","Array","internalAutoFocus","Button","name","setup","process","env","NODE_ENV","selfElRef","waveElRef","enterPressedRef","value","selfEl","focus","preventScroll","showBorderRef","NButtonGroup","mergedSizeRef","defaultSize","mergedSize","NFormItem","buttonGroupSize","formItemSize","mergedFocusableRef","handleMousedown","e","_a","preventDefault","handleClick","play","handleKeyup","code","handleKeydown","handleBlur","inlineThemeDisabled","mergedClsPrefixRef","mergedRtlRef","themeRef","rtlEnabledRef","cssVarsRef","theme","common","cubicBezierEaseInOut","cubicBezierEaseOut","self","rippleDuration","opacityDisabled","fontWeight","fontWeightStrong","fontProps","colorProps","typeIsTertiary","typeIsDefault","mergedType","propTextColor","mergedTextColor","typeTextColor","textColorTertiary","isColoredType","alpha","Number","colorOpacitySecondary","colorSecondary","colorOpacitySecondaryHover","colorSecondaryHover","colorOpacitySecondaryPressed","colorSecondaryPressed","typeColor","mergedColor","colorTertiary","colorTertiaryHover","colorTertiaryPressed","colorQuaternary","colorQuaternaryHover","colorQuaternaryPressed","textColorPrimary","textColorHoverPrimary","textColorPressedPrimary","textColorFocusPrimary","textColorDisabledPrimary","borderProps","height","fontSize","padding","paddingRound","iconSize","borderRadius","iconMargin","waveOpacity","sizeProps","themeClassHandle","hash","undefined","mergedClsPrefix","mergedFocusable","showBorder","enterPressed","rtlEnabled","customColorCssVars","hoverColor","cssVars","themeClass","onRender","render","Component","children","$slots","class","tabindex","onBlur","onMousedown","onKeyup","onKeydown","width","icon","margin","clsPrefix","key","strokeWidth","role","XButton"],"mappings":"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","sourcesContent":["import { h, ref, computed, inject, onMounted, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport { buttonGroupInjectionKey } from './ButtonGroup';\nimport style from './styles/button.cssr';\nimport useRtl from '../../_mixins/use-rtl';\nimport { changeColor } from 'seemly';\nconst buttonProps = Object.assign(Object.assign({}, useTheme.props), { color: String, textColor: String, text: Boolean, block: Boolean, loading: Boolean, disabled: Boolean, circle: Boolean, size: String, ghost: Boolean, round: Boolean, secondary: Boolean, tertiary: Boolean, quaternary: Boolean, strong: Boolean, focusable: {\n        type: Boolean,\n        default: true\n    }, keyboard: {\n        type: Boolean,\n        default: true\n    }, tag: {\n        type: String,\n        default: 'button'\n    }, type: {\n        type: String,\n        default: 'default'\n    }, dashed: Boolean, iconPlacement: {\n        type: String,\n        default: 'left'\n    }, attrType: {\n        type: String,\n        default: 'button'\n    }, bordered: {\n        type: Boolean,\n        default: true\n    }, onClick: [Function, Array], internalAutoFocus: Boolean });\nconst Button = defineComponent({\n    name: 'Button',\n    props: buttonProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                const { dashed, ghost, text, secondary, tertiary, quaternary } = props;\n                if ((dashed || ghost || text) &&\n                    (secondary || tertiary || quaternary)) {\n                    warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n                }\n            });\n        }\n        const selfElRef = ref(null);\n        const waveElRef = ref(null);\n        const enterPressedRef = ref(false);\n        onMounted(() => {\n            const { value: selfEl } = selfElRef;\n            if (selfEl &&\n                !props.disabled &&\n                props.focusable &&\n                props.internalAutoFocus) {\n                selfEl.focus({ preventScroll: true });\n            }\n        });\n        const showBorderRef = useMemo(() => {\n            return (!props.quaternary &&\n                !props.tertiary &&\n                !props.secondary &&\n                !props.text &&\n                (!props.color || props.ghost || props.dashed) &&\n                props.bordered);\n        });\n        const NButtonGroup = inject(buttonGroupInjectionKey, {});\n        const { mergedSizeRef } = useFormItem({}, {\n            defaultSize: 'medium',\n            mergedSize: (NFormItem) => {\n                const { size } = props;\n                if (size)\n                    return size;\n                const { size: buttonGroupSize } = NButtonGroup;\n                if (buttonGroupSize)\n                    return buttonGroupSize;\n                const { mergedSize: formItemSize } = NFormItem || {};\n                if (formItemSize) {\n                    return formItemSize.value;\n                }\n                return 'medium';\n            }\n        });\n        const mergedFocusableRef = computed(() => {\n            return props.focusable && !props.disabled;\n        });\n        const handleMousedown = (e) => {\n            var _a;\n            e.preventDefault();\n            if (props.disabled) {\n                return;\n            }\n            if (mergedFocusableRef.value) {\n                (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });\n            }\n        };\n        const handleClick = (e) => {\n            var _a;\n            if (!props.disabled && !props.loading) {\n                const { onClick } = props;\n                if (onClick)\n                    call(onClick, e);\n                if (!props.text) {\n                    (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n                }\n            }\n        };\n        const handleKeyup = (e) => {\n            switch (e.code) {\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (!props.keyboard) {\n                        return;\n                    }\n                    enterPressedRef.value = false;\n            }\n        };\n        const handleKeydown = (e) => {\n            switch (e.code) {\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (!props.keyboard || props.loading) {\n                        e.preventDefault();\n                        return;\n                    }\n                    enterPressedRef.value = true;\n            }\n        };\n        const handleBlur = () => {\n            enterPressedRef.value = false;\n        };\n        const { inlineThemeDisabled, mergedClsPrefixRef, mergedRtlRef } = useConfig(props);\n        const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n        const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const theme = themeRef.value;\n            const { common: { cubicBezierEaseInOut, cubicBezierEaseOut }, self } = theme;\n            const { rippleDuration, opacityDisabled, fontWeight, fontWeightStrong } = self;\n            const size = mergedSizeRef.value;\n            const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n            // font\n            const fontProps = {\n                'font-weight': strong ? fontWeightStrong : fontWeight\n            };\n            // color\n            let colorProps = {\n                '--n-color': 'initial',\n                '--n-color-hover': 'initial',\n                '--n-color-pressed': 'initial',\n                '--n-color-focus': 'initial',\n                '--n-color-disabled': 'initial',\n                '--n-ripple-color': 'initial',\n                '--n-text-color': 'initial',\n                '--n-text-color-hover': 'initial',\n                '--n-text-color-pressed': 'initial',\n                '--n-text-color-focus': 'initial',\n                '--n-text-color-disabled': 'initial'\n            };\n            const typeIsTertiary = type === 'tertiary';\n            const typeIsDefault = type === 'default';\n            const mergedType = typeIsTertiary ? 'default' : type;\n            if (text) {\n                const propTextColor = textColor || color;\n                const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-pressed': propTextColor\n                        ? createPressedColor(propTextColor)\n                        : self[createKey('textColorTextPressed', mergedType)],\n                    '--n-text-color-focus': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-disabled': propTextColor ||\n                        self[createKey('textColorTextDisabled', mergedType)]\n                };\n            }\n            else if (ghost || dashed) {\n                const mergedTextColor = textColor || color;\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n                    '--n-text-color-hover': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-pressed': mergedTextColor\n                        ? createPressedColor(mergedTextColor)\n                        : self[createKey('textColorGhostPressed', mergedType)],\n                    '--n-text-color-focus': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-disabled': mergedTextColor ||\n                        self[createKey('textColorGhostDisabled', mergedType)]\n                };\n            }\n            else if (secondary) {\n                const typeTextColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedTextColor = color || typeTextColor;\n                const isColoredType = type !== 'default' && type !== 'tertiary';\n                colorProps = {\n                    '--n-color': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondary)\n                        })\n                        : self.colorSecondary,\n                    '--n-color-hover': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-pressed': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryPressed)\n                        })\n                        : self.colorSecondaryPressed,\n                    '--n-color-focus': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-disabled': self.colorSecondary,\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': mergedTextColor,\n                    '--n-text-color-pressed': mergedTextColor,\n                    '--n-text-color-focus': mergedTextColor,\n                    '--n-text-color-disabled': mergedTextColor\n                };\n            }\n            else if (tertiary || quaternary) {\n                const typeColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedColor = color || typeColor;\n                if (tertiary) {\n                    colorProps['--n-color'] = self.colorTertiary;\n                    colorProps['--n-color-hover'] = self.colorTertiaryHover;\n                    colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n                    colorProps['--n-color-focus'] = self.colorSecondaryHover;\n                    colorProps['--n-color-disabled'] = self.colorTertiary;\n                }\n                else {\n                    colorProps['--n-color'] = self.colorQuaternary;\n                    colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n                    colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-disabled'] = self.colorQuaternary;\n                }\n                colorProps['--n-ripple-color'] = '#0000';\n                colorProps['--n-text-color'] = mergedColor;\n                colorProps['--n-text-color-hover'] = mergedColor;\n                colorProps['--n-text-color-pressed'] = mergedColor;\n                colorProps['--n-text-color-focus'] = mergedColor;\n                colorProps['--n-text-color-disabled'] = mergedColor;\n            }\n            else {\n                colorProps = {\n                    '--n-color': color || self[createKey('color', mergedType)],\n                    '--n-color-hover': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorHover', mergedType)],\n                    '--n-color-pressed': color\n                        ? createPressedColor(color)\n                        : self[createKey('colorPressed', mergedType)],\n                    '--n-color-focus': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorFocus', mergedType)],\n                    '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': textColor ||\n                        (color\n                            ? self.textColorPrimary\n                            : typeIsTertiary\n                                ? self.textColorTertiary\n                                : self[createKey('textColor', mergedType)]),\n                    '--n-text-color-hover': textColor ||\n                        (color\n                            ? self.textColorHoverPrimary\n                            : self[createKey('textColorHover', mergedType)]),\n                    '--n-text-color-pressed': textColor ||\n                        (color\n                            ? self.textColorPressedPrimary\n                            : self[createKey('textColorPressed', mergedType)]),\n                    '--n-text-color-focus': textColor ||\n                        (color\n                            ? self.textColorFocusPrimary\n                            : self[createKey('textColorFocus', mergedType)]),\n                    '--n-text-color-disabled': textColor ||\n                        (color\n                            ? self.textColorDisabledPrimary\n                            : self[createKey('textColorDisabled', mergedType)])\n                };\n            }\n            // border\n            let borderProps = {\n                '--n-border': 'initial',\n                '--n-border-hover': 'initial',\n                '--n-border-pressed': 'initial',\n                '--n-border-focus': 'initial',\n                '--n-border-disabled': 'initial'\n            };\n            if (text) {\n                borderProps = {\n                    '--n-border': 'none',\n                    '--n-border-hover': 'none',\n                    '--n-border-pressed': 'none',\n                    '--n-border-focus': 'none',\n                    '--n-border-disabled': 'none'\n                };\n            }\n            else {\n                borderProps = {\n                    '--n-border': self[createKey('border', mergedType)],\n                    '--n-border-hover': self[createKey('borderHover', mergedType)],\n                    '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n                    '--n-border-focus': self[createKey('borderFocus', mergedType)],\n                    '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n                };\n            }\n            // size\n            const { [createKey('height', size)]: height, [createKey('fontSize', size)]: fontSize, [createKey('padding', size)]: padding, [createKey('paddingRound', size)]: paddingRound, [createKey('iconSize', size)]: iconSize, [createKey('borderRadius', size)]: borderRadius, [createKey('iconMargin', size)]: iconMargin, waveOpacity } = self;\n            const sizeProps = {\n                '--n-width': circle && !text ? height : 'initial',\n                '--n-height': text ? 'initial' : height,\n                '--n-font-size': fontSize,\n                '--n-padding': circle\n                    ? 'initial'\n                    : text\n                        ? 'initial'\n                        : round\n                            ? paddingRound\n                            : padding,\n                '--n-icon-size': iconSize,\n                '--n-icon-margin': iconMargin,\n                '--n-border-radius': text\n                    ? 'initial'\n                    : circle || round\n                        ? height\n                        : borderRadius\n            };\n            return Object.assign(Object.assign(Object.assign(Object.assign({ '--n-bezier': cubicBezierEaseInOut, '--n-bezier-ease-out': cubicBezierEaseOut, '--n-ripple-duration': rippleDuration, '--n-opacity-disabled': opacityDisabled, '--n-wave-opacity': waveOpacity }, fontProps), colorProps), borderProps), sizeProps);\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('button', computed(() => {\n                let hash = '';\n                const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n                if (dashed)\n                    hash += 'a';\n                if (ghost)\n                    hash += 'b';\n                if (text)\n                    hash += 'c';\n                if (round)\n                    hash += 'd';\n                if (circle)\n                    hash += 'e';\n                if (secondary)\n                    hash += 'f';\n                if (tertiary)\n                    hash += 'g';\n                if (quaternary)\n                    hash += 'h';\n                if (strong)\n                    hash += 'i';\n                if (color)\n                    hash += 'j' + color2Class(color);\n                if (textColor)\n                    hash += 'k' + color2Class(textColor);\n                const { value: size } = mergedSizeRef;\n                hash += 'l' + size[0];\n                hash += 'm' + type[0];\n                return hash;\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            selfElRef,\n            waveElRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedFocusable: mergedFocusableRef,\n            mergedSize: mergedSizeRef,\n            showBorder: showBorderRef,\n            enterPressed: enterPressedRef,\n            rtlEnabled: rtlEnabledRef,\n            handleMousedown,\n            handleKeydown,\n            handleBlur,\n            handleKeyup,\n            handleClick,\n            customColorCssVars: computed(() => {\n                const { color } = props;\n                if (!color)\n                    return null;\n                const hoverColor = createHoverColor(color);\n                return {\n                    '--n-border-color': color,\n                    '--n-border-color-hover': hoverColor,\n                    '--n-border-color-pressed': createPressedColor(color),\n                    '--n-border-color-focus': hoverColor,\n                    '--n-border-color-disabled': color\n                };\n            }),\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedClsPrefix, tag: Component, onRender } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        const children = resolveWrappedSlot(this.$slots.default, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-button__content` }, children)));\n        return (h(Component, { ref: \"selfElRef\", class: [\n                this.themeClass,\n                `${mergedClsPrefix}-button`,\n                `${mergedClsPrefix}-button--${this.type}-type`,\n                `${mergedClsPrefix}-button--${this.mergedSize}-type`,\n                this.rtlEnabled && `${mergedClsPrefix}-button--rtl`,\n                this.disabled && `${mergedClsPrefix}-button--disabled`,\n                this.block && `${mergedClsPrefix}-button--block`,\n                this.enterPressed && `${mergedClsPrefix}-button--pressed`,\n                !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`,\n                this.color && `${mergedClsPrefix}-button--color`,\n                this.secondary && `${mergedClsPrefix}-button--secondary`,\n                this.loading && `${mergedClsPrefix}-button--loading`,\n                this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n            ], tabindex: this.mergedFocusable ? 0 : -1, type: this.attrType, style: this.cssVars, disabled: this.disabled, onClick: this.handleClick, onBlur: this.handleBlur, onMousedown: this.handleMousedown, onKeyup: this.handleKeyup, onKeydown: this.handleKeydown },\n            this.iconPlacement === 'right' && children,\n            h(NFadeInExpandTransition, { width: true }, {\n                default: () => resolveWrappedSlot(this.$slots.icon, (children) => (this.loading || children) && (h(\"span\", { class: `${mergedClsPrefix}-button__icon`, style: {\n                        margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n                    } },\n                    h(NIconSwitchTransition, null, {\n                        default: () => this.loading ? (h(NBaseLoading, { clsPrefix: mergedClsPrefix, key: \"loading\", class: `${mergedClsPrefix}-icon-slot`, strokeWidth: 20 })) : (h(\"div\", { key: \"icon\", class: `${mergedClsPrefix}-icon-slot`, role: \"none\" }, children))\n                    }))))\n            }),\n            this.iconPlacement === 'left' && children,\n            !this.text ? (h(NBaseWave, { ref: \"waveElRef\", clsPrefix: mergedClsPrefix })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__border`, style: this.customColorCssVars })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__state-border`, style: this.customColorCssVars })) : null));\n    }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later\n"]},"metadata":{},"sourceType":"module"}