{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, observable } from \"@microsoft/fast-element\";\nimport { Direction, keyEscape } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities/\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { TooltipPosition } from \"./tooltip.options\";\nexport { TooltipPosition };\n/**\n * An Tooltip Custom HTML Element.\n *\n * @public\n */\n\nexport class Tooltip extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * The id of the element the tooltip is anchored to\n     *\n     * @defaultValue - undefined\n     * @public\n     * HTML Attribute: anchor\n     */\n\n    this.anchor = \"\";\n    /**\n     * The delay in milliseconds before a tooltip is shown after a hover event\n     *\n     * @defaultValue - 300\n     * @public\n     * HTML Attribute: delay\n     */\n\n    this.delay = 300;\n    /**\n     * Controls when the tooltip updates its position, default is 'anchor' which only updates when\n     * the anchor is resized.  'auto' will update on scroll/resize events.\n     * Corresponds to anchored-region auto-update-mode.\n     * @public\n     * @remarks\n     * HTML Attribute: auto-update-mode\n     */\n\n    this.autoUpdateMode = \"anchor\";\n    /**\n     * the html element currently being used as anchor.\n     * Setting this directly overrides the anchor attribute.\n     *\n     * @public\n     */\n\n    this.anchorElement = null;\n    /**\n     * The current viewport element instance\n     *\n     * @internal\n     */\n\n    this.viewportElement = null;\n    /**\n     * @internal\n     * @defaultValue \"dynamic\"\n     */\n\n    this.verticalPositioningMode = \"dynamic\";\n    /**\n     * @internal\n     * @defaultValue \"dynamic\"\n     */\n\n    this.horizontalPositioningMode = \"dynamic\";\n    /**\n     * @internal\n     */\n\n    this.horizontalInset = \"false\";\n    /**\n     * @internal\n     */\n\n    this.verticalInset = \"false\";\n    /**\n     * @internal\n     */\n\n    this.horizontalScaling = \"content\";\n    /**\n     * @internal\n     */\n\n    this.verticalScaling = \"content\";\n    /**\n     * @internal\n     */\n\n    this.verticalDefaultPosition = undefined;\n    /**\n     * @internal\n     */\n\n    this.horizontalDefaultPosition = undefined;\n    /**\n     * @internal\n     */\n\n    this.tooltipVisible = false;\n    /**\n     * Track current direction to pass to the anchored region\n     * updated when tooltip is shown\n     *\n     * @internal\n     */\n\n    this.currentDirection = Direction.ltr;\n    /**\n     * The timer that tracks delay time before the tooltip is shown on hover\n     */\n\n    this.showDelayTimer = null;\n    /**\n     * The timer that tracks delay time before the tooltip is hidden\n     */\n\n    this.hideDelayTimer = null;\n    /**\n     * Indicates whether the anchor is currently being hovered or has focus\n     */\n\n    this.isAnchorHoveredFocused = false;\n    /**\n     * Indicates whether the region is currently being hovered\n     */\n\n    this.isRegionHovered = false;\n    /**\n     * invoked when the anchored region's position relative to the anchor changes\n     *\n     * @internal\n     */\n\n    this.handlePositionChange = ev => {\n      this.classList.toggle(\"top\", this.region.verticalPosition === \"start\");\n      this.classList.toggle(\"bottom\", this.region.verticalPosition === \"end\");\n      this.classList.toggle(\"inset-top\", this.region.verticalPosition === \"insetStart\");\n      this.classList.toggle(\"inset-bottom\", this.region.verticalPosition === \"insetEnd\");\n      this.classList.toggle(\"center-vertical\", this.region.verticalPosition === \"center\");\n      this.classList.toggle(\"left\", this.region.horizontalPosition === \"start\");\n      this.classList.toggle(\"right\", this.region.horizontalPosition === \"end\");\n      this.classList.toggle(\"inset-left\", this.region.horizontalPosition === \"insetStart\");\n      this.classList.toggle(\"inset-right\", this.region.horizontalPosition === \"insetEnd\");\n      this.classList.toggle(\"center-horizontal\", this.region.horizontalPosition === \"center\");\n    };\n    /**\n     * mouse enters region\n     */\n\n\n    this.handleRegionMouseOver = ev => {\n      this.isRegionHovered = true;\n    };\n    /**\n     * mouse leaves region\n     */\n\n\n    this.handleRegionMouseOut = ev => {\n      this.isRegionHovered = false;\n      this.startHideDelayTimer();\n    };\n    /**\n     * mouse enters anchor\n     */\n\n\n    this.handleAnchorMouseOver = ev => {\n      if (this.tooltipVisible) {\n        // tooltip is already visible, just set the anchor hover flag\n        this.isAnchorHoveredFocused = true;\n        return;\n      }\n\n      this.startShowDelayTimer();\n    };\n    /**\n     * mouse leaves anchor\n     */\n\n\n    this.handleAnchorMouseOut = ev => {\n      this.isAnchorHoveredFocused = false;\n      this.clearShowDelayTimer();\n      this.startHideDelayTimer();\n    };\n    /**\n     * anchor gets focus\n     */\n\n\n    this.handleAnchorFocusIn = ev => {\n      this.startShowDelayTimer();\n    };\n    /**\n     * anchor loses focus\n     */\n\n\n    this.handleAnchorFocusOut = ev => {\n      this.isAnchorHoveredFocused = false;\n      this.clearShowDelayTimer();\n      this.startHideDelayTimer();\n    };\n    /**\n     * starts the hide timer\n     */\n\n\n    this.startHideDelayTimer = () => {\n      this.clearHideDelayTimer();\n\n      if (!this.tooltipVisible) {\n        return;\n      } // allow 60 ms for account for pointer to move between anchor/tooltip\n      // without hiding tooltip\n\n\n      this.hideDelayTimer = window.setTimeout(() => {\n        this.updateTooltipVisibility();\n      }, 60);\n    };\n    /**\n     * clears the hide delay\n     */\n\n\n    this.clearHideDelayTimer = () => {\n      if (this.hideDelayTimer !== null) {\n        clearTimeout(this.hideDelayTimer);\n        this.hideDelayTimer = null;\n      }\n    };\n    /**\n     * starts the show timer if not currently running\n     */\n\n\n    this.startShowDelayTimer = () => {\n      if (this.isAnchorHoveredFocused) {\n        return;\n      }\n\n      if (this.delay > 1) {\n        if (this.showDelayTimer === null) this.showDelayTimer = window.setTimeout(() => {\n          this.startHover();\n        }, this.delay);\n        return;\n      }\n\n      this.startHover();\n    };\n    /**\n     * start hover\n     */\n\n\n    this.startHover = () => {\n      this.isAnchorHoveredFocused = true;\n      this.updateTooltipVisibility();\n    };\n    /**\n     * clears the show delay\n     */\n\n\n    this.clearShowDelayTimer = () => {\n      if (this.showDelayTimer !== null) {\n        clearTimeout(this.showDelayTimer);\n        this.showDelayTimer = null;\n      }\n    };\n    /**\n     *  Gets the anchor element by id\n     */\n\n\n    this.getAnchor = () => {\n      const rootNode = this.getRootNode();\n\n      if (rootNode instanceof ShadowRoot) {\n        return rootNode.getElementById(this.anchor);\n      }\n\n      return document.getElementById(this.anchor);\n    };\n    /**\n     * handles key down events to check for dismiss\n     */\n\n\n    this.handleDocumentKeydown = e => {\n      if (!e.defaultPrevented && this.tooltipVisible) {\n        switch (e.key) {\n          case keyEscape:\n            this.isAnchorHoveredFocused = false;\n            this.updateTooltipVisibility();\n            this.$emit(\"dismiss\");\n            break;\n        }\n      }\n    };\n    /**\n     * determines whether to show or hide the tooltip based on current state\n     */\n\n\n    this.updateTooltipVisibility = () => {\n      if (this.visible === false) {\n        this.hideTooltip();\n      } else if (this.visible === true) {\n        this.showTooltip();\n        return;\n      } else {\n        if (this.isAnchorHoveredFocused || this.isRegionHovered) {\n          this.showTooltip();\n          return;\n        }\n\n        this.hideTooltip();\n      }\n    };\n    /**\n     * shows the tooltip\n     */\n\n\n    this.showTooltip = () => {\n      if (this.tooltipVisible) {\n        return;\n      }\n\n      this.currentDirection = getDirection(this);\n      this.tooltipVisible = true;\n      document.addEventListener(\"keydown\", this.handleDocumentKeydown);\n      DOM.queueUpdate(this.setRegionProps);\n    };\n    /**\n     * hides the tooltip\n     */\n\n\n    this.hideTooltip = () => {\n      if (!this.tooltipVisible) {\n        return;\n      }\n\n      this.clearHideDelayTimer();\n\n      if (this.region !== null && this.region !== undefined) {\n        this.region.removeEventListener(\"positionchange\", this.handlePositionChange);\n        this.region.viewportElement = null;\n        this.region.anchorElement = null;\n        this.region.removeEventListener(\"mouseover\", this.handleRegionMouseOver);\n        this.region.removeEventListener(\"mouseout\", this.handleRegionMouseOut);\n      }\n\n      document.removeEventListener(\"keydown\", this.handleDocumentKeydown);\n      this.tooltipVisible = false;\n    };\n    /**\n     * updates the tooltip anchored region props after it has been\n     * added to the DOM\n     */\n\n\n    this.setRegionProps = () => {\n      if (!this.tooltipVisible) {\n        return;\n      }\n\n      this.region.viewportElement = this.viewportElement;\n      this.region.anchorElement = this.anchorElement;\n      this.region.addEventListener(\"positionchange\", this.handlePositionChange);\n      this.region.addEventListener(\"mouseover\", this.handleRegionMouseOver, {\n        passive: true\n      });\n      this.region.addEventListener(\"mouseout\", this.handleRegionMouseOut, {\n        passive: true\n      });\n    };\n  }\n\n  visibleChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateTooltipVisibility();\n      this.updateLayout();\n    }\n  }\n\n  anchorChanged() {\n    if (this.$fastController.isConnected) {\n      this.anchorElement = this.getAnchor();\n    }\n  }\n\n  positionChanged() {\n    if (this.$fastController.isConnected) {\n      this.updateLayout();\n    }\n  }\n\n  anchorElementChanged(oldValue) {\n    if (this.$fastController.isConnected) {\n      if (oldValue !== null && oldValue !== undefined) {\n        oldValue.removeEventListener(\"mouseover\", this.handleAnchorMouseOver);\n        oldValue.removeEventListener(\"mouseout\", this.handleAnchorMouseOut);\n        oldValue.removeEventListener(\"focusin\", this.handleAnchorFocusIn);\n        oldValue.removeEventListener(\"focusout\", this.handleAnchorFocusOut);\n      }\n\n      if (this.anchorElement !== null && this.anchorElement !== undefined) {\n        this.anchorElement.addEventListener(\"mouseover\", this.handleAnchorMouseOver, {\n          passive: true\n        });\n        this.anchorElement.addEventListener(\"mouseout\", this.handleAnchorMouseOut, {\n          passive: true\n        });\n        this.anchorElement.addEventListener(\"focusin\", this.handleAnchorFocusIn, {\n          passive: true\n        });\n        this.anchorElement.addEventListener(\"focusout\", this.handleAnchorFocusOut, {\n          passive: true\n        });\n        const anchorId = this.anchorElement.id;\n\n        if (this.anchorElement.parentElement !== null) {\n          this.anchorElement.parentElement.querySelectorAll(\":hover\").forEach(element => {\n            if (element.id === anchorId) {\n              this.startShowDelayTimer();\n            }\n          });\n        }\n      }\n\n      if (this.region !== null && this.region !== undefined && this.tooltipVisible) {\n        this.region.anchorElement = this.anchorElement;\n      }\n\n      this.updateLayout();\n    }\n  }\n\n  viewportElementChanged() {\n    if (this.region !== null && this.region !== undefined) {\n      this.region.viewportElement = this.viewportElement;\n    }\n\n    this.updateLayout();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.anchorElement = this.getAnchor();\n    this.updateTooltipVisibility();\n  }\n\n  disconnectedCallback() {\n    this.hideTooltip();\n    this.clearShowDelayTimer();\n    this.clearHideDelayTimer();\n    super.disconnectedCallback();\n  }\n  /**\n   * updated the properties being passed to the anchored region\n   */\n\n\n  updateLayout() {\n    this.verticalPositioningMode = \"locktodefault\";\n    this.horizontalPositioningMode = \"locktodefault\";\n\n    switch (this.position) {\n      case TooltipPosition.top:\n      case TooltipPosition.bottom:\n        this.verticalDefaultPosition = this.position;\n        this.horizontalDefaultPosition = \"center\";\n        break;\n\n      case TooltipPosition.right:\n      case TooltipPosition.left:\n      case TooltipPosition.start:\n      case TooltipPosition.end:\n        this.verticalDefaultPosition = \"center\";\n        this.horizontalDefaultPosition = this.position;\n        break;\n\n      case TooltipPosition.topLeft:\n        this.verticalDefaultPosition = \"top\";\n        this.horizontalDefaultPosition = \"left\";\n        break;\n\n      case TooltipPosition.topRight:\n        this.verticalDefaultPosition = \"top\";\n        this.horizontalDefaultPosition = \"right\";\n        break;\n\n      case TooltipPosition.bottomLeft:\n        this.verticalDefaultPosition = \"bottom\";\n        this.horizontalDefaultPosition = \"left\";\n        break;\n\n      case TooltipPosition.bottomRight:\n        this.verticalDefaultPosition = \"bottom\";\n        this.horizontalDefaultPosition = \"right\";\n        break;\n\n      case TooltipPosition.topStart:\n        this.verticalDefaultPosition = \"top\";\n        this.horizontalDefaultPosition = \"start\";\n        break;\n\n      case TooltipPosition.topEnd:\n        this.verticalDefaultPosition = \"top\";\n        this.horizontalDefaultPosition = \"end\";\n        break;\n\n      case TooltipPosition.bottomStart:\n        this.verticalDefaultPosition = \"bottom\";\n        this.horizontalDefaultPosition = \"start\";\n        break;\n\n      case TooltipPosition.bottomEnd:\n        this.verticalDefaultPosition = \"bottom\";\n        this.horizontalDefaultPosition = \"end\";\n        break;\n\n      default:\n        this.verticalPositioningMode = \"dynamic\";\n        this.horizontalPositioningMode = \"dynamic\";\n        this.verticalDefaultPosition = void 0;\n        this.horizontalDefaultPosition = \"center\";\n        break;\n    }\n  }\n\n}\n\n__decorate([attr({\n  mode: \"boolean\"\n})], Tooltip.prototype, \"visible\", void 0);\n\n__decorate([attr], Tooltip.prototype, \"anchor\", void 0);\n\n__decorate([attr], Tooltip.prototype, \"delay\", void 0);\n\n__decorate([attr], Tooltip.prototype, \"position\", void 0);\n\n__decorate([attr({\n  attribute: \"auto-update-mode\"\n})], Tooltip.prototype, \"autoUpdateMode\", void 0);\n\n__decorate([attr({\n  attribute: \"horizontal-viewport-lock\"\n})], Tooltip.prototype, \"horizontalViewportLock\", void 0);\n\n__decorate([attr({\n  attribute: \"vertical-viewport-lock\"\n})], Tooltip.prototype, \"verticalViewportLock\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"anchorElement\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"viewportElement\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"verticalPositioningMode\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"horizontalPositioningMode\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"horizontalInset\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"verticalInset\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"horizontalScaling\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"verticalScaling\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"verticalDefaultPosition\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"horizontalDefaultPosition\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"tooltipVisible\", void 0);\n\n__decorate([observable], Tooltip.prototype, \"currentDirection\", void 0);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/tooltip/tooltip.js"],"names":["__decorate","attr","DOM","observable","Direction","keyEscape","getDirection","FoundationElement","TooltipPosition","Tooltip","constructor","arguments","anchor","delay","autoUpdateMode","anchorElement","viewportElement","verticalPositioningMode","horizontalPositioningMode","horizontalInset","verticalInset","horizontalScaling","verticalScaling","verticalDefaultPosition","undefined","horizontalDefaultPosition","tooltipVisible","currentDirection","ltr","showDelayTimer","hideDelayTimer","isAnchorHoveredFocused","isRegionHovered","handlePositionChange","ev","classList","toggle","region","verticalPosition","horizontalPosition","handleRegionMouseOver","handleRegionMouseOut","startHideDelayTimer","handleAnchorMouseOver","startShowDelayTimer","handleAnchorMouseOut","clearShowDelayTimer","handleAnchorFocusIn","handleAnchorFocusOut","clearHideDelayTimer","window","setTimeout","updateTooltipVisibility","clearTimeout","startHover","getAnchor","rootNode","getRootNode","ShadowRoot","getElementById","document","handleDocumentKeydown","e","defaultPrevented","key","$emit","visible","hideTooltip","showTooltip","addEventListener","queueUpdate","setRegionProps","removeEventListener","passive","visibleChanged","$fastController","isConnected","updateLayout","anchorChanged","positionChanged","anchorElementChanged","oldValue","anchorId","id","parentElement","querySelectorAll","forEach","element","viewportElementChanged","connectedCallback","disconnectedCallback","position","top","bottom","right","left","start","end","topLeft","topRight","bottomLeft","bottomRight","topStart","topEnd","bottomStart","bottomEnd","mode","prototype","attribute"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, observable } from \"@microsoft/fast-element\";\nimport { Direction, keyEscape } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities/\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { TooltipPosition } from \"./tooltip.options\";\nexport { TooltipPosition };\n/**\n * An Tooltip Custom HTML Element.\n *\n * @public\n */\nexport class Tooltip extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The id of the element the tooltip is anchored to\n         *\n         * @defaultValue - undefined\n         * @public\n         * HTML Attribute: anchor\n         */\n        this.anchor = \"\";\n        /**\n         * The delay in milliseconds before a tooltip is shown after a hover event\n         *\n         * @defaultValue - 300\n         * @public\n         * HTML Attribute: delay\n         */\n        this.delay = 300;\n        /**\n         * Controls when the tooltip updates its position, default is 'anchor' which only updates when\n         * the anchor is resized.  'auto' will update on scroll/resize events.\n         * Corresponds to anchored-region auto-update-mode.\n         * @public\n         * @remarks\n         * HTML Attribute: auto-update-mode\n         */\n        this.autoUpdateMode = \"anchor\";\n        /**\n         * the html element currently being used as anchor.\n         * Setting this directly overrides the anchor attribute.\n         *\n         * @public\n         */\n        this.anchorElement = null;\n        /**\n         * The current viewport element instance\n         *\n         * @internal\n         */\n        this.viewportElement = null;\n        /**\n         * @internal\n         * @defaultValue \"dynamic\"\n         */\n        this.verticalPositioningMode = \"dynamic\";\n        /**\n         * @internal\n         * @defaultValue \"dynamic\"\n         */\n        this.horizontalPositioningMode = \"dynamic\";\n        /**\n         * @internal\n         */\n        this.horizontalInset = \"false\";\n        /**\n         * @internal\n         */\n        this.verticalInset = \"false\";\n        /**\n         * @internal\n         */\n        this.horizontalScaling = \"content\";\n        /**\n         * @internal\n         */\n        this.verticalScaling = \"content\";\n        /**\n         * @internal\n         */\n        this.verticalDefaultPosition = undefined;\n        /**\n         * @internal\n         */\n        this.horizontalDefaultPosition = undefined;\n        /**\n         * @internal\n         */\n        this.tooltipVisible = false;\n        /**\n         * Track current direction to pass to the anchored region\n         * updated when tooltip is shown\n         *\n         * @internal\n         */\n        this.currentDirection = Direction.ltr;\n        /**\n         * The timer that tracks delay time before the tooltip is shown on hover\n         */\n        this.showDelayTimer = null;\n        /**\n         * The timer that tracks delay time before the tooltip is hidden\n         */\n        this.hideDelayTimer = null;\n        /**\n         * Indicates whether the anchor is currently being hovered or has focus\n         */\n        this.isAnchorHoveredFocused = false;\n        /**\n         * Indicates whether the region is currently being hovered\n         */\n        this.isRegionHovered = false;\n        /**\n         * invoked when the anchored region's position relative to the anchor changes\n         *\n         * @internal\n         */\n        this.handlePositionChange = (ev) => {\n            this.classList.toggle(\"top\", this.region.verticalPosition === \"start\");\n            this.classList.toggle(\"bottom\", this.region.verticalPosition === \"end\");\n            this.classList.toggle(\"inset-top\", this.region.verticalPosition === \"insetStart\");\n            this.classList.toggle(\"inset-bottom\", this.region.verticalPosition === \"insetEnd\");\n            this.classList.toggle(\"center-vertical\", this.region.verticalPosition === \"center\");\n            this.classList.toggle(\"left\", this.region.horizontalPosition === \"start\");\n            this.classList.toggle(\"right\", this.region.horizontalPosition === \"end\");\n            this.classList.toggle(\"inset-left\", this.region.horizontalPosition === \"insetStart\");\n            this.classList.toggle(\"inset-right\", this.region.horizontalPosition === \"insetEnd\");\n            this.classList.toggle(\"center-horizontal\", this.region.horizontalPosition === \"center\");\n        };\n        /**\n         * mouse enters region\n         */\n        this.handleRegionMouseOver = (ev) => {\n            this.isRegionHovered = true;\n        };\n        /**\n         * mouse leaves region\n         */\n        this.handleRegionMouseOut = (ev) => {\n            this.isRegionHovered = false;\n            this.startHideDelayTimer();\n        };\n        /**\n         * mouse enters anchor\n         */\n        this.handleAnchorMouseOver = (ev) => {\n            if (this.tooltipVisible) {\n                // tooltip is already visible, just set the anchor hover flag\n                this.isAnchorHoveredFocused = true;\n                return;\n            }\n            this.startShowDelayTimer();\n        };\n        /**\n         * mouse leaves anchor\n         */\n        this.handleAnchorMouseOut = (ev) => {\n            this.isAnchorHoveredFocused = false;\n            this.clearShowDelayTimer();\n            this.startHideDelayTimer();\n        };\n        /**\n         * anchor gets focus\n         */\n        this.handleAnchorFocusIn = (ev) => {\n            this.startShowDelayTimer();\n        };\n        /**\n         * anchor loses focus\n         */\n        this.handleAnchorFocusOut = (ev) => {\n            this.isAnchorHoveredFocused = false;\n            this.clearShowDelayTimer();\n            this.startHideDelayTimer();\n        };\n        /**\n         * starts the hide timer\n         */\n        this.startHideDelayTimer = () => {\n            this.clearHideDelayTimer();\n            if (!this.tooltipVisible) {\n                return;\n            }\n            // allow 60 ms for account for pointer to move between anchor/tooltip\n            // without hiding tooltip\n            this.hideDelayTimer = window.setTimeout(() => {\n                this.updateTooltipVisibility();\n            }, 60);\n        };\n        /**\n         * clears the hide delay\n         */\n        this.clearHideDelayTimer = () => {\n            if (this.hideDelayTimer !== null) {\n                clearTimeout(this.hideDelayTimer);\n                this.hideDelayTimer = null;\n            }\n        };\n        /**\n         * starts the show timer if not currently running\n         */\n        this.startShowDelayTimer = () => {\n            if (this.isAnchorHoveredFocused) {\n                return;\n            }\n            if (this.delay > 1) {\n                if (this.showDelayTimer === null)\n                    this.showDelayTimer = window.setTimeout(() => {\n                        this.startHover();\n                    }, this.delay);\n                return;\n            }\n            this.startHover();\n        };\n        /**\n         * start hover\n         */\n        this.startHover = () => {\n            this.isAnchorHoveredFocused = true;\n            this.updateTooltipVisibility();\n        };\n        /**\n         * clears the show delay\n         */\n        this.clearShowDelayTimer = () => {\n            if (this.showDelayTimer !== null) {\n                clearTimeout(this.showDelayTimer);\n                this.showDelayTimer = null;\n            }\n        };\n        /**\n         *  Gets the anchor element by id\n         */\n        this.getAnchor = () => {\n            const rootNode = this.getRootNode();\n            if (rootNode instanceof ShadowRoot) {\n                return rootNode.getElementById(this.anchor);\n            }\n            return document.getElementById(this.anchor);\n        };\n        /**\n         * handles key down events to check for dismiss\n         */\n        this.handleDocumentKeydown = (e) => {\n            if (!e.defaultPrevented && this.tooltipVisible) {\n                switch (e.key) {\n                    case keyEscape:\n                        this.isAnchorHoveredFocused = false;\n                        this.updateTooltipVisibility();\n                        this.$emit(\"dismiss\");\n                        break;\n                }\n            }\n        };\n        /**\n         * determines whether to show or hide the tooltip based on current state\n         */\n        this.updateTooltipVisibility = () => {\n            if (this.visible === false) {\n                this.hideTooltip();\n            }\n            else if (this.visible === true) {\n                this.showTooltip();\n                return;\n            }\n            else {\n                if (this.isAnchorHoveredFocused || this.isRegionHovered) {\n                    this.showTooltip();\n                    return;\n                }\n                this.hideTooltip();\n            }\n        };\n        /**\n         * shows the tooltip\n         */\n        this.showTooltip = () => {\n            if (this.tooltipVisible) {\n                return;\n            }\n            this.currentDirection = getDirection(this);\n            this.tooltipVisible = true;\n            document.addEventListener(\"keydown\", this.handleDocumentKeydown);\n            DOM.queueUpdate(this.setRegionProps);\n        };\n        /**\n         * hides the tooltip\n         */\n        this.hideTooltip = () => {\n            if (!this.tooltipVisible) {\n                return;\n            }\n            this.clearHideDelayTimer();\n            if (this.region !== null && this.region !== undefined) {\n                this.region.removeEventListener(\"positionchange\", this.handlePositionChange);\n                this.region.viewportElement = null;\n                this.region.anchorElement = null;\n                this.region.removeEventListener(\"mouseover\", this.handleRegionMouseOver);\n                this.region.removeEventListener(\"mouseout\", this.handleRegionMouseOut);\n            }\n            document.removeEventListener(\"keydown\", this.handleDocumentKeydown);\n            this.tooltipVisible = false;\n        };\n        /**\n         * updates the tooltip anchored region props after it has been\n         * added to the DOM\n         */\n        this.setRegionProps = () => {\n            if (!this.tooltipVisible) {\n                return;\n            }\n            this.region.viewportElement = this.viewportElement;\n            this.region.anchorElement = this.anchorElement;\n            this.region.addEventListener(\"positionchange\", this.handlePositionChange);\n            this.region.addEventListener(\"mouseover\", this.handleRegionMouseOver, {\n                passive: true,\n            });\n            this.region.addEventListener(\"mouseout\", this.handleRegionMouseOut, {\n                passive: true,\n            });\n        };\n    }\n    visibleChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateTooltipVisibility();\n            this.updateLayout();\n        }\n    }\n    anchorChanged() {\n        if (this.$fastController.isConnected) {\n            this.anchorElement = this.getAnchor();\n        }\n    }\n    positionChanged() {\n        if (this.$fastController.isConnected) {\n            this.updateLayout();\n        }\n    }\n    anchorElementChanged(oldValue) {\n        if (this.$fastController.isConnected) {\n            if (oldValue !== null && oldValue !== undefined) {\n                oldValue.removeEventListener(\"mouseover\", this.handleAnchorMouseOver);\n                oldValue.removeEventListener(\"mouseout\", this.handleAnchorMouseOut);\n                oldValue.removeEventListener(\"focusin\", this.handleAnchorFocusIn);\n                oldValue.removeEventListener(\"focusout\", this.handleAnchorFocusOut);\n            }\n            if (this.anchorElement !== null && this.anchorElement !== undefined) {\n                this.anchorElement.addEventListener(\"mouseover\", this.handleAnchorMouseOver, { passive: true });\n                this.anchorElement.addEventListener(\"mouseout\", this.handleAnchorMouseOut, { passive: true });\n                this.anchorElement.addEventListener(\"focusin\", this.handleAnchorFocusIn, {\n                    passive: true,\n                });\n                this.anchorElement.addEventListener(\"focusout\", this.handleAnchorFocusOut, { passive: true });\n                const anchorId = this.anchorElement.id;\n                if (this.anchorElement.parentElement !== null) {\n                    this.anchorElement.parentElement\n                        .querySelectorAll(\":hover\")\n                        .forEach(element => {\n                        if (element.id === anchorId) {\n                            this.startShowDelayTimer();\n                        }\n                    });\n                }\n            }\n            if (this.region !== null &&\n                this.region !== undefined &&\n                this.tooltipVisible) {\n                this.region.anchorElement = this.anchorElement;\n            }\n            this.updateLayout();\n        }\n    }\n    viewportElementChanged() {\n        if (this.region !== null && this.region !== undefined) {\n            this.region.viewportElement = this.viewportElement;\n        }\n        this.updateLayout();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.anchorElement = this.getAnchor();\n        this.updateTooltipVisibility();\n    }\n    disconnectedCallback() {\n        this.hideTooltip();\n        this.clearShowDelayTimer();\n        this.clearHideDelayTimer();\n        super.disconnectedCallback();\n    }\n    /**\n     * updated the properties being passed to the anchored region\n     */\n    updateLayout() {\n        this.verticalPositioningMode = \"locktodefault\";\n        this.horizontalPositioningMode = \"locktodefault\";\n        switch (this.position) {\n            case TooltipPosition.top:\n            case TooltipPosition.bottom:\n                this.verticalDefaultPosition = this.position;\n                this.horizontalDefaultPosition = \"center\";\n                break;\n            case TooltipPosition.right:\n            case TooltipPosition.left:\n            case TooltipPosition.start:\n            case TooltipPosition.end:\n                this.verticalDefaultPosition = \"center\";\n                this.horizontalDefaultPosition = this.position;\n                break;\n            case TooltipPosition.topLeft:\n                this.verticalDefaultPosition = \"top\";\n                this.horizontalDefaultPosition = \"left\";\n                break;\n            case TooltipPosition.topRight:\n                this.verticalDefaultPosition = \"top\";\n                this.horizontalDefaultPosition = \"right\";\n                break;\n            case TooltipPosition.bottomLeft:\n                this.verticalDefaultPosition = \"bottom\";\n                this.horizontalDefaultPosition = \"left\";\n                break;\n            case TooltipPosition.bottomRight:\n                this.verticalDefaultPosition = \"bottom\";\n                this.horizontalDefaultPosition = \"right\";\n                break;\n            case TooltipPosition.topStart:\n                this.verticalDefaultPosition = \"top\";\n                this.horizontalDefaultPosition = \"start\";\n                break;\n            case TooltipPosition.topEnd:\n                this.verticalDefaultPosition = \"top\";\n                this.horizontalDefaultPosition = \"end\";\n                break;\n            case TooltipPosition.bottomStart:\n                this.verticalDefaultPosition = \"bottom\";\n                this.horizontalDefaultPosition = \"start\";\n                break;\n            case TooltipPosition.bottomEnd:\n                this.verticalDefaultPosition = \"bottom\";\n                this.horizontalDefaultPosition = \"end\";\n                break;\n            default:\n                this.verticalPositioningMode = \"dynamic\";\n                this.horizontalPositioningMode = \"dynamic\";\n                this.verticalDefaultPosition = void 0;\n                this.horizontalDefaultPosition = \"center\";\n                break;\n        }\n    }\n}\n__decorate([\n    attr({ mode: \"boolean\" })\n], Tooltip.prototype, \"visible\", void 0);\n__decorate([\n    attr\n], Tooltip.prototype, \"anchor\", void 0);\n__decorate([\n    attr\n], Tooltip.prototype, \"delay\", void 0);\n__decorate([\n    attr\n], Tooltip.prototype, \"position\", void 0);\n__decorate([\n    attr({ attribute: \"auto-update-mode\" })\n], Tooltip.prototype, \"autoUpdateMode\", void 0);\n__decorate([\n    attr({ attribute: \"horizontal-viewport-lock\" })\n], Tooltip.prototype, \"horizontalViewportLock\", void 0);\n__decorate([\n    attr({ attribute: \"vertical-viewport-lock\" })\n], Tooltip.prototype, \"verticalViewportLock\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"anchorElement\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"viewportElement\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"verticalPositioningMode\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"horizontalPositioningMode\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"horizontalInset\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"verticalInset\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"horizontalScaling\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"verticalScaling\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"verticalDefaultPosition\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"horizontalDefaultPosition\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"tooltipVisible\", void 0);\n__decorate([\n    observable\n], Tooltip.prototype, \"currentDirection\", void 0);\n"]},"metadata":{},"sourceType":"module"}