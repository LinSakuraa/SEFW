{"ast":null,"code":"import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nconst layoutSiderProps = {\n  position: positionProp,\n  bordered: Boolean,\n  collapsedWidth: {\n    type: Number,\n    default: 48\n  },\n  width: {\n    type: [Number, String],\n    default: 272\n  },\n  contentStyle: {\n    type: [String, Object],\n    default: ''\n  },\n  collapseMode: {\n    type: String,\n    default: 'transform'\n  },\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultCollapsed: Boolean,\n  showCollapsedContent: {\n    type: Boolean,\n    default: true\n  },\n  showTrigger: {\n    type: [Boolean, String],\n    default: false\n  },\n  nativeScrollbar: {\n    type: Boolean,\n    default: true\n  },\n  inverted: Boolean,\n  scrollbarProps: Object,\n  triggerStyle: [String, Object],\n  collapsedTriggerStyle: [String, Object],\n  'onUpdate:collapsed': [Function, Array],\n  onUpdateCollapsed: [Function, Array],\n  onAfterEnter: Function,\n  onAfterLeave: Function,\n  // deprecated\n  onExpand: [Function, Array],\n  onCollapse: [Function, Array],\n  onScroll: Function\n};\nexport default defineComponent({\n  name: 'LayoutSider',\n  props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n\n  setup(props) {\n    const layoutProps = inject(layoutInjectionKey);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!layoutProps) {\n        warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n      } else {\n        if (!layoutProps.hasSider) {\n          warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n        }\n      }\n    }\n\n    const scrollableElRef = ref(null);\n    const scrollbarInstRef = ref(null);\n    const styleMaxWidthRef = computed(() => {\n      return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n    });\n    const scrollContainerStyleRef = computed(() => {\n      if (props.collapseMode !== 'transform') return {};\n      return {\n        minWidth: formatLength(props.width)\n      };\n    });\n    const siderPlacementRef = computed(() => {\n      return layoutProps ? layoutProps.siderPlacement : 'left';\n    });\n    const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n    const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n\n    function scrollTo(options, y) {\n      if (props.nativeScrollbar) {\n        const {\n          value: scrollableEl\n        } = scrollableElRef;\n\n        if (scrollableEl) {\n          if (y === undefined) {\n            scrollableEl.scrollTo(options);\n          } else {\n            scrollableEl.scrollTo(options, y);\n          }\n        }\n      } else {\n        const {\n          value: scrollbarInst\n        } = scrollbarInstRef;\n\n        if (scrollbarInst) {\n          scrollbarInst.scrollTo(options, y);\n        }\n      }\n    }\n\n    function handleTriggerClick() {\n      const {\n        'onUpdate:collapsed': _onUpdateCollapsed,\n        onUpdateCollapsed,\n        // deprecated\n        onExpand,\n        onCollapse\n      } = props;\n      const {\n        value: collapsed\n      } = mergedCollapsedRef;\n\n      if (onUpdateCollapsed) {\n        call(onUpdateCollapsed, !collapsed);\n      }\n\n      if (_onUpdateCollapsed) {\n        call(_onUpdateCollapsed, !collapsed);\n      }\n\n      uncontrolledCollapsedRef.value = !collapsed;\n\n      if (collapsed) {\n        if (onExpand) call(onExpand);\n      } else {\n        if (onCollapse) call(onCollapse);\n      }\n    }\n\n    provide(layoutSiderInjectionKey, {\n      collapsedRef: mergedCollapsedRef,\n      collapseModeRef: toRef(props, 'collapseMode')\n    });\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n\n    function handleTransitionend(e) {\n      var _a, _b;\n\n      if (e.propertyName === 'max-width') {\n        if (mergedCollapsedRef.value) {\n          (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        } else {\n          (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n      }\n    }\n\n    const exposedMethods = {\n      scrollTo\n    };\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        siderToggleButtonColor,\n        siderToggleButtonBorder,\n        siderToggleBarColor,\n        siderToggleBarColorHover\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-toggle-button-color': siderToggleButtonColor,\n        '--n-toggle-button-border': siderToggleButtonBorder,\n        '--n-toggle-bar-color': siderToggleBarColor,\n        '--n-toggle-bar-color-hover': siderToggleBarColorHover\n      };\n\n      if (props.inverted) {\n        vars['--n-color'] = self.siderColorInverted;\n        vars['--n-text-color'] = self.textColorInverted;\n        vars['--n-border-color'] = self.siderBorderColorInverted;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColorInverted;\n        vars.__invertScrollbar = self.__invertScrollbar;\n      } else {\n        vars['--n-color'] = self.siderColor;\n        vars['--n-text-color'] = self.textColor;\n        vars['--n-border-color'] = self.siderBorderColor;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n      }\n\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('layout-sider', computed(() => props.inverted ? 'a' : 'b'), cssVarsRef, props) : undefined;\n    return Object.assign({\n      scrollableElRef,\n      scrollbarInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      styleMaxWidth: styleMaxWidthRef,\n      mergedCollapsed: mergedCollapsedRef,\n      scrollContainerStyle: scrollContainerStyleRef,\n      siderPlacement: siderPlacementRef,\n      handleTransitionend,\n      handleTriggerClick,\n      inlineThemeDisabled,\n      cssVars: cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    }, exposedMethods);\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix,\n      mergedCollapsed,\n      showTrigger\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"aside\", {\n      class: [`${mergedClsPrefix}-layout-sider`, this.themeClass, `${mergedClsPrefix}-layout-sider--${this.position}-positioned`, `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`, this.bordered && `${mergedClsPrefix}-layout-sider--bordered`, mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`, (!mergedCollapsed || this.showCollapsedContent) && `${mergedClsPrefix}-layout-sider--show-content`],\n      onTransitionend: this.handleTransitionend,\n      style: [this.inlineThemeDisabled ? undefined : this.cssVars, {\n        maxWidth: this.styleMaxWidth,\n        width: formatLength(this.width)\n      }]\n    }, !this.nativeScrollbar ? h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      onScroll: this.onScroll,\n      ref: \"scrollbarInstRef\",\n      style: this.scrollContainerStyle,\n      contentStyle: this.contentStyle,\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      // here is a hack, since in light theme the scrollbar color is dark,\n      // we need to invert it in light color...\n      builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true' ? {\n        colorHover: 'rgba(255, 255, 255, .4)',\n        color: 'rgba(255, 255, 255, .3)'\n      } : undefined\n    }), this.$slots) : h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider-scroll-container`,\n      onScroll: this.onScroll,\n      style: [this.scrollContainerStyle, {\n        overflow: 'auto'\n      }, this.contentStyle],\n      ref: \"scrollableElRef\"\n    }, this.$slots), showTrigger ? showTrigger === 'bar' ? h(ToggleBar, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : h(ToggleButton, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : null, this.bordered ? h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider__border`\n    }) : null);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/layout/src/LayoutSider.js"],"names":["h","defineComponent","computed","ref","toRef","inject","provide","useMergedState","useConfig","useTheme","useThemeClass","formatLength","call","warn","NScrollbar","layoutLight","style","ToggleButton","ToggleBar","layoutSiderInjectionKey","positionProp","layoutInjectionKey","layoutSiderProps","position","bordered","Boolean","collapsedWidth","type","Number","default","width","String","contentStyle","Object","collapseMode","collapsed","undefined","defaultCollapsed","showCollapsedContent","showTrigger","nativeScrollbar","inverted","scrollbarProps","triggerStyle","collapsedTriggerStyle","Function","Array","onUpdateCollapsed","onAfterEnter","onAfterLeave","onExpand","onCollapse","onScroll","name","props","assign","setup","layoutProps","process","env","NODE_ENV","hasSider","scrollableElRef","scrollbarInstRef","styleMaxWidthRef","mergedCollapsedRef","value","scrollContainerStyleRef","minWidth","siderPlacementRef","siderPlacement","uncontrolledCollapsedRef","scrollTo","options","y","scrollableEl","scrollbarInst","handleTriggerClick","_onUpdateCollapsed","collapsedRef","collapseModeRef","mergedClsPrefixRef","inlineThemeDisabled","themeRef","handleTransitionend","e","_a","_b","propertyName","exposedMethods","cssVarsRef","common","cubicBezierEaseInOut","self","siderToggleButtonColor","siderToggleButtonBorder","siderToggleBarColor","siderToggleBarColorHover","vars","siderColorInverted","textColorInverted","siderBorderColorInverted","siderToggleButtonIconColorInverted","__invertScrollbar","siderColor","textColor","siderBorderColor","siderToggleButtonIconColor","themeClassHandle","mergedClsPrefix","mergedTheme","styleMaxWidth","mergedCollapsed","scrollContainerStyle","cssVars","themeClass","onRender","render","class","onTransitionend","maxWidth","theme","peers","Scrollbar","themeOverrides","peerOverrides","builtinThemeOverrides","colorHover","color","$slots","overflow","clsPrefix","onClick"],"mappings":"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","sourcesContent":["import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nconst layoutSiderProps = {\n    position: positionProp,\n    bordered: Boolean,\n    collapsedWidth: {\n        type: Number,\n        default: 48\n    },\n    width: {\n        type: [Number, String],\n        default: 272\n    },\n    contentStyle: {\n        type: [String, Object],\n        default: ''\n    },\n    collapseMode: {\n        type: String,\n        default: 'transform'\n    },\n    collapsed: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultCollapsed: Boolean,\n    showCollapsedContent: {\n        type: Boolean,\n        default: true\n    },\n    showTrigger: {\n        type: [Boolean, String],\n        default: false\n    },\n    nativeScrollbar: {\n        type: Boolean,\n        default: true\n    },\n    inverted: Boolean,\n    scrollbarProps: Object,\n    triggerStyle: [String, Object],\n    collapsedTriggerStyle: [String, Object],\n    'onUpdate:collapsed': [Function, Array],\n    onUpdateCollapsed: [Function, Array],\n    onAfterEnter: Function,\n    onAfterLeave: Function,\n    // deprecated\n    onExpand: [Function, Array],\n    onCollapse: [Function, Array],\n    onScroll: Function\n};\nexport default defineComponent({\n    name: 'LayoutSider',\n    props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n    setup(props) {\n        const layoutProps = inject(layoutInjectionKey);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!layoutProps) {\n                warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n            }\n            else {\n                if (!layoutProps.hasSider) {\n                    warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n                }\n            }\n        }\n        const scrollableElRef = ref(null);\n        const scrollbarInstRef = ref(null);\n        const styleMaxWidthRef = computed(() => {\n            return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n        });\n        const scrollContainerStyleRef = computed(() => {\n            if (props.collapseMode !== 'transform')\n                return {};\n            return {\n                minWidth: formatLength(props.width)\n            };\n        });\n        const siderPlacementRef = computed(() => {\n            return layoutProps ? layoutProps.siderPlacement : 'left';\n        });\n        const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n        const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n        function scrollTo(options, y) {\n            if (props.nativeScrollbar) {\n                const { value: scrollableEl } = scrollableElRef;\n                if (scrollableEl) {\n                    if (y === undefined) {\n                        scrollableEl.scrollTo(options);\n                    }\n                    else {\n                        scrollableEl.scrollTo(options, y);\n                    }\n                }\n            }\n            else {\n                const { value: scrollbarInst } = scrollbarInstRef;\n                if (scrollbarInst) {\n                    scrollbarInst.scrollTo(options, y);\n                }\n            }\n        }\n        function handleTriggerClick() {\n            const { 'onUpdate:collapsed': _onUpdateCollapsed, onUpdateCollapsed, \n            // deprecated\n            onExpand, onCollapse } = props;\n            const { value: collapsed } = mergedCollapsedRef;\n            if (onUpdateCollapsed) {\n                call(onUpdateCollapsed, !collapsed);\n            }\n            if (_onUpdateCollapsed) {\n                call(_onUpdateCollapsed, !collapsed);\n            }\n            uncontrolledCollapsedRef.value = !collapsed;\n            if (collapsed) {\n                if (onExpand)\n                    call(onExpand);\n            }\n            else {\n                if (onCollapse)\n                    call(onCollapse);\n            }\n        }\n        provide(layoutSiderInjectionKey, {\n            collapsedRef: mergedCollapsedRef,\n            collapseModeRef: toRef(props, 'collapseMode')\n        });\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n        function handleTransitionend(e) {\n            var _a, _b;\n            if (e.propertyName === 'max-width') {\n                if (mergedCollapsedRef.value) {\n                    (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n                }\n                else {\n                    (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n                }\n            }\n        }\n        const exposedMethods = {\n            scrollTo\n        };\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n            const { siderToggleButtonColor, siderToggleButtonBorder, siderToggleBarColor, siderToggleBarColorHover } = self;\n            const vars = {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-toggle-button-color': siderToggleButtonColor,\n                '--n-toggle-button-border': siderToggleButtonBorder,\n                '--n-toggle-bar-color': siderToggleBarColor,\n                '--n-toggle-bar-color-hover': siderToggleBarColorHover\n            };\n            if (props.inverted) {\n                vars['--n-color'] = self.siderColorInverted;\n                vars['--n-text-color'] = self.textColorInverted;\n                vars['--n-border-color'] = self.siderBorderColorInverted;\n                vars['--n-toggle-button-icon-color'] =\n                    self.siderToggleButtonIconColorInverted;\n                vars.__invertScrollbar = self.__invertScrollbar;\n            }\n            else {\n                vars['--n-color'] = self.siderColor;\n                vars['--n-text-color'] = self.textColor;\n                vars['--n-border-color'] = self.siderBorderColor;\n                vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n            }\n            return vars;\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('layout-sider', computed(() => (props.inverted ? 'a' : 'b')), cssVarsRef, props)\n            : undefined;\n        return Object.assign({ scrollableElRef,\n            scrollbarInstRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: themeRef, styleMaxWidth: styleMaxWidthRef, mergedCollapsed: mergedCollapsedRef, scrollContainerStyle: scrollContainerStyleRef, siderPlacement: siderPlacementRef, handleTransitionend,\n            handleTriggerClick,\n            inlineThemeDisabled, cssVars: cssVarsRef, themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass, onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender }, exposedMethods);\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedCollapsed, showTrigger } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"aside\", { class: [\n                `${mergedClsPrefix}-layout-sider`,\n                this.themeClass,\n                `${mergedClsPrefix}-layout-sider--${this.position}-positioned`,\n                `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`,\n                this.bordered && `${mergedClsPrefix}-layout-sider--bordered`,\n                mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`,\n                (!mergedCollapsed || this.showCollapsedContent) &&\n                    `${mergedClsPrefix}-layout-sider--show-content`\n            ], onTransitionend: this.handleTransitionend, style: [\n                this.inlineThemeDisabled ? undefined : this.cssVars,\n                {\n                    maxWidth: this.styleMaxWidth,\n                    width: formatLength(this.width)\n                }\n            ] },\n            !this.nativeScrollbar ? (h(NScrollbar, Object.assign({}, this.scrollbarProps, { onScroll: this.onScroll, ref: \"scrollbarInstRef\", style: this.scrollContainerStyle, contentStyle: this.contentStyle, theme: this.mergedTheme.peers.Scrollbar, themeOverrides: this.mergedTheme.peerOverrides.Scrollbar, \n                // here is a hack, since in light theme the scrollbar color is dark,\n                // we need to invert it in light color...\n                builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true'\n                    ? {\n                        colorHover: 'rgba(255, 255, 255, .4)',\n                        color: 'rgba(255, 255, 255, .3)'\n                    }\n                    : undefined }), this.$slots)) : (h(\"div\", { class: `${mergedClsPrefix}-layout-sider-scroll-container`, onScroll: this.onScroll, style: [\n                    this.scrollContainerStyle,\n                    {\n                        overflow: 'auto'\n                    },\n                    this.contentStyle\n                ], ref: \"scrollableElRef\" }, this.$slots)),\n            showTrigger ? (showTrigger === 'bar' ? (h(ToggleBar, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick })) : (h(ToggleButton, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick }))) : null,\n            this.bordered ? (h(\"div\", { class: `${mergedClsPrefix}-layout-sider__border` })) : null));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}