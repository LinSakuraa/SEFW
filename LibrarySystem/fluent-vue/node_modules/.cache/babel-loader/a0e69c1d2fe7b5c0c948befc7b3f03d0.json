{"ast":null,"code":"import { ref, inject, watchEffect } from 'vue';\nimport { hash } from 'css-render';\nimport { useSsrAdapter } from '@css-render/vue3-ssr';\nimport { configProviderInjectionKey } from '../config-provider/src/context';\nimport { throwError } from '../_utils';\nimport { c } from '../_utils/cssr';\nexport function useThemeClass(componentName, hashRef, cssVarsRef, props) {\n  var _a;\n\n  if (!cssVarsRef) throwError('useThemeClass', 'cssVarsRef is not passed');\n  const mergedThemeHashRef = (_a = inject(configProviderInjectionKey, null)) === null || _a === void 0 ? void 0 : _a.mergedThemeHashRef;\n  const themeClassRef = ref('');\n  const ssrAdapter = useSsrAdapter();\n  let renderCallback;\n  const hashClassPrefix = `__${componentName}`;\n\n  const mountStyle = () => {\n    let finalThemeHash = hashClassPrefix;\n    const hashValue = hashRef ? hashRef.value : undefined;\n    const themeHash = mergedThemeHashRef === null || mergedThemeHashRef === void 0 ? void 0 : mergedThemeHashRef.value;\n    if (themeHash) finalThemeHash += '-' + themeHash;\n    if (hashValue) finalThemeHash += '-' + hashValue;\n    const {\n      themeOverrides,\n      builtinThemeOverrides\n    } = props;\n\n    if (themeOverrides) {\n      finalThemeHash += '-' + hash(JSON.stringify(themeOverrides));\n    }\n\n    if (builtinThemeOverrides) {\n      finalThemeHash += '-' + hash(JSON.stringify(builtinThemeOverrides));\n    }\n\n    themeClassRef.value = finalThemeHash;\n\n    renderCallback = () => {\n      const cssVars = cssVarsRef.value;\n      let style = '';\n\n      for (const key in cssVars) {\n        style += `${key}: ${cssVars[key]};`;\n      }\n\n      c(`.${finalThemeHash}`, style).mount({\n        id: finalThemeHash,\n        ssr: ssrAdapter\n      });\n      renderCallback = undefined;\n    };\n  };\n\n  watchEffect(() => {\n    mountStyle();\n  });\n  return {\n    themeClass: themeClassRef,\n    onRender: () => {\n      renderCallback === null || renderCallback === void 0 ? void 0 : renderCallback();\n    }\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_mixins/use-css-vars-class.js"],"names":["ref","inject","watchEffect","hash","useSsrAdapter","configProviderInjectionKey","throwError","c","useThemeClass","componentName","hashRef","cssVarsRef","props","_a","mergedThemeHashRef","themeClassRef","ssrAdapter","renderCallback","hashClassPrefix","mountStyle","finalThemeHash","hashValue","value","undefined","themeHash","themeOverrides","builtinThemeOverrides","JSON","stringify","cssVars","style","key","mount","id","ssr","themeClass","onRender"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,WAAtB,QAAyC,KAAzC;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,CAAT,QAAkB,gBAAlB;AACA,OAAO,SAASC,aAAT,CAAuBC,aAAvB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2DC,KAA3D,EAAkE;AACrE,MAAIC,EAAJ;;AACA,MAAI,CAACF,UAAL,EACIL,UAAU,CAAC,eAAD,EAAkB,0BAAlB,CAAV;AACJ,QAAMQ,kBAAkB,GAAG,CAACD,EAAE,GAAGZ,MAAM,CAACI,0BAAD,EAA6B,IAA7B,CAAZ,MAAoD,IAApD,IAA4DQ,EAAE,KAAK,KAAK,CAAxE,GAA4E,KAAK,CAAjF,GAAqFA,EAAE,CAACC,kBAAnH;AACA,QAAMC,aAAa,GAAGf,GAAG,CAAC,EAAD,CAAzB;AACA,QAAMgB,UAAU,GAAGZ,aAAa,EAAhC;AACA,MAAIa,cAAJ;AACA,QAAMC,eAAe,GAAI,KAAIT,aAAc,EAA3C;;AACA,QAAMU,UAAU,GAAG,MAAM;AACrB,QAAIC,cAAc,GAAGF,eAArB;AACA,UAAMG,SAAS,GAAGX,OAAO,GAAGA,OAAO,CAACY,KAAX,GAAmBC,SAA5C;AACA,UAAMC,SAAS,GAAGV,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,CAACQ,KAA7G;AACA,QAAIE,SAAJ,EACIJ,cAAc,IAAI,MAAMI,SAAxB;AACJ,QAAIH,SAAJ,EACID,cAAc,IAAI,MAAMC,SAAxB;AACJ,UAAM;AAAEI,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA4Cd,KAAlD;;AACA,QAAIa,cAAJ,EAAoB;AAChBL,MAAAA,cAAc,IAAI,MAAMjB,IAAI,CAACwB,IAAI,CAACC,SAAL,CAAeH,cAAf,CAAD,CAA5B;AACH;;AACD,QAAIC,qBAAJ,EAA2B;AACvBN,MAAAA,cAAc,IAAI,MAAMjB,IAAI,CAACwB,IAAI,CAACC,SAAL,CAAeF,qBAAf,CAAD,CAA5B;AACH;;AACDX,IAAAA,aAAa,CAACO,KAAd,GAAsBF,cAAtB;;AACAH,IAAAA,cAAc,GAAG,MAAM;AACnB,YAAMY,OAAO,GAAGlB,UAAU,CAACW,KAA3B;AACA,UAAIQ,KAAK,GAAG,EAAZ;;AACA,WAAK,MAAMC,GAAX,IAAkBF,OAAlB,EAA2B;AACvBC,QAAAA,KAAK,IAAK,GAAEC,GAAI,KAAIF,OAAO,CAACE,GAAD,CAAM,GAAjC;AACH;;AACDxB,MAAAA,CAAC,CAAE,IAAGa,cAAe,EAApB,EAAuBU,KAAvB,CAAD,CAA+BE,KAA/B,CAAqC;AACjCC,QAAAA,EAAE,EAAEb,cAD6B;AAEjCc,QAAAA,GAAG,EAAElB;AAF4B,OAArC;AAIAC,MAAAA,cAAc,GAAGM,SAAjB;AACH,KAXD;AAYH,GA5BD;;AA6BArB,EAAAA,WAAW,CAAC,MAAM;AACdiB,IAAAA,UAAU;AACb,GAFU,CAAX;AAGA,SAAO;AACHgB,IAAAA,UAAU,EAAEpB,aADT;AAEHqB,IAAAA,QAAQ,EAAE,MAAM;AACZnB,MAAAA,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,EAA9E;AACH;AAJE,GAAP;AAMH","sourcesContent":["import { ref, inject, watchEffect } from 'vue';\nimport { hash } from 'css-render';\nimport { useSsrAdapter } from '@css-render/vue3-ssr';\nimport { configProviderInjectionKey } from '../config-provider/src/context';\nimport { throwError } from '../_utils';\nimport { c } from '../_utils/cssr';\nexport function useThemeClass(componentName, hashRef, cssVarsRef, props) {\n    var _a;\n    if (!cssVarsRef)\n        throwError('useThemeClass', 'cssVarsRef is not passed');\n    const mergedThemeHashRef = (_a = inject(configProviderInjectionKey, null)) === null || _a === void 0 ? void 0 : _a.mergedThemeHashRef;\n    const themeClassRef = ref('');\n    const ssrAdapter = useSsrAdapter();\n    let renderCallback;\n    const hashClassPrefix = `__${componentName}`;\n    const mountStyle = () => {\n        let finalThemeHash = hashClassPrefix;\n        const hashValue = hashRef ? hashRef.value : undefined;\n        const themeHash = mergedThemeHashRef === null || mergedThemeHashRef === void 0 ? void 0 : mergedThemeHashRef.value;\n        if (themeHash)\n            finalThemeHash += '-' + themeHash;\n        if (hashValue)\n            finalThemeHash += '-' + hashValue;\n        const { themeOverrides, builtinThemeOverrides } = props;\n        if (themeOverrides) {\n            finalThemeHash += '-' + hash(JSON.stringify(themeOverrides));\n        }\n        if (builtinThemeOverrides) {\n            finalThemeHash += '-' + hash(JSON.stringify(builtinThemeOverrides));\n        }\n        themeClassRef.value = finalThemeHash;\n        renderCallback = () => {\n            const cssVars = cssVarsRef.value;\n            let style = '';\n            for (const key in cssVars) {\n                style += `${key}: ${cssVars[key]};`;\n            }\n            c(`.${finalThemeHash}`, style).mount({\n                id: finalThemeHash,\n                ssr: ssrAdapter\n            });\n            renderCallback = undefined;\n        };\n    };\n    watchEffect(() => {\n        mountStyle();\n    });\n    return {\n        themeClass: themeClassRef,\n        onRender: () => {\n            renderCallback === null || renderCallback === void 0 ? void 0 : renderCallback();\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}