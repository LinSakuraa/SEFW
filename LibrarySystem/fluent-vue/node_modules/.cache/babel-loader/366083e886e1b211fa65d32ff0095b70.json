{"ast":null,"code":"import { computed, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { createTreeMate } from 'treemate';\nimport { createShallowClonedObject } from './utils';\nimport { call, warn } from '../../_utils';\nimport { useSorter } from './use-sorter'; // useTableData combines filter, sorter and pagination\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nexport function useTableData(props, {\n  dataRelatedColsRef\n}) {\n  const selectionColumnRef = computed(() => {\n    const getSelectionColumn = cols => {\n      for (let i = 0; i < cols.length; ++i) {\n        const col = cols[i];\n\n        if ('children' in col) {\n          return getSelectionColumn(col.children);\n        } else if (col.type === 'selection') {\n          return col;\n        }\n      }\n\n      return null;\n    };\n\n    return getSelectionColumn(props.columns);\n  });\n  const treeMateRef = computed(() => {\n    const {\n      childrenKey\n    } = props;\n    return createTreeMate(props.data, {\n      ignoreEmptyChildren: true,\n      getKey: props.rowKey,\n      getChildren: rowData => rowData[childrenKey],\n      getDisabled: rowData => {\n        var _a, _b;\n\n        if ((_b = (_a = selectionColumnRef.value) === null || _a === void 0 ? void 0 : _a.disabled) === null || _b === void 0 ? void 0 : _b.call(_a, rowData)) {\n          return true;\n        }\n\n        return false;\n      }\n    });\n  });\n  const firstContentfulColIndexRef = useMemo(() => {\n    const {\n      columns\n    } = props;\n    const {\n      length\n    } = columns;\n\n    for (let i = 0; i < length; ++i) {\n      if (!columns[i].type) {\n        return i;\n      }\n    }\n\n    return 0;\n  });\n  const uncontrolledFilterStateRef = ref({});\n  const uncontrolledCurrentPageRef = ref(1);\n  const uncontrolledPageSizeRef = ref(10);\n  const mergedFilterStateRef = computed(() => {\n    const columnsWithControlledFilter = dataRelatedColsRef.value.filter(column => {\n      return column.filterOptionValues !== undefined || column.filterOptionValue !== undefined;\n    });\n    const controlledFilterState = {};\n    columnsWithControlledFilter.forEach(column => {\n      var _a;\n\n      if (column.type === 'selection' || column.type === 'expand') return;\n\n      if (column.filterOptionValues === undefined) {\n        controlledFilterState[column.key] = (_a = column.filterOptionValue) !== null && _a !== void 0 ? _a : null;\n      } else {\n        controlledFilterState[column.key] = column.filterOptionValues;\n      }\n    });\n    const activeFilters = Object.assign(createShallowClonedObject(uncontrolledFilterStateRef.value), controlledFilterState);\n    return activeFilters;\n  });\n  const filteredDataRef = computed(() => {\n    const mergedFilterState = mergedFilterStateRef.value;\n    const {\n      columns\n    } = props;\n\n    function createDefaultFilter(columnKey) {\n      return (filterOptionValue, row) => !!~String(row[columnKey]).indexOf(String(filterOptionValue));\n    }\n\n    const {\n      value: {\n        treeNodes: data\n      }\n    } = treeMateRef;\n    const columnEntries = [];\n    columns.forEach(column => {\n      if (column.type === 'selection' || column.type === 'expand' || 'children' in column) {\n        return;\n      }\n\n      columnEntries.push([column.key, column]);\n    });\n    return data ? data.filter(tmNode => {\n      const {\n        rawNode: row\n      } = tmNode; // traverse all filters\n\n      for (const [columnKey, column] of columnEntries) {\n        let activeFilterOptionValues = mergedFilterState[columnKey];\n        if (activeFilterOptionValues == null) continue;\n\n        if (!Array.isArray(activeFilterOptionValues)) {\n          activeFilterOptionValues = [activeFilterOptionValues];\n        }\n\n        if (!activeFilterOptionValues.length) continue; // When async, filter won't be set, so data won't be filtered\n\n        const filter = column.filter === 'default' ? createDefaultFilter(columnKey) : column.filter;\n\n        if (column && typeof filter === 'function') {\n          if (column.filterMode === 'and') {\n            if (activeFilterOptionValues.some(filterOptionValue => !filter(filterOptionValue, row))) {\n              return false;\n            }\n          } else {\n            if (activeFilterOptionValues.some(filterOptionValue => filter(filterOptionValue, row))) {\n              continue;\n            } else {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }) : [];\n  });\n  const {\n    sortedDataRef,\n    deriveNextSorter,\n    mergedSortStateRef,\n    sort,\n    clearSorter\n  } = useSorter(props, {\n    dataRelatedColsRef,\n    filteredDataRef\n  }); // initialize\n\n  dataRelatedColsRef.value.forEach(column => {\n    var _a;\n\n    if (column.filter) {\n      const defaultFilterOptionValues = column.defaultFilterOptionValues;\n\n      if (column.filterMultiple) {\n        uncontrolledFilterStateRef.value[column.key] = defaultFilterOptionValues || [];\n      } else if (defaultFilterOptionValues !== undefined) {\n        // this branch is for compatibility, someone may use `values` in single filter mode\n        uncontrolledFilterStateRef.value[column.key] = defaultFilterOptionValues === null ? [] : defaultFilterOptionValues;\n      } else {\n        uncontrolledFilterStateRef.value[column.key] = (_a = column.defaultFilterOptionValue) !== null && _a !== void 0 ? _a : null;\n      }\n    }\n  });\n  const controlledCurrentPageRef = computed(() => {\n    const {\n      pagination\n    } = props;\n    if (pagination === false) return undefined;\n    return pagination.page;\n  });\n  const controlledPageSizeRef = computed(() => {\n    const {\n      pagination\n    } = props;\n    if (pagination === false) return undefined;\n    return pagination.pageSize;\n  });\n  const mergedCurrentPageRef = useMergedState(controlledCurrentPageRef, uncontrolledCurrentPageRef);\n  const mergedPageSizeRef = useMergedState(controlledPageSizeRef, uncontrolledPageSizeRef);\n  const mergedPageCountRef = computed(() => {\n    const {\n      pagination\n    } = props;\n\n    if (pagination) {\n      const {\n        pageCount\n      } = pagination;\n      if (pageCount !== undefined) return pageCount;\n    }\n\n    return undefined;\n  });\n  const paginatedDataRef = computed(() => {\n    if (props.remote) return treeMateRef.value.treeNodes;\n    if (!props.pagination) return sortedDataRef.value;\n    const pageSize = mergedPageSizeRef.value;\n    const startIndex = (mergedCurrentPageRef.value - 1) * pageSize;\n    return sortedDataRef.value.slice(startIndex, startIndex + pageSize);\n  });\n  const rawPaginatedDataRef = computed(() => {\n    return paginatedDataRef.value.map(tmNode => tmNode.rawNode);\n  });\n\n  function mergedOnUpdatePage(page) {\n    const {\n      pagination\n    } = props;\n\n    if (pagination) {\n      const {\n        onChange,\n        'onUpdate:page': _onUpdatePage,\n        onUpdatePage\n      } = pagination;\n      if (onChange) call(onChange, page);\n      if (onUpdatePage) call(onUpdatePage, page);\n      if (_onUpdatePage) call(_onUpdatePage, page);\n      doUpdatePage(page);\n    }\n  }\n\n  function mergedOnUpdatePageSize(pageSize) {\n    const {\n      pagination\n    } = props;\n\n    if (pagination) {\n      const {\n        onPageSizeChange,\n        'onUpdate:pageSize': _onUpdatePageSize,\n        onUpdatePageSize\n      } = pagination;\n      if (onPageSizeChange) call(onPageSizeChange, pageSize);\n      if (onUpdatePageSize) call(onUpdatePageSize, pageSize);\n      if (_onUpdatePageSize) call(_onUpdatePageSize, pageSize);\n      doUpdatePageSize(pageSize);\n    }\n  }\n\n  const mergedItemCountRef = computed(() => {\n    if (props.remote) {\n      const {\n        pagination\n      } = props;\n\n      if (pagination) {\n        const {\n          itemCount\n        } = pagination;\n        if (itemCount !== undefined) return itemCount;\n      }\n\n      return undefined;\n    }\n\n    return filteredDataRef.value.length;\n  });\n  const mergedPaginationRef = computed(() => {\n    return Object.assign(Object.assign({}, props.pagination), {\n      // reset deprecated methods\n      onChange: undefined,\n      onUpdatePage: undefined,\n      onUpdatePageSize: undefined,\n      onPageSizeChange: undefined,\n      'onUpdate:page': mergedOnUpdatePage,\n      'onUpdate:pageSize': mergedOnUpdatePageSize,\n      // writing merged props after pagination to avoid\n      // pagination[key] === undefined\n      // key still exists but value is undefined\n      page: mergedCurrentPageRef.value,\n      pageSize: mergedPageSizeRef.value,\n      pageCount: mergedItemCountRef.value === undefined ? mergedPageCountRef.value : undefined,\n      itemCount: mergedItemCountRef.value\n    });\n  });\n\n  function doUpdatePage(page) {\n    const {\n      'onUpdate:page': _onUpdatePage,\n      onPageChange,\n      onUpdatePage\n    } = props;\n    if (onUpdatePage) call(onUpdatePage, page);\n    if (_onUpdatePage) call(_onUpdatePage, page);\n    if (onPageChange) call(onPageChange, page);\n    uncontrolledCurrentPageRef.value = page;\n  }\n\n  function doUpdatePageSize(pageSize) {\n    const {\n      'onUpdate:pageSize': _onUpdatePageSize,\n      onPageSizeChange,\n      onUpdatePageSize\n    } = props;\n    if (onPageSizeChange) call(onPageSizeChange, pageSize);\n    if (onUpdatePageSize) call(onUpdatePageSize, pageSize);\n    if (_onUpdatePageSize) call(_onUpdatePageSize, pageSize);\n    uncontrolledPageSizeRef.value = pageSize;\n  }\n\n  function doUpdateFilters(filters, sourceColumn) {\n    const {\n      onUpdateFilters,\n      'onUpdate:filters': _onUpdateFilters,\n      onFiltersChange\n    } = props;\n    if (onUpdateFilters) call(onUpdateFilters, filters, sourceColumn);\n    if (_onUpdateFilters) call(_onUpdateFilters, filters, sourceColumn);\n    if (onFiltersChange) call(onFiltersChange, filters, sourceColumn);\n    uncontrolledFilterStateRef.value = filters;\n  }\n\n  function page(page) {\n    doUpdatePage(page);\n  }\n\n  function clearFilter() {\n    clearFilters();\n  }\n\n  function clearFilters() {\n    filters({});\n  }\n\n  function filters(filters) {\n    filter(filters);\n  }\n\n  function filter(filters) {\n    if (!filters) {\n      uncontrolledFilterStateRef.value = {};\n    } else if (filters) {\n      uncontrolledFilterStateRef.value = createShallowClonedObject(filters);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn('data-table', '`filters` is not an object');\n    }\n  }\n\n  return {\n    treeMateRef,\n    mergedCurrentPageRef,\n    mergedPaginationRef,\n    paginatedDataRef,\n    rawPaginatedDataRef,\n    mergedFilterStateRef,\n    mergedSortStateRef: mergedSortStateRef,\n    hoverKeyRef: ref(null),\n    selectionColumnRef,\n    firstContentfulColIndexRef,\n    doUpdateFilters,\n    deriveNextSorter,\n    doUpdatePageSize,\n    doUpdatePage,\n    // exported methods\n    filter,\n    filters,\n    clearFilter,\n    clearFilters,\n    clearSorter,\n    page,\n    sort\n  };\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/data-table/src/use-table-data.js"],"names":["computed","ref","useMemo","useMergedState","createTreeMate","createShallowClonedObject","call","warn","useSorter","useTableData","props","dataRelatedColsRef","selectionColumnRef","getSelectionColumn","cols","i","length","col","children","type","columns","treeMateRef","childrenKey","data","ignoreEmptyChildren","getKey","rowKey","getChildren","rowData","getDisabled","_a","_b","value","disabled","firstContentfulColIndexRef","uncontrolledFilterStateRef","uncontrolledCurrentPageRef","uncontrolledPageSizeRef","mergedFilterStateRef","columnsWithControlledFilter","filter","column","filterOptionValues","undefined","filterOptionValue","controlledFilterState","forEach","key","activeFilters","Object","assign","filteredDataRef","mergedFilterState","createDefaultFilter","columnKey","row","String","indexOf","treeNodes","columnEntries","push","tmNode","rawNode","activeFilterOptionValues","Array","isArray","filterMode","some","sortedDataRef","deriveNextSorter","mergedSortStateRef","sort","clearSorter","defaultFilterOptionValues","filterMultiple","defaultFilterOptionValue","controlledCurrentPageRef","pagination","page","controlledPageSizeRef","pageSize","mergedCurrentPageRef","mergedPageSizeRef","mergedPageCountRef","pageCount","paginatedDataRef","remote","startIndex","slice","rawPaginatedDataRef","map","mergedOnUpdatePage","onChange","_onUpdatePage","onUpdatePage","doUpdatePage","mergedOnUpdatePageSize","onPageSizeChange","_onUpdatePageSize","onUpdatePageSize","doUpdatePageSize","mergedItemCountRef","itemCount","mergedPaginationRef","onPageChange","doUpdateFilters","filters","sourceColumn","onUpdateFilters","_onUpdateFilters","onFiltersChange","clearFilter","clearFilters","process","env","NODE_ENV","hoverKeyRef"],"mappings":"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","sourcesContent":["import { computed, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { createTreeMate } from 'treemate';\nimport { createShallowClonedObject } from './utils';\nimport { call, warn } from '../../_utils';\nimport { useSorter } from './use-sorter';\n// useTableData combines filter, sorter and pagination\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useTableData(props, { dataRelatedColsRef }) {\n    const selectionColumnRef = computed(() => {\n        const getSelectionColumn = (cols) => {\n            for (let i = 0; i < cols.length; ++i) {\n                const col = cols[i];\n                if ('children' in col) {\n                    return getSelectionColumn(col.children);\n                }\n                else if (col.type === 'selection') {\n                    return col;\n                }\n            }\n            return null;\n        };\n        return getSelectionColumn(props.columns);\n    });\n    const treeMateRef = computed(() => {\n        const { childrenKey } = props;\n        return createTreeMate(props.data, {\n            ignoreEmptyChildren: true,\n            getKey: props.rowKey,\n            getChildren: (rowData) => rowData[childrenKey],\n            getDisabled: (rowData) => {\n                var _a, _b;\n                if ((_b = (_a = selectionColumnRef.value) === null || _a === void 0 ? void 0 : _a.disabled) === null || _b === void 0 ? void 0 : _b.call(_a, rowData)) {\n                    return true;\n                }\n                return false;\n            }\n        });\n    });\n    const firstContentfulColIndexRef = useMemo(() => {\n        const { columns } = props;\n        const { length } = columns;\n        for (let i = 0; i < length; ++i) {\n            if (!columns[i].type) {\n                return i;\n            }\n        }\n        return 0;\n    });\n    const uncontrolledFilterStateRef = ref({});\n    const uncontrolledCurrentPageRef = ref(1);\n    const uncontrolledPageSizeRef = ref(10);\n    const mergedFilterStateRef = computed(() => {\n        const columnsWithControlledFilter = dataRelatedColsRef.value.filter((column) => {\n            return (column.filterOptionValues !== undefined ||\n                column.filterOptionValue !== undefined);\n        });\n        const controlledFilterState = {};\n        columnsWithControlledFilter.forEach((column) => {\n            var _a;\n            if (column.type === 'selection' || column.type === 'expand')\n                return;\n            if (column.filterOptionValues === undefined) {\n                controlledFilterState[column.key] = (_a = column.filterOptionValue) !== null && _a !== void 0 ? _a : null;\n            }\n            else {\n                controlledFilterState[column.key] = column.filterOptionValues;\n            }\n        });\n        const activeFilters = Object.assign(createShallowClonedObject(uncontrolledFilterStateRef.value), controlledFilterState);\n        return activeFilters;\n    });\n    const filteredDataRef = computed(() => {\n        const mergedFilterState = mergedFilterStateRef.value;\n        const { columns } = props;\n        function createDefaultFilter(columnKey) {\n            return (filterOptionValue, row) => !!~String(row[columnKey]).indexOf(String(filterOptionValue));\n        }\n        const { value: { treeNodes: data } } = treeMateRef;\n        const columnEntries = [];\n        columns.forEach((column) => {\n            if (column.type === 'selection' ||\n                column.type === 'expand' ||\n                'children' in column) {\n                return;\n            }\n            columnEntries.push([column.key, column]);\n        });\n        return data\n            ? data.filter((tmNode) => {\n                const { rawNode: row } = tmNode;\n                // traverse all filters\n                for (const [columnKey, column] of columnEntries) {\n                    let activeFilterOptionValues = mergedFilterState[columnKey];\n                    if (activeFilterOptionValues == null)\n                        continue;\n                    if (!Array.isArray(activeFilterOptionValues)) {\n                        activeFilterOptionValues = [activeFilterOptionValues];\n                    }\n                    if (!activeFilterOptionValues.length)\n                        continue;\n                    // When async, filter won't be set, so data won't be filtered\n                    const filter = column.filter === 'default'\n                        ? createDefaultFilter(columnKey)\n                        : column.filter;\n                    if (column && typeof filter === 'function') {\n                        if (column.filterMode === 'and') {\n                            if (activeFilterOptionValues.some((filterOptionValue) => !filter(filterOptionValue, row))) {\n                                return false;\n                            }\n                        }\n                        else {\n                            if (activeFilterOptionValues.some((filterOptionValue) => filter(filterOptionValue, row))) {\n                                continue;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                    }\n                }\n                return true;\n            })\n            : [];\n    });\n    const { sortedDataRef, deriveNextSorter, mergedSortStateRef, sort, clearSorter } = useSorter(props, {\n        dataRelatedColsRef,\n        filteredDataRef\n    });\n    // initialize\n    dataRelatedColsRef.value.forEach((column) => {\n        var _a;\n        if (column.filter) {\n            const defaultFilterOptionValues = column.defaultFilterOptionValues;\n            if (column.filterMultiple) {\n                uncontrolledFilterStateRef.value[column.key] =\n                    defaultFilterOptionValues || [];\n            }\n            else if (defaultFilterOptionValues !== undefined) {\n                // this branch is for compatibility, someone may use `values` in single filter mode\n                uncontrolledFilterStateRef.value[column.key] =\n                    defaultFilterOptionValues === null ? [] : defaultFilterOptionValues;\n            }\n            else {\n                uncontrolledFilterStateRef.value[column.key] =\n                    (_a = column.defaultFilterOptionValue) !== null && _a !== void 0 ? _a : null;\n            }\n        }\n    });\n    const controlledCurrentPageRef = computed(() => {\n        const { pagination } = props;\n        if (pagination === false)\n            return undefined;\n        return pagination.page;\n    });\n    const controlledPageSizeRef = computed(() => {\n        const { pagination } = props;\n        if (pagination === false)\n            return undefined;\n        return pagination.pageSize;\n    });\n    const mergedCurrentPageRef = useMergedState(controlledCurrentPageRef, uncontrolledCurrentPageRef);\n    const mergedPageSizeRef = useMergedState(controlledPageSizeRef, uncontrolledPageSizeRef);\n    const mergedPageCountRef = computed(() => {\n        const { pagination } = props;\n        if (pagination) {\n            const { pageCount } = pagination;\n            if (pageCount !== undefined)\n                return pageCount;\n        }\n        return undefined;\n    });\n    const paginatedDataRef = computed(() => {\n        if (props.remote)\n            return treeMateRef.value.treeNodes;\n        if (!props.pagination)\n            return sortedDataRef.value;\n        const pageSize = mergedPageSizeRef.value;\n        const startIndex = (mergedCurrentPageRef.value - 1) * pageSize;\n        return sortedDataRef.value.slice(startIndex, startIndex + pageSize);\n    });\n    const rawPaginatedDataRef = computed(() => {\n        return paginatedDataRef.value.map((tmNode) => tmNode.rawNode);\n    });\n    function mergedOnUpdatePage(page) {\n        const { pagination } = props;\n        if (pagination) {\n            const { onChange, 'onUpdate:page': _onUpdatePage, onUpdatePage } = pagination;\n            if (onChange)\n                call(onChange, page);\n            if (onUpdatePage)\n                call(onUpdatePage, page);\n            if (_onUpdatePage)\n                call(_onUpdatePage, page);\n            doUpdatePage(page);\n        }\n    }\n    function mergedOnUpdatePageSize(pageSize) {\n        const { pagination } = props;\n        if (pagination) {\n            const { onPageSizeChange, 'onUpdate:pageSize': _onUpdatePageSize, onUpdatePageSize } = pagination;\n            if (onPageSizeChange)\n                call(onPageSizeChange, pageSize);\n            if (onUpdatePageSize)\n                call(onUpdatePageSize, pageSize);\n            if (_onUpdatePageSize)\n                call(_onUpdatePageSize, pageSize);\n            doUpdatePageSize(pageSize);\n        }\n    }\n    const mergedItemCountRef = computed(() => {\n        if (props.remote) {\n            const { pagination } = props;\n            if (pagination) {\n                const { itemCount } = pagination;\n                if (itemCount !== undefined)\n                    return itemCount;\n            }\n            return undefined;\n        }\n        return filteredDataRef.value.length;\n    });\n    const mergedPaginationRef = computed(() => {\n        return Object.assign(Object.assign({}, props.pagination), { \n            // reset deprecated methods\n            onChange: undefined, onUpdatePage: undefined, onUpdatePageSize: undefined, onPageSizeChange: undefined, 'onUpdate:page': mergedOnUpdatePage, 'onUpdate:pageSize': mergedOnUpdatePageSize, \n            // writing merged props after pagination to avoid\n            // pagination[key] === undefined\n            // key still exists but value is undefined\n            page: mergedCurrentPageRef.value, pageSize: mergedPageSizeRef.value, pageCount: mergedItemCountRef.value === undefined\n                ? mergedPageCountRef.value\n                : undefined, itemCount: mergedItemCountRef.value });\n    });\n    function doUpdatePage(page) {\n        const { 'onUpdate:page': _onUpdatePage, onPageChange, onUpdatePage } = props;\n        if (onUpdatePage)\n            call(onUpdatePage, page);\n        if (_onUpdatePage)\n            call(_onUpdatePage, page);\n        if (onPageChange)\n            call(onPageChange, page);\n        uncontrolledCurrentPageRef.value = page;\n    }\n    function doUpdatePageSize(pageSize) {\n        const { 'onUpdate:pageSize': _onUpdatePageSize, onPageSizeChange, onUpdatePageSize } = props;\n        if (onPageSizeChange)\n            call(onPageSizeChange, pageSize);\n        if (onUpdatePageSize)\n            call(onUpdatePageSize, pageSize);\n        if (_onUpdatePageSize)\n            call(_onUpdatePageSize, pageSize);\n        uncontrolledPageSizeRef.value = pageSize;\n    }\n    function doUpdateFilters(filters, sourceColumn) {\n        const { onUpdateFilters, 'onUpdate:filters': _onUpdateFilters, onFiltersChange } = props;\n        if (onUpdateFilters)\n            call(onUpdateFilters, filters, sourceColumn);\n        if (_onUpdateFilters)\n            call(_onUpdateFilters, filters, sourceColumn);\n        if (onFiltersChange)\n            call(onFiltersChange, filters, sourceColumn);\n        uncontrolledFilterStateRef.value = filters;\n    }\n    function page(page) {\n        doUpdatePage(page);\n    }\n    function clearFilter() {\n        clearFilters();\n    }\n    function clearFilters() {\n        filters({});\n    }\n    function filters(filters) {\n        filter(filters);\n    }\n    function filter(filters) {\n        if (!filters) {\n            uncontrolledFilterStateRef.value = {};\n        }\n        else if (filters) {\n            uncontrolledFilterStateRef.value = createShallowClonedObject(filters);\n        }\n        else if (process.env.NODE_ENV !== 'production') {\n            warn('data-table', '`filters` is not an object');\n        }\n    }\n    return {\n        treeMateRef,\n        mergedCurrentPageRef,\n        mergedPaginationRef,\n        paginatedDataRef,\n        rawPaginatedDataRef,\n        mergedFilterStateRef,\n        mergedSortStateRef: mergedSortStateRef,\n        hoverKeyRef: ref(null),\n        selectionColumnRef,\n        firstContentfulColIndexRef,\n        doUpdateFilters,\n        deriveNextSorter,\n        doUpdatePageSize,\n        doUpdatePage,\n        // exported methods\n        filter,\n        filters,\n        clearFilter,\n        clearFilters,\n        clearSorter,\n        page,\n        sort\n    };\n}\n"]},"metadata":{},"sourceType":"module"}