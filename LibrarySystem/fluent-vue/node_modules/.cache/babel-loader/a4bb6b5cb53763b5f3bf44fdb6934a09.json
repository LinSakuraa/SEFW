{"ast":null,"code":"import { h, defineComponent, provide, computed, toRef, ref } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { warn, call, createInjectionKey } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nconst checkboxGroupProps = {\n  min: Number,\n  max: Number,\n  size: String,\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  // deprecated\n  onChange: {\n    type: [Function, Array],\n    validator: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        warn('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n      }\n\n      return true;\n    },\n    default: undefined\n  }\n};\nexport default defineComponent({\n  name: 'CheckboxGroup',\n  props: checkboxGroupProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = computed(() => props.value);\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const checkedCount = computed(() => {\n      var _a;\n\n      return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    });\n    const valueSetRef = computed(() => {\n      if (Array.isArray(mergedValueRef.value)) {\n        return new Set(mergedValueRef.value);\n      }\n\n      return new Set();\n    });\n\n    function toggleCheckbox(checked, checkboxValue) {\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      const {\n        onChange,\n        'onUpdate:value': _onUpdateValue,\n        onUpdateValue\n      } = props;\n\n      if (Array.isArray(mergedValueRef.value)) {\n        const groupValue = Array.from(mergedValueRef.value);\n        const index = groupValue.findIndex(value => value === checkboxValue);\n\n        if (checked) {\n          if (!~index) {\n            groupValue.push(checkboxValue);\n            if (onUpdateValue) call(onUpdateValue, groupValue);\n            if (_onUpdateValue) call(_onUpdateValue, groupValue);\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledValueRef.value = groupValue; // deprecated\n\n            if (onChange) call(onChange, groupValue);\n          }\n        } else {\n          if (~index) {\n            groupValue.splice(index, 1);\n            if (onUpdateValue) call(onUpdateValue, groupValue);\n            if (_onUpdateValue) call(_onUpdateValue, groupValue);\n            if (onChange) call(onChange, groupValue); // deprecated\n\n            uncontrolledValueRef.value = groupValue;\n            nTriggerFormInput();\n            nTriggerFormChange();\n          }\n        }\n      } else {\n        if (checked) {\n          if (onUpdateValue) call(onUpdateValue, [checkboxValue]);\n          if (_onUpdateValue) call(_onUpdateValue, [checkboxValue]);\n          if (onChange) call(onChange, [checkboxValue]); // deprecated\n\n          uncontrolledValueRef.value = [checkboxValue];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        } else {\n          if (onUpdateValue) call(onUpdateValue, []);\n          if (_onUpdateValue) call(_onUpdateValue, []);\n          if (onChange) call(onChange, []); // deprecated\n\n          uncontrolledValueRef.value = [];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        }\n      }\n    }\n\n    provide(checkboxGroupInjectionKey, {\n      checkedCountRef: checkedCount,\n      maxRef: toRef(props, 'max'),\n      minRef: toRef(props, 'min'),\n      valueSetRef: valueSetRef,\n      disabledRef: mergedDisabledRef,\n      mergedSizeRef: mergedSizeRef,\n      toggleCheckbox\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef\n    };\n  },\n\n  render() {\n    return h(\"div\", {\n      class: `${this.mergedClsPrefix}-checkbox-group`,\n      role: \"group\"\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/checkbox/src/CheckboxGroup.js"],"names":["h","defineComponent","provide","computed","toRef","ref","useMergedState","useConfig","useFormItem","warn","call","createInjectionKey","checkboxGroupInjectionKey","checkboxGroupProps","min","Number","max","size","String","value","Array","defaultValue","type","default","disabled","Boolean","undefined","Function","onUpdateValue","onChange","validator","process","env","NODE_ENV","name","props","setup","mergedClsPrefixRef","formItem","mergedSizeRef","mergedDisabledRef","uncontrolledValueRef","controlledValueRef","mergedValueRef","checkedCount","_a","length","valueSetRef","isArray","Set","toggleCheckbox","checked","checkboxValue","nTriggerFormInput","nTriggerFormChange","_onUpdateValue","groupValue","from","index","findIndex","push","splice","checkedCountRef","maxRef","minRef","disabledRef","mergedClsPrefix","render","class","role","$slots"],"mappings":"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","sourcesContent":["import { h, defineComponent, provide, computed, toRef, ref } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { warn, call, createInjectionKey } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nconst checkboxGroupProps = {\n    min: Number,\n    max: Number,\n    size: String,\n    value: Array,\n    defaultValue: {\n        type: Array,\n        default: null\n    },\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    'onUpdate:value': [Function, Array],\n    onUpdateValue: [Function, Array],\n    // deprecated\n    onChange: {\n        type: [Function, Array],\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    }\n};\nexport default defineComponent({\n    name: 'CheckboxGroup',\n    props: checkboxGroupProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const formItem = useFormItem(props);\n        const { mergedSizeRef, mergedDisabledRef } = formItem;\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = computed(() => props.value);\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const checkedCount = computed(() => {\n            var _a;\n            return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n        });\n        const valueSetRef = computed(() => {\n            if (Array.isArray(mergedValueRef.value)) {\n                return new Set(mergedValueRef.value);\n            }\n            return new Set();\n        });\n        function toggleCheckbox(checked, checkboxValue) {\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            const { onChange, 'onUpdate:value': _onUpdateValue, onUpdateValue } = props;\n            if (Array.isArray(mergedValueRef.value)) {\n                const groupValue = Array.from(mergedValueRef.value);\n                const index = groupValue.findIndex((value) => value === checkboxValue);\n                if (checked) {\n                    if (!~index) {\n                        groupValue.push(checkboxValue);\n                        if (onUpdateValue)\n                            call(onUpdateValue, groupValue);\n                        if (_onUpdateValue)\n                            call(_onUpdateValue, groupValue);\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                        uncontrolledValueRef.value = groupValue;\n                        // deprecated\n                        if (onChange)\n                            call(onChange, groupValue);\n                    }\n                }\n                else {\n                    if (~index) {\n                        groupValue.splice(index, 1);\n                        if (onUpdateValue)\n                            call(onUpdateValue, groupValue);\n                        if (_onUpdateValue)\n                            call(_onUpdateValue, groupValue);\n                        if (onChange)\n                            call(onChange, groupValue); // deprecated\n                        uncontrolledValueRef.value = groupValue;\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                    }\n                }\n            }\n            else {\n                if (checked) {\n                    if (onUpdateValue)\n                        call(onUpdateValue, [checkboxValue]);\n                    if (_onUpdateValue)\n                        call(_onUpdateValue, [checkboxValue]);\n                    if (onChange)\n                        call(onChange, [checkboxValue]); // deprecated\n                    uncontrolledValueRef.value = [checkboxValue];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n                else {\n                    if (onUpdateValue)\n                        call(onUpdateValue, []);\n                    if (_onUpdateValue)\n                        call(_onUpdateValue, []);\n                    if (onChange)\n                        call(onChange, []); // deprecated\n                    uncontrolledValueRef.value = [];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n            }\n        }\n        provide(checkboxGroupInjectionKey, {\n            checkedCountRef: checkedCount,\n            maxRef: toRef(props, 'max'),\n            minRef: toRef(props, 'min'),\n            valueSetRef: valueSetRef,\n            disabledRef: mergedDisabledRef,\n            mergedSizeRef: mergedSizeRef,\n            toggleCheckbox\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef\n        };\n    },\n    render() {\n        return (h(\"div\", { class: `${this.mergedClsPrefix}-checkbox-group`, role: \"group\" }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}