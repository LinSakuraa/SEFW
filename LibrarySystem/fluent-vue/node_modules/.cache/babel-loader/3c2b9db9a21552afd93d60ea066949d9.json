{"ast":null,"code":"import { Observable } from \"../observation/observable\";\nimport { emptyArray } from \"../platform\";\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\n\nexport function elements(selector) {\n  if (selector) {\n    return function (value, index, array) {\n      return value.nodeType === 1 && value.matches(selector);\n    };\n  }\n\n  return function (value, index, array) {\n    return value.nodeType === 1;\n  };\n}\n/**\n * A base class for node observation.\n * @internal\n */\n\nexport class NodeObservationBehavior {\n  /**\n   * Creates an instance of NodeObservationBehavior.\n   * @param target - The target to assign the nodes property on.\n   * @param options - The options to use in configuring node observation.\n   */\n  constructor(target, options) {\n    this.target = target;\n    this.options = options;\n    this.source = null;\n  }\n  /**\n   * Bind this behavior to the source.\n   * @param source - The source to bind to.\n   * @param context - The execution context that the binding is operating within.\n   */\n\n\n  bind(source) {\n    const name = this.options.property;\n    this.shouldUpdate = Observable.getAccessors(source).some(x => x.name === name);\n    this.source = source;\n    this.updateTarget(this.computeNodes());\n\n    if (this.shouldUpdate) {\n      this.observe();\n    }\n  }\n  /**\n   * Unbinds this behavior from the source.\n   * @param source - The source to unbind from.\n   */\n\n\n  unbind() {\n    this.updateTarget(emptyArray);\n    this.source = null;\n\n    if (this.shouldUpdate) {\n      this.disconnect();\n    }\n  }\n  /** @internal */\n\n\n  handleEvent() {\n    this.updateTarget(this.computeNodes());\n  }\n\n  computeNodes() {\n    let nodes = this.getNodes();\n\n    if (this.options.filter !== void 0) {\n      nodes = nodes.filter(this.options.filter);\n    }\n\n    return nodes;\n  }\n\n  updateTarget(value) {\n    this.source[this.options.property] = value;\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/templating/node-observation.js"],"names":["Observable","emptyArray","elements","selector","value","index","array","nodeType","matches","NodeObservationBehavior","constructor","target","options","source","bind","name","property","shouldUpdate","getAccessors","some","x","updateTarget","computeNodes","observe","unbind","disconnect","handleEvent","nodes","getNodes","filter"],"mappings":"AAAA,SAASA,UAAT,QAA2B,2BAA3B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC/B,MAAIA,QAAJ,EAAc;AACV,WAAO,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAClC,aAAOF,KAAK,CAACG,QAAN,KAAmB,CAAnB,IAAwBH,KAAK,CAACI,OAAN,CAAcL,QAAd,CAA/B;AACH,KAFD;AAGH;;AACD,SAAO,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAClC,WAAOF,KAAK,CAACG,QAAN,KAAmB,CAA1B;AACH,GAFD;AAGH;AACD;AACA;AACA;AACA;;AACA,OAAO,MAAME,uBAAN,CAA8B;AACjC;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AACzB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACD,MAAD,EAAS;AACT,UAAME,IAAI,GAAG,KAAKH,OAAL,CAAaI,QAA1B;AACA,SAAKC,YAAL,GAAoBjB,UAAU,CAACkB,YAAX,CAAwBL,MAAxB,EAAgCM,IAAhC,CAAsCC,CAAD,IAAOA,CAAC,CAACL,IAAF,KAAWA,IAAvD,CAApB;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKQ,YAAL,CAAkB,KAAKC,YAAL,EAAlB;;AACA,QAAI,KAAKL,YAAT,EAAuB;AACnB,WAAKM,OAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,MAAM,GAAG;AACL,SAAKH,YAAL,CAAkBpB,UAAlB;AACA,SAAKY,MAAL,GAAc,IAAd;;AACA,QAAI,KAAKI,YAAT,EAAuB;AACnB,WAAKQ,UAAL;AACH;AACJ;AACD;;;AACAC,EAAAA,WAAW,GAAG;AACV,SAAKL,YAAL,CAAkB,KAAKC,YAAL,EAAlB;AACH;;AACDA,EAAAA,YAAY,GAAG;AACX,QAAIK,KAAK,GAAG,KAAKC,QAAL,EAAZ;;AACA,QAAI,KAAKhB,OAAL,CAAaiB,MAAb,KAAwB,KAAK,CAAjC,EAAoC;AAChCF,MAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAa,KAAKjB,OAAL,CAAaiB,MAA1B,CAAR;AACH;;AACD,WAAOF,KAAP;AACH;;AACDN,EAAAA,YAAY,CAACjB,KAAD,EAAQ;AAChB,SAAKS,MAAL,CAAY,KAAKD,OAAL,CAAaI,QAAzB,IAAqCZ,KAArC;AACH;;AAjDgC","sourcesContent":["import { Observable } from \"../observation/observable\";\nimport { emptyArray } from \"../platform\";\n/**\n * Creates a function that can be used to filter a Node array, selecting only elements.\n * @param selector - An optional selector to restrict the filter to.\n * @public\n */\nexport function elements(selector) {\n    if (selector) {\n        return function (value, index, array) {\n            return value.nodeType === 1 && value.matches(selector);\n        };\n    }\n    return function (value, index, array) {\n        return value.nodeType === 1;\n    };\n}\n/**\n * A base class for node observation.\n * @internal\n */\nexport class NodeObservationBehavior {\n    /**\n     * Creates an instance of NodeObservationBehavior.\n     * @param target - The target to assign the nodes property on.\n     * @param options - The options to use in configuring node observation.\n     */\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n        this.source = null;\n    }\n    /**\n     * Bind this behavior to the source.\n     * @param source - The source to bind to.\n     * @param context - The execution context that the binding is operating within.\n     */\n    bind(source) {\n        const name = this.options.property;\n        this.shouldUpdate = Observable.getAccessors(source).some((x) => x.name === name);\n        this.source = source;\n        this.updateTarget(this.computeNodes());\n        if (this.shouldUpdate) {\n            this.observe();\n        }\n    }\n    /**\n     * Unbinds this behavior from the source.\n     * @param source - The source to unbind from.\n     */\n    unbind() {\n        this.updateTarget(emptyArray);\n        this.source = null;\n        if (this.shouldUpdate) {\n            this.disconnect();\n        }\n    }\n    /** @internal */\n    handleEvent() {\n        this.updateTarget(this.computeNodes());\n    }\n    computeNodes() {\n        let nodes = this.getNodes();\n        if (this.options.filter !== void 0) {\n            nodes = nodes.filter(this.options.filter);\n        }\n        return nodes;\n    }\n    updateTarget(value) {\n        this.source[this.options.property] = value;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}