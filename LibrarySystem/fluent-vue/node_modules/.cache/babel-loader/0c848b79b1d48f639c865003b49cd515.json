{"ast":null,"code":"import { h, computed, defineComponent, provide, toRef } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { breadcrumbLight } from '../styles';\nimport style from './styles/index.cssr';\nimport { createInjectionKey } from '../../_utils';\nexport const breadcrumbInjectionKey = createInjectionKey('n-breadcrumb');\nconst breadcrumbProps = Object.assign(Object.assign({}, useTheme.props), {\n  separator: {\n    type: String,\n    default: '/'\n  }\n});\nexport default defineComponent({\n  name: 'Breadcrumb',\n  props: breadcrumbProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Breadcrumb', '-breadcrumb', style, breadcrumbLight, props, mergedClsPrefixRef);\n    provide(breadcrumbInjectionKey, {\n      separatorRef: toRef(props, 'separator'),\n      mergedClsPrefixRef\n    });\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          separatorColor,\n          itemTextColor,\n          itemTextColorHover,\n          itemTextColorPressed,\n          itemTextColorActive,\n          fontSize,\n          fontWeightActive\n        }\n      } = themeRef.value;\n      return {\n        '--n-font-size': fontSize,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-item-text-color': itemTextColor,\n        '--n-item-text-color-hover': itemTextColorHover,\n        '--n-item-text-color-pressed': itemTextColorPressed,\n        '--n-item-text-color-active': itemTextColorActive,\n        '--n-separator-color': separatorColor,\n        '--n-font-weight-active': fontWeightActive\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('breadcrumb', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"nav\", {\n      class: [`${this.mergedClsPrefix}-breadcrumb`, this.themeClass],\n      style: this.cssVars,\n      \"aria-label\": \"Breadcrumb\"\n    }, h(\"ul\", null, this.$slots));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/breadcrumb/src/Breadcrumb.js"],"names":["h","computed","defineComponent","provide","toRef","useConfig","useTheme","useThemeClass","breadcrumbLight","style","createInjectionKey","breadcrumbInjectionKey","breadcrumbProps","Object","assign","props","separator","type","String","default","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","separatorRef","cssVarsRef","common","cubicBezierEaseInOut","self","separatorColor","itemTextColor","itemTextColorHover","itemTextColorPressed","itemTextColorActive","fontSize","fontWeightActive","value","themeClassHandle","undefined","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","call","class","$slots"],"mappings":"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","sourcesContent":["import { h, computed, defineComponent, provide, toRef } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { breadcrumbLight } from '../styles';\nimport style from './styles/index.cssr';\nimport { createInjectionKey } from '../../_utils';\nexport const breadcrumbInjectionKey = createInjectionKey('n-breadcrumb');\nconst breadcrumbProps = Object.assign(Object.assign({}, useTheme.props), { separator: {\n        type: String,\n        default: '/'\n    } });\nexport default defineComponent({\n    name: 'Breadcrumb',\n    props: breadcrumbProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Breadcrumb', '-breadcrumb', style, breadcrumbLight, props, mergedClsPrefixRef);\n        provide(breadcrumbInjectionKey, {\n            separatorRef: toRef(props, 'separator'),\n            mergedClsPrefixRef\n        });\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { separatorColor, itemTextColor, itemTextColorHover, itemTextColorPressed, itemTextColorActive, fontSize, fontWeightActive } } = themeRef.value;\n            return {\n                '--n-font-size': fontSize,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-item-text-color': itemTextColor,\n                '--n-item-text-color-hover': itemTextColorHover,\n                '--n-item-text-color-pressed': itemTextColorPressed,\n                '--n-item-text-color-active': itemTextColorActive,\n                '--n-separator-color': separatorColor,\n                '--n-font-weight-active': fontWeightActive\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('breadcrumb', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"nav\", { class: [`${this.mergedClsPrefix}-breadcrumb`, this.themeClass], style: this.cssVars, \"aria-label\": \"Breadcrumb\" },\n            h(\"ul\", null, this.$slots)));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}