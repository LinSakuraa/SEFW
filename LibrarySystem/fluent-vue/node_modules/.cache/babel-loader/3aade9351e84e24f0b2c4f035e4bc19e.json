{"ast":null,"code":"import { h, defineComponent, provide } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { createInjectionKey } from '../../_utils';\nimport { timelineLight } from '../styles';\nimport style from './styles/index.cssr';\nconst timelineProps = Object.assign(Object.assign({}, useTheme.props), {\n  horizontal: Boolean,\n  itemPlacement: {\n    type: String,\n    default: 'left'\n  },\n  size: {\n    type: String,\n    default: 'medium'\n  },\n  iconSize: Number\n});\nexport const timelineInjectionKey = createInjectionKey('n-timeline');\nexport default defineComponent({\n  name: 'Timeline',\n  props: timelineProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const themeRef = useTheme('Timeline', '-timeline', style, timelineLight, props, mergedClsPrefixRef);\n    provide(timelineInjectionKey, {\n      props,\n      mergedThemeRef: themeRef,\n      mergedClsPrefixRef\n    });\n    return () => {\n      const {\n        value: mergedClsPrefix\n      } = mergedClsPrefixRef;\n      return h(\"div\", {\n        class: [`${mergedClsPrefix}-timeline`, props.horizontal && `${mergedClsPrefix}-timeline--horizontal`, `${mergedClsPrefix}-timeline--${props.size}-size`, !props.horizontal && `${mergedClsPrefix}-timeline--${props.itemPlacement}-placement`]\n      }, slots);\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/timeline/src/Timeline.js"],"names":["h","defineComponent","provide","useConfig","useTheme","createInjectionKey","timelineLight","style","timelineProps","Object","assign","props","horizontal","Boolean","itemPlacement","type","String","default","size","iconSize","Number","timelineInjectionKey","name","setup","slots","mergedClsPrefixRef","themeRef","mergedThemeRef","value","mergedClsPrefix","class"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,OAA7B,QAA4C,KAA5C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,eAApC;AACA,SAASC,kBAAT,QAAmC,cAAnC;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAQ,CAACO,KAA3B,CAAd,EAAiD;AAAEC,EAAAA,UAAU,EAAEC,OAAd;AAAuBC,EAAAA,aAAa,EAAE;AACrGC,IAAAA,IAAI,EAAEC,MAD+F;AAErGC,IAAAA,OAAO,EAAE;AAF4F,GAAtC;AAGhEC,EAAAA,IAAI,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,OAAO,EAAE;AAFJ,GAH0D;AAMhEE,EAAAA,QAAQ,EAAEC;AANsD,CAAjD,CAAtB;AAOA,OAAO,MAAMC,oBAAoB,GAAGhB,kBAAkB,CAAC,YAAD,CAA/C;AACP,eAAeJ,eAAe,CAAC;AAC3BqB,EAAAA,IAAI,EAAE,UADqB;AAE3BX,EAAAA,KAAK,EAAEH,aAFoB;;AAG3Be,EAAAA,KAAK,CAACZ,KAAD,EAAQ;AAAEa,IAAAA;AAAF,GAAR,EAAmB;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAAyBtB,SAAS,CAACQ,KAAD,CAAxC;AACA,UAAMe,QAAQ,GAAGtB,QAAQ,CAAC,UAAD,EAAa,WAAb,EAA0BG,KAA1B,EAAiCD,aAAjC,EAAgDK,KAAhD,EAAuDc,kBAAvD,CAAzB;AACAvB,IAAAA,OAAO,CAACmB,oBAAD,EAAuB;AAC1BV,MAAAA,KAD0B;AAE1BgB,MAAAA,cAAc,EAAED,QAFU;AAG1BD,MAAAA;AAH0B,KAAvB,CAAP;AAKA,WAAO,MAAM;AACT,YAAM;AAAEG,QAAAA,KAAK,EAAEC;AAAT,UAA6BJ,kBAAnC;AACA,aAAQzB,CAAC,CAAC,KAAD,EAAQ;AAAE8B,QAAAA,KAAK,EAAE,CACjB,GAAED,eAAgB,WADD,EAElBlB,KAAK,CAACC,UAAN,IAAqB,GAAEiB,eAAgB,uBAFrB,EAGjB,GAAEA,eAAgB,cAAalB,KAAK,CAACO,IAAK,OAHzB,EAIlB,CAACP,KAAK,CAACC,UAAP,IACK,GAAEiB,eAAgB,cAAalB,KAAK,CAACG,aAAc,YALtC;AAAT,OAAR,EAMAU,KANA,CAAT;AAOH,KATD;AAUH;;AArB0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, provide } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { createInjectionKey } from '../../_utils';\nimport { timelineLight } from '../styles';\nimport style from './styles/index.cssr';\nconst timelineProps = Object.assign(Object.assign({}, useTheme.props), { horizontal: Boolean, itemPlacement: {\n        type: String,\n        default: 'left'\n    }, size: {\n        type: String,\n        default: 'medium'\n    }, iconSize: Number });\nexport const timelineInjectionKey = createInjectionKey('n-timeline');\nexport default defineComponent({\n    name: 'Timeline',\n    props: timelineProps,\n    setup(props, { slots }) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Timeline', '-timeline', style, timelineLight, props, mergedClsPrefixRef);\n        provide(timelineInjectionKey, {\n            props,\n            mergedThemeRef: themeRef,\n            mergedClsPrefixRef\n        });\n        return () => {\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            return (h(\"div\", { class: [\n                    `${mergedClsPrefix}-timeline`,\n                    props.horizontal && `${mergedClsPrefix}-timeline--horizontal`,\n                    `${mergedClsPrefix}-timeline--${props.size}-size`,\n                    !props.horizontal &&\n                        `${mergedClsPrefix}-timeline--${props.itemPlacement}-placement`\n                ] }, slots));\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}