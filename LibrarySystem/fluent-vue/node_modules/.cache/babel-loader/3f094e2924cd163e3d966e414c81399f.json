{"ast":null,"code":"import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\n\nexport class SlottedBehavior extends NodeObservationBehavior {\n  /**\n   * Creates an instance of SlottedBehavior.\n   * @param target - The slot element target to observe.\n   * @param options - The options to use when observing the slot.\n   */\n  constructor(target, options) {\n    super(target, options);\n  }\n  /**\n   * Begins observation of the nodes.\n   */\n\n\n  observe() {\n    this.target.addEventListener(\"slotchange\", this);\n  }\n  /**\n   * Disconnects observation of the nodes.\n   */\n\n\n  disconnect() {\n    this.target.removeEventListener(\"slotchange\", this);\n  }\n  /**\n   * Retrieves the nodes that should be assigned to the target.\n   */\n\n\n  getNodes() {\n    return this.target.assignedNodes(this.options);\n  }\n\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\n\nexport function slotted(propertyOrOptions) {\n  if (typeof propertyOrOptions === \"string\") {\n    propertyOrOptions = {\n      property: propertyOrOptions\n    };\n  }\n\n  return new AttachedBehaviorHTMLDirective(\"fast-slotted\", SlottedBehavior, propertyOrOptions);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/templating/slotted.js"],"names":["AttachedBehaviorHTMLDirective","NodeObservationBehavior","SlottedBehavior","constructor","target","options","observe","addEventListener","disconnect","removeEventListener","getNodes","assignedNodes","slotted","propertyOrOptions","property"],"mappings":"AAAA,SAASA,6BAAT,QAA8C,kBAA9C;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,SAA8BD,uBAA9B,CAAsD;AACzD;AACJ;AACA;AACA;AACA;AACIE,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AACzB,UAAMD,MAAN,EAAcC,OAAd;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN,SAAKF,MAAL,CAAYG,gBAAZ,CAA6B,YAA7B,EAA2C,IAA3C;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,UAAU,GAAG;AACT,SAAKJ,MAAL,CAAYK,mBAAZ,CAAgC,YAAhC,EAA8C,IAA9C;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKN,MAAL,CAAYO,aAAZ,CAA0B,KAAKN,OAA/B,CAAP;AACH;;AA1BwD;AA4B7D;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,OAAT,CAAiBC,iBAAjB,EAAoC;AACvC,MAAI,OAAOA,iBAAP,KAA6B,QAAjC,EAA2C;AACvCA,IAAAA,iBAAiB,GAAG;AAAEC,MAAAA,QAAQ,EAAED;AAAZ,KAApB;AACH;;AACD,SAAO,IAAIb,6BAAJ,CAAkC,cAAlC,EAAkDE,eAAlD,EAAmEW,iBAAnE,CAAP;AACH","sourcesContent":["import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for slotted node observation.\n * @public\n */\nexport class SlottedBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of SlottedBehavior.\n     * @param target - The slot element target to observe.\n     * @param options - The options to use when observing the slot.\n     */\n    constructor(target, options) {\n        super(target, options);\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        this.target.addEventListener(\"slotchange\", this);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.target.removeEventListener(\"slotchange\", this);\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        return this.target.assignedNodes(this.options);\n    }\n}\n/**\n * A directive that observes the `assignedNodes()` of a slot and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure slotted node observation.\n * @public\n */\nexport function slotted(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = { property: propertyOrOptions };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-slotted\", SlottedBehavior, propertyOrOptions);\n}\n"]},"metadata":{},"sourceType":"module"}