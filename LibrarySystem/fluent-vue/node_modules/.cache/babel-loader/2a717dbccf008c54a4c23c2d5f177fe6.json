{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable } from \"@microsoft/fast-element\";\nimport { keyArrowDown, keyArrowUp } from \"@microsoft/fast-web-utilities\";\nimport { StartEnd } from \"../patterns/index\";\nimport { applyMixins } from \"../utilities/index\";\nimport { DelegatesARIATextbox } from \"../text-field/index\";\nimport { FormAssociatedNumberField } from \"./number-field.form-associated\";\n/**\n * A Number Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type=\"number\" /> element }.\n *\n * @public\n */\n\nexport class NumberField extends FormAssociatedNumberField {\n  constructor() {\n    super(...arguments);\n    /**\n     * When true, spin buttons will not be rendered\n     * @public\n     * @remarks\n     * HTML Attribute: autofocus\n     */\n\n    this.hideStep = false;\n    /**\n     * Amount to increment or decrement the value by\n     * @public\n     * @remarks\n     * HTMLAttribute: step\n     */\n\n    this.step = 1;\n    /**\n     * Flag to indicate that the value change is from the user input\n     * @internal\n     */\n\n    this.isUserInput = false;\n  }\n  /**\n   * Ensures that the max is greater than the min and that the value\n   *  is less than the max\n   * @param previous - the previous max value\n   * @param next - updated max value\n   *\n   * @internal\n   */\n\n\n  maxChanged(previous, next) {\n    var _a;\n\n    this.max = Math.max(next, (_a = this.min) !== null && _a !== void 0 ? _a : next);\n    const min = Math.min(this.min, this.max);\n\n    if (this.min !== undefined && this.min !== min) {\n      this.min = min;\n    }\n\n    this.value = this.getValidValue(this.value);\n  }\n  /**\n   * Ensures that the min is less than the max and that the value\n   *  is greater than the min\n   * @param previous - previous min value\n   * @param next - updated min value\n   *\n   * @internal\n   */\n\n\n  minChanged(previous, next) {\n    var _a;\n\n    this.min = Math.min(next, (_a = this.max) !== null && _a !== void 0 ? _a : next);\n    const max = Math.max(this.min, this.max);\n\n    if (this.max !== undefined && this.max !== max) {\n      this.max = max;\n    }\n\n    this.value = this.getValidValue(this.value);\n  }\n  /**\n   * The value property, typed as a number.\n   *\n   * @public\n   */\n\n\n  get valueAsNumber() {\n    return parseFloat(super.value);\n  }\n\n  set valueAsNumber(next) {\n    this.value = next.toString();\n  }\n  /**\n   * Validates that the value is a number between the min and max\n   * @param previous - previous stored value\n   * @param next - value being updated\n   * @param updateControl - should the text field be updated with value, defaults to true\n   * @internal\n   */\n\n\n  valueChanged(previous, next) {\n    this.value = this.getValidValue(next);\n\n    if (next !== this.value) {\n      return;\n    }\n\n    if (this.control && !this.isUserInput) {\n      this.control.value = this.value;\n    }\n\n    super.valueChanged(previous, this.value);\n\n    if (previous !== undefined && !this.isUserInput) {\n      this.$emit(\"input\");\n      this.$emit(\"change\");\n    }\n\n    this.isUserInput = false;\n  }\n  /**\n   * Sets the internal value to a valid number between the min and max properties\n   * @param value - user input\n   *\n   * @internal\n   */\n\n\n  getValidValue(value) {\n    var _a, _b;\n\n    let validValue = parseFloat(parseFloat(value).toPrecision(12));\n\n    if (isNaN(validValue)) {\n      validValue = \"\";\n    } else {\n      validValue = Math.min(validValue, (_a = this.max) !== null && _a !== void 0 ? _a : validValue);\n      validValue = Math.max(validValue, (_b = this.min) !== null && _b !== void 0 ? _b : validValue).toString();\n    }\n\n    return validValue;\n  }\n  /**\n   * Increments the value using the step value\n   *\n   * @public\n   */\n\n\n  stepUp() {\n    const value = parseFloat(this.value);\n    const stepUpValue = !isNaN(value) ? value + this.step : this.min > 0 ? this.min : this.max < 0 ? this.max : !this.min ? this.step : 0;\n    this.value = stepUpValue.toString();\n  }\n  /**\n   * Decrements the value using the step value\n   *\n   * @public\n   */\n\n\n  stepDown() {\n    const value = parseFloat(this.value);\n    const stepDownValue = !isNaN(value) ? value - this.step : this.min > 0 ? this.min : this.max < 0 ? this.max : !this.min ? 0 - this.step : 0;\n    this.value = stepDownValue.toString();\n  }\n  /**\n   * Sets up the initial state of the number field\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.proxy.setAttribute(\"type\", \"number\");\n    this.validate();\n    this.control.value = this.value;\n\n    if (this.autofocus) {\n      DOM.queueUpdate(() => {\n        this.focus();\n      });\n    }\n  }\n  /**\n   * Handles the internal control's `input` event\n   * @internal\n   */\n\n\n  handleTextInput() {\n    this.control.value = this.control.value.replace(/[^0-9\\-+e.]/g, \"\");\n    this.isUserInput = true;\n    this.value = this.control.value;\n  }\n  /**\n   * Change event handler for inner control.\n   * @remarks\n   * \"Change\" events are not `composable` so they will not\n   * permeate the shadow DOM boundary. This fn effectively proxies\n   * the change event, emitting a `change` event whenever the internal\n   * control emits a `change` event\n   * @internal\n   */\n\n\n  handleChange() {\n    this.$emit(\"change\");\n  }\n  /**\n   * Handles the internal control's `keydown` event\n   * @internal\n   */\n\n\n  handleKeyDown(e) {\n    const key = e.key;\n\n    switch (key) {\n      case keyArrowUp:\n        this.stepUp();\n        return false;\n\n      case keyArrowDown:\n        this.stepDown();\n        return false;\n    }\n\n    return true;\n  }\n  /**\n   * Handles populating the input field with a validated value when\n   *  leaving the input field.\n   * @internal\n   */\n\n\n  handleBlur() {\n    this.control.value = this.value;\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], NumberField.prototype, \"readOnly\", void 0);\n\n__decorate([attr({\n  mode: \"boolean\"\n})], NumberField.prototype, \"autofocus\", void 0);\n\n__decorate([attr({\n  attribute: \"hide-step\",\n  mode: \"boolean\"\n})], NumberField.prototype, \"hideStep\", void 0);\n\n__decorate([attr], NumberField.prototype, \"placeholder\", void 0);\n\n__decorate([attr], NumberField.prototype, \"list\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"maxlength\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"minlength\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"size\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"step\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"max\", void 0);\n\n__decorate([attr({\n  converter: nullableNumberConverter\n})], NumberField.prototype, \"min\", void 0);\n\n__decorate([observable], NumberField.prototype, \"defaultSlottedNodes\", void 0);\n\napplyMixins(NumberField, StartEnd, DelegatesARIATextbox);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/number-field/number-field.js"],"names":["__decorate","attr","DOM","nullableNumberConverter","observable","keyArrowDown","keyArrowUp","StartEnd","applyMixins","DelegatesARIATextbox","FormAssociatedNumberField","NumberField","constructor","arguments","hideStep","step","isUserInput","maxChanged","previous","next","_a","max","Math","min","undefined","value","getValidValue","minChanged","valueAsNumber","parseFloat","toString","valueChanged","control","$emit","_b","validValue","toPrecision","isNaN","stepUp","stepUpValue","stepDown","stepDownValue","connectedCallback","proxy","setAttribute","validate","autofocus","queueUpdate","focus","handleTextInput","replace","handleChange","handleKeyDown","e","key","handleBlur","attribute","mode","prototype","converter"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,uBAApB,EAA6CC,UAA7C,QAAgE,yBAAhE;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,+BAAzC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAN,SAA0BD,yBAA1B,CAAoD;AACvDE,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,KAAhB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,CAAZ;AACA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,KAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,UAAU,CAACC,QAAD,EAAWC,IAAX,EAAiB;AACvB,QAAIC,EAAJ;;AACA,SAAKC,GAAL,GAAWC,IAAI,CAACD,GAAL,CAASF,IAAT,EAAe,CAACC,EAAE,GAAG,KAAKG,GAAX,MAAoB,IAApB,IAA4BH,EAAE,KAAK,KAAK,CAAxC,GAA4CA,EAA5C,GAAiDD,IAAhE,CAAX;AACA,UAAMI,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS,KAAKA,GAAd,EAAmB,KAAKF,GAAxB,CAAZ;;AACA,QAAI,KAAKE,GAAL,KAAaC,SAAb,IAA0B,KAAKD,GAAL,KAAaA,GAA3C,EAAgD;AAC5C,WAAKA,GAAL,GAAWA,GAAX;AACH;;AACD,SAAKE,KAAL,GAAa,KAAKC,aAAL,CAAmB,KAAKD,KAAxB,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,UAAU,CAACT,QAAD,EAAWC,IAAX,EAAiB;AACvB,QAAIC,EAAJ;;AACA,SAAKG,GAAL,GAAWD,IAAI,CAACC,GAAL,CAASJ,IAAT,EAAe,CAACC,EAAE,GAAG,KAAKC,GAAX,MAAoB,IAApB,IAA4BD,EAAE,KAAK,KAAK,CAAxC,GAA4CA,EAA5C,GAAiDD,IAAhE,CAAX;AACA,UAAME,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,KAAKE,GAAd,EAAmB,KAAKF,GAAxB,CAAZ;;AACA,QAAI,KAAKA,GAAL,KAAaG,SAAb,IAA0B,KAAKH,GAAL,KAAaA,GAA3C,EAAgD;AAC5C,WAAKA,GAAL,GAAWA,GAAX;AACH;;AACD,SAAKI,KAAL,GAAa,KAAKC,aAAL,CAAmB,KAAKD,KAAxB,CAAb;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACqB,MAAbG,aAAa,GAAG;AAChB,WAAOC,UAAU,CAAC,MAAMJ,KAAP,CAAjB;AACH;;AACgB,MAAbG,aAAa,CAACT,IAAD,EAAO;AACpB,SAAKM,KAAL,GAAaN,IAAI,CAACW,QAAL,EAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACb,QAAD,EAAWC,IAAX,EAAiB;AACzB,SAAKM,KAAL,GAAa,KAAKC,aAAL,CAAmBP,IAAnB,CAAb;;AACA,QAAIA,IAAI,KAAK,KAAKM,KAAlB,EAAyB;AACrB;AACH;;AACD,QAAI,KAAKO,OAAL,IAAgB,CAAC,KAAKhB,WAA1B,EAAuC;AACnC,WAAKgB,OAAL,CAAaP,KAAb,GAAqB,KAAKA,KAA1B;AACH;;AACD,UAAMM,YAAN,CAAmBb,QAAnB,EAA6B,KAAKO,KAAlC;;AACA,QAAIP,QAAQ,KAAKM,SAAb,IAA0B,CAAC,KAAKR,WAApC,EAAiD;AAC7C,WAAKiB,KAAL,CAAW,OAAX;AACA,WAAKA,KAAL,CAAW,QAAX;AACH;;AACD,SAAKjB,WAAL,GAAmB,KAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,aAAa,CAACD,KAAD,EAAQ;AACjB,QAAIL,EAAJ,EAAQc,EAAR;;AACA,QAAIC,UAAU,GAAGN,UAAU,CAACA,UAAU,CAACJ,KAAD,CAAV,CAAkBW,WAAlB,CAA8B,EAA9B,CAAD,CAA3B;;AACA,QAAIC,KAAK,CAACF,UAAD,CAAT,EAAuB;AACnBA,MAAAA,UAAU,GAAG,EAAb;AACH,KAFD,MAGK;AACDA,MAAAA,UAAU,GAAGb,IAAI,CAACC,GAAL,CAASY,UAAT,EAAqB,CAACf,EAAE,GAAG,KAAKC,GAAX,MAAoB,IAApB,IAA4BD,EAAE,KAAK,KAAK,CAAxC,GAA4CA,EAA5C,GAAiDe,UAAtE,CAAb;AACAA,MAAAA,UAAU,GAAGb,IAAI,CAACD,GAAL,CAASc,UAAT,EAAqB,CAACD,EAAE,GAAG,KAAKX,GAAX,MAAoB,IAApB,IAA4BW,EAAE,KAAK,KAAK,CAAxC,GAA4CA,EAA5C,GAAiDC,UAAtE,EAAkFL,QAAlF,EAAb;AACH;;AACD,WAAOK,UAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,MAAM,GAAG;AACL,UAAMb,KAAK,GAAGI,UAAU,CAAC,KAAKJ,KAAN,CAAxB;AACA,UAAMc,WAAW,GAAG,CAACF,KAAK,CAACZ,KAAD,CAAN,GACdA,KAAK,GAAG,KAAKV,IADC,GAEd,KAAKQ,GAAL,GAAW,CAAX,GACI,KAAKA,GADT,GAEI,KAAKF,GAAL,GAAW,CAAX,GACI,KAAKA,GADT,GAEI,CAAC,KAAKE,GAAN,GACI,KAAKR,IADT,GAEI,CARlB;AASA,SAAKU,KAAL,GAAac,WAAW,CAACT,QAAZ,EAAb;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIU,EAAAA,QAAQ,GAAG;AACP,UAAMf,KAAK,GAAGI,UAAU,CAAC,KAAKJ,KAAN,CAAxB;AACA,UAAMgB,aAAa,GAAG,CAACJ,KAAK,CAACZ,KAAD,CAAN,GAChBA,KAAK,GAAG,KAAKV,IADG,GAEhB,KAAKQ,GAAL,GAAW,CAAX,GACI,KAAKA,GADT,GAEI,KAAKF,GAAL,GAAW,CAAX,GACI,KAAKA,GADT,GAEI,CAAC,KAAKE,GAAN,GACI,IAAI,KAAKR,IADb,GAEI,CARlB;AASA,SAAKU,KAAL,GAAagB,aAAa,CAACX,QAAd,EAAb;AACH;AACD;AACJ;AACA;AACA;;;AACIY,EAAAA,iBAAiB,GAAG;AAChB,UAAMA,iBAAN;AACA,SAAKC,KAAL,CAAWC,YAAX,CAAwB,MAAxB,EAAgC,QAAhC;AACA,SAAKC,QAAL;AACA,SAAKb,OAAL,CAAaP,KAAb,GAAqB,KAAKA,KAA1B;;AACA,QAAI,KAAKqB,SAAT,EAAoB;AAChB5C,MAAAA,GAAG,CAAC6C,WAAJ,CAAgB,MAAM;AAClB,aAAKC,KAAL;AACH,OAFD;AAGH;AACJ;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,eAAe,GAAG;AACd,SAAKjB,OAAL,CAAaP,KAAb,GAAqB,KAAKO,OAAL,CAAaP,KAAb,CAAmByB,OAAnB,CAA2B,cAA3B,EAA2C,EAA3C,CAArB;AACA,SAAKlC,WAAL,GAAmB,IAAnB;AACA,SAAKS,KAAL,GAAa,KAAKO,OAAL,CAAaP,KAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,YAAY,GAAG;AACX,SAAKlB,KAAL,CAAW,QAAX;AACH;AACD;AACJ;AACA;AACA;;;AACImB,EAAAA,aAAa,CAACC,CAAD,EAAI;AACb,UAAMC,GAAG,GAAGD,CAAC,CAACC,GAAd;;AACA,YAAQA,GAAR;AACI,WAAKhD,UAAL;AACI,aAAKgC,MAAL;AACA,eAAO,KAAP;;AACJ,WAAKjC,YAAL;AACI,aAAKmC,QAAL;AACA,eAAO,KAAP;AANR;;AAQA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIe,EAAAA,UAAU,GAAG;AACT,SAAKvB,OAAL,CAAaP,KAAb,GAAqB,KAAKA,KAA1B;AACH;;AA3MsD;;AA6M3DzB,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEuD,EAAAA,SAAS,EAAE,UAAb;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CAAD,CADG,CAAD,EAEP9C,WAAW,CAAC+C,SAFL,EAEgB,UAFhB,EAE4B,KAAK,CAFjC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEwD,EAAAA,IAAI,EAAE;AAAR,CAAD,CADG,CAAD,EAEP9C,WAAW,CAAC+C,SAFL,EAEgB,WAFhB,EAE6B,KAAK,CAFlC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAEuD,EAAAA,SAAS,EAAE,WAAb;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAAD,CADG,CAAD,EAEP9C,WAAW,CAAC+C,SAFL,EAEgB,UAFhB,EAE4B,KAAK,CAFjC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IADO,CAAD,EAEPU,WAAW,CAAC+C,SAFL,EAEgB,aAFhB,EAE+B,KAAK,CAFpC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IADO,CAAD,EAEPU,WAAW,CAAC+C,SAFL,EAEgB,MAFhB,EAEwB,KAAK,CAF7B,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,WAFhB,EAE6B,KAAK,CAFlC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,WAFhB,EAE6B,KAAK,CAFlC,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,MAFhB,EAEwB,KAAK,CAF7B,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,MAFhB,EAEwB,KAAK,CAF7B,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,KAFhB,EAEuB,KAAK,CAF5B,CAAV;;AAGA1D,UAAU,CAAC,CACPC,IAAI,CAAC;AAAE0D,EAAAA,SAAS,EAAExD;AAAb,CAAD,CADG,CAAD,EAEPQ,WAAW,CAAC+C,SAFL,EAEgB,KAFhB,EAEuB,KAAK,CAF5B,CAAV;;AAGA1D,UAAU,CAAC,CACPI,UADO,CAAD,EAEPO,WAAW,CAAC+C,SAFL,EAEgB,qBAFhB,EAEuC,KAAK,CAF5C,CAAV;;AAGAlD,WAAW,CAACG,WAAD,EAAcJ,QAAd,EAAwBE,oBAAxB,CAAX","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, DOM, nullableNumberConverter, observable, } from \"@microsoft/fast-element\";\nimport { keyArrowDown, keyArrowUp } from \"@microsoft/fast-web-utilities\";\nimport { StartEnd } from \"../patterns/index\";\nimport { applyMixins } from \"../utilities/index\";\nimport { DelegatesARIATextbox } from \"../text-field/index\";\nimport { FormAssociatedNumberField } from \"./number-field.form-associated\";\n/**\n * A Number Field Custom HTML Element.\n * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type=\"number\" /> element }.\n *\n * @public\n */\nexport class NumberField extends FormAssociatedNumberField {\n    constructor() {\n        super(...arguments);\n        /**\n         * When true, spin buttons will not be rendered\n         * @public\n         * @remarks\n         * HTML Attribute: autofocus\n         */\n        this.hideStep = false;\n        /**\n         * Amount to increment or decrement the value by\n         * @public\n         * @remarks\n         * HTMLAttribute: step\n         */\n        this.step = 1;\n        /**\n         * Flag to indicate that the value change is from the user input\n         * @internal\n         */\n        this.isUserInput = false;\n    }\n    /**\n     * Ensures that the max is greater than the min and that the value\n     *  is less than the max\n     * @param previous - the previous max value\n     * @param next - updated max value\n     *\n     * @internal\n     */\n    maxChanged(previous, next) {\n        var _a;\n        this.max = Math.max(next, (_a = this.min) !== null && _a !== void 0 ? _a : next);\n        const min = Math.min(this.min, this.max);\n        if (this.min !== undefined && this.min !== min) {\n            this.min = min;\n        }\n        this.value = this.getValidValue(this.value);\n    }\n    /**\n     * Ensures that the min is less than the max and that the value\n     *  is greater than the min\n     * @param previous - previous min value\n     * @param next - updated min value\n     *\n     * @internal\n     */\n    minChanged(previous, next) {\n        var _a;\n        this.min = Math.min(next, (_a = this.max) !== null && _a !== void 0 ? _a : next);\n        const max = Math.max(this.min, this.max);\n        if (this.max !== undefined && this.max !== max) {\n            this.max = max;\n        }\n        this.value = this.getValidValue(this.value);\n    }\n    /**\n     * The value property, typed as a number.\n     *\n     * @public\n     */\n    get valueAsNumber() {\n        return parseFloat(super.value);\n    }\n    set valueAsNumber(next) {\n        this.value = next.toString();\n    }\n    /**\n     * Validates that the value is a number between the min and max\n     * @param previous - previous stored value\n     * @param next - value being updated\n     * @param updateControl - should the text field be updated with value, defaults to true\n     * @internal\n     */\n    valueChanged(previous, next) {\n        this.value = this.getValidValue(next);\n        if (next !== this.value) {\n            return;\n        }\n        if (this.control && !this.isUserInput) {\n            this.control.value = this.value;\n        }\n        super.valueChanged(previous, this.value);\n        if (previous !== undefined && !this.isUserInput) {\n            this.$emit(\"input\");\n            this.$emit(\"change\");\n        }\n        this.isUserInput = false;\n    }\n    /**\n     * Sets the internal value to a valid number between the min and max properties\n     * @param value - user input\n     *\n     * @internal\n     */\n    getValidValue(value) {\n        var _a, _b;\n        let validValue = parseFloat(parseFloat(value).toPrecision(12));\n        if (isNaN(validValue)) {\n            validValue = \"\";\n        }\n        else {\n            validValue = Math.min(validValue, (_a = this.max) !== null && _a !== void 0 ? _a : validValue);\n            validValue = Math.max(validValue, (_b = this.min) !== null && _b !== void 0 ? _b : validValue).toString();\n        }\n        return validValue;\n    }\n    /**\n     * Increments the value using the step value\n     *\n     * @public\n     */\n    stepUp() {\n        const value = parseFloat(this.value);\n        const stepUpValue = !isNaN(value)\n            ? value + this.step\n            : this.min > 0\n                ? this.min\n                : this.max < 0\n                    ? this.max\n                    : !this.min\n                        ? this.step\n                        : 0;\n        this.value = stepUpValue.toString();\n    }\n    /**\n     * Decrements the value using the step value\n     *\n     * @public\n     */\n    stepDown() {\n        const value = parseFloat(this.value);\n        const stepDownValue = !isNaN(value)\n            ? value - this.step\n            : this.min > 0\n                ? this.min\n                : this.max < 0\n                    ? this.max\n                    : !this.min\n                        ? 0 - this.step\n                        : 0;\n        this.value = stepDownValue.toString();\n    }\n    /**\n     * Sets up the initial state of the number field\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.proxy.setAttribute(\"type\", \"number\");\n        this.validate();\n        this.control.value = this.value;\n        if (this.autofocus) {\n            DOM.queueUpdate(() => {\n                this.focus();\n            });\n        }\n    }\n    /**\n     * Handles the internal control's `input` event\n     * @internal\n     */\n    handleTextInput() {\n        this.control.value = this.control.value.replace(/[^0-9\\-+e.]/g, \"\");\n        this.isUserInput = true;\n        this.value = this.control.value;\n    }\n    /**\n     * Change event handler for inner control.\n     * @remarks\n     * \"Change\" events are not `composable` so they will not\n     * permeate the shadow DOM boundary. This fn effectively proxies\n     * the change event, emitting a `change` event whenever the internal\n     * control emits a `change` event\n     * @internal\n     */\n    handleChange() {\n        this.$emit(\"change\");\n    }\n    /**\n     * Handles the internal control's `keydown` event\n     * @internal\n     */\n    handleKeyDown(e) {\n        const key = e.key;\n        switch (key) {\n            case keyArrowUp:\n                this.stepUp();\n                return false;\n            case keyArrowDown:\n                this.stepDown();\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Handles populating the input field with a validated value when\n     *  leaving the input field.\n     * @internal\n     */\n    handleBlur() {\n        this.control.value = this.value;\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], NumberField.prototype, \"readOnly\", void 0);\n__decorate([\n    attr({ mode: \"boolean\" })\n], NumberField.prototype, \"autofocus\", void 0);\n__decorate([\n    attr({ attribute: \"hide-step\", mode: \"boolean\" })\n], NumberField.prototype, \"hideStep\", void 0);\n__decorate([\n    attr\n], NumberField.prototype, \"placeholder\", void 0);\n__decorate([\n    attr\n], NumberField.prototype, \"list\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"maxlength\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"minlength\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"size\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"step\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"max\", void 0);\n__decorate([\n    attr({ converter: nullableNumberConverter })\n], NumberField.prototype, \"min\", void 0);\n__decorate([\n    observable\n], NumberField.prototype, \"defaultSlottedNodes\", void 0);\napplyMixins(NumberField, StartEnd, DelegatesARIATextbox);\n"]},"metadata":{},"sourceType":"module"}