{"ast":null,"code":"/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { inject, computed, onBeforeMount } from 'vue';\nimport { merge } from 'lodash-es';\nimport { useSsrAdapter } from '@css-render/vue3-ssr';\nimport globalStyle from '../_styles/global/index.cssr';\nimport { configProviderInjectionKey } from '../config-provider/src/context';\nimport { cssrAnchorMetaName } from './common';\nexport function createTheme(theme) {\n  return theme;\n}\n\nfunction useTheme(resolveId, mountId, style, defaultTheme, props, clsPrefixRef) {\n  const ssrAdapter = useSsrAdapter();\n\n  if (style) {\n    const mountStyle = () => {\n      const clsPrefix = clsPrefixRef === null || clsPrefixRef === void 0 ? void 0 : clsPrefixRef.value;\n      style.mount({\n        id: clsPrefix === undefined ? mountId : clsPrefix + mountId,\n        head: true,\n        props: {\n          bPrefix: clsPrefix ? `.${clsPrefix}-` : undefined\n        },\n        anchorMetaName: cssrAnchorMetaName,\n        ssr: ssrAdapter\n      });\n      globalStyle.mount({\n        id: 'n-global',\n        head: true,\n        anchorMetaName: cssrAnchorMetaName,\n        ssr: ssrAdapter\n      });\n    };\n\n    if (ssrAdapter) {\n      mountStyle();\n    } else {\n      onBeforeMount(mountStyle);\n    }\n  }\n\n  const NConfigProvider = inject(configProviderInjectionKey, null);\n  const mergedThemeRef = computed(() => {\n    var _a; // keep props to make theme overrideable\n\n\n    const {\n      theme: {\n        common: selfCommon,\n        self,\n        peers = {}\n      } = {},\n      themeOverrides: selfOverrides = {},\n      builtinThemeOverrides: builtinOverrides = {}\n    } = props;\n    const {\n      common: selfCommonOverrides,\n      peers: peersOverrides\n    } = selfOverrides;\n    const {\n      common: globalCommon = undefined,\n      [resolveId]: {\n        common: globalSelfCommon = undefined,\n        self: globalSelf = undefined,\n        peers: globalPeers = {}\n      } = {}\n    } = (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeRef.value) || {};\n    const {\n      common: globalCommonOverrides = undefined,\n      [resolveId]: globalSelfOverrides = {}\n    } = (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeOverridesRef.value) || {};\n    const {\n      common: globalSelfCommonOverrides,\n      peers: globalPeersOverrides = {}\n    } = globalSelfOverrides;\n    const mergedCommon = merge({}, selfCommon || globalSelfCommon || globalCommon || defaultTheme.common, globalCommonOverrides, globalSelfCommonOverrides, selfCommonOverrides);\n    const mergedSelf = merge( // {}, executed every time, no need for empty obj\n    (_a = self || globalSelf || defaultTheme.self) === null || _a === void 0 ? void 0 : _a(mergedCommon), builtinOverrides, globalSelfOverrides, selfOverrides);\n    return {\n      common: mergedCommon,\n      self: mergedSelf,\n      peers: merge({}, defaultTheme.peers, globalPeers, peers),\n      peerOverrides: merge({}, globalPeersOverrides, peersOverrides)\n    };\n  });\n  return mergedThemeRef;\n}\n\nuseTheme.props = {\n  theme: Object,\n  themeOverrides: Object,\n  builtinThemeOverrides: Object\n};\n/**\n * props.theme (Theme):\n * {\n *   common: CommonThemeVars,\n *   self(): ThemeVars,\n *   peers: { Component: Theme }\n * }\n * provider.theme:\n * {\n *   common: CommonThemeVars,\n *   Button: Theme\n *   ...\n * }\n * defaultTheme:\n * {\n *   common: CommonThemeVars,\n *   self(): ThemeVars,\n *   peers: { Component: Theme }\n * }\n *\n * props.themeOverrides (ThemeOverrides):\n * {\n *   common: CommonThemeVars,\n *   peers: { Component: ThemeOverrides },\n *   ...ThemeVars\n * }\n * provider.themeOverrides:\n * {\n *   common: CommonThemeVars,\n *   Component: ThemeOverrides\n *   ...\n * }\n *\n * mergedTheme:\n * {\n *   common: CommonThemeVars,\n *   self: ThemeVars,\n *   peers: { Component: Theme },\n *   overrides: { Component: ThemeOverrides }\n * }\n */\n\nexport default useTheme;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_mixins/use-theme.js"],"names":["inject","computed","onBeforeMount","merge","useSsrAdapter","globalStyle","configProviderInjectionKey","cssrAnchorMetaName","createTheme","theme","useTheme","resolveId","mountId","style","defaultTheme","props","clsPrefixRef","ssrAdapter","mountStyle","clsPrefix","value","mount","id","undefined","head","bPrefix","anchorMetaName","ssr","NConfigProvider","mergedThemeRef","_a","common","selfCommon","self","peers","themeOverrides","selfOverrides","builtinThemeOverrides","builtinOverrides","selfCommonOverrides","peersOverrides","globalCommon","globalSelfCommon","globalSelf","globalPeers","globalCommonOverrides","globalSelfOverrides","mergedThemeOverridesRef","globalSelfCommonOverrides","globalPeersOverrides","mergedCommon","mergedSelf","peerOverrides","Object"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { inject, computed, onBeforeMount } from 'vue';\nimport { merge } from 'lodash-es';\nimport { useSsrAdapter } from '@css-render/vue3-ssr';\nimport globalStyle from '../_styles/global/index.cssr';\nimport { configProviderInjectionKey } from '../config-provider/src/context';\nimport { cssrAnchorMetaName } from './common';\nexport function createTheme(theme) {\n    return theme;\n}\nfunction useTheme(resolveId, mountId, style, defaultTheme, props, clsPrefixRef) {\n    const ssrAdapter = useSsrAdapter();\n    if (style) {\n        const mountStyle = () => {\n            const clsPrefix = clsPrefixRef === null || clsPrefixRef === void 0 ? void 0 : clsPrefixRef.value;\n            style.mount({\n                id: clsPrefix === undefined ? mountId : clsPrefix + mountId,\n                head: true,\n                props: {\n                    bPrefix: clsPrefix ? `.${clsPrefix}-` : undefined\n                },\n                anchorMetaName: cssrAnchorMetaName,\n                ssr: ssrAdapter\n            });\n            globalStyle.mount({\n                id: 'n-global',\n                head: true,\n                anchorMetaName: cssrAnchorMetaName,\n                ssr: ssrAdapter\n            });\n        };\n        if (ssrAdapter) {\n            mountStyle();\n        }\n        else {\n            onBeforeMount(mountStyle);\n        }\n    }\n    const NConfigProvider = inject(configProviderInjectionKey, null);\n    const mergedThemeRef = computed(() => {\n        var _a;\n        // keep props to make theme overrideable\n        const { theme: { common: selfCommon, self, peers = {} } = {}, themeOverrides: selfOverrides = {}, builtinThemeOverrides: builtinOverrides = {} } = props;\n        const { common: selfCommonOverrides, peers: peersOverrides } = selfOverrides;\n        const { common: globalCommon = undefined, [resolveId]: { common: globalSelfCommon = undefined, self: globalSelf = undefined, peers: globalPeers = {} } = {} } = (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeRef.value) || {};\n        const { common: globalCommonOverrides = undefined, [resolveId]: globalSelfOverrides = {} } = (NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedThemeOverridesRef.value) || {};\n        const { common: globalSelfCommonOverrides, peers: globalPeersOverrides = {} } = globalSelfOverrides;\n        const mergedCommon = merge({}, selfCommon || globalSelfCommon || globalCommon || defaultTheme.common, globalCommonOverrides, globalSelfCommonOverrides, selfCommonOverrides);\n        const mergedSelf = merge(\n        // {}, executed every time, no need for empty obj\n        (_a = (self || globalSelf || defaultTheme.self)) === null || _a === void 0 ? void 0 : _a(mergedCommon), builtinOverrides, globalSelfOverrides, selfOverrides);\n        return {\n            common: mergedCommon,\n            self: mergedSelf,\n            peers: merge({}, defaultTheme.peers, globalPeers, peers),\n            peerOverrides: merge({}, globalPeersOverrides, peersOverrides)\n        };\n    });\n    return mergedThemeRef;\n}\nuseTheme.props = {\n    theme: Object,\n    themeOverrides: Object,\n    builtinThemeOverrides: Object\n};\n/**\n * props.theme (Theme):\n * {\n *   common: CommonThemeVars,\n *   self(): ThemeVars,\n *   peers: { Component: Theme }\n * }\n * provider.theme:\n * {\n *   common: CommonThemeVars,\n *   Button: Theme\n *   ...\n * }\n * defaultTheme:\n * {\n *   common: CommonThemeVars,\n *   self(): ThemeVars,\n *   peers: { Component: Theme }\n * }\n *\n * props.themeOverrides (ThemeOverrides):\n * {\n *   common: CommonThemeVars,\n *   peers: { Component: ThemeOverrides },\n *   ...ThemeVars\n * }\n * provider.themeOverrides:\n * {\n *   common: CommonThemeVars,\n *   Component: ThemeOverrides\n *   ...\n * }\n *\n * mergedTheme:\n * {\n *   common: CommonThemeVars,\n *   self: ThemeVars,\n *   peers: { Component: Theme },\n *   overrides: { Component: ThemeOverrides }\n * }\n */\nexport default useTheme;\n"]},"metadata":{},"sourceType":"module"}