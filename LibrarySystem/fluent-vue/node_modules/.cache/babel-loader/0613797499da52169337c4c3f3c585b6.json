{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { ArrowKeys, Direction, keyArrowDown, keyArrowLeft, keyArrowRight, keyArrowUp, keyEnter, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * An Radio Group Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.\n *\n * @public\n */\n\nexport class RadioGroup extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * The orientation of the group\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: orientation\n     */\n\n    this.orientation = Orientation.horizontal;\n\n    this.radioChangeHandler = e => {\n      const changedRadio = e.target;\n\n      if (changedRadio.checked) {\n        this.slottedRadioButtons.forEach(radio => {\n          if (radio !== changedRadio) {\n            radio.checked = false;\n\n            if (!this.isInsideFoundationToolbar) {\n              radio.setAttribute(\"tabindex\", \"-1\");\n            }\n          }\n        });\n        this.selectedRadio = changedRadio;\n        this.value = changedRadio.value;\n        changedRadio.setAttribute(\"tabindex\", \"0\");\n        this.focusedRadio = changedRadio;\n      }\n\n      e.stopPropagation();\n    };\n\n    this.moveToRadioByIndex = (group, index) => {\n      const radio = group[index];\n\n      if (!this.isInsideToolbar) {\n        radio.setAttribute(\"tabindex\", \"0\");\n\n        if (radio.readOnly) {\n          this.slottedRadioButtons.forEach(nextRadio => {\n            if (nextRadio !== radio) {\n              nextRadio.setAttribute(\"tabindex\", \"-1\");\n            }\n          });\n        } else {\n          radio.checked = true;\n          this.selectedRadio = radio;\n        }\n      }\n\n      this.focusedRadio = radio;\n      radio.focus();\n    };\n\n    this.moveRightOffGroup = () => {\n      var _a;\n\n      (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n    };\n\n    this.moveLeftOffGroup = () => {\n      var _a;\n\n      (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n    };\n    /**\n     * @internal\n     */\n\n\n    this.focusOutHandler = e => {\n      const group = this.slottedRadioButtons;\n      const radio = e.target;\n      const index = radio !== null ? group.indexOf(radio) : 0;\n      const focusedIndex = this.focusedRadio ? group.indexOf(this.focusedRadio) : -1;\n\n      if (focusedIndex === 0 && index === focusedIndex || focusedIndex === group.length - 1 && focusedIndex === index) {\n        if (!this.selectedRadio) {\n          this.focusedRadio = group[0];\n          this.focusedRadio.setAttribute(\"tabindex\", \"0\");\n          group.forEach(nextRadio => {\n            if (nextRadio !== this.focusedRadio) {\n              nextRadio.setAttribute(\"tabindex\", \"-1\");\n            }\n          });\n        } else {\n          this.focusedRadio = this.selectedRadio;\n\n          if (!this.isInsideFoundationToolbar) {\n            this.selectedRadio.setAttribute(\"tabindex\", \"0\");\n            group.forEach(nextRadio => {\n              if (nextRadio !== this.selectedRadio) {\n                nextRadio.setAttribute(\"tabindex\", \"-1\");\n              }\n            });\n          }\n        }\n      }\n\n      return true;\n    };\n    /**\n     * @internal\n     */\n\n\n    this.clickHandler = e => {\n      const radio = e.target;\n\n      if (radio) {\n        const group = this.slottedRadioButtons;\n\n        if (radio.checked || group.indexOf(radio) === 0) {\n          radio.setAttribute(\"tabindex\", \"0\");\n          this.selectedRadio = radio;\n        } else {\n          radio.setAttribute(\"tabindex\", \"-1\");\n          this.selectedRadio = null;\n        }\n\n        this.focusedRadio = radio;\n      }\n\n      e.preventDefault();\n    };\n\n    this.shouldMoveOffGroupToTheRight = (index, group, key) => {\n      return index === group.length && this.isInsideToolbar && key === keyArrowRight;\n    };\n\n    this.shouldMoveOffGroupToTheLeft = (group, key) => {\n      const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n      return index < 0 && this.isInsideToolbar && key === keyArrowLeft;\n    };\n\n    this.checkFocusedRadio = () => {\n      if (this.focusedRadio !== null && !this.focusedRadio.readOnly && !this.focusedRadio.checked) {\n        this.focusedRadio.checked = true;\n        this.focusedRadio.setAttribute(\"tabindex\", \"0\");\n        this.focusedRadio.focus();\n        this.selectedRadio = this.focusedRadio;\n      }\n    };\n\n    this.moveRight = e => {\n      const group = this.slottedRadioButtons;\n      let index = 0;\n      index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;\n\n      if (this.shouldMoveOffGroupToTheRight(index, group, e.key)) {\n        this.moveRightOffGroup();\n        return;\n      } else if (index === group.length) {\n        index = 0;\n      }\n      /* looping to get to next radio that is not disabled */\n\n      /* matching native radio/radiogroup which does not select an item if there is only 1 in the group */\n\n\n      while (index < group.length && group.length > 1) {\n        if (!group[index].disabled) {\n          this.moveToRadioByIndex(group, index);\n          break;\n        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n          break;\n        } else if (index + 1 >= group.length) {\n          if (this.isInsideToolbar) {\n            break;\n          } else {\n            index = 0;\n          }\n        } else {\n          index += 1;\n        }\n      }\n    };\n\n    this.moveLeft = e => {\n      const group = this.slottedRadioButtons;\n      let index = 0;\n      index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n      index = index < 0 ? group.length - 1 : index;\n\n      if (this.shouldMoveOffGroupToTheLeft(group, e.key)) {\n        this.moveLeftOffGroup();\n        return;\n      }\n      /* looping to get to next radio that is not disabled */\n\n\n      while (index >= 0 && group.length > 1) {\n        if (!group[index].disabled) {\n          this.moveToRadioByIndex(group, index);\n          break;\n        } else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n          break;\n        } else if (index - 1 < 0) {\n          index = group.length - 1;\n        } else {\n          index -= 1;\n        }\n      }\n    };\n    /**\n     * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar\n     * navigation is different when there is an ancestor with role='toolbar'\n     *\n     * @internal\n     */\n\n\n    this.keydownHandler = e => {\n      const key = e.key;\n\n      if (key in ArrowKeys && this.isInsideFoundationToolbar) {\n        return true;\n      }\n\n      switch (key) {\n        case keyEnter:\n          {\n            this.checkFocusedRadio();\n            break;\n          }\n\n        case keyArrowRight:\n        case keyArrowDown:\n          {\n            if (this.direction === Direction.ltr) {\n              this.moveRight(e);\n            } else {\n              this.moveLeft(e);\n            }\n\n            break;\n          }\n\n        case keyArrowLeft:\n        case keyArrowUp:\n          {\n            if (this.direction === Direction.ltr) {\n              this.moveLeft(e);\n            } else {\n              this.moveRight(e);\n            }\n\n            break;\n          }\n\n        default:\n          {\n            return true;\n          }\n      }\n    };\n  }\n\n  readOnlyChanged() {\n    if (this.slottedRadioButtons !== undefined) {\n      this.slottedRadioButtons.forEach(radio => {\n        if (this.readOnly) {\n          radio.readOnly = true;\n        } else {\n          radio.readOnly = false;\n        }\n      });\n    }\n  }\n\n  disabledChanged() {\n    if (this.slottedRadioButtons !== undefined) {\n      this.slottedRadioButtons.forEach(radio => {\n        if (this.disabled) {\n          radio.disabled = true;\n        } else {\n          radio.disabled = false;\n        }\n      });\n    }\n  }\n\n  nameChanged() {\n    if (this.slottedRadioButtons) {\n      this.slottedRadioButtons.forEach(radio => {\n        radio.setAttribute(\"name\", this.name);\n      });\n    }\n  }\n\n  valueChanged() {\n    if (this.slottedRadioButtons) {\n      this.slottedRadioButtons.forEach(radio => {\n        if (radio.getAttribute(\"value\") === this.value) {\n          radio.checked = true;\n          this.selectedRadio = radio;\n        }\n      });\n    }\n\n    this.$emit(\"change\");\n  }\n\n  slottedRadioButtonsChanged(oldValue, newValue) {\n    if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {\n      this.setupRadioButtons();\n    }\n  }\n\n  get parentToolbar() {\n    return this.closest('[role=\"toolbar\"]');\n  }\n\n  get isInsideToolbar() {\n    var _a;\n\n    return (_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false;\n  }\n\n  get isInsideFoundationToolbar() {\n    var _a;\n\n    return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a[\"$fastController\"]);\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.direction = getDirection(this);\n    this.setupRadioButtons();\n  }\n\n  disconnectedCallback() {\n    this.slottedRadioButtons.forEach(radio => {\n      radio.removeEventListener(\"change\", this.radioChangeHandler);\n    });\n  }\n\n  setupRadioButtons() {\n    const checkedRadios = this.slottedRadioButtons.filter(radio => {\n      return radio.hasAttribute(\"checked\");\n    });\n    const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;\n\n    if (numberOfCheckedRadios > 1) {\n      const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n      lastCheckedRadio.checked = true;\n    }\n\n    let foundMatchingVal = false;\n    this.slottedRadioButtons.forEach(radio => {\n      if (this.name !== undefined) {\n        radio.setAttribute(\"name\", this.name);\n      }\n\n      if (this.disabled) {\n        radio.disabled = true;\n      }\n\n      if (this.readOnly) {\n        radio.readOnly = true;\n      }\n\n      if (this.value && this.value === radio.value) {\n        this.selectedRadio = radio;\n        this.focusedRadio = radio;\n        radio.checked = true;\n        radio.setAttribute(\"tabindex\", \"0\");\n        foundMatchingVal = true;\n      } else {\n        if (!this.isInsideFoundationToolbar) {\n          radio.setAttribute(\"tabindex\", \"-1\");\n        }\n\n        radio.checked = false;\n      }\n\n      radio.addEventListener(\"change\", this.radioChangeHandler);\n    });\n\n    if (this.value === undefined && this.slottedRadioButtons.length > 0) {\n      const checkedRadios = this.slottedRadioButtons.filter(radio => {\n        return radio.hasAttribute(\"checked\");\n      });\n      const numberOfCheckedRadios = checkedRadios !== null ? checkedRadios.length : 0;\n\n      if (numberOfCheckedRadios > 0 && !foundMatchingVal) {\n        const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n        lastCheckedRadio.checked = true;\n        this.focusedRadio = lastCheckedRadio;\n        lastCheckedRadio.setAttribute(\"tabindex\", \"0\");\n      } else {\n        this.slottedRadioButtons[0].setAttribute(\"tabindex\", \"0\");\n        this.focusedRadio = this.slottedRadioButtons[0];\n      }\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], RadioGroup.prototype, \"readOnly\", void 0);\n\n__decorate([attr({\n  attribute: \"disabled\",\n  mode: \"boolean\"\n})], RadioGroup.prototype, \"disabled\", void 0);\n\n__decorate([attr], RadioGroup.prototype, \"name\", void 0);\n\n__decorate([attr], RadioGroup.prototype, \"value\", void 0);\n\n__decorate([attr], RadioGroup.prototype, \"orientation\", void 0);\n\n__decorate([observable], RadioGroup.prototype, \"childItems\", void 0);\n\n__decorate([observable], RadioGroup.prototype, \"slottedRadioButtons\", void 0);","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/radio-group/radio-group.js"],"names":["__decorate","attr","observable","ArrowKeys","Direction","keyArrowDown","keyArrowLeft","keyArrowRight","keyArrowUp","keyEnter","Orientation","getDirection","FoundationElement","RadioGroup","constructor","arguments","orientation","horizontal","radioChangeHandler","e","changedRadio","target","checked","slottedRadioButtons","forEach","radio","isInsideFoundationToolbar","setAttribute","selectedRadio","value","focusedRadio","stopPropagation","moveToRadioByIndex","group","index","isInsideToolbar","readOnly","nextRadio","focus","moveRightOffGroup","_a","nextElementSibling","moveLeftOffGroup","previousElementSibling","focusOutHandler","indexOf","focusedIndex","length","clickHandler","preventDefault","shouldMoveOffGroupToTheRight","key","shouldMoveOffGroupToTheLeft","checkFocusedRadio","moveRight","disabled","moveLeft","keydownHandler","direction","ltr","readOnlyChanged","undefined","disabledChanged","nameChanged","name","valueChanged","getAttribute","$emit","slottedRadioButtonsChanged","oldValue","newValue","setupRadioButtons","parentToolbar","closest","connectedCallback","disconnectedCallback","removeEventListener","checkedRadios","filter","hasAttribute","numberOfCheckedRadios","lastCheckedRadio","foundMatchingVal","addEventListener","attribute","mode","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { ArrowKeys, Direction, keyArrowDown, keyArrowLeft, keyArrowRight, keyArrowUp, keyEnter, Orientation, } from \"@microsoft/fast-web-utilities\";\nimport { getDirection } from \"../utilities\";\nimport { FoundationElement } from \"../foundation-element\";\n/**\n * An Radio Group Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.\n *\n * @public\n */\nexport class RadioGroup extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The orientation of the group\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: orientation\n         */\n        this.orientation = Orientation.horizontal;\n        this.radioChangeHandler = (e) => {\n            const changedRadio = e.target;\n            if (changedRadio.checked) {\n                this.slottedRadioButtons.forEach((radio) => {\n                    if (radio !== changedRadio) {\n                        radio.checked = false;\n                        if (!this.isInsideFoundationToolbar) {\n                            radio.setAttribute(\"tabindex\", \"-1\");\n                        }\n                    }\n                });\n                this.selectedRadio = changedRadio;\n                this.value = changedRadio.value;\n                changedRadio.setAttribute(\"tabindex\", \"0\");\n                this.focusedRadio = changedRadio;\n            }\n            e.stopPropagation();\n        };\n        this.moveToRadioByIndex = (group, index) => {\n            const radio = group[index];\n            if (!this.isInsideToolbar) {\n                radio.setAttribute(\"tabindex\", \"0\");\n                if (radio.readOnly) {\n                    this.slottedRadioButtons.forEach((nextRadio) => {\n                        if (nextRadio !== radio) {\n                            nextRadio.setAttribute(\"tabindex\", \"-1\");\n                        }\n                    });\n                }\n                else {\n                    radio.checked = true;\n                    this.selectedRadio = radio;\n                }\n            }\n            this.focusedRadio = radio;\n            radio.focus();\n        };\n        this.moveRightOffGroup = () => {\n            var _a;\n            (_a = this.nextElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n        };\n        this.moveLeftOffGroup = () => {\n            var _a;\n            (_a = this.previousElementSibling) === null || _a === void 0 ? void 0 : _a.focus();\n        };\n        /**\n         * @internal\n         */\n        this.focusOutHandler = (e) => {\n            const group = this.slottedRadioButtons;\n            const radio = e.target;\n            const index = radio !== null ? group.indexOf(radio) : 0;\n            const focusedIndex = this.focusedRadio\n                ? group.indexOf(this.focusedRadio)\n                : -1;\n            if ((focusedIndex === 0 && index === focusedIndex) ||\n                (focusedIndex === group.length - 1 && focusedIndex === index)) {\n                if (!this.selectedRadio) {\n                    this.focusedRadio = group[0];\n                    this.focusedRadio.setAttribute(\"tabindex\", \"0\");\n                    group.forEach((nextRadio) => {\n                        if (nextRadio !== this.focusedRadio) {\n                            nextRadio.setAttribute(\"tabindex\", \"-1\");\n                        }\n                    });\n                }\n                else {\n                    this.focusedRadio = this.selectedRadio;\n                    if (!this.isInsideFoundationToolbar) {\n                        this.selectedRadio.setAttribute(\"tabindex\", \"0\");\n                        group.forEach((nextRadio) => {\n                            if (nextRadio !== this.selectedRadio) {\n                                nextRadio.setAttribute(\"tabindex\", \"-1\");\n                            }\n                        });\n                    }\n                }\n            }\n            return true;\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            const radio = e.target;\n            if (radio) {\n                const group = this.slottedRadioButtons;\n                if (radio.checked || group.indexOf(radio) === 0) {\n                    radio.setAttribute(\"tabindex\", \"0\");\n                    this.selectedRadio = radio;\n                }\n                else {\n                    radio.setAttribute(\"tabindex\", \"-1\");\n                    this.selectedRadio = null;\n                }\n                this.focusedRadio = radio;\n            }\n            e.preventDefault();\n        };\n        this.shouldMoveOffGroupToTheRight = (index, group, key) => {\n            return index === group.length && this.isInsideToolbar && key === keyArrowRight;\n        };\n        this.shouldMoveOffGroupToTheLeft = (group, key) => {\n            const index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n            return index < 0 && this.isInsideToolbar && key === keyArrowLeft;\n        };\n        this.checkFocusedRadio = () => {\n            if (this.focusedRadio !== null &&\n                !this.focusedRadio.readOnly &&\n                !this.focusedRadio.checked) {\n                this.focusedRadio.checked = true;\n                this.focusedRadio.setAttribute(\"tabindex\", \"0\");\n                this.focusedRadio.focus();\n                this.selectedRadio = this.focusedRadio;\n            }\n        };\n        this.moveRight = (e) => {\n            const group = this.slottedRadioButtons;\n            let index = 0;\n            index = this.focusedRadio ? group.indexOf(this.focusedRadio) + 1 : 1;\n            if (this.shouldMoveOffGroupToTheRight(index, group, e.key)) {\n                this.moveRightOffGroup();\n                return;\n            }\n            else if (index === group.length) {\n                index = 0;\n            }\n            /* looping to get to next radio that is not disabled */\n            /* matching native radio/radiogroup which does not select an item if there is only 1 in the group */\n            while (index < group.length && group.length > 1) {\n                if (!group[index].disabled) {\n                    this.moveToRadioByIndex(group, index);\n                    break;\n                }\n                else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n                    break;\n                }\n                else if (index + 1 >= group.length) {\n                    if (this.isInsideToolbar) {\n                        break;\n                    }\n                    else {\n                        index = 0;\n                    }\n                }\n                else {\n                    index += 1;\n                }\n            }\n        };\n        this.moveLeft = (e) => {\n            const group = this.slottedRadioButtons;\n            let index = 0;\n            index = this.focusedRadio ? group.indexOf(this.focusedRadio) - 1 : 0;\n            index = index < 0 ? group.length - 1 : index;\n            if (this.shouldMoveOffGroupToTheLeft(group, e.key)) {\n                this.moveLeftOffGroup();\n                return;\n            }\n            /* looping to get to next radio that is not disabled */\n            while (index >= 0 && group.length > 1) {\n                if (!group[index].disabled) {\n                    this.moveToRadioByIndex(group, index);\n                    break;\n                }\n                else if (this.focusedRadio && index === group.indexOf(this.focusedRadio)) {\n                    break;\n                }\n                else if (index - 1 < 0) {\n                    index = group.length - 1;\n                }\n                else {\n                    index -= 1;\n                }\n            }\n        };\n        /**\n         * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar\n         * navigation is different when there is an ancestor with role='toolbar'\n         *\n         * @internal\n         */\n        this.keydownHandler = (e) => {\n            const key = e.key;\n            if (key in ArrowKeys && this.isInsideFoundationToolbar) {\n                return true;\n            }\n            switch (key) {\n                case keyEnter: {\n                    this.checkFocusedRadio();\n                    break;\n                }\n                case keyArrowRight:\n                case keyArrowDown: {\n                    if (this.direction === Direction.ltr) {\n                        this.moveRight(e);\n                    }\n                    else {\n                        this.moveLeft(e);\n                    }\n                    break;\n                }\n                case keyArrowLeft:\n                case keyArrowUp: {\n                    if (this.direction === Direction.ltr) {\n                        this.moveLeft(e);\n                    }\n                    else {\n                        this.moveRight(e);\n                    }\n                    break;\n                }\n                default: {\n                    return true;\n                }\n            }\n        };\n    }\n    readOnlyChanged() {\n        if (this.slottedRadioButtons !== undefined) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (this.readOnly) {\n                    radio.readOnly = true;\n                }\n                else {\n                    radio.readOnly = false;\n                }\n            });\n        }\n    }\n    disabledChanged() {\n        if (this.slottedRadioButtons !== undefined) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (this.disabled) {\n                    radio.disabled = true;\n                }\n                else {\n                    radio.disabled = false;\n                }\n            });\n        }\n    }\n    nameChanged() {\n        if (this.slottedRadioButtons) {\n            this.slottedRadioButtons.forEach((radio) => {\n                radio.setAttribute(\"name\", this.name);\n            });\n        }\n    }\n    valueChanged() {\n        if (this.slottedRadioButtons) {\n            this.slottedRadioButtons.forEach((radio) => {\n                if (radio.getAttribute(\"value\") === this.value) {\n                    radio.checked = true;\n                    this.selectedRadio = radio;\n                }\n            });\n        }\n        this.$emit(\"change\");\n    }\n    slottedRadioButtonsChanged(oldValue, newValue) {\n        if (this.slottedRadioButtons && this.slottedRadioButtons.length > 0) {\n            this.setupRadioButtons();\n        }\n    }\n    get parentToolbar() {\n        return this.closest('[role=\"toolbar\"]');\n    }\n    get isInsideToolbar() {\n        var _a;\n        return ((_a = this.parentToolbar) !== null && _a !== void 0 ? _a : false);\n    }\n    get isInsideFoundationToolbar() {\n        var _a;\n        return !!((_a = this.parentToolbar) === null || _a === void 0 ? void 0 : _a[\"$fastController\"]);\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.direction = getDirection(this);\n        this.setupRadioButtons();\n    }\n    disconnectedCallback() {\n        this.slottedRadioButtons.forEach((radio) => {\n            radio.removeEventListener(\"change\", this.radioChangeHandler);\n        });\n    }\n    setupRadioButtons() {\n        const checkedRadios = this.slottedRadioButtons.filter((radio) => {\n            return radio.hasAttribute(\"checked\");\n        });\n        const numberOfCheckedRadios = checkedRadios ? checkedRadios.length : 0;\n        if (numberOfCheckedRadios > 1) {\n            const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n            lastCheckedRadio.checked = true;\n        }\n        let foundMatchingVal = false;\n        this.slottedRadioButtons.forEach((radio) => {\n            if (this.name !== undefined) {\n                radio.setAttribute(\"name\", this.name);\n            }\n            if (this.disabled) {\n                radio.disabled = true;\n            }\n            if (this.readOnly) {\n                radio.readOnly = true;\n            }\n            if (this.value && this.value === radio.value) {\n                this.selectedRadio = radio;\n                this.focusedRadio = radio;\n                radio.checked = true;\n                radio.setAttribute(\"tabindex\", \"0\");\n                foundMatchingVal = true;\n            }\n            else {\n                if (!this.isInsideFoundationToolbar) {\n                    radio.setAttribute(\"tabindex\", \"-1\");\n                }\n                radio.checked = false;\n            }\n            radio.addEventListener(\"change\", this.radioChangeHandler);\n        });\n        if (this.value === undefined && this.slottedRadioButtons.length > 0) {\n            const checkedRadios = this.slottedRadioButtons.filter((radio) => {\n                return radio.hasAttribute(\"checked\");\n            });\n            const numberOfCheckedRadios = checkedRadios !== null ? checkedRadios.length : 0;\n            if (numberOfCheckedRadios > 0 && !foundMatchingVal) {\n                const lastCheckedRadio = checkedRadios[numberOfCheckedRadios - 1];\n                lastCheckedRadio.checked = true;\n                this.focusedRadio = lastCheckedRadio;\n                lastCheckedRadio.setAttribute(\"tabindex\", \"0\");\n            }\n            else {\n                this.slottedRadioButtons[0].setAttribute(\"tabindex\", \"0\");\n                this.focusedRadio = this.slottedRadioButtons[0];\n            }\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], RadioGroup.prototype, \"readOnly\", void 0);\n__decorate([\n    attr({ attribute: \"disabled\", mode: \"boolean\" })\n], RadioGroup.prototype, \"disabled\", void 0);\n__decorate([\n    attr\n], RadioGroup.prototype, \"name\", void 0);\n__decorate([\n    attr\n], RadioGroup.prototype, \"value\", void 0);\n__decorate([\n    attr\n], RadioGroup.prototype, \"orientation\", void 0);\n__decorate([\n    observable\n], RadioGroup.prototype, \"childItems\", void 0);\n__decorate([\n    observable\n], RadioGroup.prototype, \"slottedRadioButtons\", void 0);\n"]},"metadata":{},"sourceType":"module"}