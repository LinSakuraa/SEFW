{"ast":null,"code":"import { DOM } from \"../dom\";\nimport { calcSplices, newSplice, projectArraySplices } from \"./array-change-records\";\nimport { SubscriberSet } from \"./notifier\";\nimport { Observable } from \"./observable\";\nlet arrayObservationEnabled = false;\n\nfunction adjustIndex(changeRecord, array) {\n  let index = changeRecord.index;\n  const arrayLength = array.length;\n\n  if (index > arrayLength) {\n    index = arrayLength - changeRecord.addedCount;\n  } else if (index < 0) {\n    index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n  }\n\n  if (index < 0) {\n    index = 0;\n  }\n\n  changeRecord.index = index;\n  return changeRecord;\n}\n\nclass ArrayObserver extends SubscriberSet {\n  constructor(source) {\n    super(source);\n    this.oldCollection = void 0;\n    this.splices = void 0;\n    this.needsQueue = true;\n    this.call = this.flush;\n    Reflect.defineProperty(source, \"$fastController\", {\n      value: this,\n      enumerable: false\n    });\n  }\n\n  addSplice(splice) {\n    if (this.splices === void 0) {\n      this.splices = [splice];\n    } else {\n      this.splices.push(splice);\n    }\n\n    if (this.needsQueue) {\n      this.needsQueue = false;\n      DOM.queueUpdate(this);\n    }\n  }\n\n  reset(oldCollection) {\n    this.oldCollection = oldCollection;\n\n    if (this.needsQueue) {\n      this.needsQueue = false;\n      DOM.queueUpdate(this);\n    }\n  }\n\n  flush() {\n    const splices = this.splices;\n    const oldCollection = this.oldCollection;\n\n    if (splices === void 0 && oldCollection === void 0) {\n      return;\n    }\n\n    this.needsQueue = true;\n    this.splices = void 0;\n    this.oldCollection = void 0;\n    const finalSplices = oldCollection === void 0 ? projectArraySplices(this.source, splices) : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n    this.notify(finalSplices);\n  }\n\n}\n/* eslint-disable prefer-rest-params */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\n\n\nexport function enableArrayObservation() {\n  if (arrayObservationEnabled) {\n    return;\n  }\n\n  arrayObservationEnabled = true;\n  Observable.setArrayObserverFactory(collection => {\n    return new ArrayObserver(collection);\n  });\n  const proto = Array.prototype; // Don't patch Array if it has already been patched\n  // by another copy of fast-element.\n\n  if (proto.$fastPatch) {\n    return;\n  }\n\n  Reflect.defineProperty(proto, \"$fastPatch\", {\n    value: 1,\n    enumerable: false\n  });\n  const pop = proto.pop;\n  const push = proto.push;\n  const reverse = proto.reverse;\n  const shift = proto.shift;\n  const sort = proto.sort;\n  const splice = proto.splice;\n  const unshift = proto.unshift;\n\n  proto.pop = function () {\n    const notEmpty = this.length > 0;\n    const methodCallResult = pop.apply(this, arguments);\n    const o = this.$fastController;\n\n    if (o !== void 0 && notEmpty) {\n      o.addSplice(newSplice(this.length, [methodCallResult], 0));\n    }\n\n    return methodCallResult;\n  };\n\n  proto.push = function () {\n    const methodCallResult = push.apply(this, arguments);\n    const o = this.$fastController;\n\n    if (o !== void 0) {\n      o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n    }\n\n    return methodCallResult;\n  };\n\n  proto.reverse = function () {\n    let oldArray;\n    const o = this.$fastController;\n\n    if (o !== void 0) {\n      o.flush();\n      oldArray = this.slice();\n    }\n\n    const methodCallResult = reverse.apply(this, arguments);\n\n    if (o !== void 0) {\n      o.reset(oldArray);\n    }\n\n    return methodCallResult;\n  };\n\n  proto.shift = function () {\n    const notEmpty = this.length > 0;\n    const methodCallResult = shift.apply(this, arguments);\n    const o = this.$fastController;\n\n    if (o !== void 0 && notEmpty) {\n      o.addSplice(newSplice(0, [methodCallResult], 0));\n    }\n\n    return methodCallResult;\n  };\n\n  proto.sort = function () {\n    let oldArray;\n    const o = this.$fastController;\n\n    if (o !== void 0) {\n      o.flush();\n      oldArray = this.slice();\n    }\n\n    const methodCallResult = sort.apply(this, arguments);\n\n    if (o !== void 0) {\n      o.reset(oldArray);\n    }\n\n    return methodCallResult;\n  };\n\n  proto.splice = function () {\n    const methodCallResult = splice.apply(this, arguments);\n    const o = this.$fastController;\n\n    if (o !== void 0) {\n      o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n    }\n\n    return methodCallResult;\n  };\n\n  proto.unshift = function () {\n    const methodCallResult = unshift.apply(this, arguments);\n    const o = this.$fastController;\n\n    if (o !== void 0) {\n      o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n    }\n\n    return methodCallResult;\n  };\n}\n/* eslint-enable prefer-rest-params */\n\n/* eslint-enable @typescript-eslint/explicit-function-return-type */","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/observation/array-observer.js"],"names":["DOM","calcSplices","newSplice","projectArraySplices","SubscriberSet","Observable","arrayObservationEnabled","adjustIndex","changeRecord","array","index","arrayLength","length","addedCount","removed","ArrayObserver","constructor","source","oldCollection","splices","needsQueue","call","flush","Reflect","defineProperty","value","enumerable","addSplice","splice","push","queueUpdate","reset","finalSplices","notify","enableArrayObservation","setArrayObserverFactory","collection","proto","Array","prototype","$fastPatch","pop","reverse","shift","sort","unshift","notEmpty","methodCallResult","apply","arguments","o","$fastController","oldArray","slice"],"mappings":"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","sourcesContent":["import { DOM } from \"../dom\";\nimport { calcSplices, newSplice, projectArraySplices } from \"./array-change-records\";\nimport { SubscriberSet } from \"./notifier\";\nimport { Observable } from \"./observable\";\nlet arrayObservationEnabled = false;\nfunction adjustIndex(changeRecord, array) {\n    let index = changeRecord.index;\n    const arrayLength = array.length;\n    if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n    }\n    else if (index < 0) {\n        index =\n            arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n    }\n    if (index < 0) {\n        index = 0;\n    }\n    changeRecord.index = index;\n    return changeRecord;\n}\nclass ArrayObserver extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.oldCollection = void 0;\n        this.splices = void 0;\n        this.needsQueue = true;\n        this.call = this.flush;\n        Reflect.defineProperty(source, \"$fastController\", {\n            value: this,\n            enumerable: false,\n        });\n    }\n    addSplice(splice) {\n        if (this.splices === void 0) {\n            this.splices = [splice];\n        }\n        else {\n            this.splices.push(splice);\n        }\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    reset(oldCollection) {\n        this.oldCollection = oldCollection;\n        if (this.needsQueue) {\n            this.needsQueue = false;\n            DOM.queueUpdate(this);\n        }\n    }\n    flush() {\n        const splices = this.splices;\n        const oldCollection = this.oldCollection;\n        if (splices === void 0 && oldCollection === void 0) {\n            return;\n        }\n        this.needsQueue = true;\n        this.splices = void 0;\n        this.oldCollection = void 0;\n        const finalSplices = oldCollection === void 0\n            ? projectArraySplices(this.source, splices)\n            : calcSplices(this.source, 0, this.source.length, oldCollection, 0, oldCollection.length);\n        this.notify(finalSplices);\n    }\n}\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Enables the array observation mechanism.\n * @remarks\n * Array observation is enabled automatically when using the\n * {@link RepeatDirective}, so calling this API manually is\n * not typically necessary.\n * @public\n */\nexport function enableArrayObservation() {\n    if (arrayObservationEnabled) {\n        return;\n    }\n    arrayObservationEnabled = true;\n    Observable.setArrayObserverFactory((collection) => {\n        return new ArrayObserver(collection);\n    });\n    const proto = Array.prototype;\n    // Don't patch Array if it has already been patched\n    // by another copy of fast-element.\n    if (proto.$fastPatch) {\n        return;\n    }\n    Reflect.defineProperty(proto, \"$fastPatch\", {\n        value: 1,\n        enumerable: false,\n    });\n    const pop = proto.pop;\n    const push = proto.push;\n    const reverse = proto.reverse;\n    const shift = proto.shift;\n    const sort = proto.sort;\n    const splice = proto.splice;\n    const unshift = proto.unshift;\n    proto.pop = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = pop.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(this.length, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.push = function () {\n        const methodCallResult = push.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(this.length - arguments.length, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n    proto.reverse = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = reverse.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.shift = function () {\n        const notEmpty = this.length > 0;\n        const methodCallResult = shift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0 && notEmpty) {\n            o.addSplice(newSplice(0, [methodCallResult], 0));\n        }\n        return methodCallResult;\n    };\n    proto.sort = function () {\n        let oldArray;\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.flush();\n            oldArray = this.slice();\n        }\n        const methodCallResult = sort.apply(this, arguments);\n        if (o !== void 0) {\n            o.reset(oldArray);\n        }\n        return methodCallResult;\n    };\n    proto.splice = function () {\n        const methodCallResult = splice.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(+arguments[0], methodCallResult, arguments.length > 2 ? arguments.length - 2 : 0), this));\n        }\n        return methodCallResult;\n    };\n    proto.unshift = function () {\n        const methodCallResult = unshift.apply(this, arguments);\n        const o = this.$fastController;\n        if (o !== void 0) {\n            o.addSplice(adjustIndex(newSplice(0, [], arguments.length), this));\n        }\n        return methodCallResult;\n    };\n}\n/* eslint-enable prefer-rest-params */\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n"]},"metadata":{},"sourceType":"module"}