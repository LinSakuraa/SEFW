{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable, Observable } from \"@microsoft/fast-element\";\nimport { ArrowKeys, Direction, limit, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { isFocusable } from \"tabbable\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { ARIAGlobalStatesAndProperties } from \"../patterns/aria-global\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { getDirection } from \"../utilities/direction\";\n/**\n * A map for directionality derived from keyboard input strings,\n * visual orientation, and text direction.\n *\n * @internal\n */\n\nconst ToolbarArrowKeyMap = Object.freeze({\n  [ArrowKeys.ArrowUp]: {\n    [Orientation.vertical]: -1\n  },\n  [ArrowKeys.ArrowDown]: {\n    [Orientation.vertical]: 1\n  },\n  [ArrowKeys.ArrowLeft]: {\n    [Orientation.horizontal]: {\n      [Direction.ltr]: -1,\n      [Direction.rtl]: 1\n    }\n  },\n  [ArrowKeys.ArrowRight]: {\n    [Orientation.horizontal]: {\n      [Direction.ltr]: 1,\n      [Direction.rtl]: -1\n    }\n  }\n});\n/**\n * A Toolbar Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar}.\n *\n * @public\n */\n\nexport class Toolbar extends FoundationElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * The internal index of the currently focused element.\n     *\n     * @internal\n     */\n\n    this._activeIndex = 0;\n    /**\n     * The text direction of the toolbar.\n     *\n     * @internal\n     */\n\n    this.direction = Direction.ltr;\n    /**\n     * The orientation of the toolbar.\n     *\n     * @public\n     * @remarks\n     * HTML Attribute: `orientation`\n     */\n\n    this.orientation = Orientation.horizontal;\n  }\n  /**\n   * The index of the currently focused element, clamped between 0 and the last element.\n   *\n   * @internal\n   */\n\n\n  get activeIndex() {\n    Observable.track(this, \"activeIndex\");\n    return this._activeIndex;\n  }\n\n  set activeIndex(value) {\n    if (this.$fastController.isConnected) {\n      this._activeIndex = limit(0, this.focusableElements.length - 1, value);\n      Observable.notify(this, \"activeIndex\");\n    }\n  }\n\n  slottedItemsChanged() {\n    if (this.$fastController.isConnected) {\n      this.reduceFocusableElements();\n    }\n  }\n  /**\n   * Set the activeIndex when a focusable element in the toolbar is clicked.\n   *\n   * @internal\n   */\n\n\n  clickHandler(e) {\n    var _a;\n\n    const activeIndex = (_a = this.focusableElements) === null || _a === void 0 ? void 0 : _a.indexOf(e.target);\n\n    if (activeIndex > -1 && this.activeIndex !== activeIndex) {\n      this.setFocusedElement(activeIndex);\n    }\n\n    return true;\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.direction = getDirection(this);\n  }\n  /**\n   * When the toolbar receives focus, set the currently active element as focused.\n   *\n   * @internal\n   */\n\n\n  focusinHandler(e) {\n    const relatedTarget = e.relatedTarget;\n\n    if (!relatedTarget || this.contains(relatedTarget)) {\n      return;\n    }\n\n    this.setFocusedElement();\n  }\n  /**\n   * Determines a value that can be used to iterate a list with the arrow keys.\n   *\n   * @param this - An element with an orientation and direction\n   * @param key - The event key value\n   * @internal\n   */\n\n\n  getDirectionalIncrementer(key) {\n    var _a, _b, _c, _d, _e;\n\n    return (_e = (_c = (_b = (_a = ToolbarArrowKeyMap[key]) === null || _a === void 0 ? void 0 : _a[this.orientation]) === null || _b === void 0 ? void 0 : _b[this.direction]) !== null && _c !== void 0 ? _c : (_d = ToolbarArrowKeyMap[key]) === null || _d === void 0 ? void 0 : _d[this.orientation]) !== null && _e !== void 0 ? _e : 0;\n  }\n  /**\n   * Handle keyboard events for the toolbar.\n   *\n   * @internal\n   */\n\n\n  keydownHandler(e) {\n    const key = e.key;\n\n    if (!(key in ArrowKeys) || e.defaultPrevented || e.shiftKey) {\n      return true;\n    }\n\n    const incrementer = this.getDirectionalIncrementer(key);\n\n    if (!incrementer) {\n      return !e.target.closest(\"[role=radiogroup]\");\n    }\n\n    const nextIndex = this.activeIndex + incrementer;\n\n    if (this.focusableElements[nextIndex]) {\n      e.preventDefault();\n    }\n\n    this.setFocusedElement(nextIndex);\n    return true;\n  }\n  /**\n   * get all the slotted elements\n   * @internal\n   */\n\n\n  get allSlottedItems() {\n    return [...this.start.assignedElements(), ...this.slottedItems, ...this.end.assignedElements()];\n  }\n  /**\n   * Prepare the slotted elements which can be focusable.\n   *\n   * @internal\n   */\n\n\n  reduceFocusableElements() {\n    this.focusableElements = this.allSlottedItems.reduce(Toolbar.reduceFocusableItems, []);\n    this.setFocusableElements();\n  }\n  /**\n   * Set the activeIndex and focus the corresponding control.\n   *\n   * @param activeIndex - The new index to set\n   * @internal\n   */\n\n\n  setFocusedElement(activeIndex = this.activeIndex) {\n    var _a;\n\n    this.activeIndex = activeIndex;\n    this.setFocusableElements();\n    (_a = this.focusableElements[this.activeIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n  }\n  /**\n   * Reduce a collection to only its focusable elements.\n   *\n   * @param elements - Collection of elements to reduce\n   * @param element - The current element\n   *\n   * @internal\n   */\n\n\n  static reduceFocusableItems(elements, element) {\n    var _a, _b, _c, _d;\n\n    const isRoleRadio = element.getAttribute(\"role\") === \"radio\";\n    const isFocusableFastElement = (_b = (_a = element.$fastController) === null || _a === void 0 ? void 0 : _a.definition.shadowOptions) === null || _b === void 0 ? void 0 : _b.delegatesFocus;\n    const hasFocusableShadow = Array.from((_d = (_c = element.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelectorAll(\"*\")) !== null && _d !== void 0 ? _d : []).some(x => isFocusable(x));\n\n    if (isFocusable(element) || isRoleRadio || isFocusableFastElement || hasFocusableShadow) {\n      elements.push(element);\n      return elements;\n    }\n\n    if (element.childElementCount) {\n      return elements.concat(Array.from(element.children).reduce(Toolbar.reduceFocusableItems, []));\n    }\n\n    return elements;\n  }\n  /**\n   * @internal\n   */\n\n\n  setFocusableElements() {\n    if (this.$fastController.isConnected && this.focusableElements.length > 0) {\n      this.focusableElements.forEach((element, index) => {\n        element.tabIndex = this.activeIndex === index ? 0 : -1;\n      });\n    }\n  }\n\n}\n\n__decorate([observable], Toolbar.prototype, \"direction\", void 0);\n\n__decorate([attr], Toolbar.prototype, \"orientation\", void 0);\n\n__decorate([observable], Toolbar.prototype, \"slottedItems\", void 0);\n\n__decorate([observable], Toolbar.prototype, \"slottedLabel\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA toolbar role\n *\n * @public\n */\n\n\nexport class DelegatesARIAToolbar {}\n\n__decorate([attr({\n  attribute: \"aria-labelledby\"\n})], DelegatesARIAToolbar.prototype, \"ariaLabelledby\", void 0);\n\n__decorate([attr({\n  attribute: \"aria-label\"\n})], DelegatesARIAToolbar.prototype, \"ariaLabel\", void 0);\n\napplyMixins(DelegatesARIAToolbar, ARIAGlobalStatesAndProperties);\napplyMixins(Toolbar, StartEnd, DelegatesARIAToolbar);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/toolbar/toolbar.js"],"names":["__decorate","attr","observable","Observable","ArrowKeys","Direction","limit","Orientation","isFocusable","FoundationElement","ARIAGlobalStatesAndProperties","StartEnd","applyMixins","getDirection","ToolbarArrowKeyMap","Object","freeze","ArrowUp","vertical","ArrowDown","ArrowLeft","horizontal","ltr","rtl","ArrowRight","Toolbar","constructor","arguments","_activeIndex","direction","orientation","activeIndex","track","value","$fastController","isConnected","focusableElements","length","notify","slottedItemsChanged","reduceFocusableElements","clickHandler","e","_a","indexOf","target","setFocusedElement","connectedCallback","focusinHandler","relatedTarget","contains","getDirectionalIncrementer","key","_b","_c","_d","_e","keydownHandler","defaultPrevented","shiftKey","incrementer","closest","nextIndex","preventDefault","allSlottedItems","start","assignedElements","slottedItems","end","reduce","reduceFocusableItems","setFocusableElements","focus","elements","element","isRoleRadio","getAttribute","isFocusableFastElement","definition","shadowOptions","delegatesFocus","hasFocusableShadow","Array","from","shadowRoot","querySelectorAll","some","x","push","childElementCount","concat","children","forEach","index","tabIndex","prototype","DelegatesARIAToolbar","attribute"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable, Observable } from \"@microsoft/fast-element\";\nimport { ArrowKeys, Direction, limit, Orientation } from \"@microsoft/fast-web-utilities\";\nimport { isFocusable } from \"tabbable\";\nimport { FoundationElement } from \"../foundation-element\";\nimport { ARIAGlobalStatesAndProperties } from \"../patterns/aria-global\";\nimport { StartEnd } from \"../patterns/start-end\";\nimport { applyMixins } from \"../utilities/apply-mixins\";\nimport { getDirection } from \"../utilities/direction\";\n/**\n * A map for directionality derived from keyboard input strings,\n * visual orientation, and text direction.\n *\n * @internal\n */\nconst ToolbarArrowKeyMap = Object.freeze({\n    [ArrowKeys.ArrowUp]: {\n        [Orientation.vertical]: -1,\n    },\n    [ArrowKeys.ArrowDown]: {\n        [Orientation.vertical]: 1,\n    },\n    [ArrowKeys.ArrowLeft]: {\n        [Orientation.horizontal]: {\n            [Direction.ltr]: -1,\n            [Direction.rtl]: 1,\n        },\n    },\n    [ArrowKeys.ArrowRight]: {\n        [Orientation.horizontal]: {\n            [Direction.ltr]: 1,\n            [Direction.rtl]: -1,\n        },\n    },\n});\n/**\n * A Toolbar Custom HTML Element.\n * Implements the {@link https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar}.\n *\n * @public\n */\nexport class Toolbar extends FoundationElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * The internal index of the currently focused element.\n         *\n         * @internal\n         */\n        this._activeIndex = 0;\n        /**\n         * The text direction of the toolbar.\n         *\n         * @internal\n         */\n        this.direction = Direction.ltr;\n        /**\n         * The orientation of the toolbar.\n         *\n         * @public\n         * @remarks\n         * HTML Attribute: `orientation`\n         */\n        this.orientation = Orientation.horizontal;\n    }\n    /**\n     * The index of the currently focused element, clamped between 0 and the last element.\n     *\n     * @internal\n     */\n    get activeIndex() {\n        Observable.track(this, \"activeIndex\");\n        return this._activeIndex;\n    }\n    set activeIndex(value) {\n        if (this.$fastController.isConnected) {\n            this._activeIndex = limit(0, this.focusableElements.length - 1, value);\n            Observable.notify(this, \"activeIndex\");\n        }\n    }\n    slottedItemsChanged() {\n        if (this.$fastController.isConnected) {\n            this.reduceFocusableElements();\n        }\n    }\n    /**\n     * Set the activeIndex when a focusable element in the toolbar is clicked.\n     *\n     * @internal\n     */\n    clickHandler(e) {\n        var _a;\n        const activeIndex = (_a = this.focusableElements) === null || _a === void 0 ? void 0 : _a.indexOf(e.target);\n        if (activeIndex > -1 && this.activeIndex !== activeIndex) {\n            this.setFocusedElement(activeIndex);\n        }\n        return true;\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.direction = getDirection(this);\n    }\n    /**\n     * When the toolbar receives focus, set the currently active element as focused.\n     *\n     * @internal\n     */\n    focusinHandler(e) {\n        const relatedTarget = e.relatedTarget;\n        if (!relatedTarget || this.contains(relatedTarget)) {\n            return;\n        }\n        this.setFocusedElement();\n    }\n    /**\n     * Determines a value that can be used to iterate a list with the arrow keys.\n     *\n     * @param this - An element with an orientation and direction\n     * @param key - The event key value\n     * @internal\n     */\n    getDirectionalIncrementer(key) {\n        var _a, _b, _c, _d, _e;\n        return ((_e = (_c = (_b = (_a = ToolbarArrowKeyMap[key]) === null || _a === void 0 ? void 0 : _a[this.orientation]) === null || _b === void 0 ? void 0 : _b[this.direction]) !== null && _c !== void 0 ? _c : (_d = ToolbarArrowKeyMap[key]) === null || _d === void 0 ? void 0 : _d[this.orientation]) !== null && _e !== void 0 ? _e : 0);\n    }\n    /**\n     * Handle keyboard events for the toolbar.\n     *\n     * @internal\n     */\n    keydownHandler(e) {\n        const key = e.key;\n        if (!(key in ArrowKeys) || e.defaultPrevented || e.shiftKey) {\n            return true;\n        }\n        const incrementer = this.getDirectionalIncrementer(key);\n        if (!incrementer) {\n            return !e.target.closest(\"[role=radiogroup]\");\n        }\n        const nextIndex = this.activeIndex + incrementer;\n        if (this.focusableElements[nextIndex]) {\n            e.preventDefault();\n        }\n        this.setFocusedElement(nextIndex);\n        return true;\n    }\n    /**\n     * get all the slotted elements\n     * @internal\n     */\n    get allSlottedItems() {\n        return [\n            ...this.start.assignedElements(),\n            ...this.slottedItems,\n            ...this.end.assignedElements(),\n        ];\n    }\n    /**\n     * Prepare the slotted elements which can be focusable.\n     *\n     * @internal\n     */\n    reduceFocusableElements() {\n        this.focusableElements = this.allSlottedItems.reduce(Toolbar.reduceFocusableItems, []);\n        this.setFocusableElements();\n    }\n    /**\n     * Set the activeIndex and focus the corresponding control.\n     *\n     * @param activeIndex - The new index to set\n     * @internal\n     */\n    setFocusedElement(activeIndex = this.activeIndex) {\n        var _a;\n        this.activeIndex = activeIndex;\n        this.setFocusableElements();\n        (_a = this.focusableElements[this.activeIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    /**\n     * Reduce a collection to only its focusable elements.\n     *\n     * @param elements - Collection of elements to reduce\n     * @param element - The current element\n     *\n     * @internal\n     */\n    static reduceFocusableItems(elements, element) {\n        var _a, _b, _c, _d;\n        const isRoleRadio = element.getAttribute(\"role\") === \"radio\";\n        const isFocusableFastElement = (_b = (_a = element.$fastController) === null || _a === void 0 ? void 0 : _a.definition.shadowOptions) === null || _b === void 0 ? void 0 : _b.delegatesFocus;\n        const hasFocusableShadow = Array.from((_d = (_c = element.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelectorAll(\"*\")) !== null && _d !== void 0 ? _d : []).some(x => isFocusable(x));\n        if (isFocusable(element) ||\n            isRoleRadio ||\n            isFocusableFastElement ||\n            hasFocusableShadow) {\n            elements.push(element);\n            return elements;\n        }\n        if (element.childElementCount) {\n            return elements.concat(Array.from(element.children).reduce(Toolbar.reduceFocusableItems, []));\n        }\n        return elements;\n    }\n    /**\n     * @internal\n     */\n    setFocusableElements() {\n        if (this.$fastController.isConnected && this.focusableElements.length > 0) {\n            this.focusableElements.forEach((element, index) => {\n                element.tabIndex = this.activeIndex === index ? 0 : -1;\n            });\n        }\n    }\n}\n__decorate([\n    observable\n], Toolbar.prototype, \"direction\", void 0);\n__decorate([\n    attr\n], Toolbar.prototype, \"orientation\", void 0);\n__decorate([\n    observable\n], Toolbar.prototype, \"slottedItems\", void 0);\n__decorate([\n    observable\n], Toolbar.prototype, \"slottedLabel\", void 0);\n/**\n * Includes ARIA states and properties relating to the ARIA toolbar role\n *\n * @public\n */\nexport class DelegatesARIAToolbar {\n}\n__decorate([\n    attr({ attribute: \"aria-labelledby\" })\n], DelegatesARIAToolbar.prototype, \"ariaLabelledby\", void 0);\n__decorate([\n    attr({ attribute: \"aria-label\" })\n], DelegatesARIAToolbar.prototype, \"ariaLabel\", void 0);\napplyMixins(DelegatesARIAToolbar, ARIAGlobalStatesAndProperties);\napplyMixins(Toolbar, StartEnd, DelegatesARIAToolbar);\n"]},"metadata":{},"sourceType":"module"}