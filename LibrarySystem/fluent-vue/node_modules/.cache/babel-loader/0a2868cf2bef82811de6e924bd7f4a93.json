{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { FASTElement, observable } from \"@microsoft/fast-element\";\nimport { ComponentPresentation, DefaultComponentPresentation } from \"../design-system/component-presentation\";\n/**\n * Defines a foundation element class that:\n * 1. Connects the element to its ComponentPresentation\n * 2. Allows resolving the element template from the instance or ComponentPresentation\n * 3. Allows resolving the element styles from the instance or ComponentPresentation\n *\n * @public\n */\n\nexport class FoundationElement extends FASTElement {\n  constructor() {\n    super(...arguments);\n    this._presentation = void 0;\n  }\n  /**\n   * A property which resolves the ComponentPresentation instance\n   * for the current component.\n   * @public\n   */\n\n\n  get $presentation() {\n    if (this._presentation === void 0) {\n      this._presentation = ComponentPresentation.forTag(this.tagName, this);\n    }\n\n    return this._presentation;\n  }\n\n  templateChanged() {\n    if (this.template !== undefined) {\n      this.$fastController.template = this.template;\n    }\n  }\n\n  stylesChanged() {\n    if (this.styles !== undefined) {\n      this.$fastController.styles = this.styles;\n    }\n  }\n  /**\n   * The connected callback for this FASTElement.\n   * @remarks\n   * This method is invoked by the platform whenever this FoundationElement\n   * becomes connected to the document.\n   * @public\n   */\n\n\n  connectedCallback() {\n    if (this.$presentation !== null) {\n      this.$presentation.applyTo(this);\n    }\n\n    super.connectedCallback();\n  }\n  /**\n   * Defines an element registry function with a set of element definition defaults.\n   * @param elementDefinition - The definition of the element to create the registry\n   * function for.\n   * @public\n   */\n\n\n  static compose(elementDefinition) {\n    return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement ? class extends FoundationElement {} : this, elementDefinition, overrideDefinition);\n  }\n\n}\n\n__decorate([observable], FoundationElement.prototype, \"template\", void 0);\n\n__decorate([observable], FoundationElement.prototype, \"styles\", void 0);\n\nfunction resolveOption(option, context, definition) {\n  if (typeof option === \"function\") {\n    return option(context, definition);\n  }\n\n  return option;\n}\n/**\n * Registry capable of defining presentation properties for a DOM Container hierarchy.\n *\n * @internal\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\nexport class FoundationElementRegistry {\n  constructor(type, elementDefinition, overrideDefinition) {\n    this.type = type;\n    this.elementDefinition = elementDefinition;\n    this.overrideDefinition = overrideDefinition;\n    this.definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);\n  }\n\n  register(container, context) {\n    const definition = this.definition;\n    const overrideDefinition = this.overrideDefinition;\n    const prefix = definition.prefix || context.elementPrefix;\n    const name = `${prefix}-${definition.baseName}`;\n    context.tryDefineElement({\n      name,\n      type: this.type,\n      baseClass: this.elementDefinition.baseClass,\n      callback: x => {\n        const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x, definition), resolveOption(definition.styles, x, definition));\n        x.definePresentation(presentation);\n        let shadowOptions = resolveOption(definition.shadowOptions, x, definition);\n\n        if (x.shadowRootMode) {\n          // If the design system has overridden the shadow root mode, we need special handling.\n          if (shadowOptions) {\n            // If there are shadow options present in the definition, then\n            // either the component itself has specified an option or the\n            // registry function has overridden it.\n            if (!overrideDefinition.shadowOptions) {\n              // There were shadow options provided by the component and not overridden by\n              // the registry.\n              shadowOptions.mode = x.shadowRootMode;\n            }\n          } else if (shadowOptions !== null) {\n            // If the component author did not provide shadow options,\n            // and did not null them out (light dom opt-in) then they\n            // were relying on the FASTElement default. So, if the\n            // design system provides a mode, we need to create the options\n            // to override the default.\n            shadowOptions = {\n              mode: x.shadowRootMode\n            };\n          }\n        }\n\n        x.defineElement({\n          elementOptions: resolveOption(definition.elementOptions, x, definition),\n          shadowOptions,\n          attributes: resolveOption(definition.attributes, x, definition)\n        });\n      }\n    });\n  }\n\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/foundation-element/foundation-element.js"],"names":["__decorate","FASTElement","observable","ComponentPresentation","DefaultComponentPresentation","FoundationElement","constructor","arguments","_presentation","$presentation","forTag","tagName","templateChanged","template","undefined","$fastController","stylesChanged","styles","connectedCallback","applyTo","compose","elementDefinition","overrideDefinition","FoundationElementRegistry","prototype","resolveOption","option","context","definition","type","Object","assign","register","container","prefix","elementPrefix","name","baseName","tryDefineElement","baseClass","callback","x","presentation","definePresentation","shadowOptions","shadowRootMode","mode","defineElement","elementOptions","attributes"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { FASTElement, observable } from \"@microsoft/fast-element\";\nimport { ComponentPresentation, DefaultComponentPresentation, } from \"../design-system/component-presentation\";\n/**\n * Defines a foundation element class that:\n * 1. Connects the element to its ComponentPresentation\n * 2. Allows resolving the element template from the instance or ComponentPresentation\n * 3. Allows resolving the element styles from the instance or ComponentPresentation\n *\n * @public\n */\nexport class FoundationElement extends FASTElement {\n    constructor() {\n        super(...arguments);\n        this._presentation = void 0;\n    }\n    /**\n     * A property which resolves the ComponentPresentation instance\n     * for the current component.\n     * @public\n     */\n    get $presentation() {\n        if (this._presentation === void 0) {\n            this._presentation = ComponentPresentation.forTag(this.tagName, this);\n        }\n        return this._presentation;\n    }\n    templateChanged() {\n        if (this.template !== undefined) {\n            this.$fastController.template = this.template;\n        }\n    }\n    stylesChanged() {\n        if (this.styles !== undefined) {\n            this.$fastController.styles = this.styles;\n        }\n    }\n    /**\n     * The connected callback for this FASTElement.\n     * @remarks\n     * This method is invoked by the platform whenever this FoundationElement\n     * becomes connected to the document.\n     * @public\n     */\n    connectedCallback() {\n        if (this.$presentation !== null) {\n            this.$presentation.applyTo(this);\n        }\n        super.connectedCallback();\n    }\n    /**\n     * Defines an element registry function with a set of element definition defaults.\n     * @param elementDefinition - The definition of the element to create the registry\n     * function for.\n     * @public\n     */\n    static compose(elementDefinition) {\n        return (overrideDefinition = {}) => new FoundationElementRegistry(this === FoundationElement\n            ? class extends FoundationElement {\n            }\n            : this, elementDefinition, overrideDefinition);\n    }\n}\n__decorate([\n    observable\n], FoundationElement.prototype, \"template\", void 0);\n__decorate([\n    observable\n], FoundationElement.prototype, \"styles\", void 0);\nfunction resolveOption(option, context, definition) {\n    if (typeof option === \"function\") {\n        return option(context, definition);\n    }\n    return option;\n}\n/**\n * Registry capable of defining presentation properties for a DOM Container hierarchy.\n *\n * @internal\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexport class FoundationElementRegistry {\n    constructor(type, elementDefinition, overrideDefinition) {\n        this.type = type;\n        this.elementDefinition = elementDefinition;\n        this.overrideDefinition = overrideDefinition;\n        this.definition = Object.assign(Object.assign({}, this.elementDefinition), this.overrideDefinition);\n    }\n    register(container, context) {\n        const definition = this.definition;\n        const overrideDefinition = this.overrideDefinition;\n        const prefix = definition.prefix || context.elementPrefix;\n        const name = `${prefix}-${definition.baseName}`;\n        context.tryDefineElement({\n            name,\n            type: this.type,\n            baseClass: this.elementDefinition.baseClass,\n            callback: x => {\n                const presentation = new DefaultComponentPresentation(resolveOption(definition.template, x, definition), resolveOption(definition.styles, x, definition));\n                x.definePresentation(presentation);\n                let shadowOptions = resolveOption(definition.shadowOptions, x, definition);\n                if (x.shadowRootMode) {\n                    // If the design system has overridden the shadow root mode, we need special handling.\n                    if (shadowOptions) {\n                        // If there are shadow options present in the definition, then\n                        // either the component itself has specified an option or the\n                        // registry function has overridden it.\n                        if (!overrideDefinition.shadowOptions) {\n                            // There were shadow options provided by the component and not overridden by\n                            // the registry.\n                            shadowOptions.mode = x.shadowRootMode;\n                        }\n                    }\n                    else if (shadowOptions !== null) {\n                        // If the component author did not provide shadow options,\n                        // and did not null them out (light dom opt-in) then they\n                        // were relying on the FASTElement default. So, if the\n                        // design system provides a mode, we need to create the options\n                        // to override the default.\n                        shadowOptions = { mode: x.shadowRootMode };\n                    }\n                }\n                x.defineElement({\n                    elementOptions: resolveOption(definition.elementOptions, x, definition),\n                    shadowOptions,\n                    attributes: resolveOption(definition.attributes, x, definition),\n                });\n            },\n        });\n    }\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n"]},"metadata":{},"sourceType":"module"}