{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedRadio } from \"./radio.form-associated\";\n/**\n * A Radio Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.\n *\n * @public\n */\n\nexport class Radio extends FormAssociatedRadio {\n  constructor() {\n    super();\n    /**\n     * The element's value to be included in form submission when checked.\n     * Default to \"on\" to reach parity with input[type=\"radio\"]\n     *\n     * @internal\n     */\n\n    this.initialValue = \"on\";\n    /**\n     * @internal\n     */\n\n    this.keypressHandler = e => {\n      switch (e.key) {\n        case keySpace:\n          if (!this.checked && !this.readOnly) {\n            this.checked = true;\n          }\n\n          return;\n      }\n\n      return true;\n    };\n\n    this.proxy.setAttribute(\"type\", \"radio\");\n  }\n\n  readOnlyChanged() {\n    if (this.proxy instanceof HTMLInputElement) {\n      this.proxy.readOnly = this.readOnly;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  defaultCheckedChanged() {\n    var _a;\n\n    if (this.$fastController.isConnected && !this.dirtyChecked) {\n      // Setting this.checked will cause us to enter a dirty state,\n      // but if we are clean when defaultChecked is changed, we want to stay\n      // in a clean state, so reset this.dirtyChecked\n      if (!this.isInsideRadioGroup()) {\n        this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;\n        this.dirtyChecked = false;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  connectedCallback() {\n    var _a, _b;\n\n    super.connectedCallback();\n    this.validate();\n\n    if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute(\"role\")) !== \"radiogroup\" && this.getAttribute(\"tabindex\") === null) {\n      if (!this.disabled) {\n        this.setAttribute(\"tabindex\", \"0\");\n      }\n    }\n\n    if (this.checkedAttribute) {\n      if (!this.dirtyChecked) {\n        // Setting this.checked will cause us to enter a dirty state,\n        // but if we are clean when defaultChecked is changed, we want to stay\n        // in a clean state, so reset this.dirtyChecked\n        if (!this.isInsideRadioGroup()) {\n          this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;\n          this.dirtyChecked = false;\n        }\n      }\n    }\n  }\n\n  isInsideRadioGroup() {\n    const parent = this.closest(\"[role=radiogroup]\");\n    return parent !== null;\n  }\n  /**\n   * @internal\n   */\n\n\n  clickHandler(e) {\n    if (!this.disabled && !this.readOnly && !this.checked) {\n      this.checked = true;\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: \"readonly\",\n  mode: \"boolean\"\n})], Radio.prototype, \"readOnly\", void 0);\n\n__decorate([observable], Radio.prototype, \"name\", void 0);\n\n__decorate([observable], Radio.prototype, \"defaultSlottedNodes\", void 0);","map":{"version":3,"sources":["D:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/radio/radio.js"],"names":["__decorate","attr","observable","keySpace","FormAssociatedRadio","Radio","constructor","initialValue","keypressHandler","e","key","checked","readOnly","proxy","setAttribute","readOnlyChanged","HTMLInputElement","defaultCheckedChanged","_a","$fastController","isConnected","dirtyChecked","isInsideRadioGroup","defaultChecked","connectedCallback","_b","validate","parentElement","getAttribute","disabled","checkedAttribute","parent","closest","clickHandler","attribute","mode","prototype"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedRadio } from \"./radio.form-associated\";\n/**\n * A Radio Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.\n *\n * @public\n */\nexport class Radio extends FormAssociatedRadio {\n    constructor() {\n        super();\n        /**\n         * The element's value to be included in form submission when checked.\n         * Default to \"on\" to reach parity with input[type=\"radio\"]\n         *\n         * @internal\n         */\n        this.initialValue = \"on\";\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            switch (e.key) {\n                case keySpace:\n                    if (!this.checked && !this.readOnly) {\n                        this.checked = true;\n                    }\n                    return;\n            }\n            return true;\n        };\n        this.proxy.setAttribute(\"type\", \"radio\");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n    /**\n     * @internal\n     */\n    defaultCheckedChanged() {\n        var _a;\n        if (this.$fastController.isConnected && !this.dirtyChecked) {\n            // Setting this.checked will cause us to enter a dirty state,\n            // but if we are clean when defaultChecked is changed, we want to stay\n            // in a clean state, so reset this.dirtyChecked\n            if (!this.isInsideRadioGroup()) {\n                this.checked = (_a = this.defaultChecked) !== null && _a !== void 0 ? _a : false;\n                this.dirtyChecked = false;\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    connectedCallback() {\n        var _a, _b;\n        super.connectedCallback();\n        this.validate();\n        if (((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute(\"role\")) !== \"radiogroup\" &&\n            this.getAttribute(\"tabindex\") === null) {\n            if (!this.disabled) {\n                this.setAttribute(\"tabindex\", \"0\");\n            }\n        }\n        if (this.checkedAttribute) {\n            if (!this.dirtyChecked) {\n                // Setting this.checked will cause us to enter a dirty state,\n                // but if we are clean when defaultChecked is changed, we want to stay\n                // in a clean state, so reset this.dirtyChecked\n                if (!this.isInsideRadioGroup()) {\n                    this.checked = (_b = this.defaultChecked) !== null && _b !== void 0 ? _b : false;\n                    this.dirtyChecked = false;\n                }\n            }\n        }\n    }\n    isInsideRadioGroup() {\n        const parent = this.closest(\"[role=radiogroup]\");\n        return parent !== null;\n    }\n    /**\n     * @internal\n     */\n    clickHandler(e) {\n        if (!this.disabled && !this.readOnly && !this.checked) {\n            this.checked = true;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], Radio.prototype, \"readOnly\", void 0);\n__decorate([\n    observable\n], Radio.prototype, \"name\", void 0);\n__decorate([\n    observable\n], Radio.prototype, \"defaultSlottedNodes\", void 0);\n"]},"metadata":{},"sourceType":"module"}