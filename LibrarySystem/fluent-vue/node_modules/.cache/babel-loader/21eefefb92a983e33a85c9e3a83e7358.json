{"ast":null,"code":"import { AttachedBehaviorHTMLDirective, SubscriberSet, DOM } from \"@microsoft/fast-element\";\nconst observer = new MutationObserver(mutations => {\n  for (const mutation of mutations) {\n    AttributeReflectionSubscriptionSet.getOrCreateFor(mutation.target).notify(mutation.attributeName);\n  }\n});\n\nclass AttributeReflectionSubscriptionSet extends SubscriberSet {\n  constructor(source) {\n    super(source);\n    this.watchedAttributes = new Set();\n    AttributeReflectionSubscriptionSet.subscriberCache.set(source, this);\n  }\n\n  subscribe(subscriber) {\n    super.subscribe(subscriber);\n\n    if (!this.watchedAttributes.has(subscriber.attributes)) {\n      this.watchedAttributes.add(subscriber.attributes);\n      this.observe();\n    }\n  }\n\n  unsubscribe(subscriber) {\n    super.unsubscribe(subscriber);\n\n    if (this.watchedAttributes.has(subscriber.attributes)) {\n      this.watchedAttributes.delete(subscriber.attributes);\n      this.observe();\n    }\n  }\n\n  static getOrCreateFor(source) {\n    return this.subscriberCache.get(source) || new AttributeReflectionSubscriptionSet(source);\n  }\n\n  observe() {\n    const attributeFilter = [];\n\n    for (const attributes of this.watchedAttributes.values()) {\n      for (let i = 0; i < attributes.length; i++) {\n        attributeFilter.push(attributes[i]);\n      }\n    }\n\n    observer.observe(this.source, {\n      attributeFilter\n    });\n  }\n\n}\n\nAttributeReflectionSubscriptionSet.subscriberCache = new WeakMap();\n\nclass ReflectAttrBehavior {\n  constructor(target, attributes) {\n    this.target = target;\n    this.attributes = Object.freeze(attributes);\n  }\n\n  bind(source) {\n    AttributeReflectionSubscriptionSet.getOrCreateFor(source).subscribe(this); // Reflect any existing attributes because MutationObserver will only\n    // handle *changes* to attributes.\n\n    if (source.hasAttributes()) {\n      for (let i = 0; i < source.attributes.length; i++) {\n        this.handleChange(source, source.attributes[i].name);\n      }\n    }\n  }\n\n  unbind(source) {\n    AttributeReflectionSubscriptionSet.getOrCreateFor(source).unsubscribe(this);\n  }\n\n  handleChange(source, arg) {\n    // In cases where two or more ReflectAttrBehavior instances are bound to the same element,\n    // they will share a Subscriber implementation. In that case, this handle change can be invoked with\n    // attributes an instances doesn't need to reflect. This guards against reflecting attrs\n    // that shouldn't be reflected.\n    if (this.attributes.includes(arg)) {\n      DOM.setAttribute(this.target, arg, source.getAttribute(arg));\n    }\n  }\n\n}\n/**\n * Reflects attributes from the host element to the target element of the directive.\n * @param attributes - The attributes to reflect\n *\n * @beta\n * @example\n * ```ts\n * const template = html`\n *     <button\n *         ${reflectAttributes(\"aria-label\", \"aria-describedby\")}\n *     >\n *          hello world\n *     </button\n * `\n * ```\n */\n\n\nexport function reflectAttributes(...attributes) {\n  return new AttachedBehaviorHTMLDirective(\"fast-reflect-attr\", ReflectAttrBehavior, attributes);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/directives/reflect-attributes.js"],"names":["AttachedBehaviorHTMLDirective","SubscriberSet","DOM","observer","MutationObserver","mutations","mutation","AttributeReflectionSubscriptionSet","getOrCreateFor","target","notify","attributeName","constructor","source","watchedAttributes","Set","subscriberCache","set","subscribe","subscriber","has","attributes","add","observe","unsubscribe","delete","get","attributeFilter","values","i","length","push","WeakMap","ReflectAttrBehavior","Object","freeze","bind","hasAttributes","handleChange","name","unbind","arg","includes","setAttribute","getAttribute","reflectAttributes"],"mappings":"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","sourcesContent":["import { AttachedBehaviorHTMLDirective, SubscriberSet, DOM, } from \"@microsoft/fast-element\";\nconst observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n        AttributeReflectionSubscriptionSet.getOrCreateFor(mutation.target).notify(mutation.attributeName);\n    }\n});\nclass AttributeReflectionSubscriptionSet extends SubscriberSet {\n    constructor(source) {\n        super(source);\n        this.watchedAttributes = new Set();\n        AttributeReflectionSubscriptionSet.subscriberCache.set(source, this);\n    }\n    subscribe(subscriber) {\n        super.subscribe(subscriber);\n        if (!this.watchedAttributes.has(subscriber.attributes)) {\n            this.watchedAttributes.add(subscriber.attributes);\n            this.observe();\n        }\n    }\n    unsubscribe(subscriber) {\n        super.unsubscribe(subscriber);\n        if (this.watchedAttributes.has(subscriber.attributes)) {\n            this.watchedAttributes.delete(subscriber.attributes);\n            this.observe();\n        }\n    }\n    static getOrCreateFor(source) {\n        return (this.subscriberCache.get(source) ||\n            new AttributeReflectionSubscriptionSet(source));\n    }\n    observe() {\n        const attributeFilter = [];\n        for (const attributes of this.watchedAttributes.values()) {\n            for (let i = 0; i < attributes.length; i++) {\n                attributeFilter.push(attributes[i]);\n            }\n        }\n        observer.observe(this.source, { attributeFilter });\n    }\n}\nAttributeReflectionSubscriptionSet.subscriberCache = new WeakMap();\nclass ReflectAttrBehavior {\n    constructor(target, attributes) {\n        this.target = target;\n        this.attributes = Object.freeze(attributes);\n    }\n    bind(source) {\n        AttributeReflectionSubscriptionSet.getOrCreateFor(source).subscribe(this);\n        // Reflect any existing attributes because MutationObserver will only\n        // handle *changes* to attributes.\n        if (source.hasAttributes()) {\n            for (let i = 0; i < source.attributes.length; i++) {\n                this.handleChange(source, source.attributes[i].name);\n            }\n        }\n    }\n    unbind(source) {\n        AttributeReflectionSubscriptionSet.getOrCreateFor(source).unsubscribe(this);\n    }\n    handleChange(source, arg) {\n        // In cases where two or more ReflectAttrBehavior instances are bound to the same element,\n        // they will share a Subscriber implementation. In that case, this handle change can be invoked with\n        // attributes an instances doesn't need to reflect. This guards against reflecting attrs\n        // that shouldn't be reflected.\n        if (this.attributes.includes(arg)) {\n            DOM.setAttribute(this.target, arg, source.getAttribute(arg));\n        }\n    }\n}\n/**\n * Reflects attributes from the host element to the target element of the directive.\n * @param attributes - The attributes to reflect\n *\n * @beta\n * @example\n * ```ts\n * const template = html`\n *     <button\n *         ${reflectAttributes(\"aria-label\", \"aria-describedby\")}\n *     >\n *          hello world\n *     </button\n * `\n * ```\n */\nexport function reflectAttributes(...attributes) {\n    return new AttachedBehaviorHTMLDirective(\"fast-reflect-attr\", ReflectAttrBehavior, attributes);\n}\n"]},"metadata":{},"sourceType":"module"}