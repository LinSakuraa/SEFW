{"ast":null,"code":"import { h, Transition, TransitionGroup, defineComponent } from 'vue';\nexport default defineComponent({\n  name: 'FadeInExpandTransition',\n  props: {\n    appear: Boolean,\n    group: Boolean,\n    mode: String,\n    onLeave: Function,\n    onAfterLeave: Function,\n    onAfterEnter: Function,\n    width: Boolean,\n    // reverse mode is only used in tree\n    // it make it from expanded to collapsed after mounted\n    reverse: Boolean\n  },\n\n  setup(props, {\n    slots\n  }) {\n    function handleBeforeLeave(el) {\n      if (props.width) {\n        el.style.maxWidth = `${el.offsetWidth}px`;\n      } else {\n        el.style.maxHeight = `${el.offsetHeight}px`;\n      }\n\n      void el.offsetWidth;\n    }\n\n    function handleLeave(el) {\n      if (props.width) {\n        el.style.maxWidth = '0';\n      } else {\n        el.style.maxHeight = '0';\n      }\n\n      void el.offsetWidth;\n      const {\n        onLeave\n      } = props;\n      if (onLeave) onLeave();\n    }\n\n    function handleAfterLeave(el) {\n      if (props.width) {\n        el.style.maxWidth = '';\n      } else {\n        el.style.maxHeight = '';\n      }\n\n      const {\n        onAfterLeave\n      } = props;\n      if (onAfterLeave) onAfterLeave();\n    }\n\n    function handleEnter(el) {\n      el.style.transition = 'none';\n\n      if (props.width) {\n        const memorizedWidth = el.offsetWidth;\n        el.style.maxWidth = '0';\n        void el.offsetWidth;\n        el.style.transition = '';\n        el.style.maxWidth = `${memorizedWidth}px`;\n      } else {\n        if (props.reverse) {\n          el.style.maxHeight = `${el.offsetHeight}px`;\n          void el.offsetHeight;\n          el.style.transition = '';\n          el.style.maxHeight = '0';\n        } else {\n          const memorizedHeight = el.offsetHeight;\n          el.style.maxHeight = '0';\n          void el.offsetWidth;\n          el.style.transition = '';\n          el.style.maxHeight = `${memorizedHeight}px`;\n        }\n      }\n\n      void el.offsetWidth;\n    }\n\n    function handleAfterEnter(el) {\n      var _a;\n\n      if (props.width) {\n        el.style.maxWidth = '';\n      } else {\n        if (!props.reverse) {\n          el.style.maxHeight = '';\n        }\n      }\n\n      (_a = props.onAfterEnter) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n\n    return () => {\n      const type = props.group ? TransitionGroup : Transition;\n      return h(type, {\n        name: props.width ? 'fade-in-width-expand-transition' : 'fade-in-height-expand-transition',\n        mode: props.mode,\n        appear: props.appear,\n        onEnter: handleEnter,\n        onAfterEnter: handleAfterEnter,\n        onBeforeLeave: handleBeforeLeave,\n        onLeave: handleLeave,\n        onAfterLeave: handleAfterLeave\n      }, slots);\n    };\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/_internal/fade-in-expand-transition/src/FadeInExpandTransition.js"],"names":["h","Transition","TransitionGroup","defineComponent","name","props","appear","Boolean","group","mode","String","onLeave","Function","onAfterLeave","onAfterEnter","width","reverse","setup","slots","handleBeforeLeave","el","style","maxWidth","offsetWidth","maxHeight","offsetHeight","handleLeave","handleAfterLeave","handleEnter","transition","memorizedWidth","memorizedHeight","handleAfterEnter","_a","call","type","onEnter","onBeforeLeave"],"mappings":"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","sourcesContent":["import { h, Transition, TransitionGroup, defineComponent } from 'vue';\nexport default defineComponent({\n    name: 'FadeInExpandTransition',\n    props: {\n        appear: Boolean,\n        group: Boolean,\n        mode: String,\n        onLeave: Function,\n        onAfterLeave: Function,\n        onAfterEnter: Function,\n        width: Boolean,\n        // reverse mode is only used in tree\n        // it make it from expanded to collapsed after mounted\n        reverse: Boolean\n    },\n    setup(props, { slots }) {\n        function handleBeforeLeave(el) {\n            if (props.width) {\n                el.style.maxWidth = `${el.offsetWidth}px`;\n            }\n            else {\n                el.style.maxHeight = `${el.offsetHeight}px`;\n            }\n            void el.offsetWidth;\n        }\n        function handleLeave(el) {\n            if (props.width) {\n                el.style.maxWidth = '0';\n            }\n            else {\n                el.style.maxHeight = '0';\n            }\n            void el.offsetWidth;\n            const { onLeave } = props;\n            if (onLeave)\n                onLeave();\n        }\n        function handleAfterLeave(el) {\n            if (props.width) {\n                el.style.maxWidth = '';\n            }\n            else {\n                el.style.maxHeight = '';\n            }\n            const { onAfterLeave } = props;\n            if (onAfterLeave)\n                onAfterLeave();\n        }\n        function handleEnter(el) {\n            el.style.transition = 'none';\n            if (props.width) {\n                const memorizedWidth = el.offsetWidth;\n                el.style.maxWidth = '0';\n                void el.offsetWidth;\n                el.style.transition = '';\n                el.style.maxWidth = `${memorizedWidth}px`;\n            }\n            else {\n                if (props.reverse) {\n                    el.style.maxHeight = `${el.offsetHeight}px`;\n                    void el.offsetHeight;\n                    el.style.transition = '';\n                    el.style.maxHeight = '0';\n                }\n                else {\n                    const memorizedHeight = el.offsetHeight;\n                    el.style.maxHeight = '0';\n                    void el.offsetWidth;\n                    el.style.transition = '';\n                    el.style.maxHeight = `${memorizedHeight}px`;\n                }\n            }\n            void el.offsetWidth;\n        }\n        function handleAfterEnter(el) {\n            var _a;\n            if (props.width) {\n                el.style.maxWidth = '';\n            }\n            else {\n                if (!props.reverse) {\n                    el.style.maxHeight = '';\n                }\n            }\n            (_a = props.onAfterEnter) === null || _a === void 0 ? void 0 : _a.call(props);\n        }\n        return () => {\n            const type = props.group ? TransitionGroup : Transition;\n            return h(type, {\n                name: props.width\n                    ? 'fade-in-width-expand-transition'\n                    : 'fade-in-height-expand-transition',\n                mode: props.mode,\n                appear: props.appear,\n                onEnter: handleEnter,\n                onAfterEnter: handleAfterEnter,\n                onBeforeLeave: handleBeforeLeave,\n                onLeave: handleLeave,\n                onAfterLeave: handleAfterLeave\n            }, slots);\n        };\n    }\n});\n"]},"metadata":{},"sourceType":"module"}