{"ast":null,"code":"import { directionByIsDark } from '../utilities/direction-by-is-dark';\nimport { isDark } from '../utilities/is-dark';\n/**\n * @internal\n */\n\nexport function contrastAndDeltaSwatchSet(palette, reference, baseContrast, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\n  if (direction === null || direction === void 0) {\n    direction = directionByIsDark(reference);\n  }\n\n  const baseIndex = palette.closestIndexOf(palette.colorContrast(reference, baseContrast));\n  return {\n    rest: palette.get(baseIndex + direction * restDelta),\n    hover: palette.get(baseIndex + direction * hoverDelta),\n    active: palette.get(baseIndex + direction * activeDelta),\n    focus: palette.get(baseIndex + direction * focusDelta)\n  };\n}\n/**\n * @internal\n */\n\nexport function contrastAndDeltaSwatchSetByLuminance(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\n  if (isDark(reference)) {\n    return contrastAndDeltaSwatchSet(palette, reference, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\n  } else {\n    return contrastAndDeltaSwatchSet(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\n  }\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/color/recipes/contrast-and-delta-swatch-set.js"],"names":["directionByIsDark","isDark","contrastAndDeltaSwatchSet","palette","reference","baseContrast","restDelta","hoverDelta","activeDelta","focusDelta","direction","baseIndex","closestIndexOf","colorContrast","rest","get","hover","active","focus","contrastAndDeltaSwatchSetByLuminance","lightBaseContrast","lightRestDelta","lightHoverDelta","lightActiveDelta","lightFocusDelta","lightDirection","undefined","darkBaseContrast","darkRestDelta","darkHoverDelta","darkActiveDelta","darkFocusDelta","darkDirection"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,mCAAlC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4CC,SAA5C,EAAuDC,YAAvD,EAAqEC,SAArE,EAAgFC,UAAhF,EAA4FC,WAA5F,EAAyGC,UAAzG,EAAqHC,SAArH,EAAgI;AACnI,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAA7C,EAAgD;AAC5CA,IAAAA,SAAS,GAAGV,iBAAiB,CAACI,SAAD,CAA7B;AACH;;AACD,QAAMO,SAAS,GAAGR,OAAO,CAACS,cAAR,CAAuBT,OAAO,CAACU,aAAR,CAAsBT,SAAtB,EAAiCC,YAAjC,CAAvB,CAAlB;AACA,SAAO;AACHS,IAAAA,IAAI,EAAEX,OAAO,CAACY,GAAR,CAAYJ,SAAS,GAAGD,SAAS,GAAGJ,SAApC,CADH;AAEHU,IAAAA,KAAK,EAAEb,OAAO,CAACY,GAAR,CAAYJ,SAAS,GAAGD,SAAS,GAAGH,UAApC,CAFJ;AAGHU,IAAAA,MAAM,EAAEd,OAAO,CAACY,GAAR,CAAYJ,SAAS,GAAGD,SAAS,GAAGF,WAApC,CAHL;AAIHU,IAAAA,KAAK,EAAEf,OAAO,CAACY,GAAR,CAAYJ,SAAS,GAAGD,SAAS,GAAGD,UAApC;AAJJ,GAAP;AAMH;AACD;AACA;AACA;;AACA,OAAO,SAASU,oCAAT,CAA8ChB,OAA9C,EAAuDC,SAAvD,EAAkEgB,iBAAlE,EAAqFC,cAArF,EAAqGC,eAArG,EAAsHC,gBAAtH,EAAwIC,eAAxI,EAAyJC,cAAc,GAAGC,SAA1K,EAAqLC,gBAArL,EAAuMC,aAAvM,EAAsNC,cAAtN,EAAsOC,eAAtO,EAAuPC,cAAvP,EAAuQC,aAAa,GAAGN,SAAvR,EAAkS;AACrS,MAAIzB,MAAM,CAACG,SAAD,CAAV,EAAuB;AACnB,WAAOF,yBAAyB,CAACC,OAAD,EAAUC,SAAV,EAAqBuB,gBAArB,EAAuCC,aAAvC,EAAsDC,cAAtD,EAAsEC,eAAtE,EAAuFC,cAAvF,EAAuGC,aAAvG,CAAhC;AACH,GAFD,MAGK;AACD,WAAO9B,yBAAyB,CAACC,OAAD,EAAUC,SAAV,EAAqBgB,iBAArB,EAAwCC,cAAxC,EAAwDC,eAAxD,EAAyEC,gBAAzE,EAA2FC,eAA3F,EAA4GC,cAA5G,CAAhC;AACH;AACJ","sourcesContent":["import { directionByIsDark } from '../utilities/direction-by-is-dark';\nimport { isDark } from '../utilities/is-dark';\n/**\n * @internal\n */\nexport function contrastAndDeltaSwatchSet(palette, reference, baseContrast, restDelta, hoverDelta, activeDelta, focusDelta, direction) {\n    if (direction === null || direction === void 0) {\n        direction = directionByIsDark(reference);\n    }\n    const baseIndex = palette.closestIndexOf(palette.colorContrast(reference, baseContrast));\n    return {\n        rest: palette.get(baseIndex + direction * restDelta),\n        hover: palette.get(baseIndex + direction * hoverDelta),\n        active: palette.get(baseIndex + direction * activeDelta),\n        focus: palette.get(baseIndex + direction * focusDelta),\n    };\n}\n/**\n * @internal\n */\nexport function contrastAndDeltaSwatchSetByLuminance(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection = undefined, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection = undefined) {\n    if (isDark(reference)) {\n        return contrastAndDeltaSwatchSet(palette, reference, darkBaseContrast, darkRestDelta, darkHoverDelta, darkActiveDelta, darkFocusDelta, darkDirection);\n    }\n    else {\n        return contrastAndDeltaSwatchSet(palette, reference, lightBaseContrast, lightRestDelta, lightHoverDelta, lightActiveDelta, lightFocusDelta, lightDirection);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}