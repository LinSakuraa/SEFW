{"ast":null,"code":"/**\n * Date formatting utility\n * @public\n */\nexport class DateFormatter {\n  constructor(config) {\n    /**\n     * Formatting for the day\n     * @public\n     */\n    this.dayFormat = \"numeric\";\n    /**\n     * Formatting for the weekday labels\n     * @public\n     */\n\n    this.weekdayFormat = \"long\";\n    /**\n     * Formatting for the month\n     * @public\n     */\n\n    this.monthFormat = \"long\";\n    /**\n     * Formatting for the year\n     * @public\n     */\n\n    this.yearFormat = \"numeric\";\n    /**\n     * Date used for formatting\n     */\n\n    this.date = new Date();\n    /**\n     * Add properties on construction\n     */\n\n    if (config) {\n      for (const key in config) {\n        const value = config[key];\n\n        if (key === \"date\") {\n          this.date = this.getDateObject(value);\n        } else {\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Helper function to make sure that the DateFormatter is working with an instance of Date\n   * @param date - The date as an object, string or Date insance\n   * @returns - A Date instance\n   * @public\n   */\n\n\n  getDateObject(date) {\n    if (typeof date === \"string\") {\n      const dates = date.split(/[/-]/);\n\n      if (dates.length < 3) {\n        return new Date();\n      }\n\n      return new Date(parseInt(dates[2], 10), parseInt(dates[0], 10) - 1, parseInt(dates[1], 10));\n    } else if (\"day\" in date && \"month\" in date && \"year\" in date) {\n      const {\n        day,\n        month,\n        year\n      } = date;\n      return new Date(year, month - 1, day);\n    }\n\n    return date;\n  }\n  /**\n   *\n   * @param date - a valide date as either a Date, string, objec or a DateFormatter\n   * @param format - The formatting for the string\n   * @param locale - locale data used for formatting\n   * @returns A localized string of the date provided\n   * @public\n   */\n\n\n  getDate(date = this.date, format = {\n    weekday: this.weekdayFormat,\n    month: this.monthFormat,\n    day: this.dayFormat,\n    year: this.yearFormat\n  }, locale = this.locale) {\n    const dateObj = this.getDateObject(date);\n    const optionsWithTimeZone = Object.assign({\n      timeZone: \"utc\"\n    }, format);\n    return new Intl.DateTimeFormat(locale, optionsWithTimeZone).format(dateObj);\n  }\n  /**\n   *\n   * @param day - Day to localize\n   * @param format - The formatting for the day\n   * @param locale - The locale data used for formatting\n   * @returns - A localized number for the day\n   * @public\n   */\n\n\n  getDay(day = this.date.getDate(), format = this.dayFormat, locale = this.locale) {\n    return this.getDate({\n      month: 1,\n      day,\n      year: 2020\n    }, {\n      day: format\n    }, locale);\n  }\n  /**\n   *\n   * @param month - The month to localize\n   * @param format - The formatting for the month\n   * @param locale - The locale data used for formatting\n   * @returns - A localized name of the month\n   * @public\n   */\n\n\n  getMonth(month = this.date.getMonth() + 1, format = this.monthFormat, locale = this.locale) {\n    return this.getDate({\n      month,\n      day: 2,\n      year: 2020\n    }, {\n      month: format\n    }, locale);\n  }\n  /**\n   *\n   * @param year - The year to localize\n   * @param format - The formatting for the year\n   * @param locale - The locale data used for formatting\n   * @returns - A localized string for the year\n   * @public\n   */\n\n\n  getYear(year = this.date.getFullYear(), format = this.yearFormat, locale = this.locale) {\n    return this.getDate({\n      month: 2,\n      day: 2,\n      year\n    }, {\n      year: format\n    }, locale);\n  }\n  /**\n   *\n   * @param weekday - The number of the weekday, defaults to Sunday\n   * @param format - The formatting for the weekday label\n   * @param locale - The locale data used for formatting\n   * @returns - A formatted weekday label\n   * @public\n   */\n\n\n  getWeekday(weekday = 0, format = this.weekdayFormat, locale = this.locale) {\n    const date = `1-${weekday + 1}-2017`;\n    return this.getDate(date, {\n      weekday: format\n    }, locale);\n  }\n  /**\n   *\n   * @param format - The formatting for the weekdays\n   * @param locale - The locale data used for formatting\n   * @returns - An array of the weekday labels\n   * @public\n   */\n\n\n  getWeekdays(format = this.weekdayFormat, locale = this.locale) {\n    return Array(7).fill(null).map((_, day) => this.getWeekday(day, format, locale));\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/calendar/date-formatter.js"],"names":["DateFormatter","constructor","config","dayFormat","weekdayFormat","monthFormat","yearFormat","date","Date","key","value","getDateObject","dates","split","length","parseInt","day","month","year","getDate","format","weekday","locale","dateObj","optionsWithTimeZone","Object","assign","timeZone","Intl","DateTimeFormat","getDay","getMonth","getYear","getFullYear","getWeekday","getWeekdays","Array","fill","map","_"],"mappings":"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","sourcesContent":["/**\n * Date formatting utility\n * @public\n */\nexport class DateFormatter {\n    constructor(config) {\n        /**\n         * Formatting for the day\n         * @public\n         */\n        this.dayFormat = \"numeric\";\n        /**\n         * Formatting for the weekday labels\n         * @public\n         */\n        this.weekdayFormat = \"long\";\n        /**\n         * Formatting for the month\n         * @public\n         */\n        this.monthFormat = \"long\";\n        /**\n         * Formatting for the year\n         * @public\n         */\n        this.yearFormat = \"numeric\";\n        /**\n         * Date used for formatting\n         */\n        this.date = new Date();\n        /**\n         * Add properties on construction\n         */\n        if (config) {\n            for (const key in config) {\n                const value = config[key];\n                if (key === \"date\") {\n                    this.date = this.getDateObject(value);\n                }\n                else {\n                    this[key] = value;\n                }\n            }\n        }\n    }\n    /**\n     * Helper function to make sure that the DateFormatter is working with an instance of Date\n     * @param date - The date as an object, string or Date insance\n     * @returns - A Date instance\n     * @public\n     */\n    getDateObject(date) {\n        if (typeof date === \"string\") {\n            const dates = date.split(/[/-]/);\n            if (dates.length < 3) {\n                return new Date();\n            }\n            return new Date(parseInt(dates[2], 10), parseInt(dates[0], 10) - 1, parseInt(dates[1], 10));\n        }\n        else if (\"day\" in date && \"month\" in date && \"year\" in date) {\n            const { day, month, year } = date;\n            return new Date(year, month - 1, day);\n        }\n        return date;\n    }\n    /**\n     *\n     * @param date - a valide date as either a Date, string, objec or a DateFormatter\n     * @param format - The formatting for the string\n     * @param locale - locale data used for formatting\n     * @returns A localized string of the date provided\n     * @public\n     */\n    getDate(date = this.date, format = {\n        weekday: this.weekdayFormat,\n        month: this.monthFormat,\n        day: this.dayFormat,\n        year: this.yearFormat,\n    }, locale = this.locale) {\n        const dateObj = this.getDateObject(date);\n        const optionsWithTimeZone = Object.assign({ timeZone: \"utc\" }, format);\n        return new Intl.DateTimeFormat(locale, optionsWithTimeZone).format(dateObj);\n    }\n    /**\n     *\n     * @param day - Day to localize\n     * @param format - The formatting for the day\n     * @param locale - The locale data used for formatting\n     * @returns - A localized number for the day\n     * @public\n     */\n    getDay(day = this.date.getDate(), format = this.dayFormat, locale = this.locale) {\n        return this.getDate({ month: 1, day, year: 2020 }, { day: format }, locale);\n    }\n    /**\n     *\n     * @param month - The month to localize\n     * @param format - The formatting for the month\n     * @param locale - The locale data used for formatting\n     * @returns - A localized name of the month\n     * @public\n     */\n    getMonth(month = this.date.getMonth() + 1, format = this.monthFormat, locale = this.locale) {\n        return this.getDate({ month, day: 2, year: 2020 }, { month: format }, locale);\n    }\n    /**\n     *\n     * @param year - The year to localize\n     * @param format - The formatting for the year\n     * @param locale - The locale data used for formatting\n     * @returns - A localized string for the year\n     * @public\n     */\n    getYear(year = this.date.getFullYear(), format = this.yearFormat, locale = this.locale) {\n        return this.getDate({ month: 2, day: 2, year }, { year: format }, locale);\n    }\n    /**\n     *\n     * @param weekday - The number of the weekday, defaults to Sunday\n     * @param format - The formatting for the weekday label\n     * @param locale - The locale data used for formatting\n     * @returns - A formatted weekday label\n     * @public\n     */\n    getWeekday(weekday = 0, format = this.weekdayFormat, locale = this.locale) {\n        const date = `1-${weekday + 1}-2017`;\n        return this.getDate(date, { weekday: format }, locale);\n    }\n    /**\n     *\n     * @param format - The formatting for the weekdays\n     * @param locale - The locale data used for formatting\n     * @returns - An array of the weekday labels\n     * @public\n     */\n    getWeekdays(format = this.weekdayFormat, locale = this.locale) {\n        return Array(7)\n            .fill(null)\n            .map((_, day) => this.getWeekday(day, format, locale));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}