{"ast":null,"code":"import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for child node observation.\n * @public\n */\n\nexport class ChildrenBehavior extends NodeObservationBehavior {\n  /**\n   * Creates an instance of ChildrenBehavior.\n   * @param target - The element target to observe children on.\n   * @param options - The options to use when observing the element children.\n   */\n  constructor(target, options) {\n    super(target, options);\n    this.observer = null;\n    options.childList = true;\n  }\n  /**\n   * Begins observation of the nodes.\n   */\n\n\n  observe() {\n    if (this.observer === null) {\n      this.observer = new MutationObserver(this.handleEvent.bind(this));\n    }\n\n    this.observer.observe(this.target, this.options);\n  }\n  /**\n   * Disconnects observation of the nodes.\n   */\n\n\n  disconnect() {\n    this.observer.disconnect();\n  }\n  /**\n   * Retrieves the nodes that should be assigned to the target.\n   */\n\n\n  getNodes() {\n    if (\"subtree\" in this.options) {\n      return Array.from(this.target.querySelectorAll(this.options.selector));\n    }\n\n    return Array.from(this.target.childNodes);\n  }\n\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\n\nexport function children(propertyOrOptions) {\n  if (typeof propertyOrOptions === \"string\") {\n    propertyOrOptions = {\n      property: propertyOrOptions\n    };\n  }\n\n  return new AttachedBehaviorHTMLDirective(\"fast-children\", ChildrenBehavior, propertyOrOptions);\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-element/dist/esm/templating/children.js"],"names":["AttachedBehaviorHTMLDirective","NodeObservationBehavior","ChildrenBehavior","constructor","target","options","observer","childList","observe","MutationObserver","handleEvent","bind","disconnect","getNodes","Array","from","querySelectorAll","selector","childNodes","children","propertyOrOptions","property"],"mappings":"AAAA,SAASA,6BAAT,QAA8C,kBAA9C;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAN,SAA+BD,uBAA/B,CAAuD;AAC1D;AACJ;AACA;AACA;AACA;AACIE,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkB;AACzB,UAAMD,MAAN,EAAcC,OAAd;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACAD,IAAAA,OAAO,CAACE,SAAR,GAAoB,IAApB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKF,QAAL,KAAkB,IAAtB,EAA4B;AACxB,WAAKA,QAAL,GAAgB,IAAIG,gBAAJ,CAAqB,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAArB,CAAhB;AACH;;AACD,SAAKL,QAAL,CAAcE,OAAd,CAAsB,KAAKJ,MAA3B,EAAmC,KAAKC,OAAxC;AACH;AACD;AACJ;AACA;;;AACIO,EAAAA,UAAU,GAAG;AACT,SAAKN,QAAL,CAAcM,UAAd;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,QAAI,aAAa,KAAKR,OAAtB,EAA+B;AAC3B,aAAOS,KAAK,CAACC,IAAN,CAAW,KAAKX,MAAL,CAAYY,gBAAZ,CAA6B,KAAKX,OAAL,CAAaY,QAA1C,CAAX,CAAP;AACH;;AACD,WAAOH,KAAK,CAACC,IAAN,CAAW,KAAKX,MAAL,CAAYc,UAAvB,CAAP;AACH;;AAlCyD;AAoC9D;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,iBAAlB,EAAqC;AACxC,MAAI,OAAOA,iBAAP,KAA6B,QAAjC,EAA2C;AACvCA,IAAAA,iBAAiB,GAAG;AAChBC,MAAAA,QAAQ,EAAED;AADM,KAApB;AAGH;;AACD,SAAO,IAAIpB,6BAAJ,CAAkC,eAAlC,EAAmDE,gBAAnD,EAAqEkB,iBAArE,CAAP;AACH","sourcesContent":["import { AttachedBehaviorHTMLDirective } from \"./html-directive\";\nimport { NodeObservationBehavior } from \"./node-observation\";\n/**\n * The runtime behavior for child node observation.\n * @public\n */\nexport class ChildrenBehavior extends NodeObservationBehavior {\n    /**\n     * Creates an instance of ChildrenBehavior.\n     * @param target - The element target to observe children on.\n     * @param options - The options to use when observing the element children.\n     */\n    constructor(target, options) {\n        super(target, options);\n        this.observer = null;\n        options.childList = true;\n    }\n    /**\n     * Begins observation of the nodes.\n     */\n    observe() {\n        if (this.observer === null) {\n            this.observer = new MutationObserver(this.handleEvent.bind(this));\n        }\n        this.observer.observe(this.target, this.options);\n    }\n    /**\n     * Disconnects observation of the nodes.\n     */\n    disconnect() {\n        this.observer.disconnect();\n    }\n    /**\n     * Retrieves the nodes that should be assigned to the target.\n     */\n    getNodes() {\n        if (\"subtree\" in this.options) {\n            return Array.from(this.target.querySelectorAll(this.options.selector));\n        }\n        return Array.from(this.target.childNodes);\n    }\n}\n/**\n * A directive that observes the `childNodes` of an element and updates a property\n * whenever they change.\n * @param propertyOrOptions - The options used to configure child node observation.\n * @public\n */\nexport function children(propertyOrOptions) {\n    if (typeof propertyOrOptions === \"string\") {\n        propertyOrOptions = {\n            property: propertyOrOptions,\n        };\n    }\n    return new AttachedBehaviorHTMLDirective(\"fast-children\", ChildrenBehavior, propertyOrOptions);\n}\n"]},"metadata":{},"sourceType":"module"}