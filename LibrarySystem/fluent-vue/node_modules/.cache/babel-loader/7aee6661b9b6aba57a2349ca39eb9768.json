{"ast":null,"code":"import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/a.cssr';\nconst aProps = Object.assign({}, useTheme.props);\nexport default defineComponent({\n  name: 'A',\n  props: aProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Typography', '-a', style, typographyLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          aTextColor\n        }\n      } = themeRef.value;\n      return {\n        '--n-text-color': aTextColor,\n        '--n-bezier': cubicBezierEaseInOut\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('a', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"a\", {\n      class: [`${this.mergedClsPrefix}-a`, this.themeClass],\n      style: this.cssVars\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/typography/src/a.js"],"names":["h","defineComponent","computed","useConfig","useTheme","useThemeClass","typographyLight","style","aProps","Object","assign","props","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","cssVarsRef","common","cubicBezierEaseInOut","self","aTextColor","value","themeClassHandle","undefined","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","call","class","$slots"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,QAA7B,QAA6C,KAA7C;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAQ,CAACO,KAA3B,CAAf;AACA,eAAeV,eAAe,CAAC;AAC3BW,EAAAA,IAAI,EAAE,GADqB;AAE3BD,EAAAA,KAAK,EAAEH,MAFoB;;AAG3BK,EAAAA,KAAK,CAACF,KAAD,EAAQ;AACT,UAAM;AAAEG,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA8CZ,SAAS,CAACQ,KAAD,CAA7D;AACA,UAAMK,QAAQ,GAAGZ,QAAQ,CAAC,YAAD,EAAe,IAAf,EAAqBG,KAArB,EAA4BD,eAA5B,EAA6CK,KAA7C,EAAoDG,kBAApD,CAAzB;AACA,UAAMG,UAAU,GAAGf,QAAQ,CAAC,MAAM;AAC9B,YAAM;AAAEgB,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF,SAAV;AAAoCC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAA1C,UAA6DL,QAAQ,CAACM,KAA5E;AACA,aAAO;AACH,0BAAkBD,UADf;AAEH,sBAAcF;AAFX,OAAP;AAIH,KAN0B,CAA3B;AAOA,UAAMI,gBAAgB,GAAGR,mBAAmB,GACtCV,aAAa,CAAC,GAAD,EAAMmB,SAAN,EAAiBP,UAAjB,EAA6BN,KAA7B,CADyB,GAEtCa,SAFN;AAGA,WAAO;AACHC,MAAAA,eAAe,EAAEX,kBADd;AAEHY,MAAAA,OAAO,EAAEX,mBAAmB,GAAGS,SAAH,GAAeP,UAFxC;AAGHU,MAAAA,UAAU,EAAEJ,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACI,UAH9F;AAIHC,MAAAA,QAAQ,EAAEL,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACK;AAJ5F,KAAP;AAMH,GAtB0B;;AAuB3BC,EAAAA,MAAM,GAAG;AACL,QAAIC,EAAJ;;AACA,KAACA,EAAE,GAAG,KAAKF,QAAX,MAAyB,IAAzB,IAAiCE,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACC,IAAH,CAAQ,IAAR,CAA1D;AACA,WAAQ/B,CAAC,CAAC,GAAD,EAAM;AAAEgC,MAAAA,KAAK,EAAE,CAAE,GAAE,KAAKP,eAAgB,IAAzB,EAA8B,KAAKE,UAAnC,CAAT;AAAyDpB,MAAAA,KAAK,EAAE,KAAKmB;AAArE,KAAN,EAAsF,KAAKO,MAA3F,CAAT;AACH;;AA3B0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/a.cssr';\nconst aProps = Object.assign({}, useTheme.props);\nexport default defineComponent({\n    name: 'A',\n    props: aProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Typography', '-a', style, typographyLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { aTextColor } } = themeRef.value;\n            return {\n                '--n-text-color': aTextColor,\n                '--n-bezier': cubicBezierEaseInOut\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('a', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"a\", { class: [`${this.mergedClsPrefix}-a`, this.themeClass], style: this.cssVars }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}