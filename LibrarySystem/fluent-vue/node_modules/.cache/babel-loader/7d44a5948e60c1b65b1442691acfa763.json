{"ast":null,"code":"import { h, Transition, defineComponent, ref, computed, watchEffect, provide, inject, withDirectives, vShow, mergeProps } from 'vue';\nimport { VFocusTrap } from 'vueuc';\nimport { NScrollbar } from '../../_internal';\nimport { popoverBodyInjectionKey } from '../../popover/src/interface';\nimport { modalBodyInjectionKey } from '../../modal/src/interface';\nimport { drawerBodyInjectionKey, drawerInjectionKey } from './interface';\nexport default defineComponent({\n  name: 'NDrawerContent',\n  inheritAttrs: false,\n  props: {\n    show: {\n      type: Boolean,\n      default: undefined\n    },\n    displayDirective: {\n      type: String,\n      required: true\n    },\n    placement: {\n      type: String,\n      required: true\n    },\n    contentStyle: [Object, String],\n    nativeScrollbar: {\n      type: Boolean,\n      required: true\n    },\n    scrollbarProps: Object,\n    trapFocus: {\n      type: Boolean,\n      default: true\n    },\n    autoFocus: {\n      type: Boolean,\n      default: true\n    },\n    onAfterLeave: Function,\n    onAfterEnter: Function,\n    onEsc: Function\n  },\n\n  setup(props) {\n    const displayedRef = ref(props.show);\n    const bodyRef = ref(null); // used for detached content\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const NDrawer = inject(drawerInjectionKey);\n    watchEffect(() => {\n      if (props.show) displayedRef.value = true;\n    });\n\n    function handleAfterLeave() {\n      var _a;\n\n      displayedRef.value = false;\n      (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n\n    provide(drawerBodyInjectionKey, bodyRef);\n    provide(popoverBodyInjectionKey, null);\n    provide(modalBodyInjectionKey, null);\n    return {\n      bodyRef,\n      mergedClsPrefix: NDrawer.mergedClsPrefixRef,\n      isMounted: NDrawer.isMountedRef,\n      mergedTheme: NDrawer.mergedThemeRef,\n      displayed: displayedRef,\n      transitionName: computed(() => {\n        return {\n          right: 'slide-in-from-right-transition',\n          left: 'slide-in-from-left-transition',\n          top: 'slide-in-from-top-transition',\n          bottom: 'slide-in-from-bottom-transition'\n        }[props.placement];\n      }),\n      handleAfterLeave\n    };\n  },\n\n  render() {\n    const {\n      $slots,\n      mergedClsPrefix\n    } = this;\n    return this.displayDirective === 'show' || this.displayed || this.show ? withDirectives(\n    /* Keep the wrapper dom. Make sure the drawer has a host.\n      Nor the detached content will disappear without transition */\n    h(\"div\", {\n      role: \"none\"\n    }, h(VFocusTrap, {\n      disabled: !this.trapFocus,\n      active: this.show,\n      autoFocus: this.autoFocus,\n      onEsc: this.onEsc\n    }, {\n      default: () => h(Transition, {\n        name: this.transitionName,\n        appear: this.isMounted,\n        onAfterEnter: this.onAfterEnter,\n        onAfterLeave: this.handleAfterLeave\n      }, {\n        default: () => withDirectives(h('div', mergeProps(this.$attrs, {\n          role: 'dialog',\n          ref: 'bodyRef',\n          'aria-modal': 'true',\n          class: [`${mergedClsPrefix}-drawer`, `${mergedClsPrefix}-drawer--${this.placement}-placement`, this.nativeScrollbar && `${mergedClsPrefix}-drawer--native-scrollbar`]\n        }), [this.nativeScrollbar ? h(\"div\", {\n          class: `${mergedClsPrefix}-drawer-content-wrapper`,\n          style: this.contentStyle,\n          role: \"none\"\n        }, $slots) : h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n          contentStyle: this.contentStyle,\n          contentClass: `${mergedClsPrefix}-drawer-content-wrapper`,\n          theme: this.mergedTheme.peers.Scrollbar,\n          themeOverrides: this.mergedTheme.peerOverrides.Scrollbar\n        }), $slots)]), [[vShow, this.show]])\n      })\n    })), [[vShow, this.displayDirective === 'if' || this.displayed || this.show]]) : null;\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/drawer/src/DrawerBodyWrapper.js"],"names":["h","Transition","defineComponent","ref","computed","watchEffect","provide","inject","withDirectives","vShow","mergeProps","VFocusTrap","NScrollbar","popoverBodyInjectionKey","modalBodyInjectionKey","drawerBodyInjectionKey","drawerInjectionKey","name","inheritAttrs","props","show","type","Boolean","default","undefined","displayDirective","String","required","placement","contentStyle","Object","nativeScrollbar","scrollbarProps","trapFocus","autoFocus","onAfterLeave","Function","onAfterEnter","onEsc","setup","displayedRef","bodyRef","NDrawer","value","handleAfterLeave","_a","call","mergedClsPrefix","mergedClsPrefixRef","isMounted","isMountedRef","mergedTheme","mergedThemeRef","displayed","transitionName","right","left","top","bottom","render","$slots","role","disabled","active","appear","$attrs","class","style","assign","contentClass","theme","peers","Scrollbar","themeOverrides","peerOverrides"],"mappings":"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","sourcesContent":["import { h, Transition, defineComponent, ref, computed, watchEffect, provide, inject, withDirectives, vShow, mergeProps } from 'vue';\nimport { VFocusTrap } from 'vueuc';\nimport { NScrollbar } from '../../_internal';\nimport { popoverBodyInjectionKey } from '../../popover/src/interface';\nimport { modalBodyInjectionKey } from '../../modal/src/interface';\nimport { drawerBodyInjectionKey, drawerInjectionKey } from './interface';\nexport default defineComponent({\n    name: 'NDrawerContent',\n    inheritAttrs: false,\n    props: {\n        show: {\n            type: Boolean,\n            default: undefined\n        },\n        displayDirective: {\n            type: String,\n            required: true\n        },\n        placement: {\n            type: String,\n            required: true\n        },\n        contentStyle: [Object, String],\n        nativeScrollbar: {\n            type: Boolean,\n            required: true\n        },\n        scrollbarProps: Object,\n        trapFocus: {\n            type: Boolean,\n            default: true\n        },\n        autoFocus: {\n            type: Boolean,\n            default: true\n        },\n        onAfterLeave: Function,\n        onAfterEnter: Function,\n        onEsc: Function\n    },\n    setup(props) {\n        const displayedRef = ref(props.show);\n        const bodyRef = ref(null); // used for detached content\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NDrawer = inject(drawerInjectionKey);\n        watchEffect(() => {\n            if (props.show)\n                displayedRef.value = true;\n        });\n        function handleAfterLeave() {\n            var _a;\n            displayedRef.value = false;\n            (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        }\n        provide(drawerBodyInjectionKey, bodyRef);\n        provide(popoverBodyInjectionKey, null);\n        provide(modalBodyInjectionKey, null);\n        return {\n            bodyRef,\n            mergedClsPrefix: NDrawer.mergedClsPrefixRef,\n            isMounted: NDrawer.isMountedRef,\n            mergedTheme: NDrawer.mergedThemeRef,\n            displayed: displayedRef,\n            transitionName: computed(() => {\n                return {\n                    right: 'slide-in-from-right-transition',\n                    left: 'slide-in-from-left-transition',\n                    top: 'slide-in-from-top-transition',\n                    bottom: 'slide-in-from-bottom-transition'\n                }[props.placement];\n            }),\n            handleAfterLeave\n        };\n    },\n    render() {\n        const { $slots, mergedClsPrefix } = this;\n        return this.displayDirective === 'show' || this.displayed || this.show\n            ? withDirectives(\n            /* Keep the wrapper dom. Make sure the drawer has a host.\n              Nor the detached content will disappear without transition */\n            h(\"div\", { role: \"none\" },\n                h(VFocusTrap, { disabled: !this.trapFocus, active: this.show, autoFocus: this.autoFocus, onEsc: this.onEsc }, {\n                    default: () => (h(Transition, { name: this.transitionName, appear: this.isMounted, onAfterEnter: this.onAfterEnter, onAfterLeave: this.handleAfterLeave }, {\n                        default: () => withDirectives(h('div', mergeProps(this.$attrs, {\n                            role: 'dialog',\n                            ref: 'bodyRef',\n                            'aria-modal': 'true',\n                            class: [\n                                `${mergedClsPrefix}-drawer`,\n                                `${mergedClsPrefix}-drawer--${this.placement}-placement`,\n                                this.nativeScrollbar &&\n                                    `${mergedClsPrefix}-drawer--native-scrollbar`\n                            ]\n                        }), [\n                            this.nativeScrollbar ? (h(\"div\", { class: `${mergedClsPrefix}-drawer-content-wrapper`, style: this.contentStyle, role: \"none\" }, $slots)) : (h(NScrollbar, Object.assign({}, this.scrollbarProps, { contentStyle: this.contentStyle, contentClass: `${mergedClsPrefix}-drawer-content-wrapper`, theme: this.mergedTheme.peers.Scrollbar, themeOverrides: this.mergedTheme.peerOverrides.Scrollbar }), $slots))\n                        ]), [[vShow, this.show]])\n                    }))\n                })), [\n                [\n                    vShow,\n                    this.displayDirective === 'if' || this.displayed || this.show\n                ]\n            ])\n            : null;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}