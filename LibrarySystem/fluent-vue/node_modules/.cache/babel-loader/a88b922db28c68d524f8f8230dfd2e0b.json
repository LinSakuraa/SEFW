{"ast":null,"code":"/**\n * An abstract behavior to react to media queries. Implementations should implement\n * the `constructListener` method to perform some action based on media query changes.\n *\n * @public\n */\nexport class MatchMediaBehavior {\n  /**\n   *\n   * @param query - The media query to operate from.\n   */\n  constructor(query) {\n    /**\n     * The behavior needs to operate on element instances but elements might share a behavior instance.\n     * To ensure proper attachment / detachment per instance, we construct a listener for\n     * each bind invocation and cache the listeners by element reference.\n     */\n    this.listenerCache = new WeakMap();\n    this.query = query;\n  }\n  /**\n   * Binds the behavior to the element.\n   * @param source - The element for which the behavior is bound.\n   */\n\n\n  bind(source) {\n    const {\n      query\n    } = this;\n    const listener = this.constructListener(source); // Invoke immediately to add if the query currently matches\n\n    listener.bind(query)();\n    query.addListener(listener);\n    this.listenerCache.set(source, listener);\n  }\n  /**\n   * Unbinds the behavior from the element.\n   * @param source - The element for which the behavior is unbinding.\n   */\n\n\n  unbind(source) {\n    const listener = this.listenerCache.get(source);\n\n    if (listener) {\n      this.query.removeListener(listener);\n      this.listenerCache.delete(source);\n    }\n  }\n\n}\n/**\n * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that\n * styles are applied while the a query matches the environment and that styles are not applied if the query does\n * not match the environment.\n *\n * @public\n */\n\nexport class MatchMediaStyleSheetBehavior extends MatchMediaBehavior {\n  /**\n   * Constructs a {@link MatchMediaStyleSheetBehavior} instance.\n   * @param query - The media query to operate from.\n   * @param styles - The styles to coordinate with the query.\n   */\n  constructor(query, styles) {\n    super(query);\n    this.styles = styles;\n  }\n  /**\n   * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for\n   * a provided query.\n   * @param query - The media query to operate from.\n   *\n   * @public\n   * @example\n   *\n   * ```ts\n   * import { css } from \"@microsoft/fast-element\";\n   * import { MatchMediaStyleSheetBehavior } from \"@microsoft/fast-foundation\";\n   *\n   * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(\n   *   window.matchMedia(\"(orientation: landscape)\")\n   * );\n   * const styles = css`\n   *   :host {\n   *     width: 200px;\n   *     height: 400px;\n   *   }\n   * `\n   * .withBehaviors(landscapeBehavior(css`\n   *   :host {\n   *     width: 400px;\n   *     height: 200px;\n   *   }\n   * `))\n   * ```\n   */\n\n\n  static with(query) {\n    return styles => {\n      return new MatchMediaStyleSheetBehavior(query, styles);\n    };\n  }\n  /**\n   * Constructs a match-media listener for a provided element.\n   * @param source - the element for which to attach or detach styles.\n   * @internal\n   */\n\n\n  constructListener(source) {\n    let attached = false;\n    const styles = this.styles;\n    return function listener() {\n      const {\n        matches\n      } = this;\n\n      if (matches && !attached) {\n        source.$fastController.addStyles(styles);\n        attached = matches;\n      } else if (!matches && attached) {\n        source.$fastController.removeStyles(styles);\n        attached = matches;\n      }\n    };\n  }\n  /**\n   * Unbinds the behavior from the element.\n   * @param source - The element for which the behavior is unbinding.\n   * @internal\n   */\n\n\n  unbind(source) {\n    super.unbind(source);\n    source.$fastController.removeStyles(this.styles);\n  }\n\n}\n/**\n * This can be used to construct a behavior to apply a forced-colors only stylesheet.\n * @public\n */\n\nexport const forcedColorsStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(forced-colors)\"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.\n * @public\n */\n\nexport const darkModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(prefers-color-scheme: dark)\"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.\n * @public\n */\n\nexport const lightModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(prefers-color-scheme: light)\"));","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-foundation/dist/esm/utilities/match-media-stylesheet-behavior.js"],"names":["MatchMediaBehavior","constructor","query","listenerCache","WeakMap","bind","source","listener","constructListener","addListener","set","unbind","get","removeListener","delete","MatchMediaStyleSheetBehavior","styles","with","attached","matches","$fastController","addStyles","removeStyles","forcedColorsStylesheetBehavior","window","matchMedia","darkModeStylesheetBehavior","lightModeStylesheetBehavior"],"mappings":"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","sourcesContent":["/**\n * An abstract behavior to react to media queries. Implementations should implement\n * the `constructListener` method to perform some action based on media query changes.\n *\n * @public\n */\nexport class MatchMediaBehavior {\n    /**\n     *\n     * @param query - The media query to operate from.\n     */\n    constructor(query) {\n        /**\n         * The behavior needs to operate on element instances but elements might share a behavior instance.\n         * To ensure proper attachment / detachment per instance, we construct a listener for\n         * each bind invocation and cache the listeners by element reference.\n         */\n        this.listenerCache = new WeakMap();\n        this.query = query;\n    }\n    /**\n     * Binds the behavior to the element.\n     * @param source - The element for which the behavior is bound.\n     */\n    bind(source) {\n        const { query } = this;\n        const listener = this.constructListener(source);\n        // Invoke immediately to add if the query currently matches\n        listener.bind(query)();\n        query.addListener(listener);\n        this.listenerCache.set(source, listener);\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     */\n    unbind(source) {\n        const listener = this.listenerCache.get(source);\n        if (listener) {\n            this.query.removeListener(listener);\n            this.listenerCache.delete(source);\n        }\n    }\n}\n/**\n * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that\n * styles are applied while the a query matches the environment and that styles are not applied if the query does\n * not match the environment.\n *\n * @public\n */\nexport class MatchMediaStyleSheetBehavior extends MatchMediaBehavior {\n    /**\n     * Constructs a {@link MatchMediaStyleSheetBehavior} instance.\n     * @param query - The media query to operate from.\n     * @param styles - The styles to coordinate with the query.\n     */\n    constructor(query, styles) {\n        super(query);\n        this.styles = styles;\n    }\n    /**\n     * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for\n     * a provided query.\n     * @param query - The media query to operate from.\n     *\n     * @public\n     * @example\n     *\n     * ```ts\n     * import { css } from \"@microsoft/fast-element\";\n     * import { MatchMediaStyleSheetBehavior } from \"@microsoft/fast-foundation\";\n     *\n     * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(\n     *   window.matchMedia(\"(orientation: landscape)\")\n     * );\n     * const styles = css`\n     *   :host {\n     *     width: 200px;\n     *     height: 400px;\n     *   }\n     * `\n     * .withBehaviors(landscapeBehavior(css`\n     *   :host {\n     *     width: 400px;\n     *     height: 200px;\n     *   }\n     * `))\n     * ```\n     */\n    static with(query) {\n        return (styles) => {\n            return new MatchMediaStyleSheetBehavior(query, styles);\n        };\n    }\n    /**\n     * Constructs a match-media listener for a provided element.\n     * @param source - the element for which to attach or detach styles.\n     * @internal\n     */\n    constructListener(source) {\n        let attached = false;\n        const styles = this.styles;\n        return function listener() {\n            const { matches } = this;\n            if (matches && !attached) {\n                source.$fastController.addStyles(styles);\n                attached = matches;\n            }\n            else if (!matches && attached) {\n                source.$fastController.removeStyles(styles);\n                attached = matches;\n            }\n        };\n    }\n    /**\n     * Unbinds the behavior from the element.\n     * @param source - The element for which the behavior is unbinding.\n     * @internal\n     */\n    unbind(source) {\n        super.unbind(source);\n        source.$fastController.removeStyles(this.styles);\n    }\n}\n/**\n * This can be used to construct a behavior to apply a forced-colors only stylesheet.\n * @public\n */\nexport const forcedColorsStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(forced-colors)\"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.\n * @public\n */\nexport const darkModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(prefers-color-scheme: dark)\"));\n/**\n * This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.\n * @public\n */\nexport const lightModeStylesheetBehavior = MatchMediaStyleSheetBehavior.with(window.matchMedia(\"(prefers-color-scheme: light)\"));\n"]},"metadata":{},"sourceType":"module"}