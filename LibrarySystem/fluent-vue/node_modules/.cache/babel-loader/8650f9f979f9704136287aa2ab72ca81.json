{"ast":null,"code":"import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/list.cssr';\nconst olProps = Object.assign(Object.assign({}, useTheme.props), {\n  alignText: Boolean\n});\nexport default defineComponent({\n  name: 'Ol',\n  props: olProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Typography', '-xl', style, typographyLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          olPadding,\n          ulPadding,\n          liMargin,\n          liTextColor,\n          liLineHeight,\n          liFontSize\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-font-size': liFontSize,\n        '--n-line-height': liLineHeight,\n        '--n-text-color': liTextColor,\n        '--n-li-margin': liMargin,\n        '--n-ol-padding': olPadding,\n        '--n-ul-padding': ulPadding\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('ol', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"ol\", {\n      class: [`${mergedClsPrefix}-ol`, this.themeClass, this.alignText && `${mergedClsPrefix}-ol--align-text`],\n      style: this.cssVars\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/typography/src/ol.js"],"names":["h","defineComponent","computed","useConfig","useTheme","useThemeClass","typographyLight","style","olProps","Object","assign","props","alignText","Boolean","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","cssVarsRef","common","cubicBezierEaseInOut","self","olPadding","ulPadding","liMargin","liTextColor","liLineHeight","liFontSize","value","themeClassHandle","undefined","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","call","class","$slots"],"mappings":"AAAA,SAASA,CAAT,EAAYC,eAAZ,EAA6BC,QAA7B,QAA6C,KAA7C;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAQ,CAACO,KAA3B,CAAd,EAAiD;AAAEC,EAAAA,SAAS,EAAEC;AAAb,CAAjD,CAAhB;AACA,eAAeZ,eAAe,CAAC;AAC3Ba,EAAAA,IAAI,EAAE,IADqB;AAE3BH,EAAAA,KAAK,EAAEH,OAFoB;;AAG3BO,EAAAA,KAAK,CAACJ,KAAD,EAAQ;AACT,UAAM;AAAEK,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAA8Cd,SAAS,CAACQ,KAAD,CAA7D;AACA,UAAMO,QAAQ,GAAGd,QAAQ,CAAC,YAAD,EAAe,KAAf,EAAsBG,KAAtB,EAA6BD,eAA7B,EAA8CK,KAA9C,EAAqDK,kBAArD,CAAzB;AACA,UAAMG,UAAU,GAAGjB,QAAQ,CAAC,MAAM;AAC9B,YAAM;AAAEkB,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF,SAAV;AAAoCC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAF;AAAaC,UAAAA,SAAb;AAAwBC,UAAAA,QAAxB;AAAkCC,UAAAA,WAAlC;AAA+CC,UAAAA,YAA/C;AAA6DC,UAAAA;AAA7D;AAA1C,UAAwHV,QAAQ,CAACW,KAAvI;AACA,aAAO;AACH,sBAAcR,oBADX;AAEH,yBAAiBO,UAFd;AAGH,2BAAmBD,YAHhB;AAIH,0BAAkBD,WAJf;AAKH,yBAAiBD,QALd;AAMH,0BAAkBF,SANf;AAOH,0BAAkBC;AAPf,OAAP;AASH,KAX0B,CAA3B;AAYA,UAAMM,gBAAgB,GAAGb,mBAAmB,GACtCZ,aAAa,CAAC,IAAD,EAAO0B,SAAP,EAAkBZ,UAAlB,EAA8BR,KAA9B,CADyB,GAEtCoB,SAFN;AAGA,WAAO;AACHC,MAAAA,eAAe,EAAEhB,kBADd;AAEHiB,MAAAA,OAAO,EAAEhB,mBAAmB,GAAGc,SAAH,GAAeZ,UAFxC;AAGHe,MAAAA,UAAU,EAAEJ,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACI,UAH9F;AAIHC,MAAAA,QAAQ,EAAEL,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACK;AAJ5F,KAAP;AAMH,GA3B0B;;AA4B3BC,EAAAA,MAAM,GAAG;AACL,QAAIC,EAAJ;;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAsB,IAA5B;AACA,KAACK,EAAE,GAAG,KAAKF,QAAX,MAAyB,IAAzB,IAAiCE,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACC,IAAH,CAAQ,IAAR,CAA1D;AACA,WAAQtC,CAAC,CAAC,IAAD,EAAO;AAAEuC,MAAAA,KAAK,EAAE,CAChB,GAAEP,eAAgB,KADF,EAEjB,KAAKE,UAFY,EAGjB,KAAKtB,SAAL,IAAmB,GAAEoB,eAAgB,iBAHpB,CAAT;AAITzB,MAAAA,KAAK,EAAE,KAAK0B;AAJH,KAAP,EAIqB,KAAKO,MAJ1B,CAAT;AAKH;;AArC0B,CAAD,CAA9B","sourcesContent":["import { h, defineComponent, computed } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { typographyLight } from '../styles';\nimport style from './styles/list.cssr';\nconst olProps = Object.assign(Object.assign({}, useTheme.props), { alignText: Boolean });\nexport default defineComponent({\n    name: 'Ol',\n    props: olProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Typography', '-xl', style, typographyLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { olPadding, ulPadding, liMargin, liTextColor, liLineHeight, liFontSize } } = themeRef.value;\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-font-size': liFontSize,\n                '--n-line-height': liLineHeight,\n                '--n-text-color': liTextColor,\n                '--n-li-margin': liMargin,\n                '--n-ol-padding': olPadding,\n                '--n-ul-padding': ulPadding\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('ol', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"ol\", { class: [\n                `${mergedClsPrefix}-ol`,\n                this.themeClass,\n                this.alignText && `${mergedClsPrefix}-ol--align-text`\n            ], style: this.cssVars }, this.$slots));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}