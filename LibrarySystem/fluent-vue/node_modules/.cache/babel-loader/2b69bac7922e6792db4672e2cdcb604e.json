{"ast":null,"code":"import { computed, h, defineComponent, mergeProps, watchEffect } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { warnOnce } from '../../_utils';\nimport style from './styles/index.cssr';\nimport { collapseTransitionLight } from '../styles';\nimport { NFadeInExpandTransition } from '../../_internal';\nconst collapseProps = Object.assign(Object.assign({}, useTheme.props), {\n  show: {\n    type: Boolean,\n    default: true\n  },\n  appear: Boolean,\n  // The collapsed is implemented with mistake, collapsed=true would make it show\n  // However there's no possibility to change so I just let it deprecated and use\n  // `show` prop instead.\n\n  /** @deprecated */\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  }\n});\nexport default defineComponent({\n  name: 'CollapseTransition',\n  props: collapseProps,\n  inheritAttrs: false,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.collapsed !== undefined) {\n          warnOnce('collapse-transition', '`collapsed` is deprecated, please use `show` instead');\n        }\n      });\n    }\n\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const mergedThemeRef = useTheme('CollapseTransition', '-collapse-transition', style, collapseTransitionLight, props, mergedClsPrefixRef);\n    const mergedShowRef = computed(() => {\n      if (props.collapsed !== undefined) {\n        // No mistake, it's implemented with error at first, just keep it here\n        return props.collapsed;\n      }\n\n      return props.show;\n    });\n    const cssVarsRef = computed(() => {\n      const {\n        self: {\n          bezier\n        }\n      } = mergedThemeRef.value;\n      return {\n        '--n-bezier': bezier\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('collapse-transition', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedShow: mergedShowRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    return h(NFadeInExpandTransition, {\n      appear: this.appear\n    }, {\n      default: () => {\n        var _a;\n\n        if (!this.mergedShow) return;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return h('div', // Don't use jsx since it would cause useless spread in each rendering\n        mergeProps({\n          class: [`${this.mergedClsPrefix}-collapse-transition`, this.themeClass],\n          style: this.cssVars\n        }, this.$attrs), this.$slots);\n      }\n    });\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/collapse-transition/src/CollapseTransition.js"],"names":["computed","h","defineComponent","mergeProps","watchEffect","useConfig","useTheme","useThemeClass","warnOnce","style","collapseTransitionLight","NFadeInExpandTransition","collapseProps","Object","assign","props","show","type","Boolean","default","appear","collapsed","undefined","name","inheritAttrs","setup","process","env","NODE_ENV","mergedClsPrefixRef","inlineThemeDisabled","mergedThemeRef","mergedShowRef","cssVarsRef","self","bezier","value","themeClassHandle","mergedShow","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","call","class","$attrs","$slots"],"mappings":"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","sourcesContent":["import { computed, h, defineComponent, mergeProps, watchEffect } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { warnOnce } from '../../_utils';\nimport style from './styles/index.cssr';\nimport { collapseTransitionLight } from '../styles';\nimport { NFadeInExpandTransition } from '../../_internal';\nconst collapseProps = Object.assign(Object.assign({}, useTheme.props), { show: {\n        type: Boolean,\n        default: true\n    }, appear: Boolean, \n    // The collapsed is implemented with mistake, collapsed=true would make it show\n    // However there's no possibility to change so I just let it deprecated and use\n    // `show` prop instead.\n    /** @deprecated */\n    collapsed: {\n        type: Boolean,\n        default: undefined\n    } });\nexport default defineComponent({\n    name: 'CollapseTransition',\n    props: collapseProps,\n    inheritAttrs: false,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.collapsed !== undefined) {\n                    warnOnce('collapse-transition', '`collapsed` is deprecated, please use `show` instead');\n                }\n            });\n        }\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const mergedThemeRef = useTheme('CollapseTransition', '-collapse-transition', style, collapseTransitionLight, props, mergedClsPrefixRef);\n        const mergedShowRef = computed(() => {\n            if (props.collapsed !== undefined) {\n                // No mistake, it's implemented with error at first, just keep it here\n                return props.collapsed;\n            }\n            return props.show;\n        });\n        const cssVarsRef = computed(() => {\n            const { self: { bezier } } = mergedThemeRef.value;\n            return {\n                '--n-bezier': bezier\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('collapse-transition', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedShow: mergedShowRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        return (h(NFadeInExpandTransition, { appear: this.appear }, {\n            default: () => {\n                var _a;\n                if (!this.mergedShow)\n                    return;\n                (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n                return h('div', // Don't use jsx since it would cause useless spread in each rendering\n                mergeProps({\n                    class: [\n                        `${this.mergedClsPrefix}-collapse-transition`,\n                        this.themeClass\n                    ],\n                    style: this.cssVars\n                }, this.$attrs), this.$slots);\n            }\n        }));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}