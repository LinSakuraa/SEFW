{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { composedParent, Card as FoundationCard, cardTemplate as template } from '@microsoft/fast-foundation';\nimport { attr, Observable } from '@microsoft/fast-element';\nimport { parseColorHexRGB } from '@microsoft/fast-colors';\nimport { fillColor, neutralFillLayerRecipe, neutralPalette } from '../design-tokens';\nimport { SwatchRGB } from '../color/swatch';\nimport { PaletteRGB } from '../color/palette';\nimport { cardStyles as styles } from './card.styles';\n/**\n * @public\n */\n\nexport class Card extends FoundationCard {\n  cardFillColorChanged(prev, next) {\n    if (next) {\n      const parsedColor = parseColorHexRGB(next);\n\n      if (parsedColor !== null) {\n        this.neutralPaletteSource = next;\n        fillColor.setValueFor(this, SwatchRGB.create(parsedColor.r, parsedColor.g, parsedColor.b));\n      }\n    }\n  }\n\n  neutralPaletteSourceChanged(prev, next) {\n    if (next) {\n      const color = parseColorHexRGB(next);\n      const swatch = SwatchRGB.create(color.r, color.g, color.b);\n      neutralPalette.setValueFor(this, PaletteRGB.create(swatch));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  handleChange(source, propertyName) {\n    if (!this.cardFillColor) {\n      fillColor.setValueFor(this, target => neutralFillLayerRecipe.getValueFor(target).evaluate(target, fillColor.getValueFor(source)).rest);\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const parent = composedParent(this);\n\n    if (parent) {\n      const parentNotifier = Observable.getNotifier(parent);\n      parentNotifier.subscribe(this, 'fillColor');\n      parentNotifier.subscribe(this, 'neutralPalette');\n      this.handleChange(parent, 'fillColor');\n    }\n  }\n\n}\n\n__decorate([attr({\n  attribute: 'card-fill-color',\n  mode: 'fromView'\n})], Card.prototype, \"cardFillColor\", void 0);\n\n__decorate([attr({\n  attribute: 'neutral-palette-source',\n  mode: 'fromView'\n})], Card.prototype, \"neutralPaletteSource\", void 0);\n/**\n * The Fluent Card Element. Implements {@link @microsoft/fast-foundation#Card},\n * {@link @microsoft/fast-foundation#CardTemplate}\n *\n *\n * @public\n * @remarks\n * HTML Element: \\<fluent-card\\>\n */\n\n\nexport const fluentCard = Card.compose({\n  baseName: 'card',\n  baseClass: FoundationCard,\n  template,\n  styles\n});\n/**\n * Styles for Card\n * @public\n */\n\nexport const cardStyles = styles;","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@fluentui/web-components/dist/esm/card/index.js"],"names":["__decorate","composedParent","Card","FoundationCard","cardTemplate","template","attr","Observable","parseColorHexRGB","fillColor","neutralFillLayerRecipe","neutralPalette","SwatchRGB","PaletteRGB","cardStyles","styles","cardFillColorChanged","prev","next","parsedColor","neutralPaletteSource","setValueFor","create","r","g","b","neutralPaletteSourceChanged","color","swatch","handleChange","source","propertyName","cardFillColor","target","getValueFor","evaluate","rest","connectedCallback","parent","parentNotifier","getNotifier","subscribe","attribute","mode","prototype","fluentCard","compose","baseName","baseClass"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { composedParent, Card as FoundationCard, cardTemplate as template } from '@microsoft/fast-foundation';\nimport { attr, Observable } from '@microsoft/fast-element';\nimport { parseColorHexRGB } from '@microsoft/fast-colors';\nimport { fillColor, neutralFillLayerRecipe, neutralPalette } from '../design-tokens';\nimport { SwatchRGB } from '../color/swatch';\nimport { PaletteRGB } from '../color/palette';\nimport { cardStyles as styles } from './card.styles';\n/**\n * @public\n */\nexport class Card extends FoundationCard {\n    cardFillColorChanged(prev, next) {\n        if (next) {\n            const parsedColor = parseColorHexRGB(next);\n            if (parsedColor !== null) {\n                this.neutralPaletteSource = next;\n                fillColor.setValueFor(this, SwatchRGB.create(parsedColor.r, parsedColor.g, parsedColor.b));\n            }\n        }\n    }\n    neutralPaletteSourceChanged(prev, next) {\n        if (next) {\n            const color = parseColorHexRGB(next);\n            const swatch = SwatchRGB.create(color.r, color.g, color.b);\n            neutralPalette.setValueFor(this, PaletteRGB.create(swatch));\n        }\n    }\n    /**\n     * @internal\n     */\n    handleChange(source, propertyName) {\n        if (!this.cardFillColor) {\n            fillColor.setValueFor(this, (target) => neutralFillLayerRecipe.getValueFor(target).evaluate(target, fillColor.getValueFor(source)).rest);\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        const parent = composedParent(this);\n        if (parent) {\n            const parentNotifier = Observable.getNotifier(parent);\n            parentNotifier.subscribe(this, 'fillColor');\n            parentNotifier.subscribe(this, 'neutralPalette');\n            this.handleChange(parent, 'fillColor');\n        }\n    }\n}\n__decorate([\n    attr({\n        attribute: 'card-fill-color',\n        mode: 'fromView',\n    })\n], Card.prototype, \"cardFillColor\", void 0);\n__decorate([\n    attr({\n        attribute: 'neutral-palette-source',\n        mode: 'fromView',\n    })\n], Card.prototype, \"neutralPaletteSource\", void 0);\n/**\n * The Fluent Card Element. Implements {@link @microsoft/fast-foundation#Card},\n * {@link @microsoft/fast-foundation#CardTemplate}\n *\n *\n * @public\n * @remarks\n * HTML Element: \\<fluent-card\\>\n */\nexport const fluentCard = Card.compose({\n    baseName: 'card',\n    baseClass: FoundationCard,\n    template,\n    styles,\n});\n/**\n * Styles for Card\n * @public\n */\nexport const cardStyles = styles;\n"]},"metadata":{},"sourceType":"module"}