{"ast":null,"code":"import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n *\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELCH color space}\n *\n * This is a cylindrical representation of the CIELAB space useful for saturation operations\n * This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\n\nexport class ColorLCH {\n  constructor(l, c, h) {\n    this.l = l;\n    this.c = c;\n    this.h = h;\n  }\n  /**\n   * Construct a {@link ColorLCH} from a config object.\n   * @param data - the config object\n   */\n\n\n  static fromObject(data) {\n    if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {\n      return new ColorLCH(data.l, data.c, data.h);\n    }\n\n    return null;\n  }\n  /**\n   * Determines if one color is equal to another.\n   * @param rhs - the color to compare\n   */\n\n\n  equalValue(rhs) {\n    return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;\n  }\n  /**\n   * Returns a new {@link ColorLCH} rounded to the provided precision\n   * @param precision - the precision to round to\n   */\n\n\n  roundToPrecision(precision) {\n    return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));\n  }\n  /**\n   * Converts the {@link ColorLCH} to a config object.\n   */\n\n\n  toObject() {\n    return {\n      l: this.l,\n      c: this.c,\n      h: this.h\n    };\n  }\n\n}","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/@microsoft/fast-colors/dist/color-lch.js"],"names":["roundToPrecisionSmall","ColorLCH","constructor","l","c","h","fromObject","data","isNaN","equalValue","rhs","roundToPrecision","precision","toObject"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,kBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACjB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACH;AACD;AACJ;AACA;AACA;;;AACqB,SAAVC,UAAU,CAACC,IAAD,EAAO;AACpB,QAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACJ,CAAN,CAAd,IAA0B,CAACK,KAAK,CAACD,IAAI,CAACH,CAAN,CAAhC,IAA4C,CAACI,KAAK,CAACD,IAAI,CAACF,CAAN,CAAtD,EAAgE;AAC5D,aAAO,IAAIJ,QAAJ,CAAaM,IAAI,CAACJ,CAAlB,EAAqBI,IAAI,CAACH,CAA1B,EAA6BG,IAAI,CAACF,CAAlC,CAAP;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,WAAO,KAAKP,CAAL,KAAWO,GAAG,CAACP,CAAf,IAAoB,KAAKC,CAAL,KAAWM,GAAG,CAACN,CAAnC,IAAwC,KAAKC,CAAL,KAAWK,GAAG,CAACL,CAA9D;AACH;AACD;AACJ;AACA;AACA;;;AACIM,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,WAAO,IAAIX,QAAJ,CAAaD,qBAAqB,CAAC,KAAKG,CAAN,EAASS,SAAT,CAAlC,EAAuDZ,qBAAqB,CAAC,KAAKI,CAAN,EAASQ,SAAT,CAA5E,EAAiGZ,qBAAqB,CAAC,KAAKK,CAAN,EAASO,SAAT,CAAtH,CAAP;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,WAAO;AAAEV,MAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,MAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,MAAAA,CAAC,EAAE,KAAKA;AAAhC,KAAP;AACH;;AAnCiB","sourcesContent":["import { roundToPrecisionSmall } from \"./math-utilities\";\n/**\n *\n * {@link https://en.wikipedia.org/wiki/CIELAB_color_space | CIELCH color space}\n *\n * This is a cylindrical representation of the CIELAB space useful for saturation operations\n * This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n * This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n * {@link https://en.wikipedia.org/wiki/Illuminant_D65}\n * These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n *\n * @public\n */\nexport class ColorLCH {\n    constructor(l, c, h) {\n        this.l = l;\n        this.c = c;\n        this.h = h;\n    }\n    /**\n     * Construct a {@link ColorLCH} from a config object.\n     * @param data - the config object\n     */\n    static fromObject(data) {\n        if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {\n            return new ColorLCH(data.l, data.c, data.h);\n        }\n        return null;\n    }\n    /**\n     * Determines if one color is equal to another.\n     * @param rhs - the color to compare\n     */\n    equalValue(rhs) {\n        return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;\n    }\n    /**\n     * Returns a new {@link ColorLCH} rounded to the provided precision\n     * @param precision - the precision to round to\n     */\n    roundToPrecision(precision) {\n        return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));\n    }\n    /**\n     * Converts the {@link ColorLCH} to a config object.\n     */\n    toObject() {\n        return { l: this.l, c: this.c, h: this.h };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}