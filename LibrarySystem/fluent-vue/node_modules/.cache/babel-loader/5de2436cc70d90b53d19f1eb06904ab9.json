{"ast":null,"code":"import { defineComponent, computed, h } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { resolveWrappedSlot } from '../../_utils';\nimport { statisticLight } from '../styles';\nimport style from './styles/index.cssr';\nconst statisticProps = Object.assign(Object.assign({}, useTheme.props), {\n  tabularNums: Boolean,\n  label: String,\n  value: [String, Number]\n});\nexport default defineComponent({\n  name: 'Statistic',\n  props: statisticProps,\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Statistic', '-statistic', style, statisticLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        self: {\n          labelFontWeight,\n          valueFontWeight,\n          valuePrefixTextColor,\n          labelTextColor,\n          valueSuffixTextColor,\n          valueTextColor,\n          labelFontSize\n        },\n        common: {\n          cubicBezierEaseInOut\n        }\n      } = themeRef.value;\n      return {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-label-font-size': labelFontSize,\n        '--n-label-font-weight': labelFontWeight,\n        '--n-label-text-color': labelTextColor,\n        '--n-value-font-weight': valueFontWeight,\n        '--n-value-prefix-text-color': valuePrefixTextColor,\n        '--n-value-suffix-text-color': valueSuffixTextColor,\n        '--n-value-text-color': valueTextColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('statistic', undefined, cssVarsRef, props) : undefined;\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix,\n      $slots: {\n        default: defaultSlot,\n        label: labelSlot,\n        prefix: prefixSlot,\n        suffix: suffixSlot\n      }\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-statistic`, this.themeClass],\n      style: this.cssVars\n    }, resolveWrappedSlot(labelSlot, children => h(\"div\", {\n      class: `${mergedClsPrefix}-statistic__label`\n    }, this.label || children)), h(\"div\", {\n      class: `${mergedClsPrefix}-statistic-value`,\n      style: {\n        fontVariantNumeric: this.tabularNums ? 'tabular-nums' : ''\n      }\n    }, resolveWrappedSlot(prefixSlot, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-statistic-value__prefix`\n    }, children)), this.value !== undefined ? h(\"span\", {\n      class: `${mergedClsPrefix}-statistic-value__content`\n    }, this.value) : resolveWrappedSlot(defaultSlot, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-statistic-value__content`\n    }, children)), resolveWrappedSlot(suffixSlot, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-statistic-value__suffix`\n    }, children))));\n  }\n\n});","map":{"version":3,"sources":["G:/VUE_FDS/fluent-vue/node_modules/naive-ui/es/statistic/src/Statistic.js"],"names":["defineComponent","computed","h","useConfig","useTheme","useThemeClass","resolveWrappedSlot","statisticLight","style","statisticProps","Object","assign","props","tabularNums","Boolean","label","String","value","Number","name","setup","mergedClsPrefixRef","inlineThemeDisabled","themeRef","cssVarsRef","self","labelFontWeight","valueFontWeight","valuePrefixTextColor","labelTextColor","valueSuffixTextColor","valueTextColor","labelFontSize","common","cubicBezierEaseInOut","themeClassHandle","undefined","mergedClsPrefix","cssVars","themeClass","onRender","render","_a","$slots","default","defaultSlot","labelSlot","prefix","prefixSlot","suffix","suffixSlot","call","class","children","fontVariantNumeric"],"mappings":"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","sourcesContent":["import { defineComponent, computed, h } from 'vue';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { resolveWrappedSlot } from '../../_utils';\nimport { statisticLight } from '../styles';\nimport style from './styles/index.cssr';\nconst statisticProps = Object.assign(Object.assign({}, useTheme.props), { tabularNums: Boolean, label: String, value: [String, Number] });\nexport default defineComponent({\n    name: 'Statistic',\n    props: statisticProps,\n    setup(props) {\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Statistic', '-statistic', style, statisticLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { self: { labelFontWeight, valueFontWeight, valuePrefixTextColor, labelTextColor, valueSuffixTextColor, valueTextColor, labelFontSize }, common: { cubicBezierEaseInOut } } = themeRef.value;\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-label-font-size': labelFontSize,\n                '--n-label-font-weight': labelFontWeight,\n                '--n-label-text-color': labelTextColor,\n                '--n-value-font-weight': valueFontWeight,\n                '--n-value-prefix-text-color': valuePrefixTextColor,\n                '--n-value-suffix-text-color': valueSuffixTextColor,\n                '--n-value-text-color': valueTextColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('statistic', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, $slots: { default: defaultSlot, label: labelSlot, prefix: prefixSlot, suffix: suffixSlot } } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"div\", { class: [`${mergedClsPrefix}-statistic`, this.themeClass], style: this.cssVars },\n            resolveWrappedSlot(labelSlot, (children) => (h(\"div\", { class: `${mergedClsPrefix}-statistic__label` }, this.label || children))),\n            h(\"div\", { class: `${mergedClsPrefix}-statistic-value`, style: {\n                    fontVariantNumeric: this.tabularNums ? 'tabular-nums' : ''\n                } },\n                resolveWrappedSlot(prefixSlot, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-statistic-value__prefix` }, children))),\n                this.value !== undefined ? (h(\"span\", { class: `${mergedClsPrefix}-statistic-value__content` }, this.value)) : (resolveWrappedSlot(defaultSlot, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-statistic-value__content` }, children)))),\n                resolveWrappedSlot(suffixSlot, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-statistic-value__suffix` }, children))))));\n    }\n});\n"]},"metadata":{},"sourceType":"module"}